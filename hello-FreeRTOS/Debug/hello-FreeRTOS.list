
hello-FreeRTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003be4  08000110  08000110  00001110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000009c  08003cf4  08003cf4  00004cf4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003d90  08003d90  00005010  2**0
                  CONTENTS
  4 .ARM          00000000  08003d90  08003d90  00005010  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003d90  08003d90  00005010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003d90  08003d90  00004d90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003d94  08003d94  00004d94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  20000000  08003d98  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001978  20000010  08003da8  00005010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001988  08003da8  00005988  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00005010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c789  00000000  00000000  00005039  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000025f1  00000000  00000000  000117c2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c10  00000000  00000000  00013db8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000090a  00000000  00000000  000149c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017e58  00000000  00000000  000152d2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d9d8  00000000  00000000  0002d12a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00089696  00000000  00000000  0003ab02  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c4198  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002fcc  00000000  00000000  000c41dc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000057  00000000  00000000  000c71a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000010 	.word	0x20000010
 800012c:	00000000 	.word	0x00000000
 8000130:	08003cdc 	.word	0x08003cdc

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000014 	.word	0x20000014
 800014c:	08003cdc 	.word	0x08003cdc

08000150 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000150:	b580      	push	{r7, lr}
 8000152:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000154:	4a08      	ldr	r2, [pc, #32]	@ (8000178 <MX_FREERTOS_Init+0x28>)
 8000156:	2100      	movs	r1, #0
 8000158:	4808      	ldr	r0, [pc, #32]	@ (800017c <MX_FREERTOS_Init+0x2c>)
 800015a:	f001 f8bd 	bl	80012d8 <osThreadNew>
 800015e:	4603      	mov	r3, r0
 8000160:	4a07      	ldr	r2, [pc, #28]	@ (8000180 <MX_FREERTOS_Init+0x30>)
 8000162:	6013      	str	r3, [r2, #0]

  /* creation of miscTask */
  miscTaskHandle = osThreadNew(MiscTask, NULL, &miscTask_attributes);
 8000164:	4a07      	ldr	r2, [pc, #28]	@ (8000184 <MX_FREERTOS_Init+0x34>)
 8000166:	2100      	movs	r1, #0
 8000168:	4807      	ldr	r0, [pc, #28]	@ (8000188 <MX_FREERTOS_Init+0x38>)
 800016a:	f001 f8b5 	bl	80012d8 <osThreadNew>
 800016e:	4603      	mov	r3, r0
 8000170:	4a06      	ldr	r2, [pc, #24]	@ (800018c <MX_FREERTOS_Init+0x3c>)
 8000172:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8000174:	bf00      	nop
 8000176:	bd80      	pop	{r7, pc}
 8000178:	08003d24 	.word	0x08003d24
 800017c:	08000191 	.word	0x08000191
 8000180:	2000002c 	.word	0x2000002c
 8000184:	08003d48 	.word	0x08003d48
 8000188:	080001a1 	.word	0x080001a1
 800018c:	20000030 	.word	0x20000030

08000190 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000190:	b580      	push	{r7, lr}
 8000192:	b082      	sub	sp, #8
 8000194:	af00      	add	r7, sp, #0
 8000196:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000198:	2001      	movs	r0, #1
 800019a:	f001 f92f 	bl	80013fc <osDelay>
 800019e:	e7fb      	b.n	8000198 <StartDefaultTask+0x8>

080001a0 <MiscTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_MiscTask */
void MiscTask(void *argument)
{
 80001a0:	b580      	push	{r7, lr}
 80001a2:	b082      	sub	sp, #8
 80001a4:	af00      	add	r7, sp, #0
 80001a6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN MiscTask */
  /* Infinite loop */
  for(;;)
  {
	  HAL_GPIO_TogglePin(led2_GPIO_Port, led2_Pin);
 80001a8:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <MiscTask+0x20>)
 80001ae:	f000 fc1f 	bl	80009f0 <HAL_GPIO_TogglePin>
	  osDelay(pdMS_TO_TICKS(1000));
 80001b2:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80001b6:	f001 f921 	bl	80013fc <osDelay>
	  HAL_GPIO_TogglePin(led2_GPIO_Port, led2_Pin);
 80001ba:	bf00      	nop
 80001bc:	e7f4      	b.n	80001a8 <MiscTask+0x8>
 80001be:	bf00      	nop
 80001c0:	40011000 	.word	0x40011000

080001c4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80001c4:	b580      	push	{r7, lr}
 80001c6:	b088      	sub	sp, #32
 80001c8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80001ca:	f107 0310 	add.w	r3, r7, #16
 80001ce:	2200      	movs	r2, #0
 80001d0:	601a      	str	r2, [r3, #0]
 80001d2:	605a      	str	r2, [r3, #4]
 80001d4:	609a      	str	r2, [r3, #8]
 80001d6:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80001d8:	4b1e      	ldr	r3, [pc, #120]	@ (8000254 <MX_GPIO_Init+0x90>)
 80001da:	699b      	ldr	r3, [r3, #24]
 80001dc:	4a1d      	ldr	r2, [pc, #116]	@ (8000254 <MX_GPIO_Init+0x90>)
 80001de:	f043 0310 	orr.w	r3, r3, #16
 80001e2:	6193      	str	r3, [r2, #24]
 80001e4:	4b1b      	ldr	r3, [pc, #108]	@ (8000254 <MX_GPIO_Init+0x90>)
 80001e6:	699b      	ldr	r3, [r3, #24]
 80001e8:	f003 0310 	and.w	r3, r3, #16
 80001ec:	60fb      	str	r3, [r7, #12]
 80001ee:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80001f0:	4b18      	ldr	r3, [pc, #96]	@ (8000254 <MX_GPIO_Init+0x90>)
 80001f2:	699b      	ldr	r3, [r3, #24]
 80001f4:	4a17      	ldr	r2, [pc, #92]	@ (8000254 <MX_GPIO_Init+0x90>)
 80001f6:	f043 0320 	orr.w	r3, r3, #32
 80001fa:	6193      	str	r3, [r2, #24]
 80001fc:	4b15      	ldr	r3, [pc, #84]	@ (8000254 <MX_GPIO_Init+0x90>)
 80001fe:	699b      	ldr	r3, [r3, #24]
 8000200:	f003 0320 	and.w	r3, r3, #32
 8000204:	60bb      	str	r3, [r7, #8]
 8000206:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000208:	4b12      	ldr	r3, [pc, #72]	@ (8000254 <MX_GPIO_Init+0x90>)
 800020a:	699b      	ldr	r3, [r3, #24]
 800020c:	4a11      	ldr	r2, [pc, #68]	@ (8000254 <MX_GPIO_Init+0x90>)
 800020e:	f043 0304 	orr.w	r3, r3, #4
 8000212:	6193      	str	r3, [r2, #24]
 8000214:	4b0f      	ldr	r3, [pc, #60]	@ (8000254 <MX_GPIO_Init+0x90>)
 8000216:	699b      	ldr	r3, [r3, #24]
 8000218:	f003 0304 	and.w	r3, r3, #4
 800021c:	607b      	str	r3, [r7, #4]
 800021e:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(led2_GPIO_Port, led2_Pin, GPIO_PIN_SET);
 8000220:	2201      	movs	r2, #1
 8000222:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000226:	480c      	ldr	r0, [pc, #48]	@ (8000258 <MX_GPIO_Init+0x94>)
 8000228:	f000 fbca 	bl	80009c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : led2_Pin */
  GPIO_InitStruct.Pin = led2_Pin;
 800022c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000230:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000232:	2301      	movs	r3, #1
 8000234:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000236:	2300      	movs	r3, #0
 8000238:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800023a:	2303      	movs	r3, #3
 800023c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(led2_GPIO_Port, &GPIO_InitStruct);
 800023e:	f107 0310 	add.w	r3, r7, #16
 8000242:	4619      	mov	r1, r3
 8000244:	4804      	ldr	r0, [pc, #16]	@ (8000258 <MX_GPIO_Init+0x94>)
 8000246:	f000 fa37 	bl	80006b8 <HAL_GPIO_Init>

}
 800024a:	bf00      	nop
 800024c:	3720      	adds	r7, #32
 800024e:	46bd      	mov	sp, r7
 8000250:	bd80      	pop	{r7, pc}
 8000252:	bf00      	nop
 8000254:	40021000 	.word	0x40021000
 8000258:	40011000 	.word	0x40011000

0800025c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800025c:	b580      	push	{r7, lr}
 800025e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000260:	f000 f8e4 	bl	800042c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000264:	f000 f80a 	bl	800027c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000268:	f7ff ffac 	bl	80001c4 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800026c:	f000 ffec 	bl	8001248 <osKernelInitialize>

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 8000270:	f7ff ff6e 	bl	8000150 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8000274:	f001 f80a 	bl	800128c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000278:	bf00      	nop
 800027a:	e7fd      	b.n	8000278 <main+0x1c>

0800027c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800027c:	b580      	push	{r7, lr}
 800027e:	b090      	sub	sp, #64	@ 0x40
 8000280:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000282:	f107 0318 	add.w	r3, r7, #24
 8000286:	2228      	movs	r2, #40	@ 0x28
 8000288:	2100      	movs	r1, #0
 800028a:	4618      	mov	r0, r3
 800028c:	f003 fcec 	bl	8003c68 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000290:	1d3b      	adds	r3, r7, #4
 8000292:	2200      	movs	r2, #0
 8000294:	601a      	str	r2, [r3, #0]
 8000296:	605a      	str	r2, [r3, #4]
 8000298:	609a      	str	r2, [r3, #8]
 800029a:	60da      	str	r2, [r3, #12]
 800029c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800029e:	2301      	movs	r3, #1
 80002a0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80002a2:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80002a6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80002a8:	2300      	movs	r3, #0
 80002aa:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002ac:	2301      	movs	r3, #1
 80002ae:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80002b0:	2302      	movs	r3, #2
 80002b2:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80002b4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80002b8:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80002ba:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 80002be:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002c0:	f107 0318 	add.w	r3, r7, #24
 80002c4:	4618      	mov	r0, r3
 80002c6:	f000 fbad 	bl	8000a24 <HAL_RCC_OscConfig>
 80002ca:	4603      	mov	r3, r0
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d001      	beq.n	80002d4 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80002d0:	f000 f819 	bl	8000306 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002d4:	230f      	movs	r3, #15
 80002d6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80002d8:	2302      	movs	r3, #2
 80002da:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002dc:	2300      	movs	r3, #0
 80002de:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80002e0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80002e4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002e6:	2300      	movs	r3, #0
 80002e8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80002ea:	1d3b      	adds	r3, r7, #4
 80002ec:	2102      	movs	r1, #2
 80002ee:	4618      	mov	r0, r3
 80002f0:	f000 fe1a 	bl	8000f28 <HAL_RCC_ClockConfig>
 80002f4:	4603      	mov	r3, r0
 80002f6:	2b00      	cmp	r3, #0
 80002f8:	d001      	beq.n	80002fe <SystemClock_Config+0x82>
  {
    Error_Handler();
 80002fa:	f000 f804 	bl	8000306 <Error_Handler>
  }
}
 80002fe:	bf00      	nop
 8000300:	3740      	adds	r7, #64	@ 0x40
 8000302:	46bd      	mov	sp, r7
 8000304:	bd80      	pop	{r7, pc}

08000306 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000306:	b480      	push	{r7}
 8000308:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800030a:	b672      	cpsid	i
}
 800030c:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800030e:	bf00      	nop
 8000310:	e7fd      	b.n	800030e <Error_Handler+0x8>
	...

08000314 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000314:	b580      	push	{r7, lr}
 8000316:	b084      	sub	sp, #16
 8000318:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800031a:	4b18      	ldr	r3, [pc, #96]	@ (800037c <HAL_MspInit+0x68>)
 800031c:	699b      	ldr	r3, [r3, #24]
 800031e:	4a17      	ldr	r2, [pc, #92]	@ (800037c <HAL_MspInit+0x68>)
 8000320:	f043 0301 	orr.w	r3, r3, #1
 8000324:	6193      	str	r3, [r2, #24]
 8000326:	4b15      	ldr	r3, [pc, #84]	@ (800037c <HAL_MspInit+0x68>)
 8000328:	699b      	ldr	r3, [r3, #24]
 800032a:	f003 0301 	and.w	r3, r3, #1
 800032e:	60bb      	str	r3, [r7, #8]
 8000330:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000332:	4b12      	ldr	r3, [pc, #72]	@ (800037c <HAL_MspInit+0x68>)
 8000334:	69db      	ldr	r3, [r3, #28]
 8000336:	4a11      	ldr	r2, [pc, #68]	@ (800037c <HAL_MspInit+0x68>)
 8000338:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800033c:	61d3      	str	r3, [r2, #28]
 800033e:	4b0f      	ldr	r3, [pc, #60]	@ (800037c <HAL_MspInit+0x68>)
 8000340:	69db      	ldr	r3, [r3, #28]
 8000342:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000346:	607b      	str	r3, [r7, #4]
 8000348:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800034a:	2200      	movs	r2, #0
 800034c:	210f      	movs	r1, #15
 800034e:	f06f 0001 	mvn.w	r0, #1
 8000352:	f000 f988 	bl	8000666 <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000356:	4b0a      	ldr	r3, [pc, #40]	@ (8000380 <HAL_MspInit+0x6c>)
 8000358:	685b      	ldr	r3, [r3, #4]
 800035a:	60fb      	str	r3, [r7, #12]
 800035c:	68fb      	ldr	r3, [r7, #12]
 800035e:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000362:	60fb      	str	r3, [r7, #12]
 8000364:	68fb      	ldr	r3, [r7, #12]
 8000366:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800036a:	60fb      	str	r3, [r7, #12]
 800036c:	4a04      	ldr	r2, [pc, #16]	@ (8000380 <HAL_MspInit+0x6c>)
 800036e:	68fb      	ldr	r3, [r7, #12]
 8000370:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000372:	bf00      	nop
 8000374:	3710      	adds	r7, #16
 8000376:	46bd      	mov	sp, r7
 8000378:	bd80      	pop	{r7, pc}
 800037a:	bf00      	nop
 800037c:	40021000 	.word	0x40021000
 8000380:	40010000 	.word	0x40010000

08000384 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000384:	b480      	push	{r7}
 8000386:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000388:	bf00      	nop
 800038a:	e7fd      	b.n	8000388 <NMI_Handler+0x4>

0800038c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800038c:	b480      	push	{r7}
 800038e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000390:	bf00      	nop
 8000392:	e7fd      	b.n	8000390 <HardFault_Handler+0x4>

08000394 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000394:	b480      	push	{r7}
 8000396:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000398:	bf00      	nop
 800039a:	e7fd      	b.n	8000398 <MemManage_Handler+0x4>

0800039c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800039c:	b480      	push	{r7}
 800039e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80003a0:	bf00      	nop
 80003a2:	e7fd      	b.n	80003a0 <BusFault_Handler+0x4>

080003a4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80003a4:	b480      	push	{r7}
 80003a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80003a8:	bf00      	nop
 80003aa:	e7fd      	b.n	80003a8 <UsageFault_Handler+0x4>

080003ac <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80003ac:	b480      	push	{r7}
 80003ae:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80003b0:	bf00      	nop
 80003b2:	46bd      	mov	sp, r7
 80003b4:	bc80      	pop	{r7}
 80003b6:	4770      	bx	lr

080003b8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80003b8:	b580      	push	{r7, lr}
 80003ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80003bc:	f000 f87c 	bl	80004b8 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 80003c0:	f002 fc3a 	bl	8002c38 <xTaskGetSchedulerState>
 80003c4:	4603      	mov	r3, r0
 80003c6:	2b01      	cmp	r3, #1
 80003c8:	d001      	beq.n	80003ce <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 80003ca:	f003 f9dd 	bl	8003788 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80003ce:	bf00      	nop
 80003d0:	bd80      	pop	{r7, pc}

080003d2 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80003d2:	b480      	push	{r7}
 80003d4:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80003d6:	bf00      	nop
 80003d8:	46bd      	mov	sp, r7
 80003da:	bc80      	pop	{r7}
 80003dc:	4770      	bx	lr
	...

080003e0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80003e0:	f7ff fff7 	bl	80003d2 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80003e4:	480b      	ldr	r0, [pc, #44]	@ (8000414 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80003e6:	490c      	ldr	r1, [pc, #48]	@ (8000418 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80003e8:	4a0c      	ldr	r2, [pc, #48]	@ (800041c <LoopFillZerobss+0x16>)
  movs r3, #0
 80003ea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80003ec:	e002      	b.n	80003f4 <LoopCopyDataInit>

080003ee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80003ee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80003f0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80003f2:	3304      	adds	r3, #4

080003f4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80003f4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80003f6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80003f8:	d3f9      	bcc.n	80003ee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80003fa:	4a09      	ldr	r2, [pc, #36]	@ (8000420 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80003fc:	4c09      	ldr	r4, [pc, #36]	@ (8000424 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80003fe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000400:	e001      	b.n	8000406 <LoopFillZerobss>

08000402 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000402:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000404:	3204      	adds	r2, #4

08000406 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000406:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000408:	d3fb      	bcc.n	8000402 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800040a:	f003 fc35 	bl	8003c78 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800040e:	f7ff ff25 	bl	800025c <main>
  bx lr
 8000412:	4770      	bx	lr
  ldr r0, =_sdata
 8000414:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000418:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 800041c:	08003d98 	.word	0x08003d98
  ldr r2, =_sbss
 8000420:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000424:	20001988 	.word	0x20001988

08000428 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000428:	e7fe      	b.n	8000428 <ADC1_2_IRQHandler>
	...

0800042c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800042c:	b580      	push	{r7, lr}
 800042e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000430:	4b08      	ldr	r3, [pc, #32]	@ (8000454 <HAL_Init+0x28>)
 8000432:	681b      	ldr	r3, [r3, #0]
 8000434:	4a07      	ldr	r2, [pc, #28]	@ (8000454 <HAL_Init+0x28>)
 8000436:	f043 0310 	orr.w	r3, r3, #16
 800043a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800043c:	2003      	movs	r0, #3
 800043e:	f000 f907 	bl	8000650 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000442:	200f      	movs	r0, #15
 8000444:	f000 f808 	bl	8000458 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000448:	f7ff ff64 	bl	8000314 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800044c:	2300      	movs	r3, #0
}
 800044e:	4618      	mov	r0, r3
 8000450:	bd80      	pop	{r7, pc}
 8000452:	bf00      	nop
 8000454:	40022000 	.word	0x40022000

08000458 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000458:	b580      	push	{r7, lr}
 800045a:	b082      	sub	sp, #8
 800045c:	af00      	add	r7, sp, #0
 800045e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000460:	4b12      	ldr	r3, [pc, #72]	@ (80004ac <HAL_InitTick+0x54>)
 8000462:	681a      	ldr	r2, [r3, #0]
 8000464:	4b12      	ldr	r3, [pc, #72]	@ (80004b0 <HAL_InitTick+0x58>)
 8000466:	781b      	ldrb	r3, [r3, #0]
 8000468:	4619      	mov	r1, r3
 800046a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800046e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000472:	fbb2 f3f3 	udiv	r3, r2, r3
 8000476:	4618      	mov	r0, r3
 8000478:	f000 f911 	bl	800069e <HAL_SYSTICK_Config>
 800047c:	4603      	mov	r3, r0
 800047e:	2b00      	cmp	r3, #0
 8000480:	d001      	beq.n	8000486 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000482:	2301      	movs	r3, #1
 8000484:	e00e      	b.n	80004a4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000486:	687b      	ldr	r3, [r7, #4]
 8000488:	2b0f      	cmp	r3, #15
 800048a:	d80a      	bhi.n	80004a2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800048c:	2200      	movs	r2, #0
 800048e:	6879      	ldr	r1, [r7, #4]
 8000490:	f04f 30ff 	mov.w	r0, #4294967295
 8000494:	f000 f8e7 	bl	8000666 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000498:	4a06      	ldr	r2, [pc, #24]	@ (80004b4 <HAL_InitTick+0x5c>)
 800049a:	687b      	ldr	r3, [r7, #4]
 800049c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800049e:	2300      	movs	r3, #0
 80004a0:	e000      	b.n	80004a4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80004a2:	2301      	movs	r3, #1
}
 80004a4:	4618      	mov	r0, r3
 80004a6:	3708      	adds	r7, #8
 80004a8:	46bd      	mov	sp, r7
 80004aa:	bd80      	pop	{r7, pc}
 80004ac:	20000000 	.word	0x20000000
 80004b0:	20000008 	.word	0x20000008
 80004b4:	20000004 	.word	0x20000004

080004b8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80004b8:	b480      	push	{r7}
 80004ba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80004bc:	4b05      	ldr	r3, [pc, #20]	@ (80004d4 <HAL_IncTick+0x1c>)
 80004be:	781b      	ldrb	r3, [r3, #0]
 80004c0:	461a      	mov	r2, r3
 80004c2:	4b05      	ldr	r3, [pc, #20]	@ (80004d8 <HAL_IncTick+0x20>)
 80004c4:	681b      	ldr	r3, [r3, #0]
 80004c6:	4413      	add	r3, r2
 80004c8:	4a03      	ldr	r2, [pc, #12]	@ (80004d8 <HAL_IncTick+0x20>)
 80004ca:	6013      	str	r3, [r2, #0]
}
 80004cc:	bf00      	nop
 80004ce:	46bd      	mov	sp, r7
 80004d0:	bc80      	pop	{r7}
 80004d2:	4770      	bx	lr
 80004d4:	20000008 	.word	0x20000008
 80004d8:	20000034 	.word	0x20000034

080004dc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80004dc:	b480      	push	{r7}
 80004de:	af00      	add	r7, sp, #0
  return uwTick;
 80004e0:	4b02      	ldr	r3, [pc, #8]	@ (80004ec <HAL_GetTick+0x10>)
 80004e2:	681b      	ldr	r3, [r3, #0]
}
 80004e4:	4618      	mov	r0, r3
 80004e6:	46bd      	mov	sp, r7
 80004e8:	bc80      	pop	{r7}
 80004ea:	4770      	bx	lr
 80004ec:	20000034 	.word	0x20000034

080004f0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80004f0:	b480      	push	{r7}
 80004f2:	b085      	sub	sp, #20
 80004f4:	af00      	add	r7, sp, #0
 80004f6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80004f8:	687b      	ldr	r3, [r7, #4]
 80004fa:	f003 0307 	and.w	r3, r3, #7
 80004fe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000500:	4b0c      	ldr	r3, [pc, #48]	@ (8000534 <__NVIC_SetPriorityGrouping+0x44>)
 8000502:	68db      	ldr	r3, [r3, #12]
 8000504:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000506:	68ba      	ldr	r2, [r7, #8]
 8000508:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800050c:	4013      	ands	r3, r2
 800050e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000510:	68fb      	ldr	r3, [r7, #12]
 8000512:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000514:	68bb      	ldr	r3, [r7, #8]
 8000516:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000518:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800051c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000520:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000522:	4a04      	ldr	r2, [pc, #16]	@ (8000534 <__NVIC_SetPriorityGrouping+0x44>)
 8000524:	68bb      	ldr	r3, [r7, #8]
 8000526:	60d3      	str	r3, [r2, #12]
}
 8000528:	bf00      	nop
 800052a:	3714      	adds	r7, #20
 800052c:	46bd      	mov	sp, r7
 800052e:	bc80      	pop	{r7}
 8000530:	4770      	bx	lr
 8000532:	bf00      	nop
 8000534:	e000ed00 	.word	0xe000ed00

08000538 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000538:	b480      	push	{r7}
 800053a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800053c:	4b04      	ldr	r3, [pc, #16]	@ (8000550 <__NVIC_GetPriorityGrouping+0x18>)
 800053e:	68db      	ldr	r3, [r3, #12]
 8000540:	0a1b      	lsrs	r3, r3, #8
 8000542:	f003 0307 	and.w	r3, r3, #7
}
 8000546:	4618      	mov	r0, r3
 8000548:	46bd      	mov	sp, r7
 800054a:	bc80      	pop	{r7}
 800054c:	4770      	bx	lr
 800054e:	bf00      	nop
 8000550:	e000ed00 	.word	0xe000ed00

08000554 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000554:	b480      	push	{r7}
 8000556:	b083      	sub	sp, #12
 8000558:	af00      	add	r7, sp, #0
 800055a:	4603      	mov	r3, r0
 800055c:	6039      	str	r1, [r7, #0]
 800055e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000560:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000564:	2b00      	cmp	r3, #0
 8000566:	db0a      	blt.n	800057e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000568:	683b      	ldr	r3, [r7, #0]
 800056a:	b2da      	uxtb	r2, r3
 800056c:	490c      	ldr	r1, [pc, #48]	@ (80005a0 <__NVIC_SetPriority+0x4c>)
 800056e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000572:	0112      	lsls	r2, r2, #4
 8000574:	b2d2      	uxtb	r2, r2
 8000576:	440b      	add	r3, r1
 8000578:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800057c:	e00a      	b.n	8000594 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800057e:	683b      	ldr	r3, [r7, #0]
 8000580:	b2da      	uxtb	r2, r3
 8000582:	4908      	ldr	r1, [pc, #32]	@ (80005a4 <__NVIC_SetPriority+0x50>)
 8000584:	79fb      	ldrb	r3, [r7, #7]
 8000586:	f003 030f 	and.w	r3, r3, #15
 800058a:	3b04      	subs	r3, #4
 800058c:	0112      	lsls	r2, r2, #4
 800058e:	b2d2      	uxtb	r2, r2
 8000590:	440b      	add	r3, r1
 8000592:	761a      	strb	r2, [r3, #24]
}
 8000594:	bf00      	nop
 8000596:	370c      	adds	r7, #12
 8000598:	46bd      	mov	sp, r7
 800059a:	bc80      	pop	{r7}
 800059c:	4770      	bx	lr
 800059e:	bf00      	nop
 80005a0:	e000e100 	.word	0xe000e100
 80005a4:	e000ed00 	.word	0xe000ed00

080005a8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80005a8:	b480      	push	{r7}
 80005aa:	b089      	sub	sp, #36	@ 0x24
 80005ac:	af00      	add	r7, sp, #0
 80005ae:	60f8      	str	r0, [r7, #12]
 80005b0:	60b9      	str	r1, [r7, #8]
 80005b2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80005b4:	68fb      	ldr	r3, [r7, #12]
 80005b6:	f003 0307 	and.w	r3, r3, #7
 80005ba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80005bc:	69fb      	ldr	r3, [r7, #28]
 80005be:	f1c3 0307 	rsb	r3, r3, #7
 80005c2:	2b04      	cmp	r3, #4
 80005c4:	bf28      	it	cs
 80005c6:	2304      	movcs	r3, #4
 80005c8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80005ca:	69fb      	ldr	r3, [r7, #28]
 80005cc:	3304      	adds	r3, #4
 80005ce:	2b06      	cmp	r3, #6
 80005d0:	d902      	bls.n	80005d8 <NVIC_EncodePriority+0x30>
 80005d2:	69fb      	ldr	r3, [r7, #28]
 80005d4:	3b03      	subs	r3, #3
 80005d6:	e000      	b.n	80005da <NVIC_EncodePriority+0x32>
 80005d8:	2300      	movs	r3, #0
 80005da:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80005dc:	f04f 32ff 	mov.w	r2, #4294967295
 80005e0:	69bb      	ldr	r3, [r7, #24]
 80005e2:	fa02 f303 	lsl.w	r3, r2, r3
 80005e6:	43da      	mvns	r2, r3
 80005e8:	68bb      	ldr	r3, [r7, #8]
 80005ea:	401a      	ands	r2, r3
 80005ec:	697b      	ldr	r3, [r7, #20]
 80005ee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80005f0:	f04f 31ff 	mov.w	r1, #4294967295
 80005f4:	697b      	ldr	r3, [r7, #20]
 80005f6:	fa01 f303 	lsl.w	r3, r1, r3
 80005fa:	43d9      	mvns	r1, r3
 80005fc:	687b      	ldr	r3, [r7, #4]
 80005fe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000600:	4313      	orrs	r3, r2
         );
}
 8000602:	4618      	mov	r0, r3
 8000604:	3724      	adds	r7, #36	@ 0x24
 8000606:	46bd      	mov	sp, r7
 8000608:	bc80      	pop	{r7}
 800060a:	4770      	bx	lr

0800060c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800060c:	b580      	push	{r7, lr}
 800060e:	b082      	sub	sp, #8
 8000610:	af00      	add	r7, sp, #0
 8000612:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000614:	687b      	ldr	r3, [r7, #4]
 8000616:	3b01      	subs	r3, #1
 8000618:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800061c:	d301      	bcc.n	8000622 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800061e:	2301      	movs	r3, #1
 8000620:	e00f      	b.n	8000642 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000622:	4a0a      	ldr	r2, [pc, #40]	@ (800064c <SysTick_Config+0x40>)
 8000624:	687b      	ldr	r3, [r7, #4]
 8000626:	3b01      	subs	r3, #1
 8000628:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800062a:	210f      	movs	r1, #15
 800062c:	f04f 30ff 	mov.w	r0, #4294967295
 8000630:	f7ff ff90 	bl	8000554 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000634:	4b05      	ldr	r3, [pc, #20]	@ (800064c <SysTick_Config+0x40>)
 8000636:	2200      	movs	r2, #0
 8000638:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800063a:	4b04      	ldr	r3, [pc, #16]	@ (800064c <SysTick_Config+0x40>)
 800063c:	2207      	movs	r2, #7
 800063e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000640:	2300      	movs	r3, #0
}
 8000642:	4618      	mov	r0, r3
 8000644:	3708      	adds	r7, #8
 8000646:	46bd      	mov	sp, r7
 8000648:	bd80      	pop	{r7, pc}
 800064a:	bf00      	nop
 800064c:	e000e010 	.word	0xe000e010

08000650 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000650:	b580      	push	{r7, lr}
 8000652:	b082      	sub	sp, #8
 8000654:	af00      	add	r7, sp, #0
 8000656:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000658:	6878      	ldr	r0, [r7, #4]
 800065a:	f7ff ff49 	bl	80004f0 <__NVIC_SetPriorityGrouping>
}
 800065e:	bf00      	nop
 8000660:	3708      	adds	r7, #8
 8000662:	46bd      	mov	sp, r7
 8000664:	bd80      	pop	{r7, pc}

08000666 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000666:	b580      	push	{r7, lr}
 8000668:	b086      	sub	sp, #24
 800066a:	af00      	add	r7, sp, #0
 800066c:	4603      	mov	r3, r0
 800066e:	60b9      	str	r1, [r7, #8]
 8000670:	607a      	str	r2, [r7, #4]
 8000672:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000674:	2300      	movs	r3, #0
 8000676:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000678:	f7ff ff5e 	bl	8000538 <__NVIC_GetPriorityGrouping>
 800067c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800067e:	687a      	ldr	r2, [r7, #4]
 8000680:	68b9      	ldr	r1, [r7, #8]
 8000682:	6978      	ldr	r0, [r7, #20]
 8000684:	f7ff ff90 	bl	80005a8 <NVIC_EncodePriority>
 8000688:	4602      	mov	r2, r0
 800068a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800068e:	4611      	mov	r1, r2
 8000690:	4618      	mov	r0, r3
 8000692:	f7ff ff5f 	bl	8000554 <__NVIC_SetPriority>
}
 8000696:	bf00      	nop
 8000698:	3718      	adds	r7, #24
 800069a:	46bd      	mov	sp, r7
 800069c:	bd80      	pop	{r7, pc}

0800069e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800069e:	b580      	push	{r7, lr}
 80006a0:	b082      	sub	sp, #8
 80006a2:	af00      	add	r7, sp, #0
 80006a4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80006a6:	6878      	ldr	r0, [r7, #4]
 80006a8:	f7ff ffb0 	bl	800060c <SysTick_Config>
 80006ac:	4603      	mov	r3, r0
}
 80006ae:	4618      	mov	r0, r3
 80006b0:	3708      	adds	r7, #8
 80006b2:	46bd      	mov	sp, r7
 80006b4:	bd80      	pop	{r7, pc}
	...

080006b8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80006b8:	b480      	push	{r7}
 80006ba:	b08b      	sub	sp, #44	@ 0x2c
 80006bc:	af00      	add	r7, sp, #0
 80006be:	6078      	str	r0, [r7, #4]
 80006c0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80006c2:	2300      	movs	r3, #0
 80006c4:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80006c6:	2300      	movs	r3, #0
 80006c8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80006ca:	e169      	b.n	80009a0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80006cc:	2201      	movs	r2, #1
 80006ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80006d0:	fa02 f303 	lsl.w	r3, r2, r3
 80006d4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80006d6:	683b      	ldr	r3, [r7, #0]
 80006d8:	681b      	ldr	r3, [r3, #0]
 80006da:	69fa      	ldr	r2, [r7, #28]
 80006dc:	4013      	ands	r3, r2
 80006de:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80006e0:	69ba      	ldr	r2, [r7, #24]
 80006e2:	69fb      	ldr	r3, [r7, #28]
 80006e4:	429a      	cmp	r2, r3
 80006e6:	f040 8158 	bne.w	800099a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80006ea:	683b      	ldr	r3, [r7, #0]
 80006ec:	685b      	ldr	r3, [r3, #4]
 80006ee:	4a9a      	ldr	r2, [pc, #616]	@ (8000958 <HAL_GPIO_Init+0x2a0>)
 80006f0:	4293      	cmp	r3, r2
 80006f2:	d05e      	beq.n	80007b2 <HAL_GPIO_Init+0xfa>
 80006f4:	4a98      	ldr	r2, [pc, #608]	@ (8000958 <HAL_GPIO_Init+0x2a0>)
 80006f6:	4293      	cmp	r3, r2
 80006f8:	d875      	bhi.n	80007e6 <HAL_GPIO_Init+0x12e>
 80006fa:	4a98      	ldr	r2, [pc, #608]	@ (800095c <HAL_GPIO_Init+0x2a4>)
 80006fc:	4293      	cmp	r3, r2
 80006fe:	d058      	beq.n	80007b2 <HAL_GPIO_Init+0xfa>
 8000700:	4a96      	ldr	r2, [pc, #600]	@ (800095c <HAL_GPIO_Init+0x2a4>)
 8000702:	4293      	cmp	r3, r2
 8000704:	d86f      	bhi.n	80007e6 <HAL_GPIO_Init+0x12e>
 8000706:	4a96      	ldr	r2, [pc, #600]	@ (8000960 <HAL_GPIO_Init+0x2a8>)
 8000708:	4293      	cmp	r3, r2
 800070a:	d052      	beq.n	80007b2 <HAL_GPIO_Init+0xfa>
 800070c:	4a94      	ldr	r2, [pc, #592]	@ (8000960 <HAL_GPIO_Init+0x2a8>)
 800070e:	4293      	cmp	r3, r2
 8000710:	d869      	bhi.n	80007e6 <HAL_GPIO_Init+0x12e>
 8000712:	4a94      	ldr	r2, [pc, #592]	@ (8000964 <HAL_GPIO_Init+0x2ac>)
 8000714:	4293      	cmp	r3, r2
 8000716:	d04c      	beq.n	80007b2 <HAL_GPIO_Init+0xfa>
 8000718:	4a92      	ldr	r2, [pc, #584]	@ (8000964 <HAL_GPIO_Init+0x2ac>)
 800071a:	4293      	cmp	r3, r2
 800071c:	d863      	bhi.n	80007e6 <HAL_GPIO_Init+0x12e>
 800071e:	4a92      	ldr	r2, [pc, #584]	@ (8000968 <HAL_GPIO_Init+0x2b0>)
 8000720:	4293      	cmp	r3, r2
 8000722:	d046      	beq.n	80007b2 <HAL_GPIO_Init+0xfa>
 8000724:	4a90      	ldr	r2, [pc, #576]	@ (8000968 <HAL_GPIO_Init+0x2b0>)
 8000726:	4293      	cmp	r3, r2
 8000728:	d85d      	bhi.n	80007e6 <HAL_GPIO_Init+0x12e>
 800072a:	2b12      	cmp	r3, #18
 800072c:	d82a      	bhi.n	8000784 <HAL_GPIO_Init+0xcc>
 800072e:	2b12      	cmp	r3, #18
 8000730:	d859      	bhi.n	80007e6 <HAL_GPIO_Init+0x12e>
 8000732:	a201      	add	r2, pc, #4	@ (adr r2, 8000738 <HAL_GPIO_Init+0x80>)
 8000734:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000738:	080007b3 	.word	0x080007b3
 800073c:	0800078d 	.word	0x0800078d
 8000740:	0800079f 	.word	0x0800079f
 8000744:	080007e1 	.word	0x080007e1
 8000748:	080007e7 	.word	0x080007e7
 800074c:	080007e7 	.word	0x080007e7
 8000750:	080007e7 	.word	0x080007e7
 8000754:	080007e7 	.word	0x080007e7
 8000758:	080007e7 	.word	0x080007e7
 800075c:	080007e7 	.word	0x080007e7
 8000760:	080007e7 	.word	0x080007e7
 8000764:	080007e7 	.word	0x080007e7
 8000768:	080007e7 	.word	0x080007e7
 800076c:	080007e7 	.word	0x080007e7
 8000770:	080007e7 	.word	0x080007e7
 8000774:	080007e7 	.word	0x080007e7
 8000778:	080007e7 	.word	0x080007e7
 800077c:	08000795 	.word	0x08000795
 8000780:	080007a9 	.word	0x080007a9
 8000784:	4a79      	ldr	r2, [pc, #484]	@ (800096c <HAL_GPIO_Init+0x2b4>)
 8000786:	4293      	cmp	r3, r2
 8000788:	d013      	beq.n	80007b2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800078a:	e02c      	b.n	80007e6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800078c:	683b      	ldr	r3, [r7, #0]
 800078e:	68db      	ldr	r3, [r3, #12]
 8000790:	623b      	str	r3, [r7, #32]
          break;
 8000792:	e029      	b.n	80007e8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000794:	683b      	ldr	r3, [r7, #0]
 8000796:	68db      	ldr	r3, [r3, #12]
 8000798:	3304      	adds	r3, #4
 800079a:	623b      	str	r3, [r7, #32]
          break;
 800079c:	e024      	b.n	80007e8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800079e:	683b      	ldr	r3, [r7, #0]
 80007a0:	68db      	ldr	r3, [r3, #12]
 80007a2:	3308      	adds	r3, #8
 80007a4:	623b      	str	r3, [r7, #32]
          break;
 80007a6:	e01f      	b.n	80007e8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80007a8:	683b      	ldr	r3, [r7, #0]
 80007aa:	68db      	ldr	r3, [r3, #12]
 80007ac:	330c      	adds	r3, #12
 80007ae:	623b      	str	r3, [r7, #32]
          break;
 80007b0:	e01a      	b.n	80007e8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80007b2:	683b      	ldr	r3, [r7, #0]
 80007b4:	689b      	ldr	r3, [r3, #8]
 80007b6:	2b00      	cmp	r3, #0
 80007b8:	d102      	bne.n	80007c0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80007ba:	2304      	movs	r3, #4
 80007bc:	623b      	str	r3, [r7, #32]
          break;
 80007be:	e013      	b.n	80007e8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80007c0:	683b      	ldr	r3, [r7, #0]
 80007c2:	689b      	ldr	r3, [r3, #8]
 80007c4:	2b01      	cmp	r3, #1
 80007c6:	d105      	bne.n	80007d4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80007c8:	2308      	movs	r3, #8
 80007ca:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	69fa      	ldr	r2, [r7, #28]
 80007d0:	611a      	str	r2, [r3, #16]
          break;
 80007d2:	e009      	b.n	80007e8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80007d4:	2308      	movs	r3, #8
 80007d6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	69fa      	ldr	r2, [r7, #28]
 80007dc:	615a      	str	r2, [r3, #20]
          break;
 80007de:	e003      	b.n	80007e8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80007e0:	2300      	movs	r3, #0
 80007e2:	623b      	str	r3, [r7, #32]
          break;
 80007e4:	e000      	b.n	80007e8 <HAL_GPIO_Init+0x130>
          break;
 80007e6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80007e8:	69bb      	ldr	r3, [r7, #24]
 80007ea:	2bff      	cmp	r3, #255	@ 0xff
 80007ec:	d801      	bhi.n	80007f2 <HAL_GPIO_Init+0x13a>
 80007ee:	687b      	ldr	r3, [r7, #4]
 80007f0:	e001      	b.n	80007f6 <HAL_GPIO_Init+0x13e>
 80007f2:	687b      	ldr	r3, [r7, #4]
 80007f4:	3304      	adds	r3, #4
 80007f6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80007f8:	69bb      	ldr	r3, [r7, #24]
 80007fa:	2bff      	cmp	r3, #255	@ 0xff
 80007fc:	d802      	bhi.n	8000804 <HAL_GPIO_Init+0x14c>
 80007fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000800:	009b      	lsls	r3, r3, #2
 8000802:	e002      	b.n	800080a <HAL_GPIO_Init+0x152>
 8000804:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000806:	3b08      	subs	r3, #8
 8000808:	009b      	lsls	r3, r3, #2
 800080a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800080c:	697b      	ldr	r3, [r7, #20]
 800080e:	681a      	ldr	r2, [r3, #0]
 8000810:	210f      	movs	r1, #15
 8000812:	693b      	ldr	r3, [r7, #16]
 8000814:	fa01 f303 	lsl.w	r3, r1, r3
 8000818:	43db      	mvns	r3, r3
 800081a:	401a      	ands	r2, r3
 800081c:	6a39      	ldr	r1, [r7, #32]
 800081e:	693b      	ldr	r3, [r7, #16]
 8000820:	fa01 f303 	lsl.w	r3, r1, r3
 8000824:	431a      	orrs	r2, r3
 8000826:	697b      	ldr	r3, [r7, #20]
 8000828:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800082a:	683b      	ldr	r3, [r7, #0]
 800082c:	685b      	ldr	r3, [r3, #4]
 800082e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000832:	2b00      	cmp	r3, #0
 8000834:	f000 80b1 	beq.w	800099a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000838:	4b4d      	ldr	r3, [pc, #308]	@ (8000970 <HAL_GPIO_Init+0x2b8>)
 800083a:	699b      	ldr	r3, [r3, #24]
 800083c:	4a4c      	ldr	r2, [pc, #304]	@ (8000970 <HAL_GPIO_Init+0x2b8>)
 800083e:	f043 0301 	orr.w	r3, r3, #1
 8000842:	6193      	str	r3, [r2, #24]
 8000844:	4b4a      	ldr	r3, [pc, #296]	@ (8000970 <HAL_GPIO_Init+0x2b8>)
 8000846:	699b      	ldr	r3, [r3, #24]
 8000848:	f003 0301 	and.w	r3, r3, #1
 800084c:	60bb      	str	r3, [r7, #8]
 800084e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000850:	4a48      	ldr	r2, [pc, #288]	@ (8000974 <HAL_GPIO_Init+0x2bc>)
 8000852:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000854:	089b      	lsrs	r3, r3, #2
 8000856:	3302      	adds	r3, #2
 8000858:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800085c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800085e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000860:	f003 0303 	and.w	r3, r3, #3
 8000864:	009b      	lsls	r3, r3, #2
 8000866:	220f      	movs	r2, #15
 8000868:	fa02 f303 	lsl.w	r3, r2, r3
 800086c:	43db      	mvns	r3, r3
 800086e:	68fa      	ldr	r2, [r7, #12]
 8000870:	4013      	ands	r3, r2
 8000872:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	4a40      	ldr	r2, [pc, #256]	@ (8000978 <HAL_GPIO_Init+0x2c0>)
 8000878:	4293      	cmp	r3, r2
 800087a:	d013      	beq.n	80008a4 <HAL_GPIO_Init+0x1ec>
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	4a3f      	ldr	r2, [pc, #252]	@ (800097c <HAL_GPIO_Init+0x2c4>)
 8000880:	4293      	cmp	r3, r2
 8000882:	d00d      	beq.n	80008a0 <HAL_GPIO_Init+0x1e8>
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	4a3e      	ldr	r2, [pc, #248]	@ (8000980 <HAL_GPIO_Init+0x2c8>)
 8000888:	4293      	cmp	r3, r2
 800088a:	d007      	beq.n	800089c <HAL_GPIO_Init+0x1e4>
 800088c:	687b      	ldr	r3, [r7, #4]
 800088e:	4a3d      	ldr	r2, [pc, #244]	@ (8000984 <HAL_GPIO_Init+0x2cc>)
 8000890:	4293      	cmp	r3, r2
 8000892:	d101      	bne.n	8000898 <HAL_GPIO_Init+0x1e0>
 8000894:	2303      	movs	r3, #3
 8000896:	e006      	b.n	80008a6 <HAL_GPIO_Init+0x1ee>
 8000898:	2304      	movs	r3, #4
 800089a:	e004      	b.n	80008a6 <HAL_GPIO_Init+0x1ee>
 800089c:	2302      	movs	r3, #2
 800089e:	e002      	b.n	80008a6 <HAL_GPIO_Init+0x1ee>
 80008a0:	2301      	movs	r3, #1
 80008a2:	e000      	b.n	80008a6 <HAL_GPIO_Init+0x1ee>
 80008a4:	2300      	movs	r3, #0
 80008a6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80008a8:	f002 0203 	and.w	r2, r2, #3
 80008ac:	0092      	lsls	r2, r2, #2
 80008ae:	4093      	lsls	r3, r2
 80008b0:	68fa      	ldr	r2, [r7, #12]
 80008b2:	4313      	orrs	r3, r2
 80008b4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80008b6:	492f      	ldr	r1, [pc, #188]	@ (8000974 <HAL_GPIO_Init+0x2bc>)
 80008b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80008ba:	089b      	lsrs	r3, r3, #2
 80008bc:	3302      	adds	r3, #2
 80008be:	68fa      	ldr	r2, [r7, #12]
 80008c0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80008c4:	683b      	ldr	r3, [r7, #0]
 80008c6:	685b      	ldr	r3, [r3, #4]
 80008c8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80008cc:	2b00      	cmp	r3, #0
 80008ce:	d006      	beq.n	80008de <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80008d0:	4b2d      	ldr	r3, [pc, #180]	@ (8000988 <HAL_GPIO_Init+0x2d0>)
 80008d2:	689a      	ldr	r2, [r3, #8]
 80008d4:	492c      	ldr	r1, [pc, #176]	@ (8000988 <HAL_GPIO_Init+0x2d0>)
 80008d6:	69bb      	ldr	r3, [r7, #24]
 80008d8:	4313      	orrs	r3, r2
 80008da:	608b      	str	r3, [r1, #8]
 80008dc:	e006      	b.n	80008ec <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80008de:	4b2a      	ldr	r3, [pc, #168]	@ (8000988 <HAL_GPIO_Init+0x2d0>)
 80008e0:	689a      	ldr	r2, [r3, #8]
 80008e2:	69bb      	ldr	r3, [r7, #24]
 80008e4:	43db      	mvns	r3, r3
 80008e6:	4928      	ldr	r1, [pc, #160]	@ (8000988 <HAL_GPIO_Init+0x2d0>)
 80008e8:	4013      	ands	r3, r2
 80008ea:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80008ec:	683b      	ldr	r3, [r7, #0]
 80008ee:	685b      	ldr	r3, [r3, #4]
 80008f0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80008f4:	2b00      	cmp	r3, #0
 80008f6:	d006      	beq.n	8000906 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80008f8:	4b23      	ldr	r3, [pc, #140]	@ (8000988 <HAL_GPIO_Init+0x2d0>)
 80008fa:	68da      	ldr	r2, [r3, #12]
 80008fc:	4922      	ldr	r1, [pc, #136]	@ (8000988 <HAL_GPIO_Init+0x2d0>)
 80008fe:	69bb      	ldr	r3, [r7, #24]
 8000900:	4313      	orrs	r3, r2
 8000902:	60cb      	str	r3, [r1, #12]
 8000904:	e006      	b.n	8000914 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000906:	4b20      	ldr	r3, [pc, #128]	@ (8000988 <HAL_GPIO_Init+0x2d0>)
 8000908:	68da      	ldr	r2, [r3, #12]
 800090a:	69bb      	ldr	r3, [r7, #24]
 800090c:	43db      	mvns	r3, r3
 800090e:	491e      	ldr	r1, [pc, #120]	@ (8000988 <HAL_GPIO_Init+0x2d0>)
 8000910:	4013      	ands	r3, r2
 8000912:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000914:	683b      	ldr	r3, [r7, #0]
 8000916:	685b      	ldr	r3, [r3, #4]
 8000918:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800091c:	2b00      	cmp	r3, #0
 800091e:	d006      	beq.n	800092e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000920:	4b19      	ldr	r3, [pc, #100]	@ (8000988 <HAL_GPIO_Init+0x2d0>)
 8000922:	685a      	ldr	r2, [r3, #4]
 8000924:	4918      	ldr	r1, [pc, #96]	@ (8000988 <HAL_GPIO_Init+0x2d0>)
 8000926:	69bb      	ldr	r3, [r7, #24]
 8000928:	4313      	orrs	r3, r2
 800092a:	604b      	str	r3, [r1, #4]
 800092c:	e006      	b.n	800093c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800092e:	4b16      	ldr	r3, [pc, #88]	@ (8000988 <HAL_GPIO_Init+0x2d0>)
 8000930:	685a      	ldr	r2, [r3, #4]
 8000932:	69bb      	ldr	r3, [r7, #24]
 8000934:	43db      	mvns	r3, r3
 8000936:	4914      	ldr	r1, [pc, #80]	@ (8000988 <HAL_GPIO_Init+0x2d0>)
 8000938:	4013      	ands	r3, r2
 800093a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800093c:	683b      	ldr	r3, [r7, #0]
 800093e:	685b      	ldr	r3, [r3, #4]
 8000940:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000944:	2b00      	cmp	r3, #0
 8000946:	d021      	beq.n	800098c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000948:	4b0f      	ldr	r3, [pc, #60]	@ (8000988 <HAL_GPIO_Init+0x2d0>)
 800094a:	681a      	ldr	r2, [r3, #0]
 800094c:	490e      	ldr	r1, [pc, #56]	@ (8000988 <HAL_GPIO_Init+0x2d0>)
 800094e:	69bb      	ldr	r3, [r7, #24]
 8000950:	4313      	orrs	r3, r2
 8000952:	600b      	str	r3, [r1, #0]
 8000954:	e021      	b.n	800099a <HAL_GPIO_Init+0x2e2>
 8000956:	bf00      	nop
 8000958:	10320000 	.word	0x10320000
 800095c:	10310000 	.word	0x10310000
 8000960:	10220000 	.word	0x10220000
 8000964:	10210000 	.word	0x10210000
 8000968:	10120000 	.word	0x10120000
 800096c:	10110000 	.word	0x10110000
 8000970:	40021000 	.word	0x40021000
 8000974:	40010000 	.word	0x40010000
 8000978:	40010800 	.word	0x40010800
 800097c:	40010c00 	.word	0x40010c00
 8000980:	40011000 	.word	0x40011000
 8000984:	40011400 	.word	0x40011400
 8000988:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800098c:	4b0b      	ldr	r3, [pc, #44]	@ (80009bc <HAL_GPIO_Init+0x304>)
 800098e:	681a      	ldr	r2, [r3, #0]
 8000990:	69bb      	ldr	r3, [r7, #24]
 8000992:	43db      	mvns	r3, r3
 8000994:	4909      	ldr	r1, [pc, #36]	@ (80009bc <HAL_GPIO_Init+0x304>)
 8000996:	4013      	ands	r3, r2
 8000998:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800099a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800099c:	3301      	adds	r3, #1
 800099e:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80009a0:	683b      	ldr	r3, [r7, #0]
 80009a2:	681a      	ldr	r2, [r3, #0]
 80009a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80009a6:	fa22 f303 	lsr.w	r3, r2, r3
 80009aa:	2b00      	cmp	r3, #0
 80009ac:	f47f ae8e 	bne.w	80006cc <HAL_GPIO_Init+0x14>
  }
}
 80009b0:	bf00      	nop
 80009b2:	bf00      	nop
 80009b4:	372c      	adds	r7, #44	@ 0x2c
 80009b6:	46bd      	mov	sp, r7
 80009b8:	bc80      	pop	{r7}
 80009ba:	4770      	bx	lr
 80009bc:	40010400 	.word	0x40010400

080009c0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80009c0:	b480      	push	{r7}
 80009c2:	b083      	sub	sp, #12
 80009c4:	af00      	add	r7, sp, #0
 80009c6:	6078      	str	r0, [r7, #4]
 80009c8:	460b      	mov	r3, r1
 80009ca:	807b      	strh	r3, [r7, #2]
 80009cc:	4613      	mov	r3, r2
 80009ce:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80009d0:	787b      	ldrb	r3, [r7, #1]
 80009d2:	2b00      	cmp	r3, #0
 80009d4:	d003      	beq.n	80009de <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80009d6:	887a      	ldrh	r2, [r7, #2]
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80009dc:	e003      	b.n	80009e6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80009de:	887b      	ldrh	r3, [r7, #2]
 80009e0:	041a      	lsls	r2, r3, #16
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	611a      	str	r2, [r3, #16]
}
 80009e6:	bf00      	nop
 80009e8:	370c      	adds	r7, #12
 80009ea:	46bd      	mov	sp, r7
 80009ec:	bc80      	pop	{r7}
 80009ee:	4770      	bx	lr

080009f0 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80009f0:	b480      	push	{r7}
 80009f2:	b085      	sub	sp, #20
 80009f4:	af00      	add	r7, sp, #0
 80009f6:	6078      	str	r0, [r7, #4]
 80009f8:	460b      	mov	r3, r1
 80009fa:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	68db      	ldr	r3, [r3, #12]
 8000a00:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000a02:	887a      	ldrh	r2, [r7, #2]
 8000a04:	68fb      	ldr	r3, [r7, #12]
 8000a06:	4013      	ands	r3, r2
 8000a08:	041a      	lsls	r2, r3, #16
 8000a0a:	68fb      	ldr	r3, [r7, #12]
 8000a0c:	43d9      	mvns	r1, r3
 8000a0e:	887b      	ldrh	r3, [r7, #2]
 8000a10:	400b      	ands	r3, r1
 8000a12:	431a      	orrs	r2, r3
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	611a      	str	r2, [r3, #16]
}
 8000a18:	bf00      	nop
 8000a1a:	3714      	adds	r7, #20
 8000a1c:	46bd      	mov	sp, r7
 8000a1e:	bc80      	pop	{r7}
 8000a20:	4770      	bx	lr
	...

08000a24 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	b086      	sub	sp, #24
 8000a28:	af00      	add	r7, sp, #0
 8000a2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	2b00      	cmp	r3, #0
 8000a30:	d101      	bne.n	8000a36 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000a32:	2301      	movs	r3, #1
 8000a34:	e272      	b.n	8000f1c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	681b      	ldr	r3, [r3, #0]
 8000a3a:	f003 0301 	and.w	r3, r3, #1
 8000a3e:	2b00      	cmp	r3, #0
 8000a40:	f000 8087 	beq.w	8000b52 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000a44:	4b92      	ldr	r3, [pc, #584]	@ (8000c90 <HAL_RCC_OscConfig+0x26c>)
 8000a46:	685b      	ldr	r3, [r3, #4]
 8000a48:	f003 030c 	and.w	r3, r3, #12
 8000a4c:	2b04      	cmp	r3, #4
 8000a4e:	d00c      	beq.n	8000a6a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000a50:	4b8f      	ldr	r3, [pc, #572]	@ (8000c90 <HAL_RCC_OscConfig+0x26c>)
 8000a52:	685b      	ldr	r3, [r3, #4]
 8000a54:	f003 030c 	and.w	r3, r3, #12
 8000a58:	2b08      	cmp	r3, #8
 8000a5a:	d112      	bne.n	8000a82 <HAL_RCC_OscConfig+0x5e>
 8000a5c:	4b8c      	ldr	r3, [pc, #560]	@ (8000c90 <HAL_RCC_OscConfig+0x26c>)
 8000a5e:	685b      	ldr	r3, [r3, #4]
 8000a60:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000a64:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000a68:	d10b      	bne.n	8000a82 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000a6a:	4b89      	ldr	r3, [pc, #548]	@ (8000c90 <HAL_RCC_OscConfig+0x26c>)
 8000a6c:	681b      	ldr	r3, [r3, #0]
 8000a6e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000a72:	2b00      	cmp	r3, #0
 8000a74:	d06c      	beq.n	8000b50 <HAL_RCC_OscConfig+0x12c>
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	685b      	ldr	r3, [r3, #4]
 8000a7a:	2b00      	cmp	r3, #0
 8000a7c:	d168      	bne.n	8000b50 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000a7e:	2301      	movs	r3, #1
 8000a80:	e24c      	b.n	8000f1c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	685b      	ldr	r3, [r3, #4]
 8000a86:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000a8a:	d106      	bne.n	8000a9a <HAL_RCC_OscConfig+0x76>
 8000a8c:	4b80      	ldr	r3, [pc, #512]	@ (8000c90 <HAL_RCC_OscConfig+0x26c>)
 8000a8e:	681b      	ldr	r3, [r3, #0]
 8000a90:	4a7f      	ldr	r2, [pc, #508]	@ (8000c90 <HAL_RCC_OscConfig+0x26c>)
 8000a92:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000a96:	6013      	str	r3, [r2, #0]
 8000a98:	e02e      	b.n	8000af8 <HAL_RCC_OscConfig+0xd4>
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	685b      	ldr	r3, [r3, #4]
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	d10c      	bne.n	8000abc <HAL_RCC_OscConfig+0x98>
 8000aa2:	4b7b      	ldr	r3, [pc, #492]	@ (8000c90 <HAL_RCC_OscConfig+0x26c>)
 8000aa4:	681b      	ldr	r3, [r3, #0]
 8000aa6:	4a7a      	ldr	r2, [pc, #488]	@ (8000c90 <HAL_RCC_OscConfig+0x26c>)
 8000aa8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000aac:	6013      	str	r3, [r2, #0]
 8000aae:	4b78      	ldr	r3, [pc, #480]	@ (8000c90 <HAL_RCC_OscConfig+0x26c>)
 8000ab0:	681b      	ldr	r3, [r3, #0]
 8000ab2:	4a77      	ldr	r2, [pc, #476]	@ (8000c90 <HAL_RCC_OscConfig+0x26c>)
 8000ab4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000ab8:	6013      	str	r3, [r2, #0]
 8000aba:	e01d      	b.n	8000af8 <HAL_RCC_OscConfig+0xd4>
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	685b      	ldr	r3, [r3, #4]
 8000ac0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8000ac4:	d10c      	bne.n	8000ae0 <HAL_RCC_OscConfig+0xbc>
 8000ac6:	4b72      	ldr	r3, [pc, #456]	@ (8000c90 <HAL_RCC_OscConfig+0x26c>)
 8000ac8:	681b      	ldr	r3, [r3, #0]
 8000aca:	4a71      	ldr	r2, [pc, #452]	@ (8000c90 <HAL_RCC_OscConfig+0x26c>)
 8000acc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000ad0:	6013      	str	r3, [r2, #0]
 8000ad2:	4b6f      	ldr	r3, [pc, #444]	@ (8000c90 <HAL_RCC_OscConfig+0x26c>)
 8000ad4:	681b      	ldr	r3, [r3, #0]
 8000ad6:	4a6e      	ldr	r2, [pc, #440]	@ (8000c90 <HAL_RCC_OscConfig+0x26c>)
 8000ad8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000adc:	6013      	str	r3, [r2, #0]
 8000ade:	e00b      	b.n	8000af8 <HAL_RCC_OscConfig+0xd4>
 8000ae0:	4b6b      	ldr	r3, [pc, #428]	@ (8000c90 <HAL_RCC_OscConfig+0x26c>)
 8000ae2:	681b      	ldr	r3, [r3, #0]
 8000ae4:	4a6a      	ldr	r2, [pc, #424]	@ (8000c90 <HAL_RCC_OscConfig+0x26c>)
 8000ae6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000aea:	6013      	str	r3, [r2, #0]
 8000aec:	4b68      	ldr	r3, [pc, #416]	@ (8000c90 <HAL_RCC_OscConfig+0x26c>)
 8000aee:	681b      	ldr	r3, [r3, #0]
 8000af0:	4a67      	ldr	r2, [pc, #412]	@ (8000c90 <HAL_RCC_OscConfig+0x26c>)
 8000af2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000af6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	685b      	ldr	r3, [r3, #4]
 8000afc:	2b00      	cmp	r3, #0
 8000afe:	d013      	beq.n	8000b28 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000b00:	f7ff fcec 	bl	80004dc <HAL_GetTick>
 8000b04:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000b06:	e008      	b.n	8000b1a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000b08:	f7ff fce8 	bl	80004dc <HAL_GetTick>
 8000b0c:	4602      	mov	r2, r0
 8000b0e:	693b      	ldr	r3, [r7, #16]
 8000b10:	1ad3      	subs	r3, r2, r3
 8000b12:	2b64      	cmp	r3, #100	@ 0x64
 8000b14:	d901      	bls.n	8000b1a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000b16:	2303      	movs	r3, #3
 8000b18:	e200      	b.n	8000f1c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000b1a:	4b5d      	ldr	r3, [pc, #372]	@ (8000c90 <HAL_RCC_OscConfig+0x26c>)
 8000b1c:	681b      	ldr	r3, [r3, #0]
 8000b1e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	d0f0      	beq.n	8000b08 <HAL_RCC_OscConfig+0xe4>
 8000b26:	e014      	b.n	8000b52 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000b28:	f7ff fcd8 	bl	80004dc <HAL_GetTick>
 8000b2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000b2e:	e008      	b.n	8000b42 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000b30:	f7ff fcd4 	bl	80004dc <HAL_GetTick>
 8000b34:	4602      	mov	r2, r0
 8000b36:	693b      	ldr	r3, [r7, #16]
 8000b38:	1ad3      	subs	r3, r2, r3
 8000b3a:	2b64      	cmp	r3, #100	@ 0x64
 8000b3c:	d901      	bls.n	8000b42 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000b3e:	2303      	movs	r3, #3
 8000b40:	e1ec      	b.n	8000f1c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000b42:	4b53      	ldr	r3, [pc, #332]	@ (8000c90 <HAL_RCC_OscConfig+0x26c>)
 8000b44:	681b      	ldr	r3, [r3, #0]
 8000b46:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	d1f0      	bne.n	8000b30 <HAL_RCC_OscConfig+0x10c>
 8000b4e:	e000      	b.n	8000b52 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000b50:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	681b      	ldr	r3, [r3, #0]
 8000b56:	f003 0302 	and.w	r3, r3, #2
 8000b5a:	2b00      	cmp	r3, #0
 8000b5c:	d063      	beq.n	8000c26 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000b5e:	4b4c      	ldr	r3, [pc, #304]	@ (8000c90 <HAL_RCC_OscConfig+0x26c>)
 8000b60:	685b      	ldr	r3, [r3, #4]
 8000b62:	f003 030c 	and.w	r3, r3, #12
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	d00b      	beq.n	8000b82 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000b6a:	4b49      	ldr	r3, [pc, #292]	@ (8000c90 <HAL_RCC_OscConfig+0x26c>)
 8000b6c:	685b      	ldr	r3, [r3, #4]
 8000b6e:	f003 030c 	and.w	r3, r3, #12
 8000b72:	2b08      	cmp	r3, #8
 8000b74:	d11c      	bne.n	8000bb0 <HAL_RCC_OscConfig+0x18c>
 8000b76:	4b46      	ldr	r3, [pc, #280]	@ (8000c90 <HAL_RCC_OscConfig+0x26c>)
 8000b78:	685b      	ldr	r3, [r3, #4]
 8000b7a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000b7e:	2b00      	cmp	r3, #0
 8000b80:	d116      	bne.n	8000bb0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000b82:	4b43      	ldr	r3, [pc, #268]	@ (8000c90 <HAL_RCC_OscConfig+0x26c>)
 8000b84:	681b      	ldr	r3, [r3, #0]
 8000b86:	f003 0302 	and.w	r3, r3, #2
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	d005      	beq.n	8000b9a <HAL_RCC_OscConfig+0x176>
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	691b      	ldr	r3, [r3, #16]
 8000b92:	2b01      	cmp	r3, #1
 8000b94:	d001      	beq.n	8000b9a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8000b96:	2301      	movs	r3, #1
 8000b98:	e1c0      	b.n	8000f1c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000b9a:	4b3d      	ldr	r3, [pc, #244]	@ (8000c90 <HAL_RCC_OscConfig+0x26c>)
 8000b9c:	681b      	ldr	r3, [r3, #0]
 8000b9e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	695b      	ldr	r3, [r3, #20]
 8000ba6:	00db      	lsls	r3, r3, #3
 8000ba8:	4939      	ldr	r1, [pc, #228]	@ (8000c90 <HAL_RCC_OscConfig+0x26c>)
 8000baa:	4313      	orrs	r3, r2
 8000bac:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000bae:	e03a      	b.n	8000c26 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	691b      	ldr	r3, [r3, #16]
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	d020      	beq.n	8000bfa <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000bb8:	4b36      	ldr	r3, [pc, #216]	@ (8000c94 <HAL_RCC_OscConfig+0x270>)
 8000bba:	2201      	movs	r2, #1
 8000bbc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000bbe:	f7ff fc8d 	bl	80004dc <HAL_GetTick>
 8000bc2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000bc4:	e008      	b.n	8000bd8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000bc6:	f7ff fc89 	bl	80004dc <HAL_GetTick>
 8000bca:	4602      	mov	r2, r0
 8000bcc:	693b      	ldr	r3, [r7, #16]
 8000bce:	1ad3      	subs	r3, r2, r3
 8000bd0:	2b02      	cmp	r3, #2
 8000bd2:	d901      	bls.n	8000bd8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8000bd4:	2303      	movs	r3, #3
 8000bd6:	e1a1      	b.n	8000f1c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000bd8:	4b2d      	ldr	r3, [pc, #180]	@ (8000c90 <HAL_RCC_OscConfig+0x26c>)
 8000bda:	681b      	ldr	r3, [r3, #0]
 8000bdc:	f003 0302 	and.w	r3, r3, #2
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d0f0      	beq.n	8000bc6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000be4:	4b2a      	ldr	r3, [pc, #168]	@ (8000c90 <HAL_RCC_OscConfig+0x26c>)
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	695b      	ldr	r3, [r3, #20]
 8000bf0:	00db      	lsls	r3, r3, #3
 8000bf2:	4927      	ldr	r1, [pc, #156]	@ (8000c90 <HAL_RCC_OscConfig+0x26c>)
 8000bf4:	4313      	orrs	r3, r2
 8000bf6:	600b      	str	r3, [r1, #0]
 8000bf8:	e015      	b.n	8000c26 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000bfa:	4b26      	ldr	r3, [pc, #152]	@ (8000c94 <HAL_RCC_OscConfig+0x270>)
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000c00:	f7ff fc6c 	bl	80004dc <HAL_GetTick>
 8000c04:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000c06:	e008      	b.n	8000c1a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000c08:	f7ff fc68 	bl	80004dc <HAL_GetTick>
 8000c0c:	4602      	mov	r2, r0
 8000c0e:	693b      	ldr	r3, [r7, #16]
 8000c10:	1ad3      	subs	r3, r2, r3
 8000c12:	2b02      	cmp	r3, #2
 8000c14:	d901      	bls.n	8000c1a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8000c16:	2303      	movs	r3, #3
 8000c18:	e180      	b.n	8000f1c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000c1a:	4b1d      	ldr	r3, [pc, #116]	@ (8000c90 <HAL_RCC_OscConfig+0x26c>)
 8000c1c:	681b      	ldr	r3, [r3, #0]
 8000c1e:	f003 0302 	and.w	r3, r3, #2
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d1f0      	bne.n	8000c08 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	681b      	ldr	r3, [r3, #0]
 8000c2a:	f003 0308 	and.w	r3, r3, #8
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	d03a      	beq.n	8000ca8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	699b      	ldr	r3, [r3, #24]
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	d019      	beq.n	8000c6e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000c3a:	4b17      	ldr	r3, [pc, #92]	@ (8000c98 <HAL_RCC_OscConfig+0x274>)
 8000c3c:	2201      	movs	r2, #1
 8000c3e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000c40:	f7ff fc4c 	bl	80004dc <HAL_GetTick>
 8000c44:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000c46:	e008      	b.n	8000c5a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000c48:	f7ff fc48 	bl	80004dc <HAL_GetTick>
 8000c4c:	4602      	mov	r2, r0
 8000c4e:	693b      	ldr	r3, [r7, #16]
 8000c50:	1ad3      	subs	r3, r2, r3
 8000c52:	2b02      	cmp	r3, #2
 8000c54:	d901      	bls.n	8000c5a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8000c56:	2303      	movs	r3, #3
 8000c58:	e160      	b.n	8000f1c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000c5a:	4b0d      	ldr	r3, [pc, #52]	@ (8000c90 <HAL_RCC_OscConfig+0x26c>)
 8000c5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000c5e:	f003 0302 	and.w	r3, r3, #2
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	d0f0      	beq.n	8000c48 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8000c66:	2001      	movs	r0, #1
 8000c68:	f000 fa9c 	bl	80011a4 <RCC_Delay>
 8000c6c:	e01c      	b.n	8000ca8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000c6e:	4b0a      	ldr	r3, [pc, #40]	@ (8000c98 <HAL_RCC_OscConfig+0x274>)
 8000c70:	2200      	movs	r2, #0
 8000c72:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000c74:	f7ff fc32 	bl	80004dc <HAL_GetTick>
 8000c78:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000c7a:	e00f      	b.n	8000c9c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000c7c:	f7ff fc2e 	bl	80004dc <HAL_GetTick>
 8000c80:	4602      	mov	r2, r0
 8000c82:	693b      	ldr	r3, [r7, #16]
 8000c84:	1ad3      	subs	r3, r2, r3
 8000c86:	2b02      	cmp	r3, #2
 8000c88:	d908      	bls.n	8000c9c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8000c8a:	2303      	movs	r3, #3
 8000c8c:	e146      	b.n	8000f1c <HAL_RCC_OscConfig+0x4f8>
 8000c8e:	bf00      	nop
 8000c90:	40021000 	.word	0x40021000
 8000c94:	42420000 	.word	0x42420000
 8000c98:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000c9c:	4b92      	ldr	r3, [pc, #584]	@ (8000ee8 <HAL_RCC_OscConfig+0x4c4>)
 8000c9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000ca0:	f003 0302 	and.w	r3, r3, #2
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	d1e9      	bne.n	8000c7c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	f003 0304 	and.w	r3, r3, #4
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	f000 80a6 	beq.w	8000e02 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000cba:	4b8b      	ldr	r3, [pc, #556]	@ (8000ee8 <HAL_RCC_OscConfig+0x4c4>)
 8000cbc:	69db      	ldr	r3, [r3, #28]
 8000cbe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d10d      	bne.n	8000ce2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000cc6:	4b88      	ldr	r3, [pc, #544]	@ (8000ee8 <HAL_RCC_OscConfig+0x4c4>)
 8000cc8:	69db      	ldr	r3, [r3, #28]
 8000cca:	4a87      	ldr	r2, [pc, #540]	@ (8000ee8 <HAL_RCC_OscConfig+0x4c4>)
 8000ccc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000cd0:	61d3      	str	r3, [r2, #28]
 8000cd2:	4b85      	ldr	r3, [pc, #532]	@ (8000ee8 <HAL_RCC_OscConfig+0x4c4>)
 8000cd4:	69db      	ldr	r3, [r3, #28]
 8000cd6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000cda:	60bb      	str	r3, [r7, #8]
 8000cdc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000cde:	2301      	movs	r3, #1
 8000ce0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000ce2:	4b82      	ldr	r3, [pc, #520]	@ (8000eec <HAL_RCC_OscConfig+0x4c8>)
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	d118      	bne.n	8000d20 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000cee:	4b7f      	ldr	r3, [pc, #508]	@ (8000eec <HAL_RCC_OscConfig+0x4c8>)
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	4a7e      	ldr	r2, [pc, #504]	@ (8000eec <HAL_RCC_OscConfig+0x4c8>)
 8000cf4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000cf8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000cfa:	f7ff fbef 	bl	80004dc <HAL_GetTick>
 8000cfe:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000d00:	e008      	b.n	8000d14 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000d02:	f7ff fbeb 	bl	80004dc <HAL_GetTick>
 8000d06:	4602      	mov	r2, r0
 8000d08:	693b      	ldr	r3, [r7, #16]
 8000d0a:	1ad3      	subs	r3, r2, r3
 8000d0c:	2b64      	cmp	r3, #100	@ 0x64
 8000d0e:	d901      	bls.n	8000d14 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8000d10:	2303      	movs	r3, #3
 8000d12:	e103      	b.n	8000f1c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000d14:	4b75      	ldr	r3, [pc, #468]	@ (8000eec <HAL_RCC_OscConfig+0x4c8>)
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	d0f0      	beq.n	8000d02 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	68db      	ldr	r3, [r3, #12]
 8000d24:	2b01      	cmp	r3, #1
 8000d26:	d106      	bne.n	8000d36 <HAL_RCC_OscConfig+0x312>
 8000d28:	4b6f      	ldr	r3, [pc, #444]	@ (8000ee8 <HAL_RCC_OscConfig+0x4c4>)
 8000d2a:	6a1b      	ldr	r3, [r3, #32]
 8000d2c:	4a6e      	ldr	r2, [pc, #440]	@ (8000ee8 <HAL_RCC_OscConfig+0x4c4>)
 8000d2e:	f043 0301 	orr.w	r3, r3, #1
 8000d32:	6213      	str	r3, [r2, #32]
 8000d34:	e02d      	b.n	8000d92 <HAL_RCC_OscConfig+0x36e>
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	68db      	ldr	r3, [r3, #12]
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	d10c      	bne.n	8000d58 <HAL_RCC_OscConfig+0x334>
 8000d3e:	4b6a      	ldr	r3, [pc, #424]	@ (8000ee8 <HAL_RCC_OscConfig+0x4c4>)
 8000d40:	6a1b      	ldr	r3, [r3, #32]
 8000d42:	4a69      	ldr	r2, [pc, #420]	@ (8000ee8 <HAL_RCC_OscConfig+0x4c4>)
 8000d44:	f023 0301 	bic.w	r3, r3, #1
 8000d48:	6213      	str	r3, [r2, #32]
 8000d4a:	4b67      	ldr	r3, [pc, #412]	@ (8000ee8 <HAL_RCC_OscConfig+0x4c4>)
 8000d4c:	6a1b      	ldr	r3, [r3, #32]
 8000d4e:	4a66      	ldr	r2, [pc, #408]	@ (8000ee8 <HAL_RCC_OscConfig+0x4c4>)
 8000d50:	f023 0304 	bic.w	r3, r3, #4
 8000d54:	6213      	str	r3, [r2, #32]
 8000d56:	e01c      	b.n	8000d92 <HAL_RCC_OscConfig+0x36e>
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	68db      	ldr	r3, [r3, #12]
 8000d5c:	2b05      	cmp	r3, #5
 8000d5e:	d10c      	bne.n	8000d7a <HAL_RCC_OscConfig+0x356>
 8000d60:	4b61      	ldr	r3, [pc, #388]	@ (8000ee8 <HAL_RCC_OscConfig+0x4c4>)
 8000d62:	6a1b      	ldr	r3, [r3, #32]
 8000d64:	4a60      	ldr	r2, [pc, #384]	@ (8000ee8 <HAL_RCC_OscConfig+0x4c4>)
 8000d66:	f043 0304 	orr.w	r3, r3, #4
 8000d6a:	6213      	str	r3, [r2, #32]
 8000d6c:	4b5e      	ldr	r3, [pc, #376]	@ (8000ee8 <HAL_RCC_OscConfig+0x4c4>)
 8000d6e:	6a1b      	ldr	r3, [r3, #32]
 8000d70:	4a5d      	ldr	r2, [pc, #372]	@ (8000ee8 <HAL_RCC_OscConfig+0x4c4>)
 8000d72:	f043 0301 	orr.w	r3, r3, #1
 8000d76:	6213      	str	r3, [r2, #32]
 8000d78:	e00b      	b.n	8000d92 <HAL_RCC_OscConfig+0x36e>
 8000d7a:	4b5b      	ldr	r3, [pc, #364]	@ (8000ee8 <HAL_RCC_OscConfig+0x4c4>)
 8000d7c:	6a1b      	ldr	r3, [r3, #32]
 8000d7e:	4a5a      	ldr	r2, [pc, #360]	@ (8000ee8 <HAL_RCC_OscConfig+0x4c4>)
 8000d80:	f023 0301 	bic.w	r3, r3, #1
 8000d84:	6213      	str	r3, [r2, #32]
 8000d86:	4b58      	ldr	r3, [pc, #352]	@ (8000ee8 <HAL_RCC_OscConfig+0x4c4>)
 8000d88:	6a1b      	ldr	r3, [r3, #32]
 8000d8a:	4a57      	ldr	r2, [pc, #348]	@ (8000ee8 <HAL_RCC_OscConfig+0x4c4>)
 8000d8c:	f023 0304 	bic.w	r3, r3, #4
 8000d90:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	68db      	ldr	r3, [r3, #12]
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	d015      	beq.n	8000dc6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000d9a:	f7ff fb9f 	bl	80004dc <HAL_GetTick>
 8000d9e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000da0:	e00a      	b.n	8000db8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000da2:	f7ff fb9b 	bl	80004dc <HAL_GetTick>
 8000da6:	4602      	mov	r2, r0
 8000da8:	693b      	ldr	r3, [r7, #16]
 8000daa:	1ad3      	subs	r3, r2, r3
 8000dac:	f241 3288 	movw	r2, #5000	@ 0x1388
 8000db0:	4293      	cmp	r3, r2
 8000db2:	d901      	bls.n	8000db8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8000db4:	2303      	movs	r3, #3
 8000db6:	e0b1      	b.n	8000f1c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000db8:	4b4b      	ldr	r3, [pc, #300]	@ (8000ee8 <HAL_RCC_OscConfig+0x4c4>)
 8000dba:	6a1b      	ldr	r3, [r3, #32]
 8000dbc:	f003 0302 	and.w	r3, r3, #2
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	d0ee      	beq.n	8000da2 <HAL_RCC_OscConfig+0x37e>
 8000dc4:	e014      	b.n	8000df0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000dc6:	f7ff fb89 	bl	80004dc <HAL_GetTick>
 8000dca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000dcc:	e00a      	b.n	8000de4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000dce:	f7ff fb85 	bl	80004dc <HAL_GetTick>
 8000dd2:	4602      	mov	r2, r0
 8000dd4:	693b      	ldr	r3, [r7, #16]
 8000dd6:	1ad3      	subs	r3, r2, r3
 8000dd8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8000ddc:	4293      	cmp	r3, r2
 8000dde:	d901      	bls.n	8000de4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8000de0:	2303      	movs	r3, #3
 8000de2:	e09b      	b.n	8000f1c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000de4:	4b40      	ldr	r3, [pc, #256]	@ (8000ee8 <HAL_RCC_OscConfig+0x4c4>)
 8000de6:	6a1b      	ldr	r3, [r3, #32]
 8000de8:	f003 0302 	and.w	r3, r3, #2
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	d1ee      	bne.n	8000dce <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8000df0:	7dfb      	ldrb	r3, [r7, #23]
 8000df2:	2b01      	cmp	r3, #1
 8000df4:	d105      	bne.n	8000e02 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000df6:	4b3c      	ldr	r3, [pc, #240]	@ (8000ee8 <HAL_RCC_OscConfig+0x4c4>)
 8000df8:	69db      	ldr	r3, [r3, #28]
 8000dfa:	4a3b      	ldr	r2, [pc, #236]	@ (8000ee8 <HAL_RCC_OscConfig+0x4c4>)
 8000dfc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8000e00:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	69db      	ldr	r3, [r3, #28]
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	f000 8087 	beq.w	8000f1a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000e0c:	4b36      	ldr	r3, [pc, #216]	@ (8000ee8 <HAL_RCC_OscConfig+0x4c4>)
 8000e0e:	685b      	ldr	r3, [r3, #4]
 8000e10:	f003 030c 	and.w	r3, r3, #12
 8000e14:	2b08      	cmp	r3, #8
 8000e16:	d061      	beq.n	8000edc <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	69db      	ldr	r3, [r3, #28]
 8000e1c:	2b02      	cmp	r3, #2
 8000e1e:	d146      	bne.n	8000eae <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000e20:	4b33      	ldr	r3, [pc, #204]	@ (8000ef0 <HAL_RCC_OscConfig+0x4cc>)
 8000e22:	2200      	movs	r2, #0
 8000e24:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e26:	f7ff fb59 	bl	80004dc <HAL_GetTick>
 8000e2a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000e2c:	e008      	b.n	8000e40 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000e2e:	f7ff fb55 	bl	80004dc <HAL_GetTick>
 8000e32:	4602      	mov	r2, r0
 8000e34:	693b      	ldr	r3, [r7, #16]
 8000e36:	1ad3      	subs	r3, r2, r3
 8000e38:	2b02      	cmp	r3, #2
 8000e3a:	d901      	bls.n	8000e40 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8000e3c:	2303      	movs	r3, #3
 8000e3e:	e06d      	b.n	8000f1c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000e40:	4b29      	ldr	r3, [pc, #164]	@ (8000ee8 <HAL_RCC_OscConfig+0x4c4>)
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	d1f0      	bne.n	8000e2e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	6a1b      	ldr	r3, [r3, #32]
 8000e50:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000e54:	d108      	bne.n	8000e68 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000e56:	4b24      	ldr	r3, [pc, #144]	@ (8000ee8 <HAL_RCC_OscConfig+0x4c4>)
 8000e58:	685b      	ldr	r3, [r3, #4]
 8000e5a:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	689b      	ldr	r3, [r3, #8]
 8000e62:	4921      	ldr	r1, [pc, #132]	@ (8000ee8 <HAL_RCC_OscConfig+0x4c4>)
 8000e64:	4313      	orrs	r3, r2
 8000e66:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000e68:	4b1f      	ldr	r3, [pc, #124]	@ (8000ee8 <HAL_RCC_OscConfig+0x4c4>)
 8000e6a:	685b      	ldr	r3, [r3, #4]
 8000e6c:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	6a19      	ldr	r1, [r3, #32]
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000e78:	430b      	orrs	r3, r1
 8000e7a:	491b      	ldr	r1, [pc, #108]	@ (8000ee8 <HAL_RCC_OscConfig+0x4c4>)
 8000e7c:	4313      	orrs	r3, r2
 8000e7e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8000e80:	4b1b      	ldr	r3, [pc, #108]	@ (8000ef0 <HAL_RCC_OscConfig+0x4cc>)
 8000e82:	2201      	movs	r2, #1
 8000e84:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e86:	f7ff fb29 	bl	80004dc <HAL_GetTick>
 8000e8a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000e8c:	e008      	b.n	8000ea0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000e8e:	f7ff fb25 	bl	80004dc <HAL_GetTick>
 8000e92:	4602      	mov	r2, r0
 8000e94:	693b      	ldr	r3, [r7, #16]
 8000e96:	1ad3      	subs	r3, r2, r3
 8000e98:	2b02      	cmp	r3, #2
 8000e9a:	d901      	bls.n	8000ea0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8000e9c:	2303      	movs	r3, #3
 8000e9e:	e03d      	b.n	8000f1c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000ea0:	4b11      	ldr	r3, [pc, #68]	@ (8000ee8 <HAL_RCC_OscConfig+0x4c4>)
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	d0f0      	beq.n	8000e8e <HAL_RCC_OscConfig+0x46a>
 8000eac:	e035      	b.n	8000f1a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000eae:	4b10      	ldr	r3, [pc, #64]	@ (8000ef0 <HAL_RCC_OscConfig+0x4cc>)
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000eb4:	f7ff fb12 	bl	80004dc <HAL_GetTick>
 8000eb8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000eba:	e008      	b.n	8000ece <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000ebc:	f7ff fb0e 	bl	80004dc <HAL_GetTick>
 8000ec0:	4602      	mov	r2, r0
 8000ec2:	693b      	ldr	r3, [r7, #16]
 8000ec4:	1ad3      	subs	r3, r2, r3
 8000ec6:	2b02      	cmp	r3, #2
 8000ec8:	d901      	bls.n	8000ece <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8000eca:	2303      	movs	r3, #3
 8000ecc:	e026      	b.n	8000f1c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000ece:	4b06      	ldr	r3, [pc, #24]	@ (8000ee8 <HAL_RCC_OscConfig+0x4c4>)
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	d1f0      	bne.n	8000ebc <HAL_RCC_OscConfig+0x498>
 8000eda:	e01e      	b.n	8000f1a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	69db      	ldr	r3, [r3, #28]
 8000ee0:	2b01      	cmp	r3, #1
 8000ee2:	d107      	bne.n	8000ef4 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8000ee4:	2301      	movs	r3, #1
 8000ee6:	e019      	b.n	8000f1c <HAL_RCC_OscConfig+0x4f8>
 8000ee8:	40021000 	.word	0x40021000
 8000eec:	40007000 	.word	0x40007000
 8000ef0:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8000ef4:	4b0b      	ldr	r3, [pc, #44]	@ (8000f24 <HAL_RCC_OscConfig+0x500>)
 8000ef6:	685b      	ldr	r3, [r3, #4]
 8000ef8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000efa:	68fb      	ldr	r3, [r7, #12]
 8000efc:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	6a1b      	ldr	r3, [r3, #32]
 8000f04:	429a      	cmp	r2, r3
 8000f06:	d106      	bne.n	8000f16 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8000f08:	68fb      	ldr	r3, [r7, #12]
 8000f0a:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000f12:	429a      	cmp	r2, r3
 8000f14:	d001      	beq.n	8000f1a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8000f16:	2301      	movs	r3, #1
 8000f18:	e000      	b.n	8000f1c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8000f1a:	2300      	movs	r3, #0
}
 8000f1c:	4618      	mov	r0, r3
 8000f1e:	3718      	adds	r7, #24
 8000f20:	46bd      	mov	sp, r7
 8000f22:	bd80      	pop	{r7, pc}
 8000f24:	40021000 	.word	0x40021000

08000f28 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b084      	sub	sp, #16
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	6078      	str	r0, [r7, #4]
 8000f30:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	d101      	bne.n	8000f3c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8000f38:	2301      	movs	r3, #1
 8000f3a:	e0d0      	b.n	80010de <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8000f3c:	4b6a      	ldr	r3, [pc, #424]	@ (80010e8 <HAL_RCC_ClockConfig+0x1c0>)
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	f003 0307 	and.w	r3, r3, #7
 8000f44:	683a      	ldr	r2, [r7, #0]
 8000f46:	429a      	cmp	r2, r3
 8000f48:	d910      	bls.n	8000f6c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000f4a:	4b67      	ldr	r3, [pc, #412]	@ (80010e8 <HAL_RCC_ClockConfig+0x1c0>)
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	f023 0207 	bic.w	r2, r3, #7
 8000f52:	4965      	ldr	r1, [pc, #404]	@ (80010e8 <HAL_RCC_ClockConfig+0x1c0>)
 8000f54:	683b      	ldr	r3, [r7, #0]
 8000f56:	4313      	orrs	r3, r2
 8000f58:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8000f5a:	4b63      	ldr	r3, [pc, #396]	@ (80010e8 <HAL_RCC_ClockConfig+0x1c0>)
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	f003 0307 	and.w	r3, r3, #7
 8000f62:	683a      	ldr	r2, [r7, #0]
 8000f64:	429a      	cmp	r2, r3
 8000f66:	d001      	beq.n	8000f6c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8000f68:	2301      	movs	r3, #1
 8000f6a:	e0b8      	b.n	80010de <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	f003 0302 	and.w	r3, r3, #2
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d020      	beq.n	8000fba <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	f003 0304 	and.w	r3, r3, #4
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	d005      	beq.n	8000f90 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8000f84:	4b59      	ldr	r3, [pc, #356]	@ (80010ec <HAL_RCC_ClockConfig+0x1c4>)
 8000f86:	685b      	ldr	r3, [r3, #4]
 8000f88:	4a58      	ldr	r2, [pc, #352]	@ (80010ec <HAL_RCC_ClockConfig+0x1c4>)
 8000f8a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8000f8e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	f003 0308 	and.w	r3, r3, #8
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d005      	beq.n	8000fa8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8000f9c:	4b53      	ldr	r3, [pc, #332]	@ (80010ec <HAL_RCC_ClockConfig+0x1c4>)
 8000f9e:	685b      	ldr	r3, [r3, #4]
 8000fa0:	4a52      	ldr	r2, [pc, #328]	@ (80010ec <HAL_RCC_ClockConfig+0x1c4>)
 8000fa2:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8000fa6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000fa8:	4b50      	ldr	r3, [pc, #320]	@ (80010ec <HAL_RCC_ClockConfig+0x1c4>)
 8000faa:	685b      	ldr	r3, [r3, #4]
 8000fac:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	689b      	ldr	r3, [r3, #8]
 8000fb4:	494d      	ldr	r1, [pc, #308]	@ (80010ec <HAL_RCC_ClockConfig+0x1c4>)
 8000fb6:	4313      	orrs	r3, r2
 8000fb8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	f003 0301 	and.w	r3, r3, #1
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d040      	beq.n	8001048 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	685b      	ldr	r3, [r3, #4]
 8000fca:	2b01      	cmp	r3, #1
 8000fcc:	d107      	bne.n	8000fde <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000fce:	4b47      	ldr	r3, [pc, #284]	@ (80010ec <HAL_RCC_ClockConfig+0x1c4>)
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d115      	bne.n	8001006 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8000fda:	2301      	movs	r3, #1
 8000fdc:	e07f      	b.n	80010de <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	685b      	ldr	r3, [r3, #4]
 8000fe2:	2b02      	cmp	r3, #2
 8000fe4:	d107      	bne.n	8000ff6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000fe6:	4b41      	ldr	r3, [pc, #260]	@ (80010ec <HAL_RCC_ClockConfig+0x1c4>)
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d109      	bne.n	8001006 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8000ff2:	2301      	movs	r3, #1
 8000ff4:	e073      	b.n	80010de <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000ff6:	4b3d      	ldr	r3, [pc, #244]	@ (80010ec <HAL_RCC_ClockConfig+0x1c4>)
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	f003 0302 	and.w	r3, r3, #2
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d101      	bne.n	8001006 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001002:	2301      	movs	r3, #1
 8001004:	e06b      	b.n	80010de <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001006:	4b39      	ldr	r3, [pc, #228]	@ (80010ec <HAL_RCC_ClockConfig+0x1c4>)
 8001008:	685b      	ldr	r3, [r3, #4]
 800100a:	f023 0203 	bic.w	r2, r3, #3
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	685b      	ldr	r3, [r3, #4]
 8001012:	4936      	ldr	r1, [pc, #216]	@ (80010ec <HAL_RCC_ClockConfig+0x1c4>)
 8001014:	4313      	orrs	r3, r2
 8001016:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001018:	f7ff fa60 	bl	80004dc <HAL_GetTick>
 800101c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800101e:	e00a      	b.n	8001036 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001020:	f7ff fa5c 	bl	80004dc <HAL_GetTick>
 8001024:	4602      	mov	r2, r0
 8001026:	68fb      	ldr	r3, [r7, #12]
 8001028:	1ad3      	subs	r3, r2, r3
 800102a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800102e:	4293      	cmp	r3, r2
 8001030:	d901      	bls.n	8001036 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001032:	2303      	movs	r3, #3
 8001034:	e053      	b.n	80010de <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001036:	4b2d      	ldr	r3, [pc, #180]	@ (80010ec <HAL_RCC_ClockConfig+0x1c4>)
 8001038:	685b      	ldr	r3, [r3, #4]
 800103a:	f003 020c 	and.w	r2, r3, #12
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	685b      	ldr	r3, [r3, #4]
 8001042:	009b      	lsls	r3, r3, #2
 8001044:	429a      	cmp	r2, r3
 8001046:	d1eb      	bne.n	8001020 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001048:	4b27      	ldr	r3, [pc, #156]	@ (80010e8 <HAL_RCC_ClockConfig+0x1c0>)
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	f003 0307 	and.w	r3, r3, #7
 8001050:	683a      	ldr	r2, [r7, #0]
 8001052:	429a      	cmp	r2, r3
 8001054:	d210      	bcs.n	8001078 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001056:	4b24      	ldr	r3, [pc, #144]	@ (80010e8 <HAL_RCC_ClockConfig+0x1c0>)
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	f023 0207 	bic.w	r2, r3, #7
 800105e:	4922      	ldr	r1, [pc, #136]	@ (80010e8 <HAL_RCC_ClockConfig+0x1c0>)
 8001060:	683b      	ldr	r3, [r7, #0]
 8001062:	4313      	orrs	r3, r2
 8001064:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001066:	4b20      	ldr	r3, [pc, #128]	@ (80010e8 <HAL_RCC_ClockConfig+0x1c0>)
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	f003 0307 	and.w	r3, r3, #7
 800106e:	683a      	ldr	r2, [r7, #0]
 8001070:	429a      	cmp	r2, r3
 8001072:	d001      	beq.n	8001078 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001074:	2301      	movs	r3, #1
 8001076:	e032      	b.n	80010de <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	f003 0304 	and.w	r3, r3, #4
 8001080:	2b00      	cmp	r3, #0
 8001082:	d008      	beq.n	8001096 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001084:	4b19      	ldr	r3, [pc, #100]	@ (80010ec <HAL_RCC_ClockConfig+0x1c4>)
 8001086:	685b      	ldr	r3, [r3, #4]
 8001088:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	68db      	ldr	r3, [r3, #12]
 8001090:	4916      	ldr	r1, [pc, #88]	@ (80010ec <HAL_RCC_ClockConfig+0x1c4>)
 8001092:	4313      	orrs	r3, r2
 8001094:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	f003 0308 	and.w	r3, r3, #8
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d009      	beq.n	80010b6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80010a2:	4b12      	ldr	r3, [pc, #72]	@ (80010ec <HAL_RCC_ClockConfig+0x1c4>)
 80010a4:	685b      	ldr	r3, [r3, #4]
 80010a6:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	691b      	ldr	r3, [r3, #16]
 80010ae:	00db      	lsls	r3, r3, #3
 80010b0:	490e      	ldr	r1, [pc, #56]	@ (80010ec <HAL_RCC_ClockConfig+0x1c4>)
 80010b2:	4313      	orrs	r3, r2
 80010b4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80010b6:	f000 f821 	bl	80010fc <HAL_RCC_GetSysClockFreq>
 80010ba:	4602      	mov	r2, r0
 80010bc:	4b0b      	ldr	r3, [pc, #44]	@ (80010ec <HAL_RCC_ClockConfig+0x1c4>)
 80010be:	685b      	ldr	r3, [r3, #4]
 80010c0:	091b      	lsrs	r3, r3, #4
 80010c2:	f003 030f 	and.w	r3, r3, #15
 80010c6:	490a      	ldr	r1, [pc, #40]	@ (80010f0 <HAL_RCC_ClockConfig+0x1c8>)
 80010c8:	5ccb      	ldrb	r3, [r1, r3]
 80010ca:	fa22 f303 	lsr.w	r3, r2, r3
 80010ce:	4a09      	ldr	r2, [pc, #36]	@ (80010f4 <HAL_RCC_ClockConfig+0x1cc>)
 80010d0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80010d2:	4b09      	ldr	r3, [pc, #36]	@ (80010f8 <HAL_RCC_ClockConfig+0x1d0>)
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	4618      	mov	r0, r3
 80010d8:	f7ff f9be 	bl	8000458 <HAL_InitTick>

  return HAL_OK;
 80010dc:	2300      	movs	r3, #0
}
 80010de:	4618      	mov	r0, r3
 80010e0:	3710      	adds	r7, #16
 80010e2:	46bd      	mov	sp, r7
 80010e4:	bd80      	pop	{r7, pc}
 80010e6:	bf00      	nop
 80010e8:	40022000 	.word	0x40022000
 80010ec:	40021000 	.word	0x40021000
 80010f0:	08003d6c 	.word	0x08003d6c
 80010f4:	20000000 	.word	0x20000000
 80010f8:	20000004 	.word	0x20000004

080010fc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80010fc:	b480      	push	{r7}
 80010fe:	b087      	sub	sp, #28
 8001100:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001102:	2300      	movs	r3, #0
 8001104:	60fb      	str	r3, [r7, #12]
 8001106:	2300      	movs	r3, #0
 8001108:	60bb      	str	r3, [r7, #8]
 800110a:	2300      	movs	r3, #0
 800110c:	617b      	str	r3, [r7, #20]
 800110e:	2300      	movs	r3, #0
 8001110:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001112:	2300      	movs	r3, #0
 8001114:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001116:	4b1e      	ldr	r3, [pc, #120]	@ (8001190 <HAL_RCC_GetSysClockFreq+0x94>)
 8001118:	685b      	ldr	r3, [r3, #4]
 800111a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800111c:	68fb      	ldr	r3, [r7, #12]
 800111e:	f003 030c 	and.w	r3, r3, #12
 8001122:	2b04      	cmp	r3, #4
 8001124:	d002      	beq.n	800112c <HAL_RCC_GetSysClockFreq+0x30>
 8001126:	2b08      	cmp	r3, #8
 8001128:	d003      	beq.n	8001132 <HAL_RCC_GetSysClockFreq+0x36>
 800112a:	e027      	b.n	800117c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800112c:	4b19      	ldr	r3, [pc, #100]	@ (8001194 <HAL_RCC_GetSysClockFreq+0x98>)
 800112e:	613b      	str	r3, [r7, #16]
      break;
 8001130:	e027      	b.n	8001182 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001132:	68fb      	ldr	r3, [r7, #12]
 8001134:	0c9b      	lsrs	r3, r3, #18
 8001136:	f003 030f 	and.w	r3, r3, #15
 800113a:	4a17      	ldr	r2, [pc, #92]	@ (8001198 <HAL_RCC_GetSysClockFreq+0x9c>)
 800113c:	5cd3      	ldrb	r3, [r2, r3]
 800113e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001140:	68fb      	ldr	r3, [r7, #12]
 8001142:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001146:	2b00      	cmp	r3, #0
 8001148:	d010      	beq.n	800116c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800114a:	4b11      	ldr	r3, [pc, #68]	@ (8001190 <HAL_RCC_GetSysClockFreq+0x94>)
 800114c:	685b      	ldr	r3, [r3, #4]
 800114e:	0c5b      	lsrs	r3, r3, #17
 8001150:	f003 0301 	and.w	r3, r3, #1
 8001154:	4a11      	ldr	r2, [pc, #68]	@ (800119c <HAL_RCC_GetSysClockFreq+0xa0>)
 8001156:	5cd3      	ldrb	r3, [r2, r3]
 8001158:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	4a0d      	ldr	r2, [pc, #52]	@ (8001194 <HAL_RCC_GetSysClockFreq+0x98>)
 800115e:	fb03 f202 	mul.w	r2, r3, r2
 8001162:	68bb      	ldr	r3, [r7, #8]
 8001164:	fbb2 f3f3 	udiv	r3, r2, r3
 8001168:	617b      	str	r3, [r7, #20]
 800116a:	e004      	b.n	8001176 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	4a0c      	ldr	r2, [pc, #48]	@ (80011a0 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001170:	fb02 f303 	mul.w	r3, r2, r3
 8001174:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001176:	697b      	ldr	r3, [r7, #20]
 8001178:	613b      	str	r3, [r7, #16]
      break;
 800117a:	e002      	b.n	8001182 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800117c:	4b05      	ldr	r3, [pc, #20]	@ (8001194 <HAL_RCC_GetSysClockFreq+0x98>)
 800117e:	613b      	str	r3, [r7, #16]
      break;
 8001180:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001182:	693b      	ldr	r3, [r7, #16]
}
 8001184:	4618      	mov	r0, r3
 8001186:	371c      	adds	r7, #28
 8001188:	46bd      	mov	sp, r7
 800118a:	bc80      	pop	{r7}
 800118c:	4770      	bx	lr
 800118e:	bf00      	nop
 8001190:	40021000 	.word	0x40021000
 8001194:	007a1200 	.word	0x007a1200
 8001198:	08003d7c 	.word	0x08003d7c
 800119c:	08003d8c 	.word	0x08003d8c
 80011a0:	003d0900 	.word	0x003d0900

080011a4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80011a4:	b480      	push	{r7}
 80011a6:	b085      	sub	sp, #20
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80011ac:	4b0a      	ldr	r3, [pc, #40]	@ (80011d8 <RCC_Delay+0x34>)
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	4a0a      	ldr	r2, [pc, #40]	@ (80011dc <RCC_Delay+0x38>)
 80011b2:	fba2 2303 	umull	r2, r3, r2, r3
 80011b6:	0a5b      	lsrs	r3, r3, #9
 80011b8:	687a      	ldr	r2, [r7, #4]
 80011ba:	fb02 f303 	mul.w	r3, r2, r3
 80011be:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80011c0:	bf00      	nop
  }
  while (Delay --);
 80011c2:	68fb      	ldr	r3, [r7, #12]
 80011c4:	1e5a      	subs	r2, r3, #1
 80011c6:	60fa      	str	r2, [r7, #12]
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d1f9      	bne.n	80011c0 <RCC_Delay+0x1c>
}
 80011cc:	bf00      	nop
 80011ce:	bf00      	nop
 80011d0:	3714      	adds	r7, #20
 80011d2:	46bd      	mov	sp, r7
 80011d4:	bc80      	pop	{r7}
 80011d6:	4770      	bx	lr
 80011d8:	20000000 	.word	0x20000000
 80011dc:	10624dd3 	.word	0x10624dd3

080011e0 <__NVIC_SetPriority>:
{
 80011e0:	b480      	push	{r7}
 80011e2:	b083      	sub	sp, #12
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	4603      	mov	r3, r0
 80011e8:	6039      	str	r1, [r7, #0]
 80011ea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	db0a      	blt.n	800120a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011f4:	683b      	ldr	r3, [r7, #0]
 80011f6:	b2da      	uxtb	r2, r3
 80011f8:	490c      	ldr	r1, [pc, #48]	@ (800122c <__NVIC_SetPriority+0x4c>)
 80011fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011fe:	0112      	lsls	r2, r2, #4
 8001200:	b2d2      	uxtb	r2, r2
 8001202:	440b      	add	r3, r1
 8001204:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8001208:	e00a      	b.n	8001220 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800120a:	683b      	ldr	r3, [r7, #0]
 800120c:	b2da      	uxtb	r2, r3
 800120e:	4908      	ldr	r1, [pc, #32]	@ (8001230 <__NVIC_SetPriority+0x50>)
 8001210:	79fb      	ldrb	r3, [r7, #7]
 8001212:	f003 030f 	and.w	r3, r3, #15
 8001216:	3b04      	subs	r3, #4
 8001218:	0112      	lsls	r2, r2, #4
 800121a:	b2d2      	uxtb	r2, r2
 800121c:	440b      	add	r3, r1
 800121e:	761a      	strb	r2, [r3, #24]
}
 8001220:	bf00      	nop
 8001222:	370c      	adds	r7, #12
 8001224:	46bd      	mov	sp, r7
 8001226:	bc80      	pop	{r7}
 8001228:	4770      	bx	lr
 800122a:	bf00      	nop
 800122c:	e000e100 	.word	0xe000e100
 8001230:	e000ed00 	.word	0xe000ed00

08001234 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8001234:	b580      	push	{r7, lr}
 8001236:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8001238:	2100      	movs	r1, #0
 800123a:	f06f 0004 	mvn.w	r0, #4
 800123e:	f7ff ffcf 	bl	80011e0 <__NVIC_SetPriority>
#endif
}
 8001242:	bf00      	nop
 8001244:	bd80      	pop	{r7, pc}
	...

08001248 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8001248:	b480      	push	{r7}
 800124a:	b083      	sub	sp, #12
 800124c:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800124e:	f3ef 8305 	mrs	r3, IPSR
 8001252:	603b      	str	r3, [r7, #0]
  return(result);
 8001254:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8001256:	2b00      	cmp	r3, #0
 8001258:	d003      	beq.n	8001262 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800125a:	f06f 0305 	mvn.w	r3, #5
 800125e:	607b      	str	r3, [r7, #4]
 8001260:	e00c      	b.n	800127c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8001262:	4b09      	ldr	r3, [pc, #36]	@ (8001288 <osKernelInitialize+0x40>)
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	2b00      	cmp	r3, #0
 8001268:	d105      	bne.n	8001276 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800126a:	4b07      	ldr	r3, [pc, #28]	@ (8001288 <osKernelInitialize+0x40>)
 800126c:	2201      	movs	r2, #1
 800126e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8001270:	2300      	movs	r3, #0
 8001272:	607b      	str	r3, [r7, #4]
 8001274:	e002      	b.n	800127c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8001276:	f04f 33ff 	mov.w	r3, #4294967295
 800127a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800127c:	687b      	ldr	r3, [r7, #4]
}
 800127e:	4618      	mov	r0, r3
 8001280:	370c      	adds	r7, #12
 8001282:	46bd      	mov	sp, r7
 8001284:	bc80      	pop	{r7}
 8001286:	4770      	bx	lr
 8001288:	20000038 	.word	0x20000038

0800128c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800128c:	b580      	push	{r7, lr}
 800128e:	b082      	sub	sp, #8
 8001290:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001292:	f3ef 8305 	mrs	r3, IPSR
 8001296:	603b      	str	r3, [r7, #0]
  return(result);
 8001298:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800129a:	2b00      	cmp	r3, #0
 800129c:	d003      	beq.n	80012a6 <osKernelStart+0x1a>
    stat = osErrorISR;
 800129e:	f06f 0305 	mvn.w	r3, #5
 80012a2:	607b      	str	r3, [r7, #4]
 80012a4:	e010      	b.n	80012c8 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80012a6:	4b0b      	ldr	r3, [pc, #44]	@ (80012d4 <osKernelStart+0x48>)
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	2b01      	cmp	r3, #1
 80012ac:	d109      	bne.n	80012c2 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80012ae:	f7ff ffc1 	bl	8001234 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80012b2:	4b08      	ldr	r3, [pc, #32]	@ (80012d4 <osKernelStart+0x48>)
 80012b4:	2202      	movs	r2, #2
 80012b6:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80012b8:	f001 f872 	bl	80023a0 <vTaskStartScheduler>
      stat = osOK;
 80012bc:	2300      	movs	r3, #0
 80012be:	607b      	str	r3, [r7, #4]
 80012c0:	e002      	b.n	80012c8 <osKernelStart+0x3c>
    } else {
      stat = osError;
 80012c2:	f04f 33ff 	mov.w	r3, #4294967295
 80012c6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80012c8:	687b      	ldr	r3, [r7, #4]
}
 80012ca:	4618      	mov	r0, r3
 80012cc:	3708      	adds	r7, #8
 80012ce:	46bd      	mov	sp, r7
 80012d0:	bd80      	pop	{r7, pc}
 80012d2:	bf00      	nop
 80012d4:	20000038 	.word	0x20000038

080012d8 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80012d8:	b580      	push	{r7, lr}
 80012da:	b08e      	sub	sp, #56	@ 0x38
 80012dc:	af04      	add	r7, sp, #16
 80012de:	60f8      	str	r0, [r7, #12]
 80012e0:	60b9      	str	r1, [r7, #8]
 80012e2:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80012e4:	2300      	movs	r3, #0
 80012e6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80012e8:	f3ef 8305 	mrs	r3, IPSR
 80012ec:	617b      	str	r3, [r7, #20]
  return(result);
 80012ee:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d17e      	bne.n	80013f2 <osThreadNew+0x11a>
 80012f4:	68fb      	ldr	r3, [r7, #12]
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d07b      	beq.n	80013f2 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80012fa:	2380      	movs	r3, #128	@ 0x80
 80012fc:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80012fe:	2318      	movs	r3, #24
 8001300:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8001302:	2300      	movs	r3, #0
 8001304:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8001306:	f04f 33ff 	mov.w	r3, #4294967295
 800130a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	2b00      	cmp	r3, #0
 8001310:	d045      	beq.n	800139e <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	2b00      	cmp	r3, #0
 8001318:	d002      	beq.n	8001320 <osThreadNew+0x48>
        name = attr->name;
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	699b      	ldr	r3, [r3, #24]
 8001324:	2b00      	cmp	r3, #0
 8001326:	d002      	beq.n	800132e <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	699b      	ldr	r3, [r3, #24]
 800132c:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800132e:	69fb      	ldr	r3, [r7, #28]
 8001330:	2b00      	cmp	r3, #0
 8001332:	d008      	beq.n	8001346 <osThreadNew+0x6e>
 8001334:	69fb      	ldr	r3, [r7, #28]
 8001336:	2b38      	cmp	r3, #56	@ 0x38
 8001338:	d805      	bhi.n	8001346 <osThreadNew+0x6e>
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	685b      	ldr	r3, [r3, #4]
 800133e:	f003 0301 	and.w	r3, r3, #1
 8001342:	2b00      	cmp	r3, #0
 8001344:	d001      	beq.n	800134a <osThreadNew+0x72>
        return (NULL);
 8001346:	2300      	movs	r3, #0
 8001348:	e054      	b.n	80013f4 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	695b      	ldr	r3, [r3, #20]
 800134e:	2b00      	cmp	r3, #0
 8001350:	d003      	beq.n	800135a <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	695b      	ldr	r3, [r3, #20]
 8001356:	089b      	lsrs	r3, r3, #2
 8001358:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	689b      	ldr	r3, [r3, #8]
 800135e:	2b00      	cmp	r3, #0
 8001360:	d00e      	beq.n	8001380 <osThreadNew+0xa8>
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	68db      	ldr	r3, [r3, #12]
 8001366:	2b5b      	cmp	r3, #91	@ 0x5b
 8001368:	d90a      	bls.n	8001380 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800136e:	2b00      	cmp	r3, #0
 8001370:	d006      	beq.n	8001380 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	695b      	ldr	r3, [r3, #20]
 8001376:	2b00      	cmp	r3, #0
 8001378:	d002      	beq.n	8001380 <osThreadNew+0xa8>
        mem = 1;
 800137a:	2301      	movs	r3, #1
 800137c:	61bb      	str	r3, [r7, #24]
 800137e:	e010      	b.n	80013a2 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	689b      	ldr	r3, [r3, #8]
 8001384:	2b00      	cmp	r3, #0
 8001386:	d10c      	bne.n	80013a2 <osThreadNew+0xca>
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	68db      	ldr	r3, [r3, #12]
 800138c:	2b00      	cmp	r3, #0
 800138e:	d108      	bne.n	80013a2 <osThreadNew+0xca>
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	691b      	ldr	r3, [r3, #16]
 8001394:	2b00      	cmp	r3, #0
 8001396:	d104      	bne.n	80013a2 <osThreadNew+0xca>
          mem = 0;
 8001398:	2300      	movs	r3, #0
 800139a:	61bb      	str	r3, [r7, #24]
 800139c:	e001      	b.n	80013a2 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800139e:	2300      	movs	r3, #0
 80013a0:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80013a2:	69bb      	ldr	r3, [r7, #24]
 80013a4:	2b01      	cmp	r3, #1
 80013a6:	d110      	bne.n	80013ca <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80013ac:	687a      	ldr	r2, [r7, #4]
 80013ae:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80013b0:	9202      	str	r2, [sp, #8]
 80013b2:	9301      	str	r3, [sp, #4]
 80013b4:	69fb      	ldr	r3, [r7, #28]
 80013b6:	9300      	str	r3, [sp, #0]
 80013b8:	68bb      	ldr	r3, [r7, #8]
 80013ba:	6a3a      	ldr	r2, [r7, #32]
 80013bc:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80013be:	68f8      	ldr	r0, [r7, #12]
 80013c0:	f000 fe12 	bl	8001fe8 <xTaskCreateStatic>
 80013c4:	4603      	mov	r3, r0
 80013c6:	613b      	str	r3, [r7, #16]
 80013c8:	e013      	b.n	80013f2 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80013ca:	69bb      	ldr	r3, [r7, #24]
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d110      	bne.n	80013f2 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80013d0:	6a3b      	ldr	r3, [r7, #32]
 80013d2:	b29a      	uxth	r2, r3
 80013d4:	f107 0310 	add.w	r3, r7, #16
 80013d8:	9301      	str	r3, [sp, #4]
 80013da:	69fb      	ldr	r3, [r7, #28]
 80013dc:	9300      	str	r3, [sp, #0]
 80013de:	68bb      	ldr	r3, [r7, #8]
 80013e0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80013e2:	68f8      	ldr	r0, [r7, #12]
 80013e4:	f000 fe60 	bl	80020a8 <xTaskCreate>
 80013e8:	4603      	mov	r3, r0
 80013ea:	2b01      	cmp	r3, #1
 80013ec:	d001      	beq.n	80013f2 <osThreadNew+0x11a>
            hTask = NULL;
 80013ee:	2300      	movs	r3, #0
 80013f0:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80013f2:	693b      	ldr	r3, [r7, #16]
}
 80013f4:	4618      	mov	r0, r3
 80013f6:	3728      	adds	r7, #40	@ 0x28
 80013f8:	46bd      	mov	sp, r7
 80013fa:	bd80      	pop	{r7, pc}

080013fc <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b084      	sub	sp, #16
 8001400:	af00      	add	r7, sp, #0
 8001402:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001404:	f3ef 8305 	mrs	r3, IPSR
 8001408:	60bb      	str	r3, [r7, #8]
  return(result);
 800140a:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800140c:	2b00      	cmp	r3, #0
 800140e:	d003      	beq.n	8001418 <osDelay+0x1c>
    stat = osErrorISR;
 8001410:	f06f 0305 	mvn.w	r3, #5
 8001414:	60fb      	str	r3, [r7, #12]
 8001416:	e007      	b.n	8001428 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8001418:	2300      	movs	r3, #0
 800141a:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	2b00      	cmp	r3, #0
 8001420:	d002      	beq.n	8001428 <osDelay+0x2c>
      vTaskDelay(ticks);
 8001422:	6878      	ldr	r0, [r7, #4]
 8001424:	f000 ff86 	bl	8002334 <vTaskDelay>
    }
  }

  return (stat);
 8001428:	68fb      	ldr	r3, [r7, #12]
}
 800142a:	4618      	mov	r0, r3
 800142c:	3710      	adds	r7, #16
 800142e:	46bd      	mov	sp, r7
 8001430:	bd80      	pop	{r7, pc}
	...

08001434 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8001434:	b480      	push	{r7}
 8001436:	b085      	sub	sp, #20
 8001438:	af00      	add	r7, sp, #0
 800143a:	60f8      	str	r0, [r7, #12]
 800143c:	60b9      	str	r1, [r7, #8]
 800143e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8001440:	68fb      	ldr	r3, [r7, #12]
 8001442:	4a06      	ldr	r2, [pc, #24]	@ (800145c <vApplicationGetIdleTaskMemory+0x28>)
 8001444:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8001446:	68bb      	ldr	r3, [r7, #8]
 8001448:	4a05      	ldr	r2, [pc, #20]	@ (8001460 <vApplicationGetIdleTaskMemory+0x2c>)
 800144a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	2280      	movs	r2, #128	@ 0x80
 8001450:	601a      	str	r2, [r3, #0]
}
 8001452:	bf00      	nop
 8001454:	3714      	adds	r7, #20
 8001456:	46bd      	mov	sp, r7
 8001458:	bc80      	pop	{r7}
 800145a:	4770      	bx	lr
 800145c:	2000003c 	.word	0x2000003c
 8001460:	20000098 	.word	0x20000098

08001464 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8001464:	b480      	push	{r7}
 8001466:	b085      	sub	sp, #20
 8001468:	af00      	add	r7, sp, #0
 800146a:	60f8      	str	r0, [r7, #12]
 800146c:	60b9      	str	r1, [r7, #8]
 800146e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8001470:	68fb      	ldr	r3, [r7, #12]
 8001472:	4a07      	ldr	r2, [pc, #28]	@ (8001490 <vApplicationGetTimerTaskMemory+0x2c>)
 8001474:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8001476:	68bb      	ldr	r3, [r7, #8]
 8001478:	4a06      	ldr	r2, [pc, #24]	@ (8001494 <vApplicationGetTimerTaskMemory+0x30>)
 800147a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001482:	601a      	str	r2, [r3, #0]
}
 8001484:	bf00      	nop
 8001486:	3714      	adds	r7, #20
 8001488:	46bd      	mov	sp, r7
 800148a:	bc80      	pop	{r7}
 800148c:	4770      	bx	lr
 800148e:	bf00      	nop
 8001490:	20000298 	.word	0x20000298
 8001494:	200002f4 	.word	0x200002f4

08001498 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8001498:	b480      	push	{r7}
 800149a:	b083      	sub	sp, #12
 800149c:	af00      	add	r7, sp, #0
 800149e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	f103 0208 	add.w	r2, r3, #8
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	f04f 32ff 	mov.w	r2, #4294967295
 80014b0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	f103 0208 	add.w	r2, r3, #8
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	f103 0208 	add.w	r2, r3, #8
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	2200      	movs	r2, #0
 80014ca:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80014cc:	bf00      	nop
 80014ce:	370c      	adds	r7, #12
 80014d0:	46bd      	mov	sp, r7
 80014d2:	bc80      	pop	{r7}
 80014d4:	4770      	bx	lr

080014d6 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80014d6:	b480      	push	{r7}
 80014d8:	b083      	sub	sp, #12
 80014da:	af00      	add	r7, sp, #0
 80014dc:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	2200      	movs	r2, #0
 80014e2:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80014e4:	bf00      	nop
 80014e6:	370c      	adds	r7, #12
 80014e8:	46bd      	mov	sp, r7
 80014ea:	bc80      	pop	{r7}
 80014ec:	4770      	bx	lr

080014ee <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80014ee:	b480      	push	{r7}
 80014f0:	b085      	sub	sp, #20
 80014f2:	af00      	add	r7, sp, #0
 80014f4:	6078      	str	r0, [r7, #4]
 80014f6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	685b      	ldr	r3, [r3, #4]
 80014fc:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80014fe:	683b      	ldr	r3, [r7, #0]
 8001500:	68fa      	ldr	r2, [r7, #12]
 8001502:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8001504:	68fb      	ldr	r3, [r7, #12]
 8001506:	689a      	ldr	r2, [r3, #8]
 8001508:	683b      	ldr	r3, [r7, #0]
 800150a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800150c:	68fb      	ldr	r3, [r7, #12]
 800150e:	689b      	ldr	r3, [r3, #8]
 8001510:	683a      	ldr	r2, [r7, #0]
 8001512:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8001514:	68fb      	ldr	r3, [r7, #12]
 8001516:	683a      	ldr	r2, [r7, #0]
 8001518:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800151a:	683b      	ldr	r3, [r7, #0]
 800151c:	687a      	ldr	r2, [r7, #4]
 800151e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	1c5a      	adds	r2, r3, #1
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	601a      	str	r2, [r3, #0]
}
 800152a:	bf00      	nop
 800152c:	3714      	adds	r7, #20
 800152e:	46bd      	mov	sp, r7
 8001530:	bc80      	pop	{r7}
 8001532:	4770      	bx	lr

08001534 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8001534:	b480      	push	{r7}
 8001536:	b085      	sub	sp, #20
 8001538:	af00      	add	r7, sp, #0
 800153a:	6078      	str	r0, [r7, #4]
 800153c:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800153e:	683b      	ldr	r3, [r7, #0]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8001544:	68bb      	ldr	r3, [r7, #8]
 8001546:	f1b3 3fff 	cmp.w	r3, #4294967295
 800154a:	d103      	bne.n	8001554 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	691b      	ldr	r3, [r3, #16]
 8001550:	60fb      	str	r3, [r7, #12]
 8001552:	e00c      	b.n	800156e <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	3308      	adds	r3, #8
 8001558:	60fb      	str	r3, [r7, #12]
 800155a:	e002      	b.n	8001562 <vListInsert+0x2e>
 800155c:	68fb      	ldr	r3, [r7, #12]
 800155e:	685b      	ldr	r3, [r3, #4]
 8001560:	60fb      	str	r3, [r7, #12]
 8001562:	68fb      	ldr	r3, [r7, #12]
 8001564:	685b      	ldr	r3, [r3, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	68ba      	ldr	r2, [r7, #8]
 800156a:	429a      	cmp	r2, r3
 800156c:	d2f6      	bcs.n	800155c <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800156e:	68fb      	ldr	r3, [r7, #12]
 8001570:	685a      	ldr	r2, [r3, #4]
 8001572:	683b      	ldr	r3, [r7, #0]
 8001574:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8001576:	683b      	ldr	r3, [r7, #0]
 8001578:	685b      	ldr	r3, [r3, #4]
 800157a:	683a      	ldr	r2, [r7, #0]
 800157c:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800157e:	683b      	ldr	r3, [r7, #0]
 8001580:	68fa      	ldr	r2, [r7, #12]
 8001582:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	683a      	ldr	r2, [r7, #0]
 8001588:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800158a:	683b      	ldr	r3, [r7, #0]
 800158c:	687a      	ldr	r2, [r7, #4]
 800158e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	1c5a      	adds	r2, r3, #1
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	601a      	str	r2, [r3, #0]
}
 800159a:	bf00      	nop
 800159c:	3714      	adds	r7, #20
 800159e:	46bd      	mov	sp, r7
 80015a0:	bc80      	pop	{r7}
 80015a2:	4770      	bx	lr

080015a4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80015a4:	b480      	push	{r7}
 80015a6:	b085      	sub	sp, #20
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	691b      	ldr	r3, [r3, #16]
 80015b0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	685b      	ldr	r3, [r3, #4]
 80015b6:	687a      	ldr	r2, [r7, #4]
 80015b8:	6892      	ldr	r2, [r2, #8]
 80015ba:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	689b      	ldr	r3, [r3, #8]
 80015c0:	687a      	ldr	r2, [r7, #4]
 80015c2:	6852      	ldr	r2, [r2, #4]
 80015c4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80015c6:	68fb      	ldr	r3, [r7, #12]
 80015c8:	685b      	ldr	r3, [r3, #4]
 80015ca:	687a      	ldr	r2, [r7, #4]
 80015cc:	429a      	cmp	r2, r3
 80015ce:	d103      	bne.n	80015d8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	689a      	ldr	r2, [r3, #8]
 80015d4:	68fb      	ldr	r3, [r7, #12]
 80015d6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	2200      	movs	r2, #0
 80015dc:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80015de:	68fb      	ldr	r3, [r7, #12]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	1e5a      	subs	r2, r3, #1
 80015e4:	68fb      	ldr	r3, [r7, #12]
 80015e6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	681b      	ldr	r3, [r3, #0]
}
 80015ec:	4618      	mov	r0, r3
 80015ee:	3714      	adds	r7, #20
 80015f0:	46bd      	mov	sp, r7
 80015f2:	bc80      	pop	{r7}
 80015f4:	4770      	bx	lr
	...

080015f8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	b084      	sub	sp, #16
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	6078      	str	r0, [r7, #4]
 8001600:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8001606:	68fb      	ldr	r3, [r7, #12]
 8001608:	2b00      	cmp	r3, #0
 800160a:	d10b      	bne.n	8001624 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800160c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001610:	f383 8811 	msr	BASEPRI, r3
 8001614:	f3bf 8f6f 	isb	sy
 8001618:	f3bf 8f4f 	dsb	sy
 800161c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800161e:	bf00      	nop
 8001620:	bf00      	nop
 8001622:	e7fd      	b.n	8001620 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8001624:	f002 f832 	bl	800368c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	681a      	ldr	r2, [r3, #0]
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001630:	68f9      	ldr	r1, [r7, #12]
 8001632:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8001634:	fb01 f303 	mul.w	r3, r1, r3
 8001638:	441a      	add	r2, r3
 800163a:	68fb      	ldr	r3, [r7, #12]
 800163c:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800163e:	68fb      	ldr	r3, [r7, #12]
 8001640:	2200      	movs	r2, #0
 8001642:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	681a      	ldr	r2, [r3, #0]
 8001648:	68fb      	ldr	r3, [r7, #12]
 800164a:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800164c:	68fb      	ldr	r3, [r7, #12]
 800164e:	681a      	ldr	r2, [r3, #0]
 8001650:	68fb      	ldr	r3, [r7, #12]
 8001652:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001654:	3b01      	subs	r3, #1
 8001656:	68f9      	ldr	r1, [r7, #12]
 8001658:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800165a:	fb01 f303 	mul.w	r3, r1, r3
 800165e:	441a      	add	r2, r3
 8001660:	68fb      	ldr	r3, [r7, #12]
 8001662:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8001664:	68fb      	ldr	r3, [r7, #12]
 8001666:	22ff      	movs	r2, #255	@ 0xff
 8001668:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	22ff      	movs	r2, #255	@ 0xff
 8001670:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8001674:	683b      	ldr	r3, [r7, #0]
 8001676:	2b00      	cmp	r3, #0
 8001678:	d114      	bne.n	80016a4 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800167a:	68fb      	ldr	r3, [r7, #12]
 800167c:	691b      	ldr	r3, [r3, #16]
 800167e:	2b00      	cmp	r3, #0
 8001680:	d01a      	beq.n	80016b8 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001682:	68fb      	ldr	r3, [r7, #12]
 8001684:	3310      	adds	r3, #16
 8001686:	4618      	mov	r0, r3
 8001688:	f001 f916 	bl	80028b8 <xTaskRemoveFromEventList>
 800168c:	4603      	mov	r3, r0
 800168e:	2b00      	cmp	r3, #0
 8001690:	d012      	beq.n	80016b8 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8001692:	4b0d      	ldr	r3, [pc, #52]	@ (80016c8 <xQueueGenericReset+0xd0>)
 8001694:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001698:	601a      	str	r2, [r3, #0]
 800169a:	f3bf 8f4f 	dsb	sy
 800169e:	f3bf 8f6f 	isb	sy
 80016a2:	e009      	b.n	80016b8 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80016a4:	68fb      	ldr	r3, [r7, #12]
 80016a6:	3310      	adds	r3, #16
 80016a8:	4618      	mov	r0, r3
 80016aa:	f7ff fef5 	bl	8001498 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80016ae:	68fb      	ldr	r3, [r7, #12]
 80016b0:	3324      	adds	r3, #36	@ 0x24
 80016b2:	4618      	mov	r0, r3
 80016b4:	f7ff fef0 	bl	8001498 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80016b8:	f002 f818 	bl	80036ec <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80016bc:	2301      	movs	r3, #1
}
 80016be:	4618      	mov	r0, r3
 80016c0:	3710      	adds	r7, #16
 80016c2:	46bd      	mov	sp, r7
 80016c4:	bd80      	pop	{r7, pc}
 80016c6:	bf00      	nop
 80016c8:	e000ed04 	.word	0xe000ed04

080016cc <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	b08e      	sub	sp, #56	@ 0x38
 80016d0:	af02      	add	r7, sp, #8
 80016d2:	60f8      	str	r0, [r7, #12]
 80016d4:	60b9      	str	r1, [r7, #8]
 80016d6:	607a      	str	r2, [r7, #4]
 80016d8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80016da:	68fb      	ldr	r3, [r7, #12]
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d10b      	bne.n	80016f8 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 80016e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80016e4:	f383 8811 	msr	BASEPRI, r3
 80016e8:	f3bf 8f6f 	isb	sy
 80016ec:	f3bf 8f4f 	dsb	sy
 80016f0:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80016f2:	bf00      	nop
 80016f4:	bf00      	nop
 80016f6:	e7fd      	b.n	80016f4 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80016f8:	683b      	ldr	r3, [r7, #0]
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d10b      	bne.n	8001716 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 80016fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001702:	f383 8811 	msr	BASEPRI, r3
 8001706:	f3bf 8f6f 	isb	sy
 800170a:	f3bf 8f4f 	dsb	sy
 800170e:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8001710:	bf00      	nop
 8001712:	bf00      	nop
 8001714:	e7fd      	b.n	8001712 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	2b00      	cmp	r3, #0
 800171a:	d002      	beq.n	8001722 <xQueueGenericCreateStatic+0x56>
 800171c:	68bb      	ldr	r3, [r7, #8]
 800171e:	2b00      	cmp	r3, #0
 8001720:	d001      	beq.n	8001726 <xQueueGenericCreateStatic+0x5a>
 8001722:	2301      	movs	r3, #1
 8001724:	e000      	b.n	8001728 <xQueueGenericCreateStatic+0x5c>
 8001726:	2300      	movs	r3, #0
 8001728:	2b00      	cmp	r3, #0
 800172a:	d10b      	bne.n	8001744 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 800172c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001730:	f383 8811 	msr	BASEPRI, r3
 8001734:	f3bf 8f6f 	isb	sy
 8001738:	f3bf 8f4f 	dsb	sy
 800173c:	623b      	str	r3, [r7, #32]
}
 800173e:	bf00      	nop
 8001740:	bf00      	nop
 8001742:	e7fd      	b.n	8001740 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	2b00      	cmp	r3, #0
 8001748:	d102      	bne.n	8001750 <xQueueGenericCreateStatic+0x84>
 800174a:	68bb      	ldr	r3, [r7, #8]
 800174c:	2b00      	cmp	r3, #0
 800174e:	d101      	bne.n	8001754 <xQueueGenericCreateStatic+0x88>
 8001750:	2301      	movs	r3, #1
 8001752:	e000      	b.n	8001756 <xQueueGenericCreateStatic+0x8a>
 8001754:	2300      	movs	r3, #0
 8001756:	2b00      	cmp	r3, #0
 8001758:	d10b      	bne.n	8001772 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800175a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800175e:	f383 8811 	msr	BASEPRI, r3
 8001762:	f3bf 8f6f 	isb	sy
 8001766:	f3bf 8f4f 	dsb	sy
 800176a:	61fb      	str	r3, [r7, #28]
}
 800176c:	bf00      	nop
 800176e:	bf00      	nop
 8001770:	e7fd      	b.n	800176e <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8001772:	2350      	movs	r3, #80	@ 0x50
 8001774:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8001776:	697b      	ldr	r3, [r7, #20]
 8001778:	2b50      	cmp	r3, #80	@ 0x50
 800177a:	d00b      	beq.n	8001794 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 800177c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001780:	f383 8811 	msr	BASEPRI, r3
 8001784:	f3bf 8f6f 	isb	sy
 8001788:	f3bf 8f4f 	dsb	sy
 800178c:	61bb      	str	r3, [r7, #24]
}
 800178e:	bf00      	nop
 8001790:	bf00      	nop
 8001792:	e7fd      	b.n	8001790 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8001794:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8001796:	683b      	ldr	r3, [r7, #0]
 8001798:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800179a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800179c:	2b00      	cmp	r3, #0
 800179e:	d00d      	beq.n	80017bc <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80017a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80017a2:	2201      	movs	r2, #1
 80017a4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80017a8:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 80017ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80017ae:	9300      	str	r3, [sp, #0]
 80017b0:	4613      	mov	r3, r2
 80017b2:	687a      	ldr	r2, [r7, #4]
 80017b4:	68b9      	ldr	r1, [r7, #8]
 80017b6:	68f8      	ldr	r0, [r7, #12]
 80017b8:	f000 f805 	bl	80017c6 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80017bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 80017be:	4618      	mov	r0, r3
 80017c0:	3730      	adds	r7, #48	@ 0x30
 80017c2:	46bd      	mov	sp, r7
 80017c4:	bd80      	pop	{r7, pc}

080017c6 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80017c6:	b580      	push	{r7, lr}
 80017c8:	b084      	sub	sp, #16
 80017ca:	af00      	add	r7, sp, #0
 80017cc:	60f8      	str	r0, [r7, #12]
 80017ce:	60b9      	str	r1, [r7, #8]
 80017d0:	607a      	str	r2, [r7, #4]
 80017d2:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80017d4:	68bb      	ldr	r3, [r7, #8]
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d103      	bne.n	80017e2 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80017da:	69bb      	ldr	r3, [r7, #24]
 80017dc:	69ba      	ldr	r2, [r7, #24]
 80017de:	601a      	str	r2, [r3, #0]
 80017e0:	e002      	b.n	80017e8 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80017e2:	69bb      	ldr	r3, [r7, #24]
 80017e4:	687a      	ldr	r2, [r7, #4]
 80017e6:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80017e8:	69bb      	ldr	r3, [r7, #24]
 80017ea:	68fa      	ldr	r2, [r7, #12]
 80017ec:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80017ee:	69bb      	ldr	r3, [r7, #24]
 80017f0:	68ba      	ldr	r2, [r7, #8]
 80017f2:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80017f4:	2101      	movs	r1, #1
 80017f6:	69b8      	ldr	r0, [r7, #24]
 80017f8:	f7ff fefe 	bl	80015f8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80017fc:	69bb      	ldr	r3, [r7, #24]
 80017fe:	78fa      	ldrb	r2, [r7, #3]
 8001800:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8001804:	bf00      	nop
 8001806:	3710      	adds	r7, #16
 8001808:	46bd      	mov	sp, r7
 800180a:	bd80      	pop	{r7, pc}

0800180c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800180c:	b580      	push	{r7, lr}
 800180e:	b08e      	sub	sp, #56	@ 0x38
 8001810:	af00      	add	r7, sp, #0
 8001812:	60f8      	str	r0, [r7, #12]
 8001814:	60b9      	str	r1, [r7, #8]
 8001816:	607a      	str	r2, [r7, #4]
 8001818:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800181a:	2300      	movs	r3, #0
 800181c:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800181e:	68fb      	ldr	r3, [r7, #12]
 8001820:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8001822:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001824:	2b00      	cmp	r3, #0
 8001826:	d10b      	bne.n	8001840 <xQueueGenericSend+0x34>
	__asm volatile
 8001828:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800182c:	f383 8811 	msr	BASEPRI, r3
 8001830:	f3bf 8f6f 	isb	sy
 8001834:	f3bf 8f4f 	dsb	sy
 8001838:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800183a:	bf00      	nop
 800183c:	bf00      	nop
 800183e:	e7fd      	b.n	800183c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8001840:	68bb      	ldr	r3, [r7, #8]
 8001842:	2b00      	cmp	r3, #0
 8001844:	d103      	bne.n	800184e <xQueueGenericSend+0x42>
 8001846:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001848:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800184a:	2b00      	cmp	r3, #0
 800184c:	d101      	bne.n	8001852 <xQueueGenericSend+0x46>
 800184e:	2301      	movs	r3, #1
 8001850:	e000      	b.n	8001854 <xQueueGenericSend+0x48>
 8001852:	2300      	movs	r3, #0
 8001854:	2b00      	cmp	r3, #0
 8001856:	d10b      	bne.n	8001870 <xQueueGenericSend+0x64>
	__asm volatile
 8001858:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800185c:	f383 8811 	msr	BASEPRI, r3
 8001860:	f3bf 8f6f 	isb	sy
 8001864:	f3bf 8f4f 	dsb	sy
 8001868:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800186a:	bf00      	nop
 800186c:	bf00      	nop
 800186e:	e7fd      	b.n	800186c <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8001870:	683b      	ldr	r3, [r7, #0]
 8001872:	2b02      	cmp	r3, #2
 8001874:	d103      	bne.n	800187e <xQueueGenericSend+0x72>
 8001876:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001878:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800187a:	2b01      	cmp	r3, #1
 800187c:	d101      	bne.n	8001882 <xQueueGenericSend+0x76>
 800187e:	2301      	movs	r3, #1
 8001880:	e000      	b.n	8001884 <xQueueGenericSend+0x78>
 8001882:	2300      	movs	r3, #0
 8001884:	2b00      	cmp	r3, #0
 8001886:	d10b      	bne.n	80018a0 <xQueueGenericSend+0x94>
	__asm volatile
 8001888:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800188c:	f383 8811 	msr	BASEPRI, r3
 8001890:	f3bf 8f6f 	isb	sy
 8001894:	f3bf 8f4f 	dsb	sy
 8001898:	623b      	str	r3, [r7, #32]
}
 800189a:	bf00      	nop
 800189c:	bf00      	nop
 800189e:	e7fd      	b.n	800189c <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80018a0:	f001 f9ca 	bl	8002c38 <xTaskGetSchedulerState>
 80018a4:	4603      	mov	r3, r0
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d102      	bne.n	80018b0 <xQueueGenericSend+0xa4>
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d101      	bne.n	80018b4 <xQueueGenericSend+0xa8>
 80018b0:	2301      	movs	r3, #1
 80018b2:	e000      	b.n	80018b6 <xQueueGenericSend+0xaa>
 80018b4:	2300      	movs	r3, #0
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d10b      	bne.n	80018d2 <xQueueGenericSend+0xc6>
	__asm volatile
 80018ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80018be:	f383 8811 	msr	BASEPRI, r3
 80018c2:	f3bf 8f6f 	isb	sy
 80018c6:	f3bf 8f4f 	dsb	sy
 80018ca:	61fb      	str	r3, [r7, #28]
}
 80018cc:	bf00      	nop
 80018ce:	bf00      	nop
 80018d0:	e7fd      	b.n	80018ce <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80018d2:	f001 fedb 	bl	800368c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80018d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80018d8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80018da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80018dc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80018de:	429a      	cmp	r2, r3
 80018e0:	d302      	bcc.n	80018e8 <xQueueGenericSend+0xdc>
 80018e2:	683b      	ldr	r3, [r7, #0]
 80018e4:	2b02      	cmp	r3, #2
 80018e6:	d129      	bne.n	800193c <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80018e8:	683a      	ldr	r2, [r7, #0]
 80018ea:	68b9      	ldr	r1, [r7, #8]
 80018ec:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80018ee:	f000 fa0f 	bl	8001d10 <prvCopyDataToQueue>
 80018f2:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80018f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80018f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d010      	beq.n	800191e <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80018fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80018fe:	3324      	adds	r3, #36	@ 0x24
 8001900:	4618      	mov	r0, r3
 8001902:	f000 ffd9 	bl	80028b8 <xTaskRemoveFromEventList>
 8001906:	4603      	mov	r3, r0
 8001908:	2b00      	cmp	r3, #0
 800190a:	d013      	beq.n	8001934 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800190c:	4b3f      	ldr	r3, [pc, #252]	@ (8001a0c <xQueueGenericSend+0x200>)
 800190e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001912:	601a      	str	r2, [r3, #0]
 8001914:	f3bf 8f4f 	dsb	sy
 8001918:	f3bf 8f6f 	isb	sy
 800191c:	e00a      	b.n	8001934 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800191e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001920:	2b00      	cmp	r3, #0
 8001922:	d007      	beq.n	8001934 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8001924:	4b39      	ldr	r3, [pc, #228]	@ (8001a0c <xQueueGenericSend+0x200>)
 8001926:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800192a:	601a      	str	r2, [r3, #0]
 800192c:	f3bf 8f4f 	dsb	sy
 8001930:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8001934:	f001 feda 	bl	80036ec <vPortExitCritical>
				return pdPASS;
 8001938:	2301      	movs	r3, #1
 800193a:	e063      	b.n	8001a04 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	2b00      	cmp	r3, #0
 8001940:	d103      	bne.n	800194a <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8001942:	f001 fed3 	bl	80036ec <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8001946:	2300      	movs	r3, #0
 8001948:	e05c      	b.n	8001a04 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800194a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800194c:	2b00      	cmp	r3, #0
 800194e:	d106      	bne.n	800195e <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8001950:	f107 0314 	add.w	r3, r7, #20
 8001954:	4618      	mov	r0, r3
 8001956:	f001 f813 	bl	8002980 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800195a:	2301      	movs	r3, #1
 800195c:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800195e:	f001 fec5 	bl	80036ec <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8001962:	f000 fd85 	bl	8002470 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8001966:	f001 fe91 	bl	800368c <vPortEnterCritical>
 800196a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800196c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8001970:	b25b      	sxtb	r3, r3
 8001972:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001976:	d103      	bne.n	8001980 <xQueueGenericSend+0x174>
 8001978:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800197a:	2200      	movs	r2, #0
 800197c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001980:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001982:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8001986:	b25b      	sxtb	r3, r3
 8001988:	f1b3 3fff 	cmp.w	r3, #4294967295
 800198c:	d103      	bne.n	8001996 <xQueueGenericSend+0x18a>
 800198e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001990:	2200      	movs	r2, #0
 8001992:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8001996:	f001 fea9 	bl	80036ec <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800199a:	1d3a      	adds	r2, r7, #4
 800199c:	f107 0314 	add.w	r3, r7, #20
 80019a0:	4611      	mov	r1, r2
 80019a2:	4618      	mov	r0, r3
 80019a4:	f001 f802 	bl	80029ac <xTaskCheckForTimeOut>
 80019a8:	4603      	mov	r3, r0
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d124      	bne.n	80019f8 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80019ae:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80019b0:	f000 faa6 	bl	8001f00 <prvIsQueueFull>
 80019b4:	4603      	mov	r3, r0
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d018      	beq.n	80019ec <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80019ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80019bc:	3310      	adds	r3, #16
 80019be:	687a      	ldr	r2, [r7, #4]
 80019c0:	4611      	mov	r1, r2
 80019c2:	4618      	mov	r0, r3
 80019c4:	f000 ff26 	bl	8002814 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80019c8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80019ca:	f000 fa31 	bl	8001e30 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80019ce:	f000 fd5d 	bl	800248c <xTaskResumeAll>
 80019d2:	4603      	mov	r3, r0
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	f47f af7c 	bne.w	80018d2 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 80019da:	4b0c      	ldr	r3, [pc, #48]	@ (8001a0c <xQueueGenericSend+0x200>)
 80019dc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80019e0:	601a      	str	r2, [r3, #0]
 80019e2:	f3bf 8f4f 	dsb	sy
 80019e6:	f3bf 8f6f 	isb	sy
 80019ea:	e772      	b.n	80018d2 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80019ec:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80019ee:	f000 fa1f 	bl	8001e30 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80019f2:	f000 fd4b 	bl	800248c <xTaskResumeAll>
 80019f6:	e76c      	b.n	80018d2 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80019f8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80019fa:	f000 fa19 	bl	8001e30 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80019fe:	f000 fd45 	bl	800248c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8001a02:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8001a04:	4618      	mov	r0, r3
 8001a06:	3738      	adds	r7, #56	@ 0x38
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	bd80      	pop	{r7, pc}
 8001a0c:	e000ed04 	.word	0xe000ed04

08001a10 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	b090      	sub	sp, #64	@ 0x40
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	60f8      	str	r0, [r7, #12]
 8001a18:	60b9      	str	r1, [r7, #8]
 8001a1a:	607a      	str	r2, [r7, #4]
 8001a1c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8001a22:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d10b      	bne.n	8001a40 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8001a28:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001a2c:	f383 8811 	msr	BASEPRI, r3
 8001a30:	f3bf 8f6f 	isb	sy
 8001a34:	f3bf 8f4f 	dsb	sy
 8001a38:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8001a3a:	bf00      	nop
 8001a3c:	bf00      	nop
 8001a3e:	e7fd      	b.n	8001a3c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8001a40:	68bb      	ldr	r3, [r7, #8]
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d103      	bne.n	8001a4e <xQueueGenericSendFromISR+0x3e>
 8001a46:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001a48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d101      	bne.n	8001a52 <xQueueGenericSendFromISR+0x42>
 8001a4e:	2301      	movs	r3, #1
 8001a50:	e000      	b.n	8001a54 <xQueueGenericSendFromISR+0x44>
 8001a52:	2300      	movs	r3, #0
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d10b      	bne.n	8001a70 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8001a58:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001a5c:	f383 8811 	msr	BASEPRI, r3
 8001a60:	f3bf 8f6f 	isb	sy
 8001a64:	f3bf 8f4f 	dsb	sy
 8001a68:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8001a6a:	bf00      	nop
 8001a6c:	bf00      	nop
 8001a6e:	e7fd      	b.n	8001a6c <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8001a70:	683b      	ldr	r3, [r7, #0]
 8001a72:	2b02      	cmp	r3, #2
 8001a74:	d103      	bne.n	8001a7e <xQueueGenericSendFromISR+0x6e>
 8001a76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001a78:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001a7a:	2b01      	cmp	r3, #1
 8001a7c:	d101      	bne.n	8001a82 <xQueueGenericSendFromISR+0x72>
 8001a7e:	2301      	movs	r3, #1
 8001a80:	e000      	b.n	8001a84 <xQueueGenericSendFromISR+0x74>
 8001a82:	2300      	movs	r3, #0
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d10b      	bne.n	8001aa0 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8001a88:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001a8c:	f383 8811 	msr	BASEPRI, r3
 8001a90:	f3bf 8f6f 	isb	sy
 8001a94:	f3bf 8f4f 	dsb	sy
 8001a98:	623b      	str	r3, [r7, #32]
}
 8001a9a:	bf00      	nop
 8001a9c:	bf00      	nop
 8001a9e:	e7fd      	b.n	8001a9c <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8001aa0:	f001 feb6 	bl	8003810 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8001aa4:	f3ef 8211 	mrs	r2, BASEPRI
 8001aa8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001aac:	f383 8811 	msr	BASEPRI, r3
 8001ab0:	f3bf 8f6f 	isb	sy
 8001ab4:	f3bf 8f4f 	dsb	sy
 8001ab8:	61fa      	str	r2, [r7, #28]
 8001aba:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8001abc:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8001abe:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8001ac0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001ac2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001ac4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001ac6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001ac8:	429a      	cmp	r2, r3
 8001aca:	d302      	bcc.n	8001ad2 <xQueueGenericSendFromISR+0xc2>
 8001acc:	683b      	ldr	r3, [r7, #0]
 8001ace:	2b02      	cmp	r3, #2
 8001ad0:	d12f      	bne.n	8001b32 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8001ad2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001ad4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8001ad8:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8001adc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001ade:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001ae0:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8001ae2:	683a      	ldr	r2, [r7, #0]
 8001ae4:	68b9      	ldr	r1, [r7, #8]
 8001ae6:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8001ae8:	f000 f912 	bl	8001d10 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8001aec:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8001af0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001af4:	d112      	bne.n	8001b1c <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001af6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001af8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d016      	beq.n	8001b2c <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001afe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001b00:	3324      	adds	r3, #36	@ 0x24
 8001b02:	4618      	mov	r0, r3
 8001b04:	f000 fed8 	bl	80028b8 <xTaskRemoveFromEventList>
 8001b08:	4603      	mov	r3, r0
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d00e      	beq.n	8001b2c <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d00b      	beq.n	8001b2c <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	2201      	movs	r2, #1
 8001b18:	601a      	str	r2, [r3, #0]
 8001b1a:	e007      	b.n	8001b2c <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8001b1c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001b20:	3301      	adds	r3, #1
 8001b22:	b2db      	uxtb	r3, r3
 8001b24:	b25a      	sxtb	r2, r3
 8001b26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001b28:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8001b2c:	2301      	movs	r3, #1
 8001b2e:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8001b30:	e001      	b.n	8001b36 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8001b32:	2300      	movs	r3, #0
 8001b34:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001b36:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001b38:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8001b3a:	697b      	ldr	r3, [r7, #20]
 8001b3c:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8001b40:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8001b42:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8001b44:	4618      	mov	r0, r3
 8001b46:	3740      	adds	r7, #64	@ 0x40
 8001b48:	46bd      	mov	sp, r7
 8001b4a:	bd80      	pop	{r7, pc}

08001b4c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	b08c      	sub	sp, #48	@ 0x30
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	60f8      	str	r0, [r7, #12]
 8001b54:	60b9      	str	r1, [r7, #8]
 8001b56:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8001b58:	2300      	movs	r3, #0
 8001b5a:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8001b60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d10b      	bne.n	8001b7e <xQueueReceive+0x32>
	__asm volatile
 8001b66:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001b6a:	f383 8811 	msr	BASEPRI, r3
 8001b6e:	f3bf 8f6f 	isb	sy
 8001b72:	f3bf 8f4f 	dsb	sy
 8001b76:	623b      	str	r3, [r7, #32]
}
 8001b78:	bf00      	nop
 8001b7a:	bf00      	nop
 8001b7c:	e7fd      	b.n	8001b7a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8001b7e:	68bb      	ldr	r3, [r7, #8]
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d103      	bne.n	8001b8c <xQueueReceive+0x40>
 8001b84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001b86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d101      	bne.n	8001b90 <xQueueReceive+0x44>
 8001b8c:	2301      	movs	r3, #1
 8001b8e:	e000      	b.n	8001b92 <xQueueReceive+0x46>
 8001b90:	2300      	movs	r3, #0
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d10b      	bne.n	8001bae <xQueueReceive+0x62>
	__asm volatile
 8001b96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001b9a:	f383 8811 	msr	BASEPRI, r3
 8001b9e:	f3bf 8f6f 	isb	sy
 8001ba2:	f3bf 8f4f 	dsb	sy
 8001ba6:	61fb      	str	r3, [r7, #28]
}
 8001ba8:	bf00      	nop
 8001baa:	bf00      	nop
 8001bac:	e7fd      	b.n	8001baa <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8001bae:	f001 f843 	bl	8002c38 <xTaskGetSchedulerState>
 8001bb2:	4603      	mov	r3, r0
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d102      	bne.n	8001bbe <xQueueReceive+0x72>
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d101      	bne.n	8001bc2 <xQueueReceive+0x76>
 8001bbe:	2301      	movs	r3, #1
 8001bc0:	e000      	b.n	8001bc4 <xQueueReceive+0x78>
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d10b      	bne.n	8001be0 <xQueueReceive+0x94>
	__asm volatile
 8001bc8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001bcc:	f383 8811 	msr	BASEPRI, r3
 8001bd0:	f3bf 8f6f 	isb	sy
 8001bd4:	f3bf 8f4f 	dsb	sy
 8001bd8:	61bb      	str	r3, [r7, #24]
}
 8001bda:	bf00      	nop
 8001bdc:	bf00      	nop
 8001bde:	e7fd      	b.n	8001bdc <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8001be0:	f001 fd54 	bl	800368c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8001be4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001be6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001be8:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8001bea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d01f      	beq.n	8001c30 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8001bf0:	68b9      	ldr	r1, [r7, #8]
 8001bf2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8001bf4:	f000 f8f6 	bl	8001de4 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8001bf8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bfa:	1e5a      	subs	r2, r3, #1
 8001bfc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001bfe:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001c00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001c02:	691b      	ldr	r3, [r3, #16]
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d00f      	beq.n	8001c28 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001c08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001c0a:	3310      	adds	r3, #16
 8001c0c:	4618      	mov	r0, r3
 8001c0e:	f000 fe53 	bl	80028b8 <xTaskRemoveFromEventList>
 8001c12:	4603      	mov	r3, r0
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d007      	beq.n	8001c28 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8001c18:	4b3c      	ldr	r3, [pc, #240]	@ (8001d0c <xQueueReceive+0x1c0>)
 8001c1a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001c1e:	601a      	str	r2, [r3, #0]
 8001c20:	f3bf 8f4f 	dsb	sy
 8001c24:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8001c28:	f001 fd60 	bl	80036ec <vPortExitCritical>
				return pdPASS;
 8001c2c:	2301      	movs	r3, #1
 8001c2e:	e069      	b.n	8001d04 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d103      	bne.n	8001c3e <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8001c36:	f001 fd59 	bl	80036ec <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	e062      	b.n	8001d04 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8001c3e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d106      	bne.n	8001c52 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8001c44:	f107 0310 	add.w	r3, r7, #16
 8001c48:	4618      	mov	r0, r3
 8001c4a:	f000 fe99 	bl	8002980 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8001c4e:	2301      	movs	r3, #1
 8001c50:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8001c52:	f001 fd4b 	bl	80036ec <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8001c56:	f000 fc0b 	bl	8002470 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8001c5a:	f001 fd17 	bl	800368c <vPortEnterCritical>
 8001c5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001c60:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8001c64:	b25b      	sxtb	r3, r3
 8001c66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c6a:	d103      	bne.n	8001c74 <xQueueReceive+0x128>
 8001c6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001c6e:	2200      	movs	r2, #0
 8001c70:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001c74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001c76:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8001c7a:	b25b      	sxtb	r3, r3
 8001c7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c80:	d103      	bne.n	8001c8a <xQueueReceive+0x13e>
 8001c82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001c84:	2200      	movs	r2, #0
 8001c86:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8001c8a:	f001 fd2f 	bl	80036ec <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8001c8e:	1d3a      	adds	r2, r7, #4
 8001c90:	f107 0310 	add.w	r3, r7, #16
 8001c94:	4611      	mov	r1, r2
 8001c96:	4618      	mov	r0, r3
 8001c98:	f000 fe88 	bl	80029ac <xTaskCheckForTimeOut>
 8001c9c:	4603      	mov	r3, r0
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d123      	bne.n	8001cea <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8001ca2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8001ca4:	f000 f916 	bl	8001ed4 <prvIsQueueEmpty>
 8001ca8:	4603      	mov	r3, r0
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d017      	beq.n	8001cde <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8001cae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001cb0:	3324      	adds	r3, #36	@ 0x24
 8001cb2:	687a      	ldr	r2, [r7, #4]
 8001cb4:	4611      	mov	r1, r2
 8001cb6:	4618      	mov	r0, r3
 8001cb8:	f000 fdac 	bl	8002814 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8001cbc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8001cbe:	f000 f8b7 	bl	8001e30 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8001cc2:	f000 fbe3 	bl	800248c <xTaskResumeAll>
 8001cc6:	4603      	mov	r3, r0
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d189      	bne.n	8001be0 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8001ccc:	4b0f      	ldr	r3, [pc, #60]	@ (8001d0c <xQueueReceive+0x1c0>)
 8001cce:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001cd2:	601a      	str	r2, [r3, #0]
 8001cd4:	f3bf 8f4f 	dsb	sy
 8001cd8:	f3bf 8f6f 	isb	sy
 8001cdc:	e780      	b.n	8001be0 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8001cde:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8001ce0:	f000 f8a6 	bl	8001e30 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8001ce4:	f000 fbd2 	bl	800248c <xTaskResumeAll>
 8001ce8:	e77a      	b.n	8001be0 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8001cea:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8001cec:	f000 f8a0 	bl	8001e30 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8001cf0:	f000 fbcc 	bl	800248c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8001cf4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8001cf6:	f000 f8ed 	bl	8001ed4 <prvIsQueueEmpty>
 8001cfa:	4603      	mov	r3, r0
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	f43f af6f 	beq.w	8001be0 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8001d02:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8001d04:	4618      	mov	r0, r3
 8001d06:	3730      	adds	r7, #48	@ 0x30
 8001d08:	46bd      	mov	sp, r7
 8001d0a:	bd80      	pop	{r7, pc}
 8001d0c:	e000ed04 	.word	0xe000ed04

08001d10 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8001d10:	b580      	push	{r7, lr}
 8001d12:	b086      	sub	sp, #24
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	60f8      	str	r0, [r7, #12]
 8001d18:	60b9      	str	r1, [r7, #8]
 8001d1a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8001d1c:	2300      	movs	r3, #0
 8001d1e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001d24:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d10d      	bne.n	8001d4a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d14d      	bne.n	8001dd2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	689b      	ldr	r3, [r3, #8]
 8001d3a:	4618      	mov	r0, r3
 8001d3c:	f000 ff9a 	bl	8002c74 <xTaskPriorityDisinherit>
 8001d40:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	2200      	movs	r2, #0
 8001d46:	609a      	str	r2, [r3, #8]
 8001d48:	e043      	b.n	8001dd2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d119      	bne.n	8001d84 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	6858      	ldr	r0, [r3, #4]
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d58:	461a      	mov	r2, r3
 8001d5a:	68b9      	ldr	r1, [r7, #8]
 8001d5c:	f001 ffb0 	bl	8003cc0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	685a      	ldr	r2, [r3, #4]
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d68:	441a      	add	r2, r3
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	685a      	ldr	r2, [r3, #4]
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	689b      	ldr	r3, [r3, #8]
 8001d76:	429a      	cmp	r2, r3
 8001d78:	d32b      	bcc.n	8001dd2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	681a      	ldr	r2, [r3, #0]
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	605a      	str	r2, [r3, #4]
 8001d82:	e026      	b.n	8001dd2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	68d8      	ldr	r0, [r3, #12]
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d8c:	461a      	mov	r2, r3
 8001d8e:	68b9      	ldr	r1, [r7, #8]
 8001d90:	f001 ff96 	bl	8003cc0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	68da      	ldr	r2, [r3, #12]
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d9c:	425b      	negs	r3, r3
 8001d9e:	441a      	add	r2, r3
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	68da      	ldr	r2, [r3, #12]
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	429a      	cmp	r2, r3
 8001dae:	d207      	bcs.n	8001dc0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	689a      	ldr	r2, [r3, #8]
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001db8:	425b      	negs	r3, r3
 8001dba:	441a      	add	r2, r3
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	2b02      	cmp	r3, #2
 8001dc4:	d105      	bne.n	8001dd2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8001dc6:	693b      	ldr	r3, [r7, #16]
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d002      	beq.n	8001dd2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8001dcc:	693b      	ldr	r3, [r7, #16]
 8001dce:	3b01      	subs	r3, #1
 8001dd0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8001dd2:	693b      	ldr	r3, [r7, #16]
 8001dd4:	1c5a      	adds	r2, r3, #1
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8001dda:	697b      	ldr	r3, [r7, #20]
}
 8001ddc:	4618      	mov	r0, r3
 8001dde:	3718      	adds	r7, #24
 8001de0:	46bd      	mov	sp, r7
 8001de2:	bd80      	pop	{r7, pc}

08001de4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8001de4:	b580      	push	{r7, lr}
 8001de6:	b082      	sub	sp, #8
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	6078      	str	r0, [r7, #4]
 8001dec:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d018      	beq.n	8001e28 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	68da      	ldr	r2, [r3, #12]
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dfe:	441a      	add	r2, r3
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	68da      	ldr	r2, [r3, #12]
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	689b      	ldr	r3, [r3, #8]
 8001e0c:	429a      	cmp	r2, r3
 8001e0e:	d303      	bcc.n	8001e18 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681a      	ldr	r2, [r3, #0]
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	68d9      	ldr	r1, [r3, #12]
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e20:	461a      	mov	r2, r3
 8001e22:	6838      	ldr	r0, [r7, #0]
 8001e24:	f001 ff4c 	bl	8003cc0 <memcpy>
	}
}
 8001e28:	bf00      	nop
 8001e2a:	3708      	adds	r7, #8
 8001e2c:	46bd      	mov	sp, r7
 8001e2e:	bd80      	pop	{r7, pc}

08001e30 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8001e30:	b580      	push	{r7, lr}
 8001e32:	b084      	sub	sp, #16
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8001e38:	f001 fc28 	bl	800368c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8001e42:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8001e44:	e011      	b.n	8001e6a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d012      	beq.n	8001e74 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	3324      	adds	r3, #36	@ 0x24
 8001e52:	4618      	mov	r0, r3
 8001e54:	f000 fd30 	bl	80028b8 <xTaskRemoveFromEventList>
 8001e58:	4603      	mov	r3, r0
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d001      	beq.n	8001e62 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8001e5e:	f000 fe09 	bl	8002a74 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8001e62:	7bfb      	ldrb	r3, [r7, #15]
 8001e64:	3b01      	subs	r3, #1
 8001e66:	b2db      	uxtb	r3, r3
 8001e68:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8001e6a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	dce9      	bgt.n	8001e46 <prvUnlockQueue+0x16>
 8001e72:	e000      	b.n	8001e76 <prvUnlockQueue+0x46>
					break;
 8001e74:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	22ff      	movs	r2, #255	@ 0xff
 8001e7a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8001e7e:	f001 fc35 	bl	80036ec <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8001e82:	f001 fc03 	bl	800368c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8001e8c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8001e8e:	e011      	b.n	8001eb4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	691b      	ldr	r3, [r3, #16]
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d012      	beq.n	8001ebe <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	3310      	adds	r3, #16
 8001e9c:	4618      	mov	r0, r3
 8001e9e:	f000 fd0b 	bl	80028b8 <xTaskRemoveFromEventList>
 8001ea2:	4603      	mov	r3, r0
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d001      	beq.n	8001eac <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8001ea8:	f000 fde4 	bl	8002a74 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8001eac:	7bbb      	ldrb	r3, [r7, #14]
 8001eae:	3b01      	subs	r3, #1
 8001eb0:	b2db      	uxtb	r3, r3
 8001eb2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8001eb4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	dce9      	bgt.n	8001e90 <prvUnlockQueue+0x60>
 8001ebc:	e000      	b.n	8001ec0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8001ebe:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	22ff      	movs	r2, #255	@ 0xff
 8001ec4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8001ec8:	f001 fc10 	bl	80036ec <vPortExitCritical>
}
 8001ecc:	bf00      	nop
 8001ece:	3710      	adds	r7, #16
 8001ed0:	46bd      	mov	sp, r7
 8001ed2:	bd80      	pop	{r7, pc}

08001ed4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	b084      	sub	sp, #16
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8001edc:	f001 fbd6 	bl	800368c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d102      	bne.n	8001eee <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8001ee8:	2301      	movs	r3, #1
 8001eea:	60fb      	str	r3, [r7, #12]
 8001eec:	e001      	b.n	8001ef2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8001eee:	2300      	movs	r3, #0
 8001ef0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8001ef2:	f001 fbfb 	bl	80036ec <vPortExitCritical>

	return xReturn;
 8001ef6:	68fb      	ldr	r3, [r7, #12]
}
 8001ef8:	4618      	mov	r0, r3
 8001efa:	3710      	adds	r7, #16
 8001efc:	46bd      	mov	sp, r7
 8001efe:	bd80      	pop	{r7, pc}

08001f00 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8001f00:	b580      	push	{r7, lr}
 8001f02:	b084      	sub	sp, #16
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8001f08:	f001 fbc0 	bl	800368c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001f14:	429a      	cmp	r2, r3
 8001f16:	d102      	bne.n	8001f1e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8001f18:	2301      	movs	r3, #1
 8001f1a:	60fb      	str	r3, [r7, #12]
 8001f1c:	e001      	b.n	8001f22 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8001f1e:	2300      	movs	r3, #0
 8001f20:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8001f22:	f001 fbe3 	bl	80036ec <vPortExitCritical>

	return xReturn;
 8001f26:	68fb      	ldr	r3, [r7, #12]
}
 8001f28:	4618      	mov	r0, r3
 8001f2a:	3710      	adds	r7, #16
 8001f2c:	46bd      	mov	sp, r7
 8001f2e:	bd80      	pop	{r7, pc}

08001f30 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8001f30:	b480      	push	{r7}
 8001f32:	b085      	sub	sp, #20
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	6078      	str	r0, [r7, #4]
 8001f38:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	60fb      	str	r3, [r7, #12]
 8001f3e:	e014      	b.n	8001f6a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8001f40:	4a0e      	ldr	r2, [pc, #56]	@ (8001f7c <vQueueAddToRegistry+0x4c>)
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d10b      	bne.n	8001f64 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8001f4c:	490b      	ldr	r1, [pc, #44]	@ (8001f7c <vQueueAddToRegistry+0x4c>)
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	683a      	ldr	r2, [r7, #0]
 8001f52:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8001f56:	4a09      	ldr	r2, [pc, #36]	@ (8001f7c <vQueueAddToRegistry+0x4c>)
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	00db      	lsls	r3, r3, #3
 8001f5c:	4413      	add	r3, r2
 8001f5e:	687a      	ldr	r2, [r7, #4]
 8001f60:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8001f62:	e006      	b.n	8001f72 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	3301      	adds	r3, #1
 8001f68:	60fb      	str	r3, [r7, #12]
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	2b07      	cmp	r3, #7
 8001f6e:	d9e7      	bls.n	8001f40 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8001f70:	bf00      	nop
 8001f72:	bf00      	nop
 8001f74:	3714      	adds	r7, #20
 8001f76:	46bd      	mov	sp, r7
 8001f78:	bc80      	pop	{r7}
 8001f7a:	4770      	bx	lr
 8001f7c:	200006f4 	.word	0x200006f4

08001f80 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8001f80:	b580      	push	{r7, lr}
 8001f82:	b086      	sub	sp, #24
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	60f8      	str	r0, [r7, #12]
 8001f88:	60b9      	str	r1, [r7, #8]
 8001f8a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8001f90:	f001 fb7c 	bl	800368c <vPortEnterCritical>
 8001f94:	697b      	ldr	r3, [r7, #20]
 8001f96:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8001f9a:	b25b      	sxtb	r3, r3
 8001f9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001fa0:	d103      	bne.n	8001faa <vQueueWaitForMessageRestricted+0x2a>
 8001fa2:	697b      	ldr	r3, [r7, #20]
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001faa:	697b      	ldr	r3, [r7, #20]
 8001fac:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8001fb0:	b25b      	sxtb	r3, r3
 8001fb2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001fb6:	d103      	bne.n	8001fc0 <vQueueWaitForMessageRestricted+0x40>
 8001fb8:	697b      	ldr	r3, [r7, #20]
 8001fba:	2200      	movs	r2, #0
 8001fbc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8001fc0:	f001 fb94 	bl	80036ec <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8001fc4:	697b      	ldr	r3, [r7, #20]
 8001fc6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d106      	bne.n	8001fda <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8001fcc:	697b      	ldr	r3, [r7, #20]
 8001fce:	3324      	adds	r3, #36	@ 0x24
 8001fd0:	687a      	ldr	r2, [r7, #4]
 8001fd2:	68b9      	ldr	r1, [r7, #8]
 8001fd4:	4618      	mov	r0, r3
 8001fd6:	f000 fc43 	bl	8002860 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8001fda:	6978      	ldr	r0, [r7, #20]
 8001fdc:	f7ff ff28 	bl	8001e30 <prvUnlockQueue>
	}
 8001fe0:	bf00      	nop
 8001fe2:	3718      	adds	r7, #24
 8001fe4:	46bd      	mov	sp, r7
 8001fe6:	bd80      	pop	{r7, pc}

08001fe8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	b08e      	sub	sp, #56	@ 0x38
 8001fec:	af04      	add	r7, sp, #16
 8001fee:	60f8      	str	r0, [r7, #12]
 8001ff0:	60b9      	str	r1, [r7, #8]
 8001ff2:	607a      	str	r2, [r7, #4]
 8001ff4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8001ff6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d10b      	bne.n	8002014 <xTaskCreateStatic+0x2c>
	__asm volatile
 8001ffc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002000:	f383 8811 	msr	BASEPRI, r3
 8002004:	f3bf 8f6f 	isb	sy
 8002008:	f3bf 8f4f 	dsb	sy
 800200c:	623b      	str	r3, [r7, #32]
}
 800200e:	bf00      	nop
 8002010:	bf00      	nop
 8002012:	e7fd      	b.n	8002010 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8002014:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002016:	2b00      	cmp	r3, #0
 8002018:	d10b      	bne.n	8002032 <xTaskCreateStatic+0x4a>
	__asm volatile
 800201a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800201e:	f383 8811 	msr	BASEPRI, r3
 8002022:	f3bf 8f6f 	isb	sy
 8002026:	f3bf 8f4f 	dsb	sy
 800202a:	61fb      	str	r3, [r7, #28]
}
 800202c:	bf00      	nop
 800202e:	bf00      	nop
 8002030:	e7fd      	b.n	800202e <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8002032:	235c      	movs	r3, #92	@ 0x5c
 8002034:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8002036:	693b      	ldr	r3, [r7, #16]
 8002038:	2b5c      	cmp	r3, #92	@ 0x5c
 800203a:	d00b      	beq.n	8002054 <xTaskCreateStatic+0x6c>
	__asm volatile
 800203c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002040:	f383 8811 	msr	BASEPRI, r3
 8002044:	f3bf 8f6f 	isb	sy
 8002048:	f3bf 8f4f 	dsb	sy
 800204c:	61bb      	str	r3, [r7, #24]
}
 800204e:	bf00      	nop
 8002050:	bf00      	nop
 8002052:	e7fd      	b.n	8002050 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8002054:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8002056:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002058:	2b00      	cmp	r3, #0
 800205a:	d01e      	beq.n	800209a <xTaskCreateStatic+0xb2>
 800205c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800205e:	2b00      	cmp	r3, #0
 8002060:	d01b      	beq.n	800209a <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002062:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002064:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8002066:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002068:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800206a:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800206c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800206e:	2202      	movs	r2, #2
 8002070:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8002074:	2300      	movs	r3, #0
 8002076:	9303      	str	r3, [sp, #12]
 8002078:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800207a:	9302      	str	r3, [sp, #8]
 800207c:	f107 0314 	add.w	r3, r7, #20
 8002080:	9301      	str	r3, [sp, #4]
 8002082:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002084:	9300      	str	r3, [sp, #0]
 8002086:	683b      	ldr	r3, [r7, #0]
 8002088:	687a      	ldr	r2, [r7, #4]
 800208a:	68b9      	ldr	r1, [r7, #8]
 800208c:	68f8      	ldr	r0, [r7, #12]
 800208e:	f000 f850 	bl	8002132 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002092:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8002094:	f000 f8de 	bl	8002254 <prvAddNewTaskToReadyList>
 8002098:	e001      	b.n	800209e <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800209a:	2300      	movs	r3, #0
 800209c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800209e:	697b      	ldr	r3, [r7, #20]
	}
 80020a0:	4618      	mov	r0, r3
 80020a2:	3728      	adds	r7, #40	@ 0x28
 80020a4:	46bd      	mov	sp, r7
 80020a6:	bd80      	pop	{r7, pc}

080020a8 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80020a8:	b580      	push	{r7, lr}
 80020aa:	b08c      	sub	sp, #48	@ 0x30
 80020ac:	af04      	add	r7, sp, #16
 80020ae:	60f8      	str	r0, [r7, #12]
 80020b0:	60b9      	str	r1, [r7, #8]
 80020b2:	603b      	str	r3, [r7, #0]
 80020b4:	4613      	mov	r3, r2
 80020b6:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80020b8:	88fb      	ldrh	r3, [r7, #6]
 80020ba:	009b      	lsls	r3, r3, #2
 80020bc:	4618      	mov	r0, r3
 80020be:	f001 fbe7 	bl	8003890 <pvPortMalloc>
 80020c2:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80020c4:	697b      	ldr	r3, [r7, #20]
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d00e      	beq.n	80020e8 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80020ca:	205c      	movs	r0, #92	@ 0x5c
 80020cc:	f001 fbe0 	bl	8003890 <pvPortMalloc>
 80020d0:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80020d2:	69fb      	ldr	r3, [r7, #28]
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d003      	beq.n	80020e0 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80020d8:	69fb      	ldr	r3, [r7, #28]
 80020da:	697a      	ldr	r2, [r7, #20]
 80020dc:	631a      	str	r2, [r3, #48]	@ 0x30
 80020de:	e005      	b.n	80020ec <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80020e0:	6978      	ldr	r0, [r7, #20]
 80020e2:	f001 fca3 	bl	8003a2c <vPortFree>
 80020e6:	e001      	b.n	80020ec <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80020e8:	2300      	movs	r3, #0
 80020ea:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80020ec:	69fb      	ldr	r3, [r7, #28]
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d017      	beq.n	8002122 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80020f2:	69fb      	ldr	r3, [r7, #28]
 80020f4:	2200      	movs	r2, #0
 80020f6:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80020fa:	88fa      	ldrh	r2, [r7, #6]
 80020fc:	2300      	movs	r3, #0
 80020fe:	9303      	str	r3, [sp, #12]
 8002100:	69fb      	ldr	r3, [r7, #28]
 8002102:	9302      	str	r3, [sp, #8]
 8002104:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002106:	9301      	str	r3, [sp, #4]
 8002108:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800210a:	9300      	str	r3, [sp, #0]
 800210c:	683b      	ldr	r3, [r7, #0]
 800210e:	68b9      	ldr	r1, [r7, #8]
 8002110:	68f8      	ldr	r0, [r7, #12]
 8002112:	f000 f80e 	bl	8002132 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002116:	69f8      	ldr	r0, [r7, #28]
 8002118:	f000 f89c 	bl	8002254 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800211c:	2301      	movs	r3, #1
 800211e:	61bb      	str	r3, [r7, #24]
 8002120:	e002      	b.n	8002128 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002122:	f04f 33ff 	mov.w	r3, #4294967295
 8002126:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8002128:	69bb      	ldr	r3, [r7, #24]
	}
 800212a:	4618      	mov	r0, r3
 800212c:	3720      	adds	r7, #32
 800212e:	46bd      	mov	sp, r7
 8002130:	bd80      	pop	{r7, pc}

08002132 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8002132:	b580      	push	{r7, lr}
 8002134:	b088      	sub	sp, #32
 8002136:	af00      	add	r7, sp, #0
 8002138:	60f8      	str	r0, [r7, #12]
 800213a:	60b9      	str	r1, [r7, #8]
 800213c:	607a      	str	r2, [r7, #4]
 800213e:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8002140:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002142:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	009b      	lsls	r3, r3, #2
 8002148:	461a      	mov	r2, r3
 800214a:	21a5      	movs	r1, #165	@ 0xa5
 800214c:	f001 fd8c 	bl	8003c68 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8002150:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002152:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800215a:	3b01      	subs	r3, #1
 800215c:	009b      	lsls	r3, r3, #2
 800215e:	4413      	add	r3, r2
 8002160:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8002162:	69bb      	ldr	r3, [r7, #24]
 8002164:	f023 0307 	bic.w	r3, r3, #7
 8002168:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800216a:	69bb      	ldr	r3, [r7, #24]
 800216c:	f003 0307 	and.w	r3, r3, #7
 8002170:	2b00      	cmp	r3, #0
 8002172:	d00b      	beq.n	800218c <prvInitialiseNewTask+0x5a>
	__asm volatile
 8002174:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002178:	f383 8811 	msr	BASEPRI, r3
 800217c:	f3bf 8f6f 	isb	sy
 8002180:	f3bf 8f4f 	dsb	sy
 8002184:	617b      	str	r3, [r7, #20]
}
 8002186:	bf00      	nop
 8002188:	bf00      	nop
 800218a:	e7fd      	b.n	8002188 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800218c:	68bb      	ldr	r3, [r7, #8]
 800218e:	2b00      	cmp	r3, #0
 8002190:	d01f      	beq.n	80021d2 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002192:	2300      	movs	r3, #0
 8002194:	61fb      	str	r3, [r7, #28]
 8002196:	e012      	b.n	80021be <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002198:	68ba      	ldr	r2, [r7, #8]
 800219a:	69fb      	ldr	r3, [r7, #28]
 800219c:	4413      	add	r3, r2
 800219e:	7819      	ldrb	r1, [r3, #0]
 80021a0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80021a2:	69fb      	ldr	r3, [r7, #28]
 80021a4:	4413      	add	r3, r2
 80021a6:	3334      	adds	r3, #52	@ 0x34
 80021a8:	460a      	mov	r2, r1
 80021aa:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80021ac:	68ba      	ldr	r2, [r7, #8]
 80021ae:	69fb      	ldr	r3, [r7, #28]
 80021b0:	4413      	add	r3, r2
 80021b2:	781b      	ldrb	r3, [r3, #0]
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d006      	beq.n	80021c6 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80021b8:	69fb      	ldr	r3, [r7, #28]
 80021ba:	3301      	adds	r3, #1
 80021bc:	61fb      	str	r3, [r7, #28]
 80021be:	69fb      	ldr	r3, [r7, #28]
 80021c0:	2b0f      	cmp	r3, #15
 80021c2:	d9e9      	bls.n	8002198 <prvInitialiseNewTask+0x66>
 80021c4:	e000      	b.n	80021c8 <prvInitialiseNewTask+0x96>
			{
				break;
 80021c6:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80021c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80021ca:	2200      	movs	r2, #0
 80021cc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80021d0:	e003      	b.n	80021da <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80021d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80021d4:	2200      	movs	r2, #0
 80021d6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80021da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80021dc:	2b37      	cmp	r3, #55	@ 0x37
 80021de:	d901      	bls.n	80021e4 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80021e0:	2337      	movs	r3, #55	@ 0x37
 80021e2:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80021e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80021e6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80021e8:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80021ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80021ec:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80021ee:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80021f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80021f2:	2200      	movs	r2, #0
 80021f4:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80021f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80021f8:	3304      	adds	r3, #4
 80021fa:	4618      	mov	r0, r3
 80021fc:	f7ff f96b 	bl	80014d6 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002200:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002202:	3318      	adds	r3, #24
 8002204:	4618      	mov	r0, r3
 8002206:	f7ff f966 	bl	80014d6 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800220a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800220c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800220e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002210:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002212:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8002216:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002218:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800221a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800221c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800221e:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8002220:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002222:	2200      	movs	r2, #0
 8002224:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8002226:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002228:	2200      	movs	r2, #0
 800222a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800222e:	683a      	ldr	r2, [r7, #0]
 8002230:	68f9      	ldr	r1, [r7, #12]
 8002232:	69b8      	ldr	r0, [r7, #24]
 8002234:	f001 f93a 	bl	80034ac <pxPortInitialiseStack>
 8002238:	4602      	mov	r2, r0
 800223a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800223c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800223e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002240:	2b00      	cmp	r3, #0
 8002242:	d002      	beq.n	800224a <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002244:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002246:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002248:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800224a:	bf00      	nop
 800224c:	3720      	adds	r7, #32
 800224e:	46bd      	mov	sp, r7
 8002250:	bd80      	pop	{r7, pc}
	...

08002254 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8002254:	b580      	push	{r7, lr}
 8002256:	b082      	sub	sp, #8
 8002258:	af00      	add	r7, sp, #0
 800225a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800225c:	f001 fa16 	bl	800368c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8002260:	4b2d      	ldr	r3, [pc, #180]	@ (8002318 <prvAddNewTaskToReadyList+0xc4>)
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	3301      	adds	r3, #1
 8002266:	4a2c      	ldr	r2, [pc, #176]	@ (8002318 <prvAddNewTaskToReadyList+0xc4>)
 8002268:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800226a:	4b2c      	ldr	r3, [pc, #176]	@ (800231c <prvAddNewTaskToReadyList+0xc8>)
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	2b00      	cmp	r3, #0
 8002270:	d109      	bne.n	8002286 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8002272:	4a2a      	ldr	r2, [pc, #168]	@ (800231c <prvAddNewTaskToReadyList+0xc8>)
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002278:	4b27      	ldr	r3, [pc, #156]	@ (8002318 <prvAddNewTaskToReadyList+0xc4>)
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	2b01      	cmp	r3, #1
 800227e:	d110      	bne.n	80022a2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8002280:	f000 fc1c 	bl	8002abc <prvInitialiseTaskLists>
 8002284:	e00d      	b.n	80022a2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8002286:	4b26      	ldr	r3, [pc, #152]	@ (8002320 <prvAddNewTaskToReadyList+0xcc>)
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	2b00      	cmp	r3, #0
 800228c:	d109      	bne.n	80022a2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800228e:	4b23      	ldr	r3, [pc, #140]	@ (800231c <prvAddNewTaskToReadyList+0xc8>)
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002298:	429a      	cmp	r2, r3
 800229a:	d802      	bhi.n	80022a2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800229c:	4a1f      	ldr	r2, [pc, #124]	@ (800231c <prvAddNewTaskToReadyList+0xc8>)
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80022a2:	4b20      	ldr	r3, [pc, #128]	@ (8002324 <prvAddNewTaskToReadyList+0xd0>)
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	3301      	adds	r3, #1
 80022a8:	4a1e      	ldr	r2, [pc, #120]	@ (8002324 <prvAddNewTaskToReadyList+0xd0>)
 80022aa:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80022ac:	4b1d      	ldr	r3, [pc, #116]	@ (8002324 <prvAddNewTaskToReadyList+0xd0>)
 80022ae:	681a      	ldr	r2, [r3, #0]
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80022b8:	4b1b      	ldr	r3, [pc, #108]	@ (8002328 <prvAddNewTaskToReadyList+0xd4>)
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	429a      	cmp	r2, r3
 80022be:	d903      	bls.n	80022c8 <prvAddNewTaskToReadyList+0x74>
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80022c4:	4a18      	ldr	r2, [pc, #96]	@ (8002328 <prvAddNewTaskToReadyList+0xd4>)
 80022c6:	6013      	str	r3, [r2, #0]
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80022cc:	4613      	mov	r3, r2
 80022ce:	009b      	lsls	r3, r3, #2
 80022d0:	4413      	add	r3, r2
 80022d2:	009b      	lsls	r3, r3, #2
 80022d4:	4a15      	ldr	r2, [pc, #84]	@ (800232c <prvAddNewTaskToReadyList+0xd8>)
 80022d6:	441a      	add	r2, r3
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	3304      	adds	r3, #4
 80022dc:	4619      	mov	r1, r3
 80022de:	4610      	mov	r0, r2
 80022e0:	f7ff f905 	bl	80014ee <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80022e4:	f001 fa02 	bl	80036ec <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80022e8:	4b0d      	ldr	r3, [pc, #52]	@ (8002320 <prvAddNewTaskToReadyList+0xcc>)
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d00e      	beq.n	800230e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80022f0:	4b0a      	ldr	r3, [pc, #40]	@ (800231c <prvAddNewTaskToReadyList+0xc8>)
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80022fa:	429a      	cmp	r2, r3
 80022fc:	d207      	bcs.n	800230e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80022fe:	4b0c      	ldr	r3, [pc, #48]	@ (8002330 <prvAddNewTaskToReadyList+0xdc>)
 8002300:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002304:	601a      	str	r2, [r3, #0]
 8002306:	f3bf 8f4f 	dsb	sy
 800230a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800230e:	bf00      	nop
 8002310:	3708      	adds	r7, #8
 8002312:	46bd      	mov	sp, r7
 8002314:	bd80      	pop	{r7, pc}
 8002316:	bf00      	nop
 8002318:	20000c08 	.word	0x20000c08
 800231c:	20000734 	.word	0x20000734
 8002320:	20000c14 	.word	0x20000c14
 8002324:	20000c24 	.word	0x20000c24
 8002328:	20000c10 	.word	0x20000c10
 800232c:	20000738 	.word	0x20000738
 8002330:	e000ed04 	.word	0xe000ed04

08002334 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8002334:	b580      	push	{r7, lr}
 8002336:	b084      	sub	sp, #16
 8002338:	af00      	add	r7, sp, #0
 800233a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800233c:	2300      	movs	r3, #0
 800233e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	2b00      	cmp	r3, #0
 8002344:	d018      	beq.n	8002378 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8002346:	4b14      	ldr	r3, [pc, #80]	@ (8002398 <vTaskDelay+0x64>)
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	2b00      	cmp	r3, #0
 800234c:	d00b      	beq.n	8002366 <vTaskDelay+0x32>
	__asm volatile
 800234e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002352:	f383 8811 	msr	BASEPRI, r3
 8002356:	f3bf 8f6f 	isb	sy
 800235a:	f3bf 8f4f 	dsb	sy
 800235e:	60bb      	str	r3, [r7, #8]
}
 8002360:	bf00      	nop
 8002362:	bf00      	nop
 8002364:	e7fd      	b.n	8002362 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8002366:	f000 f883 	bl	8002470 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800236a:	2100      	movs	r1, #0
 800236c:	6878      	ldr	r0, [r7, #4]
 800236e:	f000 fcf1 	bl	8002d54 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8002372:	f000 f88b 	bl	800248c <xTaskResumeAll>
 8002376:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	2b00      	cmp	r3, #0
 800237c:	d107      	bne.n	800238e <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800237e:	4b07      	ldr	r3, [pc, #28]	@ (800239c <vTaskDelay+0x68>)
 8002380:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002384:	601a      	str	r2, [r3, #0]
 8002386:	f3bf 8f4f 	dsb	sy
 800238a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800238e:	bf00      	nop
 8002390:	3710      	adds	r7, #16
 8002392:	46bd      	mov	sp, r7
 8002394:	bd80      	pop	{r7, pc}
 8002396:	bf00      	nop
 8002398:	20000c30 	.word	0x20000c30
 800239c:	e000ed04 	.word	0xe000ed04

080023a0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80023a0:	b580      	push	{r7, lr}
 80023a2:	b08a      	sub	sp, #40	@ 0x28
 80023a4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80023a6:	2300      	movs	r3, #0
 80023a8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80023aa:	2300      	movs	r3, #0
 80023ac:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80023ae:	463a      	mov	r2, r7
 80023b0:	1d39      	adds	r1, r7, #4
 80023b2:	f107 0308 	add.w	r3, r7, #8
 80023b6:	4618      	mov	r0, r3
 80023b8:	f7ff f83c 	bl	8001434 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80023bc:	6839      	ldr	r1, [r7, #0]
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	68ba      	ldr	r2, [r7, #8]
 80023c2:	9202      	str	r2, [sp, #8]
 80023c4:	9301      	str	r3, [sp, #4]
 80023c6:	2300      	movs	r3, #0
 80023c8:	9300      	str	r3, [sp, #0]
 80023ca:	2300      	movs	r3, #0
 80023cc:	460a      	mov	r2, r1
 80023ce:	4922      	ldr	r1, [pc, #136]	@ (8002458 <vTaskStartScheduler+0xb8>)
 80023d0:	4822      	ldr	r0, [pc, #136]	@ (800245c <vTaskStartScheduler+0xbc>)
 80023d2:	f7ff fe09 	bl	8001fe8 <xTaskCreateStatic>
 80023d6:	4603      	mov	r3, r0
 80023d8:	4a21      	ldr	r2, [pc, #132]	@ (8002460 <vTaskStartScheduler+0xc0>)
 80023da:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80023dc:	4b20      	ldr	r3, [pc, #128]	@ (8002460 <vTaskStartScheduler+0xc0>)
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d002      	beq.n	80023ea <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80023e4:	2301      	movs	r3, #1
 80023e6:	617b      	str	r3, [r7, #20]
 80023e8:	e001      	b.n	80023ee <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80023ea:	2300      	movs	r3, #0
 80023ec:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80023ee:	697b      	ldr	r3, [r7, #20]
 80023f0:	2b01      	cmp	r3, #1
 80023f2:	d102      	bne.n	80023fa <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80023f4:	f000 fd02 	bl	8002dfc <xTimerCreateTimerTask>
 80023f8:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80023fa:	697b      	ldr	r3, [r7, #20]
 80023fc:	2b01      	cmp	r3, #1
 80023fe:	d116      	bne.n	800242e <vTaskStartScheduler+0x8e>
	__asm volatile
 8002400:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002404:	f383 8811 	msr	BASEPRI, r3
 8002408:	f3bf 8f6f 	isb	sy
 800240c:	f3bf 8f4f 	dsb	sy
 8002410:	613b      	str	r3, [r7, #16]
}
 8002412:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8002414:	4b13      	ldr	r3, [pc, #76]	@ (8002464 <vTaskStartScheduler+0xc4>)
 8002416:	f04f 32ff 	mov.w	r2, #4294967295
 800241a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800241c:	4b12      	ldr	r3, [pc, #72]	@ (8002468 <vTaskStartScheduler+0xc8>)
 800241e:	2201      	movs	r2, #1
 8002420:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8002422:	4b12      	ldr	r3, [pc, #72]	@ (800246c <vTaskStartScheduler+0xcc>)
 8002424:	2200      	movs	r2, #0
 8002426:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8002428:	f001 f8be 	bl	80035a8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800242c:	e00f      	b.n	800244e <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800242e:	697b      	ldr	r3, [r7, #20]
 8002430:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002434:	d10b      	bne.n	800244e <vTaskStartScheduler+0xae>
	__asm volatile
 8002436:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800243a:	f383 8811 	msr	BASEPRI, r3
 800243e:	f3bf 8f6f 	isb	sy
 8002442:	f3bf 8f4f 	dsb	sy
 8002446:	60fb      	str	r3, [r7, #12]
}
 8002448:	bf00      	nop
 800244a:	bf00      	nop
 800244c:	e7fd      	b.n	800244a <vTaskStartScheduler+0xaa>
}
 800244e:	bf00      	nop
 8002450:	3718      	adds	r7, #24
 8002452:	46bd      	mov	sp, r7
 8002454:	bd80      	pop	{r7, pc}
 8002456:	bf00      	nop
 8002458:	08003d0c 	.word	0x08003d0c
 800245c:	08002a8d 	.word	0x08002a8d
 8002460:	20000c2c 	.word	0x20000c2c
 8002464:	20000c28 	.word	0x20000c28
 8002468:	20000c14 	.word	0x20000c14
 800246c:	20000c0c 	.word	0x20000c0c

08002470 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8002470:	b480      	push	{r7}
 8002472:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8002474:	4b04      	ldr	r3, [pc, #16]	@ (8002488 <vTaskSuspendAll+0x18>)
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	3301      	adds	r3, #1
 800247a:	4a03      	ldr	r2, [pc, #12]	@ (8002488 <vTaskSuspendAll+0x18>)
 800247c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800247e:	bf00      	nop
 8002480:	46bd      	mov	sp, r7
 8002482:	bc80      	pop	{r7}
 8002484:	4770      	bx	lr
 8002486:	bf00      	nop
 8002488:	20000c30 	.word	0x20000c30

0800248c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800248c:	b580      	push	{r7, lr}
 800248e:	b084      	sub	sp, #16
 8002490:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8002492:	2300      	movs	r3, #0
 8002494:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8002496:	2300      	movs	r3, #0
 8002498:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800249a:	4b42      	ldr	r3, [pc, #264]	@ (80025a4 <xTaskResumeAll+0x118>)
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d10b      	bne.n	80024ba <xTaskResumeAll+0x2e>
	__asm volatile
 80024a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80024a6:	f383 8811 	msr	BASEPRI, r3
 80024aa:	f3bf 8f6f 	isb	sy
 80024ae:	f3bf 8f4f 	dsb	sy
 80024b2:	603b      	str	r3, [r7, #0]
}
 80024b4:	bf00      	nop
 80024b6:	bf00      	nop
 80024b8:	e7fd      	b.n	80024b6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80024ba:	f001 f8e7 	bl	800368c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80024be:	4b39      	ldr	r3, [pc, #228]	@ (80025a4 <xTaskResumeAll+0x118>)
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	3b01      	subs	r3, #1
 80024c4:	4a37      	ldr	r2, [pc, #220]	@ (80025a4 <xTaskResumeAll+0x118>)
 80024c6:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80024c8:	4b36      	ldr	r3, [pc, #216]	@ (80025a4 <xTaskResumeAll+0x118>)
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d162      	bne.n	8002596 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80024d0:	4b35      	ldr	r3, [pc, #212]	@ (80025a8 <xTaskResumeAll+0x11c>)
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d05e      	beq.n	8002596 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80024d8:	e02f      	b.n	800253a <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80024da:	4b34      	ldr	r3, [pc, #208]	@ (80025ac <xTaskResumeAll+0x120>)
 80024dc:	68db      	ldr	r3, [r3, #12]
 80024de:	68db      	ldr	r3, [r3, #12]
 80024e0:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	3318      	adds	r3, #24
 80024e6:	4618      	mov	r0, r3
 80024e8:	f7ff f85c 	bl	80015a4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	3304      	adds	r3, #4
 80024f0:	4618      	mov	r0, r3
 80024f2:	f7ff f857 	bl	80015a4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80024fa:	4b2d      	ldr	r3, [pc, #180]	@ (80025b0 <xTaskResumeAll+0x124>)
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	429a      	cmp	r2, r3
 8002500:	d903      	bls.n	800250a <xTaskResumeAll+0x7e>
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002506:	4a2a      	ldr	r2, [pc, #168]	@ (80025b0 <xTaskResumeAll+0x124>)
 8002508:	6013      	str	r3, [r2, #0]
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800250e:	4613      	mov	r3, r2
 8002510:	009b      	lsls	r3, r3, #2
 8002512:	4413      	add	r3, r2
 8002514:	009b      	lsls	r3, r3, #2
 8002516:	4a27      	ldr	r2, [pc, #156]	@ (80025b4 <xTaskResumeAll+0x128>)
 8002518:	441a      	add	r2, r3
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	3304      	adds	r3, #4
 800251e:	4619      	mov	r1, r3
 8002520:	4610      	mov	r0, r2
 8002522:	f7fe ffe4 	bl	80014ee <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800252a:	4b23      	ldr	r3, [pc, #140]	@ (80025b8 <xTaskResumeAll+0x12c>)
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002530:	429a      	cmp	r2, r3
 8002532:	d302      	bcc.n	800253a <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8002534:	4b21      	ldr	r3, [pc, #132]	@ (80025bc <xTaskResumeAll+0x130>)
 8002536:	2201      	movs	r2, #1
 8002538:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800253a:	4b1c      	ldr	r3, [pc, #112]	@ (80025ac <xTaskResumeAll+0x120>)
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	2b00      	cmp	r3, #0
 8002540:	d1cb      	bne.n	80024da <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	2b00      	cmp	r3, #0
 8002546:	d001      	beq.n	800254c <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8002548:	f000 fb56 	bl	8002bf8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800254c:	4b1c      	ldr	r3, [pc, #112]	@ (80025c0 <xTaskResumeAll+0x134>)
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	2b00      	cmp	r3, #0
 8002556:	d010      	beq.n	800257a <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8002558:	f000 f844 	bl	80025e4 <xTaskIncrementTick>
 800255c:	4603      	mov	r3, r0
 800255e:	2b00      	cmp	r3, #0
 8002560:	d002      	beq.n	8002568 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8002562:	4b16      	ldr	r3, [pc, #88]	@ (80025bc <xTaskResumeAll+0x130>)
 8002564:	2201      	movs	r2, #1
 8002566:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	3b01      	subs	r3, #1
 800256c:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	2b00      	cmp	r3, #0
 8002572:	d1f1      	bne.n	8002558 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8002574:	4b12      	ldr	r3, [pc, #72]	@ (80025c0 <xTaskResumeAll+0x134>)
 8002576:	2200      	movs	r2, #0
 8002578:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800257a:	4b10      	ldr	r3, [pc, #64]	@ (80025bc <xTaskResumeAll+0x130>)
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	2b00      	cmp	r3, #0
 8002580:	d009      	beq.n	8002596 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8002582:	2301      	movs	r3, #1
 8002584:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8002586:	4b0f      	ldr	r3, [pc, #60]	@ (80025c4 <xTaskResumeAll+0x138>)
 8002588:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800258c:	601a      	str	r2, [r3, #0]
 800258e:	f3bf 8f4f 	dsb	sy
 8002592:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8002596:	f001 f8a9 	bl	80036ec <vPortExitCritical>

	return xAlreadyYielded;
 800259a:	68bb      	ldr	r3, [r7, #8]
}
 800259c:	4618      	mov	r0, r3
 800259e:	3710      	adds	r7, #16
 80025a0:	46bd      	mov	sp, r7
 80025a2:	bd80      	pop	{r7, pc}
 80025a4:	20000c30 	.word	0x20000c30
 80025a8:	20000c08 	.word	0x20000c08
 80025ac:	20000bc8 	.word	0x20000bc8
 80025b0:	20000c10 	.word	0x20000c10
 80025b4:	20000738 	.word	0x20000738
 80025b8:	20000734 	.word	0x20000734
 80025bc:	20000c1c 	.word	0x20000c1c
 80025c0:	20000c18 	.word	0x20000c18
 80025c4:	e000ed04 	.word	0xe000ed04

080025c8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80025c8:	b480      	push	{r7}
 80025ca:	b083      	sub	sp, #12
 80025cc:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80025ce:	4b04      	ldr	r3, [pc, #16]	@ (80025e0 <xTaskGetTickCount+0x18>)
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80025d4:	687b      	ldr	r3, [r7, #4]
}
 80025d6:	4618      	mov	r0, r3
 80025d8:	370c      	adds	r7, #12
 80025da:	46bd      	mov	sp, r7
 80025dc:	bc80      	pop	{r7}
 80025de:	4770      	bx	lr
 80025e0:	20000c0c 	.word	0x20000c0c

080025e4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80025e4:	b580      	push	{r7, lr}
 80025e6:	b086      	sub	sp, #24
 80025e8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80025ea:	2300      	movs	r3, #0
 80025ec:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80025ee:	4b4f      	ldr	r3, [pc, #316]	@ (800272c <xTaskIncrementTick+0x148>)
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	f040 8090 	bne.w	8002718 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80025f8:	4b4d      	ldr	r3, [pc, #308]	@ (8002730 <xTaskIncrementTick+0x14c>)
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	3301      	adds	r3, #1
 80025fe:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8002600:	4a4b      	ldr	r2, [pc, #300]	@ (8002730 <xTaskIncrementTick+0x14c>)
 8002602:	693b      	ldr	r3, [r7, #16]
 8002604:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8002606:	693b      	ldr	r3, [r7, #16]
 8002608:	2b00      	cmp	r3, #0
 800260a:	d121      	bne.n	8002650 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800260c:	4b49      	ldr	r3, [pc, #292]	@ (8002734 <xTaskIncrementTick+0x150>)
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	2b00      	cmp	r3, #0
 8002614:	d00b      	beq.n	800262e <xTaskIncrementTick+0x4a>
	__asm volatile
 8002616:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800261a:	f383 8811 	msr	BASEPRI, r3
 800261e:	f3bf 8f6f 	isb	sy
 8002622:	f3bf 8f4f 	dsb	sy
 8002626:	603b      	str	r3, [r7, #0]
}
 8002628:	bf00      	nop
 800262a:	bf00      	nop
 800262c:	e7fd      	b.n	800262a <xTaskIncrementTick+0x46>
 800262e:	4b41      	ldr	r3, [pc, #260]	@ (8002734 <xTaskIncrementTick+0x150>)
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	60fb      	str	r3, [r7, #12]
 8002634:	4b40      	ldr	r3, [pc, #256]	@ (8002738 <xTaskIncrementTick+0x154>)
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	4a3e      	ldr	r2, [pc, #248]	@ (8002734 <xTaskIncrementTick+0x150>)
 800263a:	6013      	str	r3, [r2, #0]
 800263c:	4a3e      	ldr	r2, [pc, #248]	@ (8002738 <xTaskIncrementTick+0x154>)
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	6013      	str	r3, [r2, #0]
 8002642:	4b3e      	ldr	r3, [pc, #248]	@ (800273c <xTaskIncrementTick+0x158>)
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	3301      	adds	r3, #1
 8002648:	4a3c      	ldr	r2, [pc, #240]	@ (800273c <xTaskIncrementTick+0x158>)
 800264a:	6013      	str	r3, [r2, #0]
 800264c:	f000 fad4 	bl	8002bf8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8002650:	4b3b      	ldr	r3, [pc, #236]	@ (8002740 <xTaskIncrementTick+0x15c>)
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	693a      	ldr	r2, [r7, #16]
 8002656:	429a      	cmp	r2, r3
 8002658:	d349      	bcc.n	80026ee <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800265a:	4b36      	ldr	r3, [pc, #216]	@ (8002734 <xTaskIncrementTick+0x150>)
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	2b00      	cmp	r3, #0
 8002662:	d104      	bne.n	800266e <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002664:	4b36      	ldr	r3, [pc, #216]	@ (8002740 <xTaskIncrementTick+0x15c>)
 8002666:	f04f 32ff 	mov.w	r2, #4294967295
 800266a:	601a      	str	r2, [r3, #0]
					break;
 800266c:	e03f      	b.n	80026ee <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800266e:	4b31      	ldr	r3, [pc, #196]	@ (8002734 <xTaskIncrementTick+0x150>)
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	68db      	ldr	r3, [r3, #12]
 8002674:	68db      	ldr	r3, [r3, #12]
 8002676:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8002678:	68bb      	ldr	r3, [r7, #8]
 800267a:	685b      	ldr	r3, [r3, #4]
 800267c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800267e:	693a      	ldr	r2, [r7, #16]
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	429a      	cmp	r2, r3
 8002684:	d203      	bcs.n	800268e <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8002686:	4a2e      	ldr	r2, [pc, #184]	@ (8002740 <xTaskIncrementTick+0x15c>)
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800268c:	e02f      	b.n	80026ee <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800268e:	68bb      	ldr	r3, [r7, #8]
 8002690:	3304      	adds	r3, #4
 8002692:	4618      	mov	r0, r3
 8002694:	f7fe ff86 	bl	80015a4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002698:	68bb      	ldr	r3, [r7, #8]
 800269a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800269c:	2b00      	cmp	r3, #0
 800269e:	d004      	beq.n	80026aa <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80026a0:	68bb      	ldr	r3, [r7, #8]
 80026a2:	3318      	adds	r3, #24
 80026a4:	4618      	mov	r0, r3
 80026a6:	f7fe ff7d 	bl	80015a4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80026aa:	68bb      	ldr	r3, [r7, #8]
 80026ac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80026ae:	4b25      	ldr	r3, [pc, #148]	@ (8002744 <xTaskIncrementTick+0x160>)
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	429a      	cmp	r2, r3
 80026b4:	d903      	bls.n	80026be <xTaskIncrementTick+0xda>
 80026b6:	68bb      	ldr	r3, [r7, #8]
 80026b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80026ba:	4a22      	ldr	r2, [pc, #136]	@ (8002744 <xTaskIncrementTick+0x160>)
 80026bc:	6013      	str	r3, [r2, #0]
 80026be:	68bb      	ldr	r3, [r7, #8]
 80026c0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80026c2:	4613      	mov	r3, r2
 80026c4:	009b      	lsls	r3, r3, #2
 80026c6:	4413      	add	r3, r2
 80026c8:	009b      	lsls	r3, r3, #2
 80026ca:	4a1f      	ldr	r2, [pc, #124]	@ (8002748 <xTaskIncrementTick+0x164>)
 80026cc:	441a      	add	r2, r3
 80026ce:	68bb      	ldr	r3, [r7, #8]
 80026d0:	3304      	adds	r3, #4
 80026d2:	4619      	mov	r1, r3
 80026d4:	4610      	mov	r0, r2
 80026d6:	f7fe ff0a 	bl	80014ee <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80026da:	68bb      	ldr	r3, [r7, #8]
 80026dc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80026de:	4b1b      	ldr	r3, [pc, #108]	@ (800274c <xTaskIncrementTick+0x168>)
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80026e4:	429a      	cmp	r2, r3
 80026e6:	d3b8      	bcc.n	800265a <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 80026e8:	2301      	movs	r3, #1
 80026ea:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80026ec:	e7b5      	b.n	800265a <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80026ee:	4b17      	ldr	r3, [pc, #92]	@ (800274c <xTaskIncrementTick+0x168>)
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80026f4:	4914      	ldr	r1, [pc, #80]	@ (8002748 <xTaskIncrementTick+0x164>)
 80026f6:	4613      	mov	r3, r2
 80026f8:	009b      	lsls	r3, r3, #2
 80026fa:	4413      	add	r3, r2
 80026fc:	009b      	lsls	r3, r3, #2
 80026fe:	440b      	add	r3, r1
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	2b01      	cmp	r3, #1
 8002704:	d901      	bls.n	800270a <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8002706:	2301      	movs	r3, #1
 8002708:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800270a:	4b11      	ldr	r3, [pc, #68]	@ (8002750 <xTaskIncrementTick+0x16c>)
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	2b00      	cmp	r3, #0
 8002710:	d007      	beq.n	8002722 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8002712:	2301      	movs	r3, #1
 8002714:	617b      	str	r3, [r7, #20]
 8002716:	e004      	b.n	8002722 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8002718:	4b0e      	ldr	r3, [pc, #56]	@ (8002754 <xTaskIncrementTick+0x170>)
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	3301      	adds	r3, #1
 800271e:	4a0d      	ldr	r2, [pc, #52]	@ (8002754 <xTaskIncrementTick+0x170>)
 8002720:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8002722:	697b      	ldr	r3, [r7, #20]
}
 8002724:	4618      	mov	r0, r3
 8002726:	3718      	adds	r7, #24
 8002728:	46bd      	mov	sp, r7
 800272a:	bd80      	pop	{r7, pc}
 800272c:	20000c30 	.word	0x20000c30
 8002730:	20000c0c 	.word	0x20000c0c
 8002734:	20000bc0 	.word	0x20000bc0
 8002738:	20000bc4 	.word	0x20000bc4
 800273c:	20000c20 	.word	0x20000c20
 8002740:	20000c28 	.word	0x20000c28
 8002744:	20000c10 	.word	0x20000c10
 8002748:	20000738 	.word	0x20000738
 800274c:	20000734 	.word	0x20000734
 8002750:	20000c1c 	.word	0x20000c1c
 8002754:	20000c18 	.word	0x20000c18

08002758 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8002758:	b480      	push	{r7}
 800275a:	b085      	sub	sp, #20
 800275c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800275e:	4b28      	ldr	r3, [pc, #160]	@ (8002800 <vTaskSwitchContext+0xa8>)
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	2b00      	cmp	r3, #0
 8002764:	d003      	beq.n	800276e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8002766:	4b27      	ldr	r3, [pc, #156]	@ (8002804 <vTaskSwitchContext+0xac>)
 8002768:	2201      	movs	r2, #1
 800276a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800276c:	e042      	b.n	80027f4 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 800276e:	4b25      	ldr	r3, [pc, #148]	@ (8002804 <vTaskSwitchContext+0xac>)
 8002770:	2200      	movs	r2, #0
 8002772:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002774:	4b24      	ldr	r3, [pc, #144]	@ (8002808 <vTaskSwitchContext+0xb0>)
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	60fb      	str	r3, [r7, #12]
 800277a:	e011      	b.n	80027a0 <vTaskSwitchContext+0x48>
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	2b00      	cmp	r3, #0
 8002780:	d10b      	bne.n	800279a <vTaskSwitchContext+0x42>
	__asm volatile
 8002782:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002786:	f383 8811 	msr	BASEPRI, r3
 800278a:	f3bf 8f6f 	isb	sy
 800278e:	f3bf 8f4f 	dsb	sy
 8002792:	607b      	str	r3, [r7, #4]
}
 8002794:	bf00      	nop
 8002796:	bf00      	nop
 8002798:	e7fd      	b.n	8002796 <vTaskSwitchContext+0x3e>
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	3b01      	subs	r3, #1
 800279e:	60fb      	str	r3, [r7, #12]
 80027a0:	491a      	ldr	r1, [pc, #104]	@ (800280c <vTaskSwitchContext+0xb4>)
 80027a2:	68fa      	ldr	r2, [r7, #12]
 80027a4:	4613      	mov	r3, r2
 80027a6:	009b      	lsls	r3, r3, #2
 80027a8:	4413      	add	r3, r2
 80027aa:	009b      	lsls	r3, r3, #2
 80027ac:	440b      	add	r3, r1
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d0e3      	beq.n	800277c <vTaskSwitchContext+0x24>
 80027b4:	68fa      	ldr	r2, [r7, #12]
 80027b6:	4613      	mov	r3, r2
 80027b8:	009b      	lsls	r3, r3, #2
 80027ba:	4413      	add	r3, r2
 80027bc:	009b      	lsls	r3, r3, #2
 80027be:	4a13      	ldr	r2, [pc, #76]	@ (800280c <vTaskSwitchContext+0xb4>)
 80027c0:	4413      	add	r3, r2
 80027c2:	60bb      	str	r3, [r7, #8]
 80027c4:	68bb      	ldr	r3, [r7, #8]
 80027c6:	685b      	ldr	r3, [r3, #4]
 80027c8:	685a      	ldr	r2, [r3, #4]
 80027ca:	68bb      	ldr	r3, [r7, #8]
 80027cc:	605a      	str	r2, [r3, #4]
 80027ce:	68bb      	ldr	r3, [r7, #8]
 80027d0:	685a      	ldr	r2, [r3, #4]
 80027d2:	68bb      	ldr	r3, [r7, #8]
 80027d4:	3308      	adds	r3, #8
 80027d6:	429a      	cmp	r2, r3
 80027d8:	d104      	bne.n	80027e4 <vTaskSwitchContext+0x8c>
 80027da:	68bb      	ldr	r3, [r7, #8]
 80027dc:	685b      	ldr	r3, [r3, #4]
 80027de:	685a      	ldr	r2, [r3, #4]
 80027e0:	68bb      	ldr	r3, [r7, #8]
 80027e2:	605a      	str	r2, [r3, #4]
 80027e4:	68bb      	ldr	r3, [r7, #8]
 80027e6:	685b      	ldr	r3, [r3, #4]
 80027e8:	68db      	ldr	r3, [r3, #12]
 80027ea:	4a09      	ldr	r2, [pc, #36]	@ (8002810 <vTaskSwitchContext+0xb8>)
 80027ec:	6013      	str	r3, [r2, #0]
 80027ee:	4a06      	ldr	r2, [pc, #24]	@ (8002808 <vTaskSwitchContext+0xb0>)
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	6013      	str	r3, [r2, #0]
}
 80027f4:	bf00      	nop
 80027f6:	3714      	adds	r7, #20
 80027f8:	46bd      	mov	sp, r7
 80027fa:	bc80      	pop	{r7}
 80027fc:	4770      	bx	lr
 80027fe:	bf00      	nop
 8002800:	20000c30 	.word	0x20000c30
 8002804:	20000c1c 	.word	0x20000c1c
 8002808:	20000c10 	.word	0x20000c10
 800280c:	20000738 	.word	0x20000738
 8002810:	20000734 	.word	0x20000734

08002814 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8002814:	b580      	push	{r7, lr}
 8002816:	b084      	sub	sp, #16
 8002818:	af00      	add	r7, sp, #0
 800281a:	6078      	str	r0, [r7, #4]
 800281c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	2b00      	cmp	r3, #0
 8002822:	d10b      	bne.n	800283c <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8002824:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002828:	f383 8811 	msr	BASEPRI, r3
 800282c:	f3bf 8f6f 	isb	sy
 8002830:	f3bf 8f4f 	dsb	sy
 8002834:	60fb      	str	r3, [r7, #12]
}
 8002836:	bf00      	nop
 8002838:	bf00      	nop
 800283a:	e7fd      	b.n	8002838 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800283c:	4b07      	ldr	r3, [pc, #28]	@ (800285c <vTaskPlaceOnEventList+0x48>)
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	3318      	adds	r3, #24
 8002842:	4619      	mov	r1, r3
 8002844:	6878      	ldr	r0, [r7, #4]
 8002846:	f7fe fe75 	bl	8001534 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800284a:	2101      	movs	r1, #1
 800284c:	6838      	ldr	r0, [r7, #0]
 800284e:	f000 fa81 	bl	8002d54 <prvAddCurrentTaskToDelayedList>
}
 8002852:	bf00      	nop
 8002854:	3710      	adds	r7, #16
 8002856:	46bd      	mov	sp, r7
 8002858:	bd80      	pop	{r7, pc}
 800285a:	bf00      	nop
 800285c:	20000734 	.word	0x20000734

08002860 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8002860:	b580      	push	{r7, lr}
 8002862:	b086      	sub	sp, #24
 8002864:	af00      	add	r7, sp, #0
 8002866:	60f8      	str	r0, [r7, #12]
 8002868:	60b9      	str	r1, [r7, #8]
 800286a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	2b00      	cmp	r3, #0
 8002870:	d10b      	bne.n	800288a <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8002872:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002876:	f383 8811 	msr	BASEPRI, r3
 800287a:	f3bf 8f6f 	isb	sy
 800287e:	f3bf 8f4f 	dsb	sy
 8002882:	617b      	str	r3, [r7, #20]
}
 8002884:	bf00      	nop
 8002886:	bf00      	nop
 8002888:	e7fd      	b.n	8002886 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800288a:	4b0a      	ldr	r3, [pc, #40]	@ (80028b4 <vTaskPlaceOnEventListRestricted+0x54>)
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	3318      	adds	r3, #24
 8002890:	4619      	mov	r1, r3
 8002892:	68f8      	ldr	r0, [r7, #12]
 8002894:	f7fe fe2b 	bl	80014ee <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	2b00      	cmp	r3, #0
 800289c:	d002      	beq.n	80028a4 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800289e:	f04f 33ff 	mov.w	r3, #4294967295
 80028a2:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80028a4:	6879      	ldr	r1, [r7, #4]
 80028a6:	68b8      	ldr	r0, [r7, #8]
 80028a8:	f000 fa54 	bl	8002d54 <prvAddCurrentTaskToDelayedList>
	}
 80028ac:	bf00      	nop
 80028ae:	3718      	adds	r7, #24
 80028b0:	46bd      	mov	sp, r7
 80028b2:	bd80      	pop	{r7, pc}
 80028b4:	20000734 	.word	0x20000734

080028b8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80028b8:	b580      	push	{r7, lr}
 80028ba:	b086      	sub	sp, #24
 80028bc:	af00      	add	r7, sp, #0
 80028be:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	68db      	ldr	r3, [r3, #12]
 80028c4:	68db      	ldr	r3, [r3, #12]
 80028c6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80028c8:	693b      	ldr	r3, [r7, #16]
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d10b      	bne.n	80028e6 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 80028ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80028d2:	f383 8811 	msr	BASEPRI, r3
 80028d6:	f3bf 8f6f 	isb	sy
 80028da:	f3bf 8f4f 	dsb	sy
 80028de:	60fb      	str	r3, [r7, #12]
}
 80028e0:	bf00      	nop
 80028e2:	bf00      	nop
 80028e4:	e7fd      	b.n	80028e2 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80028e6:	693b      	ldr	r3, [r7, #16]
 80028e8:	3318      	adds	r3, #24
 80028ea:	4618      	mov	r0, r3
 80028ec:	f7fe fe5a 	bl	80015a4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80028f0:	4b1d      	ldr	r3, [pc, #116]	@ (8002968 <xTaskRemoveFromEventList+0xb0>)
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d11d      	bne.n	8002934 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80028f8:	693b      	ldr	r3, [r7, #16]
 80028fa:	3304      	adds	r3, #4
 80028fc:	4618      	mov	r0, r3
 80028fe:	f7fe fe51 	bl	80015a4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8002902:	693b      	ldr	r3, [r7, #16]
 8002904:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002906:	4b19      	ldr	r3, [pc, #100]	@ (800296c <xTaskRemoveFromEventList+0xb4>)
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	429a      	cmp	r2, r3
 800290c:	d903      	bls.n	8002916 <xTaskRemoveFromEventList+0x5e>
 800290e:	693b      	ldr	r3, [r7, #16]
 8002910:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002912:	4a16      	ldr	r2, [pc, #88]	@ (800296c <xTaskRemoveFromEventList+0xb4>)
 8002914:	6013      	str	r3, [r2, #0]
 8002916:	693b      	ldr	r3, [r7, #16]
 8002918:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800291a:	4613      	mov	r3, r2
 800291c:	009b      	lsls	r3, r3, #2
 800291e:	4413      	add	r3, r2
 8002920:	009b      	lsls	r3, r3, #2
 8002922:	4a13      	ldr	r2, [pc, #76]	@ (8002970 <xTaskRemoveFromEventList+0xb8>)
 8002924:	441a      	add	r2, r3
 8002926:	693b      	ldr	r3, [r7, #16]
 8002928:	3304      	adds	r3, #4
 800292a:	4619      	mov	r1, r3
 800292c:	4610      	mov	r0, r2
 800292e:	f7fe fdde 	bl	80014ee <vListInsertEnd>
 8002932:	e005      	b.n	8002940 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8002934:	693b      	ldr	r3, [r7, #16]
 8002936:	3318      	adds	r3, #24
 8002938:	4619      	mov	r1, r3
 800293a:	480e      	ldr	r0, [pc, #56]	@ (8002974 <xTaskRemoveFromEventList+0xbc>)
 800293c:	f7fe fdd7 	bl	80014ee <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8002940:	693b      	ldr	r3, [r7, #16]
 8002942:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002944:	4b0c      	ldr	r3, [pc, #48]	@ (8002978 <xTaskRemoveFromEventList+0xc0>)
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800294a:	429a      	cmp	r2, r3
 800294c:	d905      	bls.n	800295a <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800294e:	2301      	movs	r3, #1
 8002950:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8002952:	4b0a      	ldr	r3, [pc, #40]	@ (800297c <xTaskRemoveFromEventList+0xc4>)
 8002954:	2201      	movs	r2, #1
 8002956:	601a      	str	r2, [r3, #0]
 8002958:	e001      	b.n	800295e <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800295a:	2300      	movs	r3, #0
 800295c:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800295e:	697b      	ldr	r3, [r7, #20]
}
 8002960:	4618      	mov	r0, r3
 8002962:	3718      	adds	r7, #24
 8002964:	46bd      	mov	sp, r7
 8002966:	bd80      	pop	{r7, pc}
 8002968:	20000c30 	.word	0x20000c30
 800296c:	20000c10 	.word	0x20000c10
 8002970:	20000738 	.word	0x20000738
 8002974:	20000bc8 	.word	0x20000bc8
 8002978:	20000734 	.word	0x20000734
 800297c:	20000c1c 	.word	0x20000c1c

08002980 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8002980:	b480      	push	{r7}
 8002982:	b083      	sub	sp, #12
 8002984:	af00      	add	r7, sp, #0
 8002986:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8002988:	4b06      	ldr	r3, [pc, #24]	@ (80029a4 <vTaskInternalSetTimeOutState+0x24>)
 800298a:	681a      	ldr	r2, [r3, #0]
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8002990:	4b05      	ldr	r3, [pc, #20]	@ (80029a8 <vTaskInternalSetTimeOutState+0x28>)
 8002992:	681a      	ldr	r2, [r3, #0]
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	605a      	str	r2, [r3, #4]
}
 8002998:	bf00      	nop
 800299a:	370c      	adds	r7, #12
 800299c:	46bd      	mov	sp, r7
 800299e:	bc80      	pop	{r7}
 80029a0:	4770      	bx	lr
 80029a2:	bf00      	nop
 80029a4:	20000c20 	.word	0x20000c20
 80029a8:	20000c0c 	.word	0x20000c0c

080029ac <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80029ac:	b580      	push	{r7, lr}
 80029ae:	b088      	sub	sp, #32
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	6078      	str	r0, [r7, #4]
 80029b4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d10b      	bne.n	80029d4 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 80029bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80029c0:	f383 8811 	msr	BASEPRI, r3
 80029c4:	f3bf 8f6f 	isb	sy
 80029c8:	f3bf 8f4f 	dsb	sy
 80029cc:	613b      	str	r3, [r7, #16]
}
 80029ce:	bf00      	nop
 80029d0:	bf00      	nop
 80029d2:	e7fd      	b.n	80029d0 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80029d4:	683b      	ldr	r3, [r7, #0]
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d10b      	bne.n	80029f2 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 80029da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80029de:	f383 8811 	msr	BASEPRI, r3
 80029e2:	f3bf 8f6f 	isb	sy
 80029e6:	f3bf 8f4f 	dsb	sy
 80029ea:	60fb      	str	r3, [r7, #12]
}
 80029ec:	bf00      	nop
 80029ee:	bf00      	nop
 80029f0:	e7fd      	b.n	80029ee <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 80029f2:	f000 fe4b 	bl	800368c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80029f6:	4b1d      	ldr	r3, [pc, #116]	@ (8002a6c <xTaskCheckForTimeOut+0xc0>)
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	685b      	ldr	r3, [r3, #4]
 8002a00:	69ba      	ldr	r2, [r7, #24]
 8002a02:	1ad3      	subs	r3, r2, r3
 8002a04:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8002a06:	683b      	ldr	r3, [r7, #0]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a0e:	d102      	bne.n	8002a16 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8002a10:	2300      	movs	r3, #0
 8002a12:	61fb      	str	r3, [r7, #28]
 8002a14:	e023      	b.n	8002a5e <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681a      	ldr	r2, [r3, #0]
 8002a1a:	4b15      	ldr	r3, [pc, #84]	@ (8002a70 <xTaskCheckForTimeOut+0xc4>)
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	429a      	cmp	r2, r3
 8002a20:	d007      	beq.n	8002a32 <xTaskCheckForTimeOut+0x86>
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	685b      	ldr	r3, [r3, #4]
 8002a26:	69ba      	ldr	r2, [r7, #24]
 8002a28:	429a      	cmp	r2, r3
 8002a2a:	d302      	bcc.n	8002a32 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8002a2c:	2301      	movs	r3, #1
 8002a2e:	61fb      	str	r3, [r7, #28]
 8002a30:	e015      	b.n	8002a5e <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8002a32:	683b      	ldr	r3, [r7, #0]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	697a      	ldr	r2, [r7, #20]
 8002a38:	429a      	cmp	r2, r3
 8002a3a:	d20b      	bcs.n	8002a54 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8002a3c:	683b      	ldr	r3, [r7, #0]
 8002a3e:	681a      	ldr	r2, [r3, #0]
 8002a40:	697b      	ldr	r3, [r7, #20]
 8002a42:	1ad2      	subs	r2, r2, r3
 8002a44:	683b      	ldr	r3, [r7, #0]
 8002a46:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8002a48:	6878      	ldr	r0, [r7, #4]
 8002a4a:	f7ff ff99 	bl	8002980 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8002a4e:	2300      	movs	r3, #0
 8002a50:	61fb      	str	r3, [r7, #28]
 8002a52:	e004      	b.n	8002a5e <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8002a54:	683b      	ldr	r3, [r7, #0]
 8002a56:	2200      	movs	r2, #0
 8002a58:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8002a5a:	2301      	movs	r3, #1
 8002a5c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8002a5e:	f000 fe45 	bl	80036ec <vPortExitCritical>

	return xReturn;
 8002a62:	69fb      	ldr	r3, [r7, #28]
}
 8002a64:	4618      	mov	r0, r3
 8002a66:	3720      	adds	r7, #32
 8002a68:	46bd      	mov	sp, r7
 8002a6a:	bd80      	pop	{r7, pc}
 8002a6c:	20000c0c 	.word	0x20000c0c
 8002a70:	20000c20 	.word	0x20000c20

08002a74 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8002a74:	b480      	push	{r7}
 8002a76:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8002a78:	4b03      	ldr	r3, [pc, #12]	@ (8002a88 <vTaskMissedYield+0x14>)
 8002a7a:	2201      	movs	r2, #1
 8002a7c:	601a      	str	r2, [r3, #0]
}
 8002a7e:	bf00      	nop
 8002a80:	46bd      	mov	sp, r7
 8002a82:	bc80      	pop	{r7}
 8002a84:	4770      	bx	lr
 8002a86:	bf00      	nop
 8002a88:	20000c1c 	.word	0x20000c1c

08002a8c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8002a8c:	b580      	push	{r7, lr}
 8002a8e:	b082      	sub	sp, #8
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8002a94:	f000 f852 	bl	8002b3c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8002a98:	4b06      	ldr	r3, [pc, #24]	@ (8002ab4 <prvIdleTask+0x28>)
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	2b01      	cmp	r3, #1
 8002a9e:	d9f9      	bls.n	8002a94 <prvIdleTask+0x8>
			{
				taskYIELD();
 8002aa0:	4b05      	ldr	r3, [pc, #20]	@ (8002ab8 <prvIdleTask+0x2c>)
 8002aa2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002aa6:	601a      	str	r2, [r3, #0]
 8002aa8:	f3bf 8f4f 	dsb	sy
 8002aac:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8002ab0:	e7f0      	b.n	8002a94 <prvIdleTask+0x8>
 8002ab2:	bf00      	nop
 8002ab4:	20000738 	.word	0x20000738
 8002ab8:	e000ed04 	.word	0xe000ed04

08002abc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8002abc:	b580      	push	{r7, lr}
 8002abe:	b082      	sub	sp, #8
 8002ac0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002ac2:	2300      	movs	r3, #0
 8002ac4:	607b      	str	r3, [r7, #4]
 8002ac6:	e00c      	b.n	8002ae2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8002ac8:	687a      	ldr	r2, [r7, #4]
 8002aca:	4613      	mov	r3, r2
 8002acc:	009b      	lsls	r3, r3, #2
 8002ace:	4413      	add	r3, r2
 8002ad0:	009b      	lsls	r3, r3, #2
 8002ad2:	4a12      	ldr	r2, [pc, #72]	@ (8002b1c <prvInitialiseTaskLists+0x60>)
 8002ad4:	4413      	add	r3, r2
 8002ad6:	4618      	mov	r0, r3
 8002ad8:	f7fe fcde 	bl	8001498 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	3301      	adds	r3, #1
 8002ae0:	607b      	str	r3, [r7, #4]
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	2b37      	cmp	r3, #55	@ 0x37
 8002ae6:	d9ef      	bls.n	8002ac8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8002ae8:	480d      	ldr	r0, [pc, #52]	@ (8002b20 <prvInitialiseTaskLists+0x64>)
 8002aea:	f7fe fcd5 	bl	8001498 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8002aee:	480d      	ldr	r0, [pc, #52]	@ (8002b24 <prvInitialiseTaskLists+0x68>)
 8002af0:	f7fe fcd2 	bl	8001498 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8002af4:	480c      	ldr	r0, [pc, #48]	@ (8002b28 <prvInitialiseTaskLists+0x6c>)
 8002af6:	f7fe fccf 	bl	8001498 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8002afa:	480c      	ldr	r0, [pc, #48]	@ (8002b2c <prvInitialiseTaskLists+0x70>)
 8002afc:	f7fe fccc 	bl	8001498 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8002b00:	480b      	ldr	r0, [pc, #44]	@ (8002b30 <prvInitialiseTaskLists+0x74>)
 8002b02:	f7fe fcc9 	bl	8001498 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8002b06:	4b0b      	ldr	r3, [pc, #44]	@ (8002b34 <prvInitialiseTaskLists+0x78>)
 8002b08:	4a05      	ldr	r2, [pc, #20]	@ (8002b20 <prvInitialiseTaskLists+0x64>)
 8002b0a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8002b0c:	4b0a      	ldr	r3, [pc, #40]	@ (8002b38 <prvInitialiseTaskLists+0x7c>)
 8002b0e:	4a05      	ldr	r2, [pc, #20]	@ (8002b24 <prvInitialiseTaskLists+0x68>)
 8002b10:	601a      	str	r2, [r3, #0]
}
 8002b12:	bf00      	nop
 8002b14:	3708      	adds	r7, #8
 8002b16:	46bd      	mov	sp, r7
 8002b18:	bd80      	pop	{r7, pc}
 8002b1a:	bf00      	nop
 8002b1c:	20000738 	.word	0x20000738
 8002b20:	20000b98 	.word	0x20000b98
 8002b24:	20000bac 	.word	0x20000bac
 8002b28:	20000bc8 	.word	0x20000bc8
 8002b2c:	20000bdc 	.word	0x20000bdc
 8002b30:	20000bf4 	.word	0x20000bf4
 8002b34:	20000bc0 	.word	0x20000bc0
 8002b38:	20000bc4 	.word	0x20000bc4

08002b3c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8002b3c:	b580      	push	{r7, lr}
 8002b3e:	b082      	sub	sp, #8
 8002b40:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002b42:	e019      	b.n	8002b78 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8002b44:	f000 fda2 	bl	800368c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002b48:	4b10      	ldr	r3, [pc, #64]	@ (8002b8c <prvCheckTasksWaitingTermination+0x50>)
 8002b4a:	68db      	ldr	r3, [r3, #12]
 8002b4c:	68db      	ldr	r3, [r3, #12]
 8002b4e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	3304      	adds	r3, #4
 8002b54:	4618      	mov	r0, r3
 8002b56:	f7fe fd25 	bl	80015a4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8002b5a:	4b0d      	ldr	r3, [pc, #52]	@ (8002b90 <prvCheckTasksWaitingTermination+0x54>)
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	3b01      	subs	r3, #1
 8002b60:	4a0b      	ldr	r2, [pc, #44]	@ (8002b90 <prvCheckTasksWaitingTermination+0x54>)
 8002b62:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8002b64:	4b0b      	ldr	r3, [pc, #44]	@ (8002b94 <prvCheckTasksWaitingTermination+0x58>)
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	3b01      	subs	r3, #1
 8002b6a:	4a0a      	ldr	r2, [pc, #40]	@ (8002b94 <prvCheckTasksWaitingTermination+0x58>)
 8002b6c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8002b6e:	f000 fdbd 	bl	80036ec <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8002b72:	6878      	ldr	r0, [r7, #4]
 8002b74:	f000 f810 	bl	8002b98 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002b78:	4b06      	ldr	r3, [pc, #24]	@ (8002b94 <prvCheckTasksWaitingTermination+0x58>)
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d1e1      	bne.n	8002b44 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8002b80:	bf00      	nop
 8002b82:	bf00      	nop
 8002b84:	3708      	adds	r7, #8
 8002b86:	46bd      	mov	sp, r7
 8002b88:	bd80      	pop	{r7, pc}
 8002b8a:	bf00      	nop
 8002b8c:	20000bdc 	.word	0x20000bdc
 8002b90:	20000c08 	.word	0x20000c08
 8002b94:	20000bf0 	.word	0x20000bf0

08002b98 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8002b98:	b580      	push	{r7, lr}
 8002b9a:	b084      	sub	sp, #16
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d108      	bne.n	8002bbc <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bae:	4618      	mov	r0, r3
 8002bb0:	f000 ff3c 	bl	8003a2c <vPortFree>
				vPortFree( pxTCB );
 8002bb4:	6878      	ldr	r0, [r7, #4]
 8002bb6:	f000 ff39 	bl	8003a2c <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8002bba:	e019      	b.n	8002bf0 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8002bc2:	2b01      	cmp	r3, #1
 8002bc4:	d103      	bne.n	8002bce <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8002bc6:	6878      	ldr	r0, [r7, #4]
 8002bc8:	f000 ff30 	bl	8003a2c <vPortFree>
	}
 8002bcc:	e010      	b.n	8002bf0 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8002bd4:	2b02      	cmp	r3, #2
 8002bd6:	d00b      	beq.n	8002bf0 <prvDeleteTCB+0x58>
	__asm volatile
 8002bd8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002bdc:	f383 8811 	msr	BASEPRI, r3
 8002be0:	f3bf 8f6f 	isb	sy
 8002be4:	f3bf 8f4f 	dsb	sy
 8002be8:	60fb      	str	r3, [r7, #12]
}
 8002bea:	bf00      	nop
 8002bec:	bf00      	nop
 8002bee:	e7fd      	b.n	8002bec <prvDeleteTCB+0x54>
	}
 8002bf0:	bf00      	nop
 8002bf2:	3710      	adds	r7, #16
 8002bf4:	46bd      	mov	sp, r7
 8002bf6:	bd80      	pop	{r7, pc}

08002bf8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8002bf8:	b480      	push	{r7}
 8002bfa:	b083      	sub	sp, #12
 8002bfc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002bfe:	4b0c      	ldr	r3, [pc, #48]	@ (8002c30 <prvResetNextTaskUnblockTime+0x38>)
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d104      	bne.n	8002c12 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8002c08:	4b0a      	ldr	r3, [pc, #40]	@ (8002c34 <prvResetNextTaskUnblockTime+0x3c>)
 8002c0a:	f04f 32ff 	mov.w	r2, #4294967295
 8002c0e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8002c10:	e008      	b.n	8002c24 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002c12:	4b07      	ldr	r3, [pc, #28]	@ (8002c30 <prvResetNextTaskUnblockTime+0x38>)
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	68db      	ldr	r3, [r3, #12]
 8002c18:	68db      	ldr	r3, [r3, #12]
 8002c1a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	685b      	ldr	r3, [r3, #4]
 8002c20:	4a04      	ldr	r2, [pc, #16]	@ (8002c34 <prvResetNextTaskUnblockTime+0x3c>)
 8002c22:	6013      	str	r3, [r2, #0]
}
 8002c24:	bf00      	nop
 8002c26:	370c      	adds	r7, #12
 8002c28:	46bd      	mov	sp, r7
 8002c2a:	bc80      	pop	{r7}
 8002c2c:	4770      	bx	lr
 8002c2e:	bf00      	nop
 8002c30:	20000bc0 	.word	0x20000bc0
 8002c34:	20000c28 	.word	0x20000c28

08002c38 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8002c38:	b480      	push	{r7}
 8002c3a:	b083      	sub	sp, #12
 8002c3c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8002c3e:	4b0b      	ldr	r3, [pc, #44]	@ (8002c6c <xTaskGetSchedulerState+0x34>)
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d102      	bne.n	8002c4c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8002c46:	2301      	movs	r3, #1
 8002c48:	607b      	str	r3, [r7, #4]
 8002c4a:	e008      	b.n	8002c5e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002c4c:	4b08      	ldr	r3, [pc, #32]	@ (8002c70 <xTaskGetSchedulerState+0x38>)
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d102      	bne.n	8002c5a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8002c54:	2302      	movs	r3, #2
 8002c56:	607b      	str	r3, [r7, #4]
 8002c58:	e001      	b.n	8002c5e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8002c5a:	2300      	movs	r3, #0
 8002c5c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8002c5e:	687b      	ldr	r3, [r7, #4]
	}
 8002c60:	4618      	mov	r0, r3
 8002c62:	370c      	adds	r7, #12
 8002c64:	46bd      	mov	sp, r7
 8002c66:	bc80      	pop	{r7}
 8002c68:	4770      	bx	lr
 8002c6a:	bf00      	nop
 8002c6c:	20000c14 	.word	0x20000c14
 8002c70:	20000c30 	.word	0x20000c30

08002c74 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8002c74:	b580      	push	{r7, lr}
 8002c76:	b086      	sub	sp, #24
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8002c80:	2300      	movs	r3, #0
 8002c82:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d058      	beq.n	8002d3c <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8002c8a:	4b2f      	ldr	r3, [pc, #188]	@ (8002d48 <xTaskPriorityDisinherit+0xd4>)
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	693a      	ldr	r2, [r7, #16]
 8002c90:	429a      	cmp	r2, r3
 8002c92:	d00b      	beq.n	8002cac <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8002c94:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002c98:	f383 8811 	msr	BASEPRI, r3
 8002c9c:	f3bf 8f6f 	isb	sy
 8002ca0:	f3bf 8f4f 	dsb	sy
 8002ca4:	60fb      	str	r3, [r7, #12]
}
 8002ca6:	bf00      	nop
 8002ca8:	bf00      	nop
 8002caa:	e7fd      	b.n	8002ca8 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8002cac:	693b      	ldr	r3, [r7, #16]
 8002cae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d10b      	bne.n	8002ccc <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8002cb4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002cb8:	f383 8811 	msr	BASEPRI, r3
 8002cbc:	f3bf 8f6f 	isb	sy
 8002cc0:	f3bf 8f4f 	dsb	sy
 8002cc4:	60bb      	str	r3, [r7, #8]
}
 8002cc6:	bf00      	nop
 8002cc8:	bf00      	nop
 8002cca:	e7fd      	b.n	8002cc8 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8002ccc:	693b      	ldr	r3, [r7, #16]
 8002cce:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002cd0:	1e5a      	subs	r2, r3, #1
 8002cd2:	693b      	ldr	r3, [r7, #16]
 8002cd4:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8002cd6:	693b      	ldr	r3, [r7, #16]
 8002cd8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002cda:	693b      	ldr	r3, [r7, #16]
 8002cdc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002cde:	429a      	cmp	r2, r3
 8002ce0:	d02c      	beq.n	8002d3c <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8002ce2:	693b      	ldr	r3, [r7, #16]
 8002ce4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d128      	bne.n	8002d3c <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002cea:	693b      	ldr	r3, [r7, #16]
 8002cec:	3304      	adds	r3, #4
 8002cee:	4618      	mov	r0, r3
 8002cf0:	f7fe fc58 	bl	80015a4 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8002cf4:	693b      	ldr	r3, [r7, #16]
 8002cf6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8002cf8:	693b      	ldr	r3, [r7, #16]
 8002cfa:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002cfc:	693b      	ldr	r3, [r7, #16]
 8002cfe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d00:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8002d04:	693b      	ldr	r3, [r7, #16]
 8002d06:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8002d08:	693b      	ldr	r3, [r7, #16]
 8002d0a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002d0c:	4b0f      	ldr	r3, [pc, #60]	@ (8002d4c <xTaskPriorityDisinherit+0xd8>)
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	429a      	cmp	r2, r3
 8002d12:	d903      	bls.n	8002d1c <xTaskPriorityDisinherit+0xa8>
 8002d14:	693b      	ldr	r3, [r7, #16]
 8002d16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d18:	4a0c      	ldr	r2, [pc, #48]	@ (8002d4c <xTaskPriorityDisinherit+0xd8>)
 8002d1a:	6013      	str	r3, [r2, #0]
 8002d1c:	693b      	ldr	r3, [r7, #16]
 8002d1e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002d20:	4613      	mov	r3, r2
 8002d22:	009b      	lsls	r3, r3, #2
 8002d24:	4413      	add	r3, r2
 8002d26:	009b      	lsls	r3, r3, #2
 8002d28:	4a09      	ldr	r2, [pc, #36]	@ (8002d50 <xTaskPriorityDisinherit+0xdc>)
 8002d2a:	441a      	add	r2, r3
 8002d2c:	693b      	ldr	r3, [r7, #16]
 8002d2e:	3304      	adds	r3, #4
 8002d30:	4619      	mov	r1, r3
 8002d32:	4610      	mov	r0, r2
 8002d34:	f7fe fbdb 	bl	80014ee <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8002d38:	2301      	movs	r3, #1
 8002d3a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8002d3c:	697b      	ldr	r3, [r7, #20]
	}
 8002d3e:	4618      	mov	r0, r3
 8002d40:	3718      	adds	r7, #24
 8002d42:	46bd      	mov	sp, r7
 8002d44:	bd80      	pop	{r7, pc}
 8002d46:	bf00      	nop
 8002d48:	20000734 	.word	0x20000734
 8002d4c:	20000c10 	.word	0x20000c10
 8002d50:	20000738 	.word	0x20000738

08002d54 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8002d54:	b580      	push	{r7, lr}
 8002d56:	b084      	sub	sp, #16
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	6078      	str	r0, [r7, #4]
 8002d5c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8002d5e:	4b21      	ldr	r3, [pc, #132]	@ (8002de4 <prvAddCurrentTaskToDelayedList+0x90>)
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002d64:	4b20      	ldr	r3, [pc, #128]	@ (8002de8 <prvAddCurrentTaskToDelayedList+0x94>)
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	3304      	adds	r3, #4
 8002d6a:	4618      	mov	r0, r3
 8002d6c:	f7fe fc1a 	bl	80015a4 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d76:	d10a      	bne.n	8002d8e <prvAddCurrentTaskToDelayedList+0x3a>
 8002d78:	683b      	ldr	r3, [r7, #0]
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d007      	beq.n	8002d8e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002d7e:	4b1a      	ldr	r3, [pc, #104]	@ (8002de8 <prvAddCurrentTaskToDelayedList+0x94>)
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	3304      	adds	r3, #4
 8002d84:	4619      	mov	r1, r3
 8002d86:	4819      	ldr	r0, [pc, #100]	@ (8002dec <prvAddCurrentTaskToDelayedList+0x98>)
 8002d88:	f7fe fbb1 	bl	80014ee <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8002d8c:	e026      	b.n	8002ddc <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8002d8e:	68fa      	ldr	r2, [r7, #12]
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	4413      	add	r3, r2
 8002d94:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8002d96:	4b14      	ldr	r3, [pc, #80]	@ (8002de8 <prvAddCurrentTaskToDelayedList+0x94>)
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	68ba      	ldr	r2, [r7, #8]
 8002d9c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8002d9e:	68ba      	ldr	r2, [r7, #8]
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	429a      	cmp	r2, r3
 8002da4:	d209      	bcs.n	8002dba <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002da6:	4b12      	ldr	r3, [pc, #72]	@ (8002df0 <prvAddCurrentTaskToDelayedList+0x9c>)
 8002da8:	681a      	ldr	r2, [r3, #0]
 8002daa:	4b0f      	ldr	r3, [pc, #60]	@ (8002de8 <prvAddCurrentTaskToDelayedList+0x94>)
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	3304      	adds	r3, #4
 8002db0:	4619      	mov	r1, r3
 8002db2:	4610      	mov	r0, r2
 8002db4:	f7fe fbbe 	bl	8001534 <vListInsert>
}
 8002db8:	e010      	b.n	8002ddc <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002dba:	4b0e      	ldr	r3, [pc, #56]	@ (8002df4 <prvAddCurrentTaskToDelayedList+0xa0>)
 8002dbc:	681a      	ldr	r2, [r3, #0]
 8002dbe:	4b0a      	ldr	r3, [pc, #40]	@ (8002de8 <prvAddCurrentTaskToDelayedList+0x94>)
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	3304      	adds	r3, #4
 8002dc4:	4619      	mov	r1, r3
 8002dc6:	4610      	mov	r0, r2
 8002dc8:	f7fe fbb4 	bl	8001534 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8002dcc:	4b0a      	ldr	r3, [pc, #40]	@ (8002df8 <prvAddCurrentTaskToDelayedList+0xa4>)
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	68ba      	ldr	r2, [r7, #8]
 8002dd2:	429a      	cmp	r2, r3
 8002dd4:	d202      	bcs.n	8002ddc <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8002dd6:	4a08      	ldr	r2, [pc, #32]	@ (8002df8 <prvAddCurrentTaskToDelayedList+0xa4>)
 8002dd8:	68bb      	ldr	r3, [r7, #8]
 8002dda:	6013      	str	r3, [r2, #0]
}
 8002ddc:	bf00      	nop
 8002dde:	3710      	adds	r7, #16
 8002de0:	46bd      	mov	sp, r7
 8002de2:	bd80      	pop	{r7, pc}
 8002de4:	20000c0c 	.word	0x20000c0c
 8002de8:	20000734 	.word	0x20000734
 8002dec:	20000bf4 	.word	0x20000bf4
 8002df0:	20000bc4 	.word	0x20000bc4
 8002df4:	20000bc0 	.word	0x20000bc0
 8002df8:	20000c28 	.word	0x20000c28

08002dfc <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8002dfc:	b580      	push	{r7, lr}
 8002dfe:	b08a      	sub	sp, #40	@ 0x28
 8002e00:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8002e02:	2300      	movs	r3, #0
 8002e04:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8002e06:	f000 fb11 	bl	800342c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8002e0a:	4b1d      	ldr	r3, [pc, #116]	@ (8002e80 <xTimerCreateTimerTask+0x84>)
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d021      	beq.n	8002e56 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8002e12:	2300      	movs	r3, #0
 8002e14:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8002e16:	2300      	movs	r3, #0
 8002e18:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8002e1a:	1d3a      	adds	r2, r7, #4
 8002e1c:	f107 0108 	add.w	r1, r7, #8
 8002e20:	f107 030c 	add.w	r3, r7, #12
 8002e24:	4618      	mov	r0, r3
 8002e26:	f7fe fb1d 	bl	8001464 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8002e2a:	6879      	ldr	r1, [r7, #4]
 8002e2c:	68bb      	ldr	r3, [r7, #8]
 8002e2e:	68fa      	ldr	r2, [r7, #12]
 8002e30:	9202      	str	r2, [sp, #8]
 8002e32:	9301      	str	r3, [sp, #4]
 8002e34:	2302      	movs	r3, #2
 8002e36:	9300      	str	r3, [sp, #0]
 8002e38:	2300      	movs	r3, #0
 8002e3a:	460a      	mov	r2, r1
 8002e3c:	4911      	ldr	r1, [pc, #68]	@ (8002e84 <xTimerCreateTimerTask+0x88>)
 8002e3e:	4812      	ldr	r0, [pc, #72]	@ (8002e88 <xTimerCreateTimerTask+0x8c>)
 8002e40:	f7ff f8d2 	bl	8001fe8 <xTaskCreateStatic>
 8002e44:	4603      	mov	r3, r0
 8002e46:	4a11      	ldr	r2, [pc, #68]	@ (8002e8c <xTimerCreateTimerTask+0x90>)
 8002e48:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8002e4a:	4b10      	ldr	r3, [pc, #64]	@ (8002e8c <xTimerCreateTimerTask+0x90>)
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d001      	beq.n	8002e56 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8002e52:	2301      	movs	r3, #1
 8002e54:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8002e56:	697b      	ldr	r3, [r7, #20]
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d10b      	bne.n	8002e74 <xTimerCreateTimerTask+0x78>
	__asm volatile
 8002e5c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002e60:	f383 8811 	msr	BASEPRI, r3
 8002e64:	f3bf 8f6f 	isb	sy
 8002e68:	f3bf 8f4f 	dsb	sy
 8002e6c:	613b      	str	r3, [r7, #16]
}
 8002e6e:	bf00      	nop
 8002e70:	bf00      	nop
 8002e72:	e7fd      	b.n	8002e70 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8002e74:	697b      	ldr	r3, [r7, #20]
}
 8002e76:	4618      	mov	r0, r3
 8002e78:	3718      	adds	r7, #24
 8002e7a:	46bd      	mov	sp, r7
 8002e7c:	bd80      	pop	{r7, pc}
 8002e7e:	bf00      	nop
 8002e80:	20000c64 	.word	0x20000c64
 8002e84:	08003d14 	.word	0x08003d14
 8002e88:	08002fc9 	.word	0x08002fc9
 8002e8c:	20000c68 	.word	0x20000c68

08002e90 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8002e90:	b580      	push	{r7, lr}
 8002e92:	b08a      	sub	sp, #40	@ 0x28
 8002e94:	af00      	add	r7, sp, #0
 8002e96:	60f8      	str	r0, [r7, #12]
 8002e98:	60b9      	str	r1, [r7, #8]
 8002e9a:	607a      	str	r2, [r7, #4]
 8002e9c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8002e9e:	2300      	movs	r3, #0
 8002ea0:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d10b      	bne.n	8002ec0 <xTimerGenericCommand+0x30>
	__asm volatile
 8002ea8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002eac:	f383 8811 	msr	BASEPRI, r3
 8002eb0:	f3bf 8f6f 	isb	sy
 8002eb4:	f3bf 8f4f 	dsb	sy
 8002eb8:	623b      	str	r3, [r7, #32]
}
 8002eba:	bf00      	nop
 8002ebc:	bf00      	nop
 8002ebe:	e7fd      	b.n	8002ebc <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8002ec0:	4b19      	ldr	r3, [pc, #100]	@ (8002f28 <xTimerGenericCommand+0x98>)
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d02a      	beq.n	8002f1e <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8002ec8:	68bb      	ldr	r3, [r7, #8]
 8002eca:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8002ed4:	68bb      	ldr	r3, [r7, #8]
 8002ed6:	2b05      	cmp	r3, #5
 8002ed8:	dc18      	bgt.n	8002f0c <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8002eda:	f7ff fead 	bl	8002c38 <xTaskGetSchedulerState>
 8002ede:	4603      	mov	r3, r0
 8002ee0:	2b02      	cmp	r3, #2
 8002ee2:	d109      	bne.n	8002ef8 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8002ee4:	4b10      	ldr	r3, [pc, #64]	@ (8002f28 <xTimerGenericCommand+0x98>)
 8002ee6:	6818      	ldr	r0, [r3, #0]
 8002ee8:	f107 0110 	add.w	r1, r7, #16
 8002eec:	2300      	movs	r3, #0
 8002eee:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002ef0:	f7fe fc8c 	bl	800180c <xQueueGenericSend>
 8002ef4:	6278      	str	r0, [r7, #36]	@ 0x24
 8002ef6:	e012      	b.n	8002f1e <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8002ef8:	4b0b      	ldr	r3, [pc, #44]	@ (8002f28 <xTimerGenericCommand+0x98>)
 8002efa:	6818      	ldr	r0, [r3, #0]
 8002efc:	f107 0110 	add.w	r1, r7, #16
 8002f00:	2300      	movs	r3, #0
 8002f02:	2200      	movs	r2, #0
 8002f04:	f7fe fc82 	bl	800180c <xQueueGenericSend>
 8002f08:	6278      	str	r0, [r7, #36]	@ 0x24
 8002f0a:	e008      	b.n	8002f1e <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8002f0c:	4b06      	ldr	r3, [pc, #24]	@ (8002f28 <xTimerGenericCommand+0x98>)
 8002f0e:	6818      	ldr	r0, [r3, #0]
 8002f10:	f107 0110 	add.w	r1, r7, #16
 8002f14:	2300      	movs	r3, #0
 8002f16:	683a      	ldr	r2, [r7, #0]
 8002f18:	f7fe fd7a 	bl	8001a10 <xQueueGenericSendFromISR>
 8002f1c:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8002f1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8002f20:	4618      	mov	r0, r3
 8002f22:	3728      	adds	r7, #40	@ 0x28
 8002f24:	46bd      	mov	sp, r7
 8002f26:	bd80      	pop	{r7, pc}
 8002f28:	20000c64 	.word	0x20000c64

08002f2c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8002f2c:	b580      	push	{r7, lr}
 8002f2e:	b088      	sub	sp, #32
 8002f30:	af02      	add	r7, sp, #8
 8002f32:	6078      	str	r0, [r7, #4]
 8002f34:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002f36:	4b23      	ldr	r3, [pc, #140]	@ (8002fc4 <prvProcessExpiredTimer+0x98>)
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	68db      	ldr	r3, [r3, #12]
 8002f3c:	68db      	ldr	r3, [r3, #12]
 8002f3e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8002f40:	697b      	ldr	r3, [r7, #20]
 8002f42:	3304      	adds	r3, #4
 8002f44:	4618      	mov	r0, r3
 8002f46:	f7fe fb2d 	bl	80015a4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8002f4a:	697b      	ldr	r3, [r7, #20]
 8002f4c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8002f50:	f003 0304 	and.w	r3, r3, #4
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d023      	beq.n	8002fa0 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8002f58:	697b      	ldr	r3, [r7, #20]
 8002f5a:	699a      	ldr	r2, [r3, #24]
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	18d1      	adds	r1, r2, r3
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	683a      	ldr	r2, [r7, #0]
 8002f64:	6978      	ldr	r0, [r7, #20]
 8002f66:	f000 f8d3 	bl	8003110 <prvInsertTimerInActiveList>
 8002f6a:	4603      	mov	r3, r0
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d020      	beq.n	8002fb2 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8002f70:	2300      	movs	r3, #0
 8002f72:	9300      	str	r3, [sp, #0]
 8002f74:	2300      	movs	r3, #0
 8002f76:	687a      	ldr	r2, [r7, #4]
 8002f78:	2100      	movs	r1, #0
 8002f7a:	6978      	ldr	r0, [r7, #20]
 8002f7c:	f7ff ff88 	bl	8002e90 <xTimerGenericCommand>
 8002f80:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8002f82:	693b      	ldr	r3, [r7, #16]
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d114      	bne.n	8002fb2 <prvProcessExpiredTimer+0x86>
	__asm volatile
 8002f88:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002f8c:	f383 8811 	msr	BASEPRI, r3
 8002f90:	f3bf 8f6f 	isb	sy
 8002f94:	f3bf 8f4f 	dsb	sy
 8002f98:	60fb      	str	r3, [r7, #12]
}
 8002f9a:	bf00      	nop
 8002f9c:	bf00      	nop
 8002f9e:	e7fd      	b.n	8002f9c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8002fa0:	697b      	ldr	r3, [r7, #20]
 8002fa2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8002fa6:	f023 0301 	bic.w	r3, r3, #1
 8002faa:	b2da      	uxtb	r2, r3
 8002fac:	697b      	ldr	r3, [r7, #20]
 8002fae:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8002fb2:	697b      	ldr	r3, [r7, #20]
 8002fb4:	6a1b      	ldr	r3, [r3, #32]
 8002fb6:	6978      	ldr	r0, [r7, #20]
 8002fb8:	4798      	blx	r3
}
 8002fba:	bf00      	nop
 8002fbc:	3718      	adds	r7, #24
 8002fbe:	46bd      	mov	sp, r7
 8002fc0:	bd80      	pop	{r7, pc}
 8002fc2:	bf00      	nop
 8002fc4:	20000c5c 	.word	0x20000c5c

08002fc8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8002fc8:	b580      	push	{r7, lr}
 8002fca:	b084      	sub	sp, #16
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8002fd0:	f107 0308 	add.w	r3, r7, #8
 8002fd4:	4618      	mov	r0, r3
 8002fd6:	f000 f859 	bl	800308c <prvGetNextExpireTime>
 8002fda:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8002fdc:	68bb      	ldr	r3, [r7, #8]
 8002fde:	4619      	mov	r1, r3
 8002fe0:	68f8      	ldr	r0, [r7, #12]
 8002fe2:	f000 f805 	bl	8002ff0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8002fe6:	f000 f8d5 	bl	8003194 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8002fea:	bf00      	nop
 8002fec:	e7f0      	b.n	8002fd0 <prvTimerTask+0x8>
	...

08002ff0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8002ff0:	b580      	push	{r7, lr}
 8002ff2:	b084      	sub	sp, #16
 8002ff4:	af00      	add	r7, sp, #0
 8002ff6:	6078      	str	r0, [r7, #4]
 8002ff8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8002ffa:	f7ff fa39 	bl	8002470 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8002ffe:	f107 0308 	add.w	r3, r7, #8
 8003002:	4618      	mov	r0, r3
 8003004:	f000 f864 	bl	80030d0 <prvSampleTimeNow>
 8003008:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800300a:	68bb      	ldr	r3, [r7, #8]
 800300c:	2b00      	cmp	r3, #0
 800300e:	d130      	bne.n	8003072 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8003010:	683b      	ldr	r3, [r7, #0]
 8003012:	2b00      	cmp	r3, #0
 8003014:	d10a      	bne.n	800302c <prvProcessTimerOrBlockTask+0x3c>
 8003016:	687a      	ldr	r2, [r7, #4]
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	429a      	cmp	r2, r3
 800301c:	d806      	bhi.n	800302c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800301e:	f7ff fa35 	bl	800248c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8003022:	68f9      	ldr	r1, [r7, #12]
 8003024:	6878      	ldr	r0, [r7, #4]
 8003026:	f7ff ff81 	bl	8002f2c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800302a:	e024      	b.n	8003076 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800302c:	683b      	ldr	r3, [r7, #0]
 800302e:	2b00      	cmp	r3, #0
 8003030:	d008      	beq.n	8003044 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8003032:	4b13      	ldr	r3, [pc, #76]	@ (8003080 <prvProcessTimerOrBlockTask+0x90>)
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	2b00      	cmp	r3, #0
 800303a:	d101      	bne.n	8003040 <prvProcessTimerOrBlockTask+0x50>
 800303c:	2301      	movs	r3, #1
 800303e:	e000      	b.n	8003042 <prvProcessTimerOrBlockTask+0x52>
 8003040:	2300      	movs	r3, #0
 8003042:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8003044:	4b0f      	ldr	r3, [pc, #60]	@ (8003084 <prvProcessTimerOrBlockTask+0x94>)
 8003046:	6818      	ldr	r0, [r3, #0]
 8003048:	687a      	ldr	r2, [r7, #4]
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	1ad3      	subs	r3, r2, r3
 800304e:	683a      	ldr	r2, [r7, #0]
 8003050:	4619      	mov	r1, r3
 8003052:	f7fe ff95 	bl	8001f80 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8003056:	f7ff fa19 	bl	800248c <xTaskResumeAll>
 800305a:	4603      	mov	r3, r0
 800305c:	2b00      	cmp	r3, #0
 800305e:	d10a      	bne.n	8003076 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8003060:	4b09      	ldr	r3, [pc, #36]	@ (8003088 <prvProcessTimerOrBlockTask+0x98>)
 8003062:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003066:	601a      	str	r2, [r3, #0]
 8003068:	f3bf 8f4f 	dsb	sy
 800306c:	f3bf 8f6f 	isb	sy
}
 8003070:	e001      	b.n	8003076 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8003072:	f7ff fa0b 	bl	800248c <xTaskResumeAll>
}
 8003076:	bf00      	nop
 8003078:	3710      	adds	r7, #16
 800307a:	46bd      	mov	sp, r7
 800307c:	bd80      	pop	{r7, pc}
 800307e:	bf00      	nop
 8003080:	20000c60 	.word	0x20000c60
 8003084:	20000c64 	.word	0x20000c64
 8003088:	e000ed04 	.word	0xe000ed04

0800308c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800308c:	b480      	push	{r7}
 800308e:	b085      	sub	sp, #20
 8003090:	af00      	add	r7, sp, #0
 8003092:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8003094:	4b0d      	ldr	r3, [pc, #52]	@ (80030cc <prvGetNextExpireTime+0x40>)
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	2b00      	cmp	r3, #0
 800309c:	d101      	bne.n	80030a2 <prvGetNextExpireTime+0x16>
 800309e:	2201      	movs	r2, #1
 80030a0:	e000      	b.n	80030a4 <prvGetNextExpireTime+0x18>
 80030a2:	2200      	movs	r2, #0
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d105      	bne.n	80030bc <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80030b0:	4b06      	ldr	r3, [pc, #24]	@ (80030cc <prvGetNextExpireTime+0x40>)
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	68db      	ldr	r3, [r3, #12]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	60fb      	str	r3, [r7, #12]
 80030ba:	e001      	b.n	80030c0 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80030bc:	2300      	movs	r3, #0
 80030be:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80030c0:	68fb      	ldr	r3, [r7, #12]
}
 80030c2:	4618      	mov	r0, r3
 80030c4:	3714      	adds	r7, #20
 80030c6:	46bd      	mov	sp, r7
 80030c8:	bc80      	pop	{r7}
 80030ca:	4770      	bx	lr
 80030cc:	20000c5c 	.word	0x20000c5c

080030d0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80030d0:	b580      	push	{r7, lr}
 80030d2:	b084      	sub	sp, #16
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80030d8:	f7ff fa76 	bl	80025c8 <xTaskGetTickCount>
 80030dc:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80030de:	4b0b      	ldr	r3, [pc, #44]	@ (800310c <prvSampleTimeNow+0x3c>)
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	68fa      	ldr	r2, [r7, #12]
 80030e4:	429a      	cmp	r2, r3
 80030e6:	d205      	bcs.n	80030f4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80030e8:	f000 f93a 	bl	8003360 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	2201      	movs	r2, #1
 80030f0:	601a      	str	r2, [r3, #0]
 80030f2:	e002      	b.n	80030fa <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	2200      	movs	r2, #0
 80030f8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80030fa:	4a04      	ldr	r2, [pc, #16]	@ (800310c <prvSampleTimeNow+0x3c>)
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8003100:	68fb      	ldr	r3, [r7, #12]
}
 8003102:	4618      	mov	r0, r3
 8003104:	3710      	adds	r7, #16
 8003106:	46bd      	mov	sp, r7
 8003108:	bd80      	pop	{r7, pc}
 800310a:	bf00      	nop
 800310c:	20000c6c 	.word	0x20000c6c

08003110 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8003110:	b580      	push	{r7, lr}
 8003112:	b086      	sub	sp, #24
 8003114:	af00      	add	r7, sp, #0
 8003116:	60f8      	str	r0, [r7, #12]
 8003118:	60b9      	str	r1, [r7, #8]
 800311a:	607a      	str	r2, [r7, #4]
 800311c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800311e:	2300      	movs	r3, #0
 8003120:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	68ba      	ldr	r2, [r7, #8]
 8003126:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	68fa      	ldr	r2, [r7, #12]
 800312c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800312e:	68ba      	ldr	r2, [r7, #8]
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	429a      	cmp	r2, r3
 8003134:	d812      	bhi.n	800315c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003136:	687a      	ldr	r2, [r7, #4]
 8003138:	683b      	ldr	r3, [r7, #0]
 800313a:	1ad2      	subs	r2, r2, r3
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	699b      	ldr	r3, [r3, #24]
 8003140:	429a      	cmp	r2, r3
 8003142:	d302      	bcc.n	800314a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8003144:	2301      	movs	r3, #1
 8003146:	617b      	str	r3, [r7, #20]
 8003148:	e01b      	b.n	8003182 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800314a:	4b10      	ldr	r3, [pc, #64]	@ (800318c <prvInsertTimerInActiveList+0x7c>)
 800314c:	681a      	ldr	r2, [r3, #0]
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	3304      	adds	r3, #4
 8003152:	4619      	mov	r1, r3
 8003154:	4610      	mov	r0, r2
 8003156:	f7fe f9ed 	bl	8001534 <vListInsert>
 800315a:	e012      	b.n	8003182 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800315c:	687a      	ldr	r2, [r7, #4]
 800315e:	683b      	ldr	r3, [r7, #0]
 8003160:	429a      	cmp	r2, r3
 8003162:	d206      	bcs.n	8003172 <prvInsertTimerInActiveList+0x62>
 8003164:	68ba      	ldr	r2, [r7, #8]
 8003166:	683b      	ldr	r3, [r7, #0]
 8003168:	429a      	cmp	r2, r3
 800316a:	d302      	bcc.n	8003172 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800316c:	2301      	movs	r3, #1
 800316e:	617b      	str	r3, [r7, #20]
 8003170:	e007      	b.n	8003182 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8003172:	4b07      	ldr	r3, [pc, #28]	@ (8003190 <prvInsertTimerInActiveList+0x80>)
 8003174:	681a      	ldr	r2, [r3, #0]
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	3304      	adds	r3, #4
 800317a:	4619      	mov	r1, r3
 800317c:	4610      	mov	r0, r2
 800317e:	f7fe f9d9 	bl	8001534 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8003182:	697b      	ldr	r3, [r7, #20]
}
 8003184:	4618      	mov	r0, r3
 8003186:	3718      	adds	r7, #24
 8003188:	46bd      	mov	sp, r7
 800318a:	bd80      	pop	{r7, pc}
 800318c:	20000c60 	.word	0x20000c60
 8003190:	20000c5c 	.word	0x20000c5c

08003194 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8003194:	b580      	push	{r7, lr}
 8003196:	b08e      	sub	sp, #56	@ 0x38
 8003198:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800319a:	e0ce      	b.n	800333a <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	2b00      	cmp	r3, #0
 80031a0:	da19      	bge.n	80031d6 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80031a2:	1d3b      	adds	r3, r7, #4
 80031a4:	3304      	adds	r3, #4
 80031a6:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80031a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d10b      	bne.n	80031c6 <prvProcessReceivedCommands+0x32>
	__asm volatile
 80031ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80031b2:	f383 8811 	msr	BASEPRI, r3
 80031b6:	f3bf 8f6f 	isb	sy
 80031ba:	f3bf 8f4f 	dsb	sy
 80031be:	61fb      	str	r3, [r7, #28]
}
 80031c0:	bf00      	nop
 80031c2:	bf00      	nop
 80031c4:	e7fd      	b.n	80031c2 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80031c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80031cc:	6850      	ldr	r0, [r2, #4]
 80031ce:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80031d0:	6892      	ldr	r2, [r2, #8]
 80031d2:	4611      	mov	r1, r2
 80031d4:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	2b00      	cmp	r3, #0
 80031da:	f2c0 80ae 	blt.w	800333a <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80031e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80031e4:	695b      	ldr	r3, [r3, #20]
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d004      	beq.n	80031f4 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80031ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80031ec:	3304      	adds	r3, #4
 80031ee:	4618      	mov	r0, r3
 80031f0:	f7fe f9d8 	bl	80015a4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80031f4:	463b      	mov	r3, r7
 80031f6:	4618      	mov	r0, r3
 80031f8:	f7ff ff6a 	bl	80030d0 <prvSampleTimeNow>
 80031fc:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	2b09      	cmp	r3, #9
 8003202:	f200 8097 	bhi.w	8003334 <prvProcessReceivedCommands+0x1a0>
 8003206:	a201      	add	r2, pc, #4	@ (adr r2, 800320c <prvProcessReceivedCommands+0x78>)
 8003208:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800320c:	08003235 	.word	0x08003235
 8003210:	08003235 	.word	0x08003235
 8003214:	08003235 	.word	0x08003235
 8003218:	080032ab 	.word	0x080032ab
 800321c:	080032bf 	.word	0x080032bf
 8003220:	0800330b 	.word	0x0800330b
 8003224:	08003235 	.word	0x08003235
 8003228:	08003235 	.word	0x08003235
 800322c:	080032ab 	.word	0x080032ab
 8003230:	080032bf 	.word	0x080032bf
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8003234:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003236:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800323a:	f043 0301 	orr.w	r3, r3, #1
 800323e:	b2da      	uxtb	r2, r3
 8003240:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003242:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8003246:	68ba      	ldr	r2, [r7, #8]
 8003248:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800324a:	699b      	ldr	r3, [r3, #24]
 800324c:	18d1      	adds	r1, r2, r3
 800324e:	68bb      	ldr	r3, [r7, #8]
 8003250:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003252:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003254:	f7ff ff5c 	bl	8003110 <prvInsertTimerInActiveList>
 8003258:	4603      	mov	r3, r0
 800325a:	2b00      	cmp	r3, #0
 800325c:	d06c      	beq.n	8003338 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800325e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003260:	6a1b      	ldr	r3, [r3, #32]
 8003262:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003264:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003266:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003268:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800326c:	f003 0304 	and.w	r3, r3, #4
 8003270:	2b00      	cmp	r3, #0
 8003272:	d061      	beq.n	8003338 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8003274:	68ba      	ldr	r2, [r7, #8]
 8003276:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003278:	699b      	ldr	r3, [r3, #24]
 800327a:	441a      	add	r2, r3
 800327c:	2300      	movs	r3, #0
 800327e:	9300      	str	r3, [sp, #0]
 8003280:	2300      	movs	r3, #0
 8003282:	2100      	movs	r1, #0
 8003284:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003286:	f7ff fe03 	bl	8002e90 <xTimerGenericCommand>
 800328a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800328c:	6a3b      	ldr	r3, [r7, #32]
 800328e:	2b00      	cmp	r3, #0
 8003290:	d152      	bne.n	8003338 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8003292:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003296:	f383 8811 	msr	BASEPRI, r3
 800329a:	f3bf 8f6f 	isb	sy
 800329e:	f3bf 8f4f 	dsb	sy
 80032a2:	61bb      	str	r3, [r7, #24]
}
 80032a4:	bf00      	nop
 80032a6:	bf00      	nop
 80032a8:	e7fd      	b.n	80032a6 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80032aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80032ac:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80032b0:	f023 0301 	bic.w	r3, r3, #1
 80032b4:	b2da      	uxtb	r2, r3
 80032b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80032b8:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 80032bc:	e03d      	b.n	800333a <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80032be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80032c0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80032c4:	f043 0301 	orr.w	r3, r3, #1
 80032c8:	b2da      	uxtb	r2, r3
 80032ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80032cc:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80032d0:	68ba      	ldr	r2, [r7, #8]
 80032d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80032d4:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80032d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80032d8:	699b      	ldr	r3, [r3, #24]
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d10b      	bne.n	80032f6 <prvProcessReceivedCommands+0x162>
	__asm volatile
 80032de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80032e2:	f383 8811 	msr	BASEPRI, r3
 80032e6:	f3bf 8f6f 	isb	sy
 80032ea:	f3bf 8f4f 	dsb	sy
 80032ee:	617b      	str	r3, [r7, #20]
}
 80032f0:	bf00      	nop
 80032f2:	bf00      	nop
 80032f4:	e7fd      	b.n	80032f2 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80032f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80032f8:	699a      	ldr	r2, [r3, #24]
 80032fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032fc:	18d1      	adds	r1, r2, r3
 80032fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003300:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003302:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003304:	f7ff ff04 	bl	8003110 <prvInsertTimerInActiveList>
					break;
 8003308:	e017      	b.n	800333a <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800330a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800330c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003310:	f003 0302 	and.w	r3, r3, #2
 8003314:	2b00      	cmp	r3, #0
 8003316:	d103      	bne.n	8003320 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8003318:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800331a:	f000 fb87 	bl	8003a2c <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800331e:	e00c      	b.n	800333a <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8003320:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003322:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003326:	f023 0301 	bic.w	r3, r3, #1
 800332a:	b2da      	uxtb	r2, r3
 800332c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800332e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8003332:	e002      	b.n	800333a <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8003334:	bf00      	nop
 8003336:	e000      	b.n	800333a <prvProcessReceivedCommands+0x1a6>
					break;
 8003338:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800333a:	4b08      	ldr	r3, [pc, #32]	@ (800335c <prvProcessReceivedCommands+0x1c8>)
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	1d39      	adds	r1, r7, #4
 8003340:	2200      	movs	r2, #0
 8003342:	4618      	mov	r0, r3
 8003344:	f7fe fc02 	bl	8001b4c <xQueueReceive>
 8003348:	4603      	mov	r3, r0
 800334a:	2b00      	cmp	r3, #0
 800334c:	f47f af26 	bne.w	800319c <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8003350:	bf00      	nop
 8003352:	bf00      	nop
 8003354:	3730      	adds	r7, #48	@ 0x30
 8003356:	46bd      	mov	sp, r7
 8003358:	bd80      	pop	{r7, pc}
 800335a:	bf00      	nop
 800335c:	20000c64 	.word	0x20000c64

08003360 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8003360:	b580      	push	{r7, lr}
 8003362:	b088      	sub	sp, #32
 8003364:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8003366:	e049      	b.n	80033fc <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003368:	4b2e      	ldr	r3, [pc, #184]	@ (8003424 <prvSwitchTimerLists+0xc4>)
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	68db      	ldr	r3, [r3, #12]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003372:	4b2c      	ldr	r3, [pc, #176]	@ (8003424 <prvSwitchTimerLists+0xc4>)
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	68db      	ldr	r3, [r3, #12]
 8003378:	68db      	ldr	r3, [r3, #12]
 800337a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	3304      	adds	r3, #4
 8003380:	4618      	mov	r0, r3
 8003382:	f7fe f90f 	bl	80015a4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	6a1b      	ldr	r3, [r3, #32]
 800338a:	68f8      	ldr	r0, [r7, #12]
 800338c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003394:	f003 0304 	and.w	r3, r3, #4
 8003398:	2b00      	cmp	r3, #0
 800339a:	d02f      	beq.n	80033fc <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	699b      	ldr	r3, [r3, #24]
 80033a0:	693a      	ldr	r2, [r7, #16]
 80033a2:	4413      	add	r3, r2
 80033a4:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80033a6:	68ba      	ldr	r2, [r7, #8]
 80033a8:	693b      	ldr	r3, [r7, #16]
 80033aa:	429a      	cmp	r2, r3
 80033ac:	d90e      	bls.n	80033cc <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	68ba      	ldr	r2, [r7, #8]
 80033b2:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	68fa      	ldr	r2, [r7, #12]
 80033b8:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80033ba:	4b1a      	ldr	r3, [pc, #104]	@ (8003424 <prvSwitchTimerLists+0xc4>)
 80033bc:	681a      	ldr	r2, [r3, #0]
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	3304      	adds	r3, #4
 80033c2:	4619      	mov	r1, r3
 80033c4:	4610      	mov	r0, r2
 80033c6:	f7fe f8b5 	bl	8001534 <vListInsert>
 80033ca:	e017      	b.n	80033fc <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80033cc:	2300      	movs	r3, #0
 80033ce:	9300      	str	r3, [sp, #0]
 80033d0:	2300      	movs	r3, #0
 80033d2:	693a      	ldr	r2, [r7, #16]
 80033d4:	2100      	movs	r1, #0
 80033d6:	68f8      	ldr	r0, [r7, #12]
 80033d8:	f7ff fd5a 	bl	8002e90 <xTimerGenericCommand>
 80033dc:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d10b      	bne.n	80033fc <prvSwitchTimerLists+0x9c>
	__asm volatile
 80033e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80033e8:	f383 8811 	msr	BASEPRI, r3
 80033ec:	f3bf 8f6f 	isb	sy
 80033f0:	f3bf 8f4f 	dsb	sy
 80033f4:	603b      	str	r3, [r7, #0]
}
 80033f6:	bf00      	nop
 80033f8:	bf00      	nop
 80033fa:	e7fd      	b.n	80033f8 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80033fc:	4b09      	ldr	r3, [pc, #36]	@ (8003424 <prvSwitchTimerLists+0xc4>)
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	2b00      	cmp	r3, #0
 8003404:	d1b0      	bne.n	8003368 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8003406:	4b07      	ldr	r3, [pc, #28]	@ (8003424 <prvSwitchTimerLists+0xc4>)
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800340c:	4b06      	ldr	r3, [pc, #24]	@ (8003428 <prvSwitchTimerLists+0xc8>)
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	4a04      	ldr	r2, [pc, #16]	@ (8003424 <prvSwitchTimerLists+0xc4>)
 8003412:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8003414:	4a04      	ldr	r2, [pc, #16]	@ (8003428 <prvSwitchTimerLists+0xc8>)
 8003416:	697b      	ldr	r3, [r7, #20]
 8003418:	6013      	str	r3, [r2, #0]
}
 800341a:	bf00      	nop
 800341c:	3718      	adds	r7, #24
 800341e:	46bd      	mov	sp, r7
 8003420:	bd80      	pop	{r7, pc}
 8003422:	bf00      	nop
 8003424:	20000c5c 	.word	0x20000c5c
 8003428:	20000c60 	.word	0x20000c60

0800342c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800342c:	b580      	push	{r7, lr}
 800342e:	b082      	sub	sp, #8
 8003430:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8003432:	f000 f92b 	bl	800368c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8003436:	4b15      	ldr	r3, [pc, #84]	@ (800348c <prvCheckForValidListAndQueue+0x60>)
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	2b00      	cmp	r3, #0
 800343c:	d120      	bne.n	8003480 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800343e:	4814      	ldr	r0, [pc, #80]	@ (8003490 <prvCheckForValidListAndQueue+0x64>)
 8003440:	f7fe f82a 	bl	8001498 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8003444:	4813      	ldr	r0, [pc, #76]	@ (8003494 <prvCheckForValidListAndQueue+0x68>)
 8003446:	f7fe f827 	bl	8001498 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800344a:	4b13      	ldr	r3, [pc, #76]	@ (8003498 <prvCheckForValidListAndQueue+0x6c>)
 800344c:	4a10      	ldr	r2, [pc, #64]	@ (8003490 <prvCheckForValidListAndQueue+0x64>)
 800344e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8003450:	4b12      	ldr	r3, [pc, #72]	@ (800349c <prvCheckForValidListAndQueue+0x70>)
 8003452:	4a10      	ldr	r2, [pc, #64]	@ (8003494 <prvCheckForValidListAndQueue+0x68>)
 8003454:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8003456:	2300      	movs	r3, #0
 8003458:	9300      	str	r3, [sp, #0]
 800345a:	4b11      	ldr	r3, [pc, #68]	@ (80034a0 <prvCheckForValidListAndQueue+0x74>)
 800345c:	4a11      	ldr	r2, [pc, #68]	@ (80034a4 <prvCheckForValidListAndQueue+0x78>)
 800345e:	2110      	movs	r1, #16
 8003460:	200a      	movs	r0, #10
 8003462:	f7fe f933 	bl	80016cc <xQueueGenericCreateStatic>
 8003466:	4603      	mov	r3, r0
 8003468:	4a08      	ldr	r2, [pc, #32]	@ (800348c <prvCheckForValidListAndQueue+0x60>)
 800346a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800346c:	4b07      	ldr	r3, [pc, #28]	@ (800348c <prvCheckForValidListAndQueue+0x60>)
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	2b00      	cmp	r3, #0
 8003472:	d005      	beq.n	8003480 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8003474:	4b05      	ldr	r3, [pc, #20]	@ (800348c <prvCheckForValidListAndQueue+0x60>)
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	490b      	ldr	r1, [pc, #44]	@ (80034a8 <prvCheckForValidListAndQueue+0x7c>)
 800347a:	4618      	mov	r0, r3
 800347c:	f7fe fd58 	bl	8001f30 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003480:	f000 f934 	bl	80036ec <vPortExitCritical>
}
 8003484:	bf00      	nop
 8003486:	46bd      	mov	sp, r7
 8003488:	bd80      	pop	{r7, pc}
 800348a:	bf00      	nop
 800348c:	20000c64 	.word	0x20000c64
 8003490:	20000c34 	.word	0x20000c34
 8003494:	20000c48 	.word	0x20000c48
 8003498:	20000c5c 	.word	0x20000c5c
 800349c:	20000c60 	.word	0x20000c60
 80034a0:	20000d10 	.word	0x20000d10
 80034a4:	20000c70 	.word	0x20000c70
 80034a8:	08003d1c 	.word	0x08003d1c

080034ac <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80034ac:	b480      	push	{r7}
 80034ae:	b085      	sub	sp, #20
 80034b0:	af00      	add	r7, sp, #0
 80034b2:	60f8      	str	r0, [r7, #12]
 80034b4:	60b9      	str	r1, [r7, #8]
 80034b6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	3b04      	subs	r3, #4
 80034bc:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80034c4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	3b04      	subs	r3, #4
 80034ca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80034cc:	68bb      	ldr	r3, [r7, #8]
 80034ce:	f023 0201 	bic.w	r2, r3, #1
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	3b04      	subs	r3, #4
 80034da:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80034dc:	4a08      	ldr	r2, [pc, #32]	@ (8003500 <pxPortInitialiseStack+0x54>)
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	3b14      	subs	r3, #20
 80034e6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80034e8:	687a      	ldr	r2, [r7, #4]
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	3b20      	subs	r3, #32
 80034f2:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80034f4:	68fb      	ldr	r3, [r7, #12]
}
 80034f6:	4618      	mov	r0, r3
 80034f8:	3714      	adds	r7, #20
 80034fa:	46bd      	mov	sp, r7
 80034fc:	bc80      	pop	{r7}
 80034fe:	4770      	bx	lr
 8003500:	08003505 	.word	0x08003505

08003504 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8003504:	b480      	push	{r7}
 8003506:	b085      	sub	sp, #20
 8003508:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 800350a:	2300      	movs	r3, #0
 800350c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800350e:	4b12      	ldr	r3, [pc, #72]	@ (8003558 <prvTaskExitError+0x54>)
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003516:	d00b      	beq.n	8003530 <prvTaskExitError+0x2c>
	__asm volatile
 8003518:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800351c:	f383 8811 	msr	BASEPRI, r3
 8003520:	f3bf 8f6f 	isb	sy
 8003524:	f3bf 8f4f 	dsb	sy
 8003528:	60fb      	str	r3, [r7, #12]
}
 800352a:	bf00      	nop
 800352c:	bf00      	nop
 800352e:	e7fd      	b.n	800352c <prvTaskExitError+0x28>
	__asm volatile
 8003530:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003534:	f383 8811 	msr	BASEPRI, r3
 8003538:	f3bf 8f6f 	isb	sy
 800353c:	f3bf 8f4f 	dsb	sy
 8003540:	60bb      	str	r3, [r7, #8]
}
 8003542:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8003544:	bf00      	nop
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	2b00      	cmp	r3, #0
 800354a:	d0fc      	beq.n	8003546 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800354c:	bf00      	nop
 800354e:	bf00      	nop
 8003550:	3714      	adds	r7, #20
 8003552:	46bd      	mov	sp, r7
 8003554:	bc80      	pop	{r7}
 8003556:	4770      	bx	lr
 8003558:	2000000c 	.word	0x2000000c
 800355c:	00000000 	.word	0x00000000

08003560 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8003560:	4b07      	ldr	r3, [pc, #28]	@ (8003580 <pxCurrentTCBConst2>)
 8003562:	6819      	ldr	r1, [r3, #0]
 8003564:	6808      	ldr	r0, [r1, #0]
 8003566:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800356a:	f380 8809 	msr	PSP, r0
 800356e:	f3bf 8f6f 	isb	sy
 8003572:	f04f 0000 	mov.w	r0, #0
 8003576:	f380 8811 	msr	BASEPRI, r0
 800357a:	f04e 0e0d 	orr.w	lr, lr, #13
 800357e:	4770      	bx	lr

08003580 <pxCurrentTCBConst2>:
 8003580:	20000734 	.word	0x20000734
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8003584:	bf00      	nop
 8003586:	bf00      	nop

08003588 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8003588:	4806      	ldr	r0, [pc, #24]	@ (80035a4 <prvPortStartFirstTask+0x1c>)
 800358a:	6800      	ldr	r0, [r0, #0]
 800358c:	6800      	ldr	r0, [r0, #0]
 800358e:	f380 8808 	msr	MSP, r0
 8003592:	b662      	cpsie	i
 8003594:	b661      	cpsie	f
 8003596:	f3bf 8f4f 	dsb	sy
 800359a:	f3bf 8f6f 	isb	sy
 800359e:	df00      	svc	0
 80035a0:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80035a2:	bf00      	nop
 80035a4:	e000ed08 	.word	0xe000ed08

080035a8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80035a8:	b580      	push	{r7, lr}
 80035aa:	b084      	sub	sp, #16
 80035ac:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80035ae:	4b32      	ldr	r3, [pc, #200]	@ (8003678 <xPortStartScheduler+0xd0>)
 80035b0:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	781b      	ldrb	r3, [r3, #0]
 80035b6:	b2db      	uxtb	r3, r3
 80035b8:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	22ff      	movs	r2, #255	@ 0xff
 80035be:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	781b      	ldrb	r3, [r3, #0]
 80035c4:	b2db      	uxtb	r3, r3
 80035c6:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80035c8:	78fb      	ldrb	r3, [r7, #3]
 80035ca:	b2db      	uxtb	r3, r3
 80035cc:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80035d0:	b2da      	uxtb	r2, r3
 80035d2:	4b2a      	ldr	r3, [pc, #168]	@ (800367c <xPortStartScheduler+0xd4>)
 80035d4:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80035d6:	4b2a      	ldr	r3, [pc, #168]	@ (8003680 <xPortStartScheduler+0xd8>)
 80035d8:	2207      	movs	r2, #7
 80035da:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80035dc:	e009      	b.n	80035f2 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 80035de:	4b28      	ldr	r3, [pc, #160]	@ (8003680 <xPortStartScheduler+0xd8>)
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	3b01      	subs	r3, #1
 80035e4:	4a26      	ldr	r2, [pc, #152]	@ (8003680 <xPortStartScheduler+0xd8>)
 80035e6:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80035e8:	78fb      	ldrb	r3, [r7, #3]
 80035ea:	b2db      	uxtb	r3, r3
 80035ec:	005b      	lsls	r3, r3, #1
 80035ee:	b2db      	uxtb	r3, r3
 80035f0:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80035f2:	78fb      	ldrb	r3, [r7, #3]
 80035f4:	b2db      	uxtb	r3, r3
 80035f6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80035fa:	2b80      	cmp	r3, #128	@ 0x80
 80035fc:	d0ef      	beq.n	80035de <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80035fe:	4b20      	ldr	r3, [pc, #128]	@ (8003680 <xPortStartScheduler+0xd8>)
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	f1c3 0307 	rsb	r3, r3, #7
 8003606:	2b04      	cmp	r3, #4
 8003608:	d00b      	beq.n	8003622 <xPortStartScheduler+0x7a>
	__asm volatile
 800360a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800360e:	f383 8811 	msr	BASEPRI, r3
 8003612:	f3bf 8f6f 	isb	sy
 8003616:	f3bf 8f4f 	dsb	sy
 800361a:	60bb      	str	r3, [r7, #8]
}
 800361c:	bf00      	nop
 800361e:	bf00      	nop
 8003620:	e7fd      	b.n	800361e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8003622:	4b17      	ldr	r3, [pc, #92]	@ (8003680 <xPortStartScheduler+0xd8>)
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	021b      	lsls	r3, r3, #8
 8003628:	4a15      	ldr	r2, [pc, #84]	@ (8003680 <xPortStartScheduler+0xd8>)
 800362a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800362c:	4b14      	ldr	r3, [pc, #80]	@ (8003680 <xPortStartScheduler+0xd8>)
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8003634:	4a12      	ldr	r2, [pc, #72]	@ (8003680 <xPortStartScheduler+0xd8>)
 8003636:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	b2da      	uxtb	r2, r3
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8003640:	4b10      	ldr	r3, [pc, #64]	@ (8003684 <xPortStartScheduler+0xdc>)
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	4a0f      	ldr	r2, [pc, #60]	@ (8003684 <xPortStartScheduler+0xdc>)
 8003646:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800364a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800364c:	4b0d      	ldr	r3, [pc, #52]	@ (8003684 <xPortStartScheduler+0xdc>)
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	4a0c      	ldr	r2, [pc, #48]	@ (8003684 <xPortStartScheduler+0xdc>)
 8003652:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8003656:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8003658:	f000 f8b8 	bl	80037cc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800365c:	4b0a      	ldr	r3, [pc, #40]	@ (8003688 <xPortStartScheduler+0xe0>)
 800365e:	2200      	movs	r2, #0
 8003660:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8003662:	f7ff ff91 	bl	8003588 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8003666:	f7ff f877 	bl	8002758 <vTaskSwitchContext>
	prvTaskExitError();
 800366a:	f7ff ff4b 	bl	8003504 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800366e:	2300      	movs	r3, #0
}
 8003670:	4618      	mov	r0, r3
 8003672:	3710      	adds	r7, #16
 8003674:	46bd      	mov	sp, r7
 8003676:	bd80      	pop	{r7, pc}
 8003678:	e000e400 	.word	0xe000e400
 800367c:	20000d60 	.word	0x20000d60
 8003680:	20000d64 	.word	0x20000d64
 8003684:	e000ed20 	.word	0xe000ed20
 8003688:	2000000c 	.word	0x2000000c

0800368c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800368c:	b480      	push	{r7}
 800368e:	b083      	sub	sp, #12
 8003690:	af00      	add	r7, sp, #0
	__asm volatile
 8003692:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003696:	f383 8811 	msr	BASEPRI, r3
 800369a:	f3bf 8f6f 	isb	sy
 800369e:	f3bf 8f4f 	dsb	sy
 80036a2:	607b      	str	r3, [r7, #4]
}
 80036a4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80036a6:	4b0f      	ldr	r3, [pc, #60]	@ (80036e4 <vPortEnterCritical+0x58>)
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	3301      	adds	r3, #1
 80036ac:	4a0d      	ldr	r2, [pc, #52]	@ (80036e4 <vPortEnterCritical+0x58>)
 80036ae:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80036b0:	4b0c      	ldr	r3, [pc, #48]	@ (80036e4 <vPortEnterCritical+0x58>)
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	2b01      	cmp	r3, #1
 80036b6:	d110      	bne.n	80036da <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80036b8:	4b0b      	ldr	r3, [pc, #44]	@ (80036e8 <vPortEnterCritical+0x5c>)
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	b2db      	uxtb	r3, r3
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d00b      	beq.n	80036da <vPortEnterCritical+0x4e>
	__asm volatile
 80036c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80036c6:	f383 8811 	msr	BASEPRI, r3
 80036ca:	f3bf 8f6f 	isb	sy
 80036ce:	f3bf 8f4f 	dsb	sy
 80036d2:	603b      	str	r3, [r7, #0]
}
 80036d4:	bf00      	nop
 80036d6:	bf00      	nop
 80036d8:	e7fd      	b.n	80036d6 <vPortEnterCritical+0x4a>
	}
}
 80036da:	bf00      	nop
 80036dc:	370c      	adds	r7, #12
 80036de:	46bd      	mov	sp, r7
 80036e0:	bc80      	pop	{r7}
 80036e2:	4770      	bx	lr
 80036e4:	2000000c 	.word	0x2000000c
 80036e8:	e000ed04 	.word	0xe000ed04

080036ec <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80036ec:	b480      	push	{r7}
 80036ee:	b083      	sub	sp, #12
 80036f0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80036f2:	4b12      	ldr	r3, [pc, #72]	@ (800373c <vPortExitCritical+0x50>)
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d10b      	bne.n	8003712 <vPortExitCritical+0x26>
	__asm volatile
 80036fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80036fe:	f383 8811 	msr	BASEPRI, r3
 8003702:	f3bf 8f6f 	isb	sy
 8003706:	f3bf 8f4f 	dsb	sy
 800370a:	607b      	str	r3, [r7, #4]
}
 800370c:	bf00      	nop
 800370e:	bf00      	nop
 8003710:	e7fd      	b.n	800370e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8003712:	4b0a      	ldr	r3, [pc, #40]	@ (800373c <vPortExitCritical+0x50>)
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	3b01      	subs	r3, #1
 8003718:	4a08      	ldr	r2, [pc, #32]	@ (800373c <vPortExitCritical+0x50>)
 800371a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800371c:	4b07      	ldr	r3, [pc, #28]	@ (800373c <vPortExitCritical+0x50>)
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	2b00      	cmp	r3, #0
 8003722:	d105      	bne.n	8003730 <vPortExitCritical+0x44>
 8003724:	2300      	movs	r3, #0
 8003726:	603b      	str	r3, [r7, #0]
	__asm volatile
 8003728:	683b      	ldr	r3, [r7, #0]
 800372a:	f383 8811 	msr	BASEPRI, r3
}
 800372e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8003730:	bf00      	nop
 8003732:	370c      	adds	r7, #12
 8003734:	46bd      	mov	sp, r7
 8003736:	bc80      	pop	{r7}
 8003738:	4770      	bx	lr
 800373a:	bf00      	nop
 800373c:	2000000c 	.word	0x2000000c

08003740 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8003740:	f3ef 8009 	mrs	r0, PSP
 8003744:	f3bf 8f6f 	isb	sy
 8003748:	4b0d      	ldr	r3, [pc, #52]	@ (8003780 <pxCurrentTCBConst>)
 800374a:	681a      	ldr	r2, [r3, #0]
 800374c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8003750:	6010      	str	r0, [r2, #0]
 8003752:	e92d 4008 	stmdb	sp!, {r3, lr}
 8003756:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800375a:	f380 8811 	msr	BASEPRI, r0
 800375e:	f7fe fffb 	bl	8002758 <vTaskSwitchContext>
 8003762:	f04f 0000 	mov.w	r0, #0
 8003766:	f380 8811 	msr	BASEPRI, r0
 800376a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800376e:	6819      	ldr	r1, [r3, #0]
 8003770:	6808      	ldr	r0, [r1, #0]
 8003772:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8003776:	f380 8809 	msr	PSP, r0
 800377a:	f3bf 8f6f 	isb	sy
 800377e:	4770      	bx	lr

08003780 <pxCurrentTCBConst>:
 8003780:	20000734 	.word	0x20000734
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8003784:	bf00      	nop
 8003786:	bf00      	nop

08003788 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8003788:	b580      	push	{r7, lr}
 800378a:	b082      	sub	sp, #8
 800378c:	af00      	add	r7, sp, #0
	__asm volatile
 800378e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003792:	f383 8811 	msr	BASEPRI, r3
 8003796:	f3bf 8f6f 	isb	sy
 800379a:	f3bf 8f4f 	dsb	sy
 800379e:	607b      	str	r3, [r7, #4]
}
 80037a0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80037a2:	f7fe ff1f 	bl	80025e4 <xTaskIncrementTick>
 80037a6:	4603      	mov	r3, r0
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d003      	beq.n	80037b4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80037ac:	4b06      	ldr	r3, [pc, #24]	@ (80037c8 <xPortSysTickHandler+0x40>)
 80037ae:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80037b2:	601a      	str	r2, [r3, #0]
 80037b4:	2300      	movs	r3, #0
 80037b6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80037b8:	683b      	ldr	r3, [r7, #0]
 80037ba:	f383 8811 	msr	BASEPRI, r3
}
 80037be:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80037c0:	bf00      	nop
 80037c2:	3708      	adds	r7, #8
 80037c4:	46bd      	mov	sp, r7
 80037c6:	bd80      	pop	{r7, pc}
 80037c8:	e000ed04 	.word	0xe000ed04

080037cc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80037cc:	b480      	push	{r7}
 80037ce:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80037d0:	4b0a      	ldr	r3, [pc, #40]	@ (80037fc <vPortSetupTimerInterrupt+0x30>)
 80037d2:	2200      	movs	r2, #0
 80037d4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80037d6:	4b0a      	ldr	r3, [pc, #40]	@ (8003800 <vPortSetupTimerInterrupt+0x34>)
 80037d8:	2200      	movs	r2, #0
 80037da:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80037dc:	4b09      	ldr	r3, [pc, #36]	@ (8003804 <vPortSetupTimerInterrupt+0x38>)
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	4a09      	ldr	r2, [pc, #36]	@ (8003808 <vPortSetupTimerInterrupt+0x3c>)
 80037e2:	fba2 2303 	umull	r2, r3, r2, r3
 80037e6:	099b      	lsrs	r3, r3, #6
 80037e8:	4a08      	ldr	r2, [pc, #32]	@ (800380c <vPortSetupTimerInterrupt+0x40>)
 80037ea:	3b01      	subs	r3, #1
 80037ec:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80037ee:	4b03      	ldr	r3, [pc, #12]	@ (80037fc <vPortSetupTimerInterrupt+0x30>)
 80037f0:	2207      	movs	r2, #7
 80037f2:	601a      	str	r2, [r3, #0]
}
 80037f4:	bf00      	nop
 80037f6:	46bd      	mov	sp, r7
 80037f8:	bc80      	pop	{r7}
 80037fa:	4770      	bx	lr
 80037fc:	e000e010 	.word	0xe000e010
 8003800:	e000e018 	.word	0xe000e018
 8003804:	20000000 	.word	0x20000000
 8003808:	10624dd3 	.word	0x10624dd3
 800380c:	e000e014 	.word	0xe000e014

08003810 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8003810:	b480      	push	{r7}
 8003812:	b085      	sub	sp, #20
 8003814:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8003816:	f3ef 8305 	mrs	r3, IPSR
 800381a:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	2b0f      	cmp	r3, #15
 8003820:	d915      	bls.n	800384e <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8003822:	4a17      	ldr	r2, [pc, #92]	@ (8003880 <vPortValidateInterruptPriority+0x70>)
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	4413      	add	r3, r2
 8003828:	781b      	ldrb	r3, [r3, #0]
 800382a:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800382c:	4b15      	ldr	r3, [pc, #84]	@ (8003884 <vPortValidateInterruptPriority+0x74>)
 800382e:	781b      	ldrb	r3, [r3, #0]
 8003830:	7afa      	ldrb	r2, [r7, #11]
 8003832:	429a      	cmp	r2, r3
 8003834:	d20b      	bcs.n	800384e <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8003836:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800383a:	f383 8811 	msr	BASEPRI, r3
 800383e:	f3bf 8f6f 	isb	sy
 8003842:	f3bf 8f4f 	dsb	sy
 8003846:	607b      	str	r3, [r7, #4]
}
 8003848:	bf00      	nop
 800384a:	bf00      	nop
 800384c:	e7fd      	b.n	800384a <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800384e:	4b0e      	ldr	r3, [pc, #56]	@ (8003888 <vPortValidateInterruptPriority+0x78>)
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8003856:	4b0d      	ldr	r3, [pc, #52]	@ (800388c <vPortValidateInterruptPriority+0x7c>)
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	429a      	cmp	r2, r3
 800385c:	d90b      	bls.n	8003876 <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800385e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003862:	f383 8811 	msr	BASEPRI, r3
 8003866:	f3bf 8f6f 	isb	sy
 800386a:	f3bf 8f4f 	dsb	sy
 800386e:	603b      	str	r3, [r7, #0]
}
 8003870:	bf00      	nop
 8003872:	bf00      	nop
 8003874:	e7fd      	b.n	8003872 <vPortValidateInterruptPriority+0x62>
	}
 8003876:	bf00      	nop
 8003878:	3714      	adds	r7, #20
 800387a:	46bd      	mov	sp, r7
 800387c:	bc80      	pop	{r7}
 800387e:	4770      	bx	lr
 8003880:	e000e3f0 	.word	0xe000e3f0
 8003884:	20000d60 	.word	0x20000d60
 8003888:	e000ed0c 	.word	0xe000ed0c
 800388c:	20000d64 	.word	0x20000d64

08003890 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8003890:	b580      	push	{r7, lr}
 8003892:	b08a      	sub	sp, #40	@ 0x28
 8003894:	af00      	add	r7, sp, #0
 8003896:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8003898:	2300      	movs	r3, #0
 800389a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800389c:	f7fe fde8 	bl	8002470 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80038a0:	4b5c      	ldr	r3, [pc, #368]	@ (8003a14 <pvPortMalloc+0x184>)
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d101      	bne.n	80038ac <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80038a8:	f000 f924 	bl	8003af4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80038ac:	4b5a      	ldr	r3, [pc, #360]	@ (8003a18 <pvPortMalloc+0x188>)
 80038ae:	681a      	ldr	r2, [r3, #0]
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	4013      	ands	r3, r2
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	f040 8095 	bne.w	80039e4 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d01e      	beq.n	80038fe <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 80038c0:	2208      	movs	r2, #8
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	4413      	add	r3, r2
 80038c6:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	f003 0307 	and.w	r3, r3, #7
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d015      	beq.n	80038fe <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	f023 0307 	bic.w	r3, r3, #7
 80038d8:	3308      	adds	r3, #8
 80038da:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	f003 0307 	and.w	r3, r3, #7
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d00b      	beq.n	80038fe <pvPortMalloc+0x6e>
	__asm volatile
 80038e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80038ea:	f383 8811 	msr	BASEPRI, r3
 80038ee:	f3bf 8f6f 	isb	sy
 80038f2:	f3bf 8f4f 	dsb	sy
 80038f6:	617b      	str	r3, [r7, #20]
}
 80038f8:	bf00      	nop
 80038fa:	bf00      	nop
 80038fc:	e7fd      	b.n	80038fa <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	2b00      	cmp	r3, #0
 8003902:	d06f      	beq.n	80039e4 <pvPortMalloc+0x154>
 8003904:	4b45      	ldr	r3, [pc, #276]	@ (8003a1c <pvPortMalloc+0x18c>)
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	687a      	ldr	r2, [r7, #4]
 800390a:	429a      	cmp	r2, r3
 800390c:	d86a      	bhi.n	80039e4 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800390e:	4b44      	ldr	r3, [pc, #272]	@ (8003a20 <pvPortMalloc+0x190>)
 8003910:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8003912:	4b43      	ldr	r3, [pc, #268]	@ (8003a20 <pvPortMalloc+0x190>)
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003918:	e004      	b.n	8003924 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800391a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800391c:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800391e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003924:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003926:	685b      	ldr	r3, [r3, #4]
 8003928:	687a      	ldr	r2, [r7, #4]
 800392a:	429a      	cmp	r2, r3
 800392c:	d903      	bls.n	8003936 <pvPortMalloc+0xa6>
 800392e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	2b00      	cmp	r3, #0
 8003934:	d1f1      	bne.n	800391a <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8003936:	4b37      	ldr	r3, [pc, #220]	@ (8003a14 <pvPortMalloc+0x184>)
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800393c:	429a      	cmp	r2, r3
 800393e:	d051      	beq.n	80039e4 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8003940:	6a3b      	ldr	r3, [r7, #32]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	2208      	movs	r2, #8
 8003946:	4413      	add	r3, r2
 8003948:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800394a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800394c:	681a      	ldr	r2, [r3, #0]
 800394e:	6a3b      	ldr	r3, [r7, #32]
 8003950:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8003952:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003954:	685a      	ldr	r2, [r3, #4]
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	1ad2      	subs	r2, r2, r3
 800395a:	2308      	movs	r3, #8
 800395c:	005b      	lsls	r3, r3, #1
 800395e:	429a      	cmp	r2, r3
 8003960:	d920      	bls.n	80039a4 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8003962:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	4413      	add	r3, r2
 8003968:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800396a:	69bb      	ldr	r3, [r7, #24]
 800396c:	f003 0307 	and.w	r3, r3, #7
 8003970:	2b00      	cmp	r3, #0
 8003972:	d00b      	beq.n	800398c <pvPortMalloc+0xfc>
	__asm volatile
 8003974:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003978:	f383 8811 	msr	BASEPRI, r3
 800397c:	f3bf 8f6f 	isb	sy
 8003980:	f3bf 8f4f 	dsb	sy
 8003984:	613b      	str	r3, [r7, #16]
}
 8003986:	bf00      	nop
 8003988:	bf00      	nop
 800398a:	e7fd      	b.n	8003988 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800398c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800398e:	685a      	ldr	r2, [r3, #4]
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	1ad2      	subs	r2, r2, r3
 8003994:	69bb      	ldr	r3, [r7, #24]
 8003996:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8003998:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800399a:	687a      	ldr	r2, [r7, #4]
 800399c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800399e:	69b8      	ldr	r0, [r7, #24]
 80039a0:	f000 f90a 	bl	8003bb8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80039a4:	4b1d      	ldr	r3, [pc, #116]	@ (8003a1c <pvPortMalloc+0x18c>)
 80039a6:	681a      	ldr	r2, [r3, #0]
 80039a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039aa:	685b      	ldr	r3, [r3, #4]
 80039ac:	1ad3      	subs	r3, r2, r3
 80039ae:	4a1b      	ldr	r2, [pc, #108]	@ (8003a1c <pvPortMalloc+0x18c>)
 80039b0:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80039b2:	4b1a      	ldr	r3, [pc, #104]	@ (8003a1c <pvPortMalloc+0x18c>)
 80039b4:	681a      	ldr	r2, [r3, #0]
 80039b6:	4b1b      	ldr	r3, [pc, #108]	@ (8003a24 <pvPortMalloc+0x194>)
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	429a      	cmp	r2, r3
 80039bc:	d203      	bcs.n	80039c6 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80039be:	4b17      	ldr	r3, [pc, #92]	@ (8003a1c <pvPortMalloc+0x18c>)
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	4a18      	ldr	r2, [pc, #96]	@ (8003a24 <pvPortMalloc+0x194>)
 80039c4:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80039c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039c8:	685a      	ldr	r2, [r3, #4]
 80039ca:	4b13      	ldr	r3, [pc, #76]	@ (8003a18 <pvPortMalloc+0x188>)
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	431a      	orrs	r2, r3
 80039d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039d2:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80039d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039d6:	2200      	movs	r2, #0
 80039d8:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80039da:	4b13      	ldr	r3, [pc, #76]	@ (8003a28 <pvPortMalloc+0x198>)
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	3301      	adds	r3, #1
 80039e0:	4a11      	ldr	r2, [pc, #68]	@ (8003a28 <pvPortMalloc+0x198>)
 80039e2:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80039e4:	f7fe fd52 	bl	800248c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80039e8:	69fb      	ldr	r3, [r7, #28]
 80039ea:	f003 0307 	and.w	r3, r3, #7
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d00b      	beq.n	8003a0a <pvPortMalloc+0x17a>
	__asm volatile
 80039f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80039f6:	f383 8811 	msr	BASEPRI, r3
 80039fa:	f3bf 8f6f 	isb	sy
 80039fe:	f3bf 8f4f 	dsb	sy
 8003a02:	60fb      	str	r3, [r7, #12]
}
 8003a04:	bf00      	nop
 8003a06:	bf00      	nop
 8003a08:	e7fd      	b.n	8003a06 <pvPortMalloc+0x176>
	return pvReturn;
 8003a0a:	69fb      	ldr	r3, [r7, #28]
}
 8003a0c:	4618      	mov	r0, r3
 8003a0e:	3728      	adds	r7, #40	@ 0x28
 8003a10:	46bd      	mov	sp, r7
 8003a12:	bd80      	pop	{r7, pc}
 8003a14:	20001970 	.word	0x20001970
 8003a18:	20001984 	.word	0x20001984
 8003a1c:	20001974 	.word	0x20001974
 8003a20:	20001968 	.word	0x20001968
 8003a24:	20001978 	.word	0x20001978
 8003a28:	2000197c 	.word	0x2000197c

08003a2c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8003a2c:	b580      	push	{r7, lr}
 8003a2e:	b086      	sub	sp, #24
 8003a30:	af00      	add	r7, sp, #0
 8003a32:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d04f      	beq.n	8003ade <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8003a3e:	2308      	movs	r3, #8
 8003a40:	425b      	negs	r3, r3
 8003a42:	697a      	ldr	r2, [r7, #20]
 8003a44:	4413      	add	r3, r2
 8003a46:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8003a48:	697b      	ldr	r3, [r7, #20]
 8003a4a:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8003a4c:	693b      	ldr	r3, [r7, #16]
 8003a4e:	685a      	ldr	r2, [r3, #4]
 8003a50:	4b25      	ldr	r3, [pc, #148]	@ (8003ae8 <vPortFree+0xbc>)
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	4013      	ands	r3, r2
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d10b      	bne.n	8003a72 <vPortFree+0x46>
	__asm volatile
 8003a5a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003a5e:	f383 8811 	msr	BASEPRI, r3
 8003a62:	f3bf 8f6f 	isb	sy
 8003a66:	f3bf 8f4f 	dsb	sy
 8003a6a:	60fb      	str	r3, [r7, #12]
}
 8003a6c:	bf00      	nop
 8003a6e:	bf00      	nop
 8003a70:	e7fd      	b.n	8003a6e <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8003a72:	693b      	ldr	r3, [r7, #16]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d00b      	beq.n	8003a92 <vPortFree+0x66>
	__asm volatile
 8003a7a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003a7e:	f383 8811 	msr	BASEPRI, r3
 8003a82:	f3bf 8f6f 	isb	sy
 8003a86:	f3bf 8f4f 	dsb	sy
 8003a8a:	60bb      	str	r3, [r7, #8]
}
 8003a8c:	bf00      	nop
 8003a8e:	bf00      	nop
 8003a90:	e7fd      	b.n	8003a8e <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8003a92:	693b      	ldr	r3, [r7, #16]
 8003a94:	685a      	ldr	r2, [r3, #4]
 8003a96:	4b14      	ldr	r3, [pc, #80]	@ (8003ae8 <vPortFree+0xbc>)
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	4013      	ands	r3, r2
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d01e      	beq.n	8003ade <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8003aa0:	693b      	ldr	r3, [r7, #16]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d11a      	bne.n	8003ade <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8003aa8:	693b      	ldr	r3, [r7, #16]
 8003aaa:	685a      	ldr	r2, [r3, #4]
 8003aac:	4b0e      	ldr	r3, [pc, #56]	@ (8003ae8 <vPortFree+0xbc>)
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	43db      	mvns	r3, r3
 8003ab2:	401a      	ands	r2, r3
 8003ab4:	693b      	ldr	r3, [r7, #16]
 8003ab6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8003ab8:	f7fe fcda 	bl	8002470 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8003abc:	693b      	ldr	r3, [r7, #16]
 8003abe:	685a      	ldr	r2, [r3, #4]
 8003ac0:	4b0a      	ldr	r3, [pc, #40]	@ (8003aec <vPortFree+0xc0>)
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	4413      	add	r3, r2
 8003ac6:	4a09      	ldr	r2, [pc, #36]	@ (8003aec <vPortFree+0xc0>)
 8003ac8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8003aca:	6938      	ldr	r0, [r7, #16]
 8003acc:	f000 f874 	bl	8003bb8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8003ad0:	4b07      	ldr	r3, [pc, #28]	@ (8003af0 <vPortFree+0xc4>)
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	3301      	adds	r3, #1
 8003ad6:	4a06      	ldr	r2, [pc, #24]	@ (8003af0 <vPortFree+0xc4>)
 8003ad8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8003ada:	f7fe fcd7 	bl	800248c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8003ade:	bf00      	nop
 8003ae0:	3718      	adds	r7, #24
 8003ae2:	46bd      	mov	sp, r7
 8003ae4:	bd80      	pop	{r7, pc}
 8003ae6:	bf00      	nop
 8003ae8:	20001984 	.word	0x20001984
 8003aec:	20001974 	.word	0x20001974
 8003af0:	20001980 	.word	0x20001980

08003af4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8003af4:	b480      	push	{r7}
 8003af6:	b085      	sub	sp, #20
 8003af8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8003afa:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8003afe:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8003b00:	4b27      	ldr	r3, [pc, #156]	@ (8003ba0 <prvHeapInit+0xac>)
 8003b02:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	f003 0307 	and.w	r3, r3, #7
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d00c      	beq.n	8003b28 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	3307      	adds	r3, #7
 8003b12:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	f023 0307 	bic.w	r3, r3, #7
 8003b1a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8003b1c:	68ba      	ldr	r2, [r7, #8]
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	1ad3      	subs	r3, r2, r3
 8003b22:	4a1f      	ldr	r2, [pc, #124]	@ (8003ba0 <prvHeapInit+0xac>)
 8003b24:	4413      	add	r3, r2
 8003b26:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8003b2c:	4a1d      	ldr	r2, [pc, #116]	@ (8003ba4 <prvHeapInit+0xb0>)
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8003b32:	4b1c      	ldr	r3, [pc, #112]	@ (8003ba4 <prvHeapInit+0xb0>)
 8003b34:	2200      	movs	r2, #0
 8003b36:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	68ba      	ldr	r2, [r7, #8]
 8003b3c:	4413      	add	r3, r2
 8003b3e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8003b40:	2208      	movs	r2, #8
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	1a9b      	subs	r3, r3, r2
 8003b46:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	f023 0307 	bic.w	r3, r3, #7
 8003b4e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	4a15      	ldr	r2, [pc, #84]	@ (8003ba8 <prvHeapInit+0xb4>)
 8003b54:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8003b56:	4b14      	ldr	r3, [pc, #80]	@ (8003ba8 <prvHeapInit+0xb4>)
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	2200      	movs	r2, #0
 8003b5c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8003b5e:	4b12      	ldr	r3, [pc, #72]	@ (8003ba8 <prvHeapInit+0xb4>)
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	2200      	movs	r2, #0
 8003b64:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8003b6a:	683b      	ldr	r3, [r7, #0]
 8003b6c:	68fa      	ldr	r2, [r7, #12]
 8003b6e:	1ad2      	subs	r2, r2, r3
 8003b70:	683b      	ldr	r3, [r7, #0]
 8003b72:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8003b74:	4b0c      	ldr	r3, [pc, #48]	@ (8003ba8 <prvHeapInit+0xb4>)
 8003b76:	681a      	ldr	r2, [r3, #0]
 8003b78:	683b      	ldr	r3, [r7, #0]
 8003b7a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003b7c:	683b      	ldr	r3, [r7, #0]
 8003b7e:	685b      	ldr	r3, [r3, #4]
 8003b80:	4a0a      	ldr	r2, [pc, #40]	@ (8003bac <prvHeapInit+0xb8>)
 8003b82:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003b84:	683b      	ldr	r3, [r7, #0]
 8003b86:	685b      	ldr	r3, [r3, #4]
 8003b88:	4a09      	ldr	r2, [pc, #36]	@ (8003bb0 <prvHeapInit+0xbc>)
 8003b8a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8003b8c:	4b09      	ldr	r3, [pc, #36]	@ (8003bb4 <prvHeapInit+0xc0>)
 8003b8e:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8003b92:	601a      	str	r2, [r3, #0]
}
 8003b94:	bf00      	nop
 8003b96:	3714      	adds	r7, #20
 8003b98:	46bd      	mov	sp, r7
 8003b9a:	bc80      	pop	{r7}
 8003b9c:	4770      	bx	lr
 8003b9e:	bf00      	nop
 8003ba0:	20000d68 	.word	0x20000d68
 8003ba4:	20001968 	.word	0x20001968
 8003ba8:	20001970 	.word	0x20001970
 8003bac:	20001978 	.word	0x20001978
 8003bb0:	20001974 	.word	0x20001974
 8003bb4:	20001984 	.word	0x20001984

08003bb8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8003bb8:	b480      	push	{r7}
 8003bba:	b085      	sub	sp, #20
 8003bbc:	af00      	add	r7, sp, #0
 8003bbe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8003bc0:	4b27      	ldr	r3, [pc, #156]	@ (8003c60 <prvInsertBlockIntoFreeList+0xa8>)
 8003bc2:	60fb      	str	r3, [r7, #12]
 8003bc4:	e002      	b.n	8003bcc <prvInsertBlockIntoFreeList+0x14>
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	60fb      	str	r3, [r7, #12]
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	687a      	ldr	r2, [r7, #4]
 8003bd2:	429a      	cmp	r2, r3
 8003bd4:	d8f7      	bhi.n	8003bc6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	685b      	ldr	r3, [r3, #4]
 8003bde:	68ba      	ldr	r2, [r7, #8]
 8003be0:	4413      	add	r3, r2
 8003be2:	687a      	ldr	r2, [r7, #4]
 8003be4:	429a      	cmp	r2, r3
 8003be6:	d108      	bne.n	8003bfa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	685a      	ldr	r2, [r3, #4]
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	685b      	ldr	r3, [r3, #4]
 8003bf0:	441a      	add	r2, r3
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	685b      	ldr	r3, [r3, #4]
 8003c02:	68ba      	ldr	r2, [r7, #8]
 8003c04:	441a      	add	r2, r3
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	429a      	cmp	r2, r3
 8003c0c:	d118      	bne.n	8003c40 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	681a      	ldr	r2, [r3, #0]
 8003c12:	4b14      	ldr	r3, [pc, #80]	@ (8003c64 <prvInsertBlockIntoFreeList+0xac>)
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	429a      	cmp	r2, r3
 8003c18:	d00d      	beq.n	8003c36 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	685a      	ldr	r2, [r3, #4]
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	685b      	ldr	r3, [r3, #4]
 8003c24:	441a      	add	r2, r3
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	681a      	ldr	r2, [r3, #0]
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	601a      	str	r2, [r3, #0]
 8003c34:	e008      	b.n	8003c48 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8003c36:	4b0b      	ldr	r3, [pc, #44]	@ (8003c64 <prvInsertBlockIntoFreeList+0xac>)
 8003c38:	681a      	ldr	r2, [r3, #0]
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	601a      	str	r2, [r3, #0]
 8003c3e:	e003      	b.n	8003c48 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	681a      	ldr	r2, [r3, #0]
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8003c48:	68fa      	ldr	r2, [r7, #12]
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	429a      	cmp	r2, r3
 8003c4e:	d002      	beq.n	8003c56 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	687a      	ldr	r2, [r7, #4]
 8003c54:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003c56:	bf00      	nop
 8003c58:	3714      	adds	r7, #20
 8003c5a:	46bd      	mov	sp, r7
 8003c5c:	bc80      	pop	{r7}
 8003c5e:	4770      	bx	lr
 8003c60:	20001968 	.word	0x20001968
 8003c64:	20001970 	.word	0x20001970

08003c68 <memset>:
 8003c68:	4603      	mov	r3, r0
 8003c6a:	4402      	add	r2, r0
 8003c6c:	4293      	cmp	r3, r2
 8003c6e:	d100      	bne.n	8003c72 <memset+0xa>
 8003c70:	4770      	bx	lr
 8003c72:	f803 1b01 	strb.w	r1, [r3], #1
 8003c76:	e7f9      	b.n	8003c6c <memset+0x4>

08003c78 <__libc_init_array>:
 8003c78:	b570      	push	{r4, r5, r6, lr}
 8003c7a:	2600      	movs	r6, #0
 8003c7c:	4d0c      	ldr	r5, [pc, #48]	@ (8003cb0 <__libc_init_array+0x38>)
 8003c7e:	4c0d      	ldr	r4, [pc, #52]	@ (8003cb4 <__libc_init_array+0x3c>)
 8003c80:	1b64      	subs	r4, r4, r5
 8003c82:	10a4      	asrs	r4, r4, #2
 8003c84:	42a6      	cmp	r6, r4
 8003c86:	d109      	bne.n	8003c9c <__libc_init_array+0x24>
 8003c88:	f000 f828 	bl	8003cdc <_init>
 8003c8c:	2600      	movs	r6, #0
 8003c8e:	4d0a      	ldr	r5, [pc, #40]	@ (8003cb8 <__libc_init_array+0x40>)
 8003c90:	4c0a      	ldr	r4, [pc, #40]	@ (8003cbc <__libc_init_array+0x44>)
 8003c92:	1b64      	subs	r4, r4, r5
 8003c94:	10a4      	asrs	r4, r4, #2
 8003c96:	42a6      	cmp	r6, r4
 8003c98:	d105      	bne.n	8003ca6 <__libc_init_array+0x2e>
 8003c9a:	bd70      	pop	{r4, r5, r6, pc}
 8003c9c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003ca0:	4798      	blx	r3
 8003ca2:	3601      	adds	r6, #1
 8003ca4:	e7ee      	b.n	8003c84 <__libc_init_array+0xc>
 8003ca6:	f855 3b04 	ldr.w	r3, [r5], #4
 8003caa:	4798      	blx	r3
 8003cac:	3601      	adds	r6, #1
 8003cae:	e7f2      	b.n	8003c96 <__libc_init_array+0x1e>
 8003cb0:	08003d90 	.word	0x08003d90
 8003cb4:	08003d90 	.word	0x08003d90
 8003cb8:	08003d90 	.word	0x08003d90
 8003cbc:	08003d94 	.word	0x08003d94

08003cc0 <memcpy>:
 8003cc0:	440a      	add	r2, r1
 8003cc2:	4291      	cmp	r1, r2
 8003cc4:	f100 33ff 	add.w	r3, r0, #4294967295
 8003cc8:	d100      	bne.n	8003ccc <memcpy+0xc>
 8003cca:	4770      	bx	lr
 8003ccc:	b510      	push	{r4, lr}
 8003cce:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003cd2:	4291      	cmp	r1, r2
 8003cd4:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003cd8:	d1f9      	bne.n	8003cce <memcpy+0xe>
 8003cda:	bd10      	pop	{r4, pc}

08003cdc <_init>:
 8003cdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003cde:	bf00      	nop
 8003ce0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003ce2:	bc08      	pop	{r3}
 8003ce4:	469e      	mov	lr, r3
 8003ce6:	4770      	bx	lr

08003ce8 <_fini>:
 8003ce8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003cea:	bf00      	nop
 8003cec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003cee:	bc08      	pop	{r3}
 8003cf0:	469e      	mov	lr, r3
 8003cf2:	4770      	bx	lr

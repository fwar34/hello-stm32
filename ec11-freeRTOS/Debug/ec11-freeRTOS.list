
ec11-freeRTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000050c4  08000110  08000110  00001110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000074  080051d4  080051d4  000061d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005248  08005248  00007010  2**0
                  CONTENTS
  4 .ARM          00000000  08005248  08005248  00007010  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005248  08005248  00007010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005248  08005248  00006248  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800524c  0800524c  0000624c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  20000000  08005250  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001a04  20000010  08005260  00007010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001a14  08005260  00007a14  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00007010  2**0
                  CONTENTS, READONLY
 12 .debug_info   000152cd  00000000  00000000  00007039  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000303a  00000000  00000000  0001c306  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000013d0  00000000  00000000  0001f340  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000f74  00000000  00000000  00020710  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00002b98  00000000  00000000  00021684  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015329  00000000  00000000  0002421c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000941da  00000000  00000000  00039545  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000cd71f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000053b8  00000000  00000000  000cd764  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000056  00000000  00000000  000d2b1c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000010 	.word	0x20000010
 800012c:	00000000 	.word	0x00000000
 8000130:	080051bc 	.word	0x080051bc

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000014 	.word	0x20000014
 800014c:	080051bc 	.word	0x080051bc

08000150 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000150:	b580      	push	{r7, lr}
 8000152:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000154:	f000 fa22 	bl	800059c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000158:	f000 f81a 	bl	8000190 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800015c:	f000 f8d6 	bl	800030c <MX_GPIO_Init>
  MX_TIM4_Init();
 8000160:	f000 f85c 	bl	800021c <MX_TIM4_Init>
  MX_USART2_UART_Init();
 8000164:	f000 f8a8 	bl	80002b8 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000168:	f002 fadc 	bl	8002724 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 800016c:	4a05      	ldr	r2, [pc, #20]	@ (8000184 <main+0x34>)
 800016e:	2100      	movs	r1, #0
 8000170:	4805      	ldr	r0, [pc, #20]	@ (8000188 <main+0x38>)
 8000172:	f002 fb1f 	bl	80027b4 <osThreadNew>
 8000176:	4603      	mov	r3, r0
 8000178:	4a04      	ldr	r2, [pc, #16]	@ (800018c <main+0x3c>)
 800017a:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 800017c:	f002 faf4 	bl	8002768 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000180:	bf00      	nop
 8000182:	e7fd      	b.n	8000180 <main+0x30>
 8000184:	080051f8 	.word	0x080051f8
 8000188:	08000351 	.word	0x08000351
 800018c:	200000bc 	.word	0x200000bc

08000190 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000190:	b580      	push	{r7, lr}
 8000192:	b090      	sub	sp, #64	@ 0x40
 8000194:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000196:	f107 0318 	add.w	r3, r7, #24
 800019a:	2228      	movs	r2, #40	@ 0x28
 800019c:	2100      	movs	r1, #0
 800019e:	4618      	mov	r0, r3
 80001a0:	f004 ffd2 	bl	8005148 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80001a4:	1d3b      	adds	r3, r7, #4
 80001a6:	2200      	movs	r2, #0
 80001a8:	601a      	str	r2, [r3, #0]
 80001aa:	605a      	str	r2, [r3, #4]
 80001ac:	609a      	str	r2, [r3, #8]
 80001ae:	60da      	str	r2, [r3, #12]
 80001b0:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80001b2:	2301      	movs	r3, #1
 80001b4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80001b6:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80001ba:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80001bc:	2300      	movs	r3, #0
 80001be:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80001c0:	2301      	movs	r3, #1
 80001c2:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80001c4:	2302      	movs	r3, #2
 80001c6:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80001c8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80001cc:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80001ce:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 80001d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80001d4:	f107 0318 	add.w	r3, r7, #24
 80001d8:	4618      	mov	r0, r3
 80001da:	f000 fd85 	bl	8000ce8 <HAL_RCC_OscConfig>
 80001de:	4603      	mov	r3, r0
 80001e0:	2b00      	cmp	r3, #0
 80001e2:	d001      	beq.n	80001e8 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80001e4:	f000 f8bc 	bl	8000360 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80001e8:	230f      	movs	r3, #15
 80001ea:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80001ec:	2302      	movs	r3, #2
 80001ee:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80001f0:	2300      	movs	r3, #0
 80001f2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80001f4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80001f8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80001fa:	2300      	movs	r3, #0
 80001fc:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80001fe:	1d3b      	adds	r3, r7, #4
 8000200:	2102      	movs	r1, #2
 8000202:	4618      	mov	r0, r3
 8000204:	f000 fff2 	bl	80011ec <HAL_RCC_ClockConfig>
 8000208:	4603      	mov	r3, r0
 800020a:	2b00      	cmp	r3, #0
 800020c:	d001      	beq.n	8000212 <SystemClock_Config+0x82>
  {
    Error_Handler();
 800020e:	f000 f8a7 	bl	8000360 <Error_Handler>
  }
}
 8000212:	bf00      	nop
 8000214:	3740      	adds	r7, #64	@ 0x40
 8000216:	46bd      	mov	sp, r7
 8000218:	bd80      	pop	{r7, pc}
	...

0800021c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 800021c:	b580      	push	{r7, lr}
 800021e:	b086      	sub	sp, #24
 8000220:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000222:	f107 0308 	add.w	r3, r7, #8
 8000226:	2200      	movs	r2, #0
 8000228:	601a      	str	r2, [r3, #0]
 800022a:	605a      	str	r2, [r3, #4]
 800022c:	609a      	str	r2, [r3, #8]
 800022e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000230:	463b      	mov	r3, r7
 8000232:	2200      	movs	r2, #0
 8000234:	601a      	str	r2, [r3, #0]
 8000236:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000238:	4b1d      	ldr	r3, [pc, #116]	@ (80002b0 <MX_TIM4_Init+0x94>)
 800023a:	4a1e      	ldr	r2, [pc, #120]	@ (80002b4 <MX_TIM4_Init+0x98>)
 800023c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 800023e:	4b1c      	ldr	r3, [pc, #112]	@ (80002b0 <MX_TIM4_Init+0x94>)
 8000240:	2200      	movs	r2, #0
 8000242:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000244:	4b1a      	ldr	r3, [pc, #104]	@ (80002b0 <MX_TIM4_Init+0x94>)
 8000246:	2200      	movs	r2, #0
 8000248:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 800024a:	4b19      	ldr	r3, [pc, #100]	@ (80002b0 <MX_TIM4_Init+0x94>)
 800024c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000250:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000252:	4b17      	ldr	r3, [pc, #92]	@ (80002b0 <MX_TIM4_Init+0x94>)
 8000254:	2200      	movs	r2, #0
 8000256:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000258:	4b15      	ldr	r3, [pc, #84]	@ (80002b0 <MX_TIM4_Init+0x94>)
 800025a:	2200      	movs	r2, #0
 800025c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800025e:	4814      	ldr	r0, [pc, #80]	@ (80002b0 <MX_TIM4_Init+0x94>)
 8000260:	f001 f952 	bl	8001508 <HAL_TIM_Base_Init>
 8000264:	4603      	mov	r3, r0
 8000266:	2b00      	cmp	r3, #0
 8000268:	d001      	beq.n	800026e <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 800026a:	f000 f879 	bl	8000360 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800026e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000272:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000274:	f107 0308 	add.w	r3, r7, #8
 8000278:	4619      	mov	r1, r3
 800027a:	480d      	ldr	r0, [pc, #52]	@ (80002b0 <MX_TIM4_Init+0x94>)
 800027c:	f001 fa83 	bl	8001786 <HAL_TIM_ConfigClockSource>
 8000280:	4603      	mov	r3, r0
 8000282:	2b00      	cmp	r3, #0
 8000284:	d001      	beq.n	800028a <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 8000286:	f000 f86b 	bl	8000360 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800028a:	2300      	movs	r3, #0
 800028c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800028e:	2300      	movs	r3, #0
 8000290:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000292:	463b      	mov	r3, r7
 8000294:	4619      	mov	r1, r3
 8000296:	4806      	ldr	r0, [pc, #24]	@ (80002b0 <MX_TIM4_Init+0x94>)
 8000298:	f001 fc6e 	bl	8001b78 <HAL_TIMEx_MasterConfigSynchronization>
 800029c:	4603      	mov	r3, r0
 800029e:	2b00      	cmp	r3, #0
 80002a0:	d001      	beq.n	80002a6 <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 80002a2:	f000 f85d 	bl	8000360 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80002a6:	bf00      	nop
 80002a8:	3718      	adds	r7, #24
 80002aa:	46bd      	mov	sp, r7
 80002ac:	bd80      	pop	{r7, pc}
 80002ae:	bf00      	nop
 80002b0:	2000002c 	.word	0x2000002c
 80002b4:	40000800 	.word	0x40000800

080002b8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80002b8:	b580      	push	{r7, lr}
 80002ba:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80002bc:	4b11      	ldr	r3, [pc, #68]	@ (8000304 <MX_USART2_UART_Init+0x4c>)
 80002be:	4a12      	ldr	r2, [pc, #72]	@ (8000308 <MX_USART2_UART_Init+0x50>)
 80002c0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80002c2:	4b10      	ldr	r3, [pc, #64]	@ (8000304 <MX_USART2_UART_Init+0x4c>)
 80002c4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80002c8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80002ca:	4b0e      	ldr	r3, [pc, #56]	@ (8000304 <MX_USART2_UART_Init+0x4c>)
 80002cc:	2200      	movs	r2, #0
 80002ce:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80002d0:	4b0c      	ldr	r3, [pc, #48]	@ (8000304 <MX_USART2_UART_Init+0x4c>)
 80002d2:	2200      	movs	r2, #0
 80002d4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80002d6:	4b0b      	ldr	r3, [pc, #44]	@ (8000304 <MX_USART2_UART_Init+0x4c>)
 80002d8:	2200      	movs	r2, #0
 80002da:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80002dc:	4b09      	ldr	r3, [pc, #36]	@ (8000304 <MX_USART2_UART_Init+0x4c>)
 80002de:	220c      	movs	r2, #12
 80002e0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80002e2:	4b08      	ldr	r3, [pc, #32]	@ (8000304 <MX_USART2_UART_Init+0x4c>)
 80002e4:	2200      	movs	r2, #0
 80002e6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80002e8:	4b06      	ldr	r3, [pc, #24]	@ (8000304 <MX_USART2_UART_Init+0x4c>)
 80002ea:	2200      	movs	r2, #0
 80002ec:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80002ee:	4805      	ldr	r0, [pc, #20]	@ (8000304 <MX_USART2_UART_Init+0x4c>)
 80002f0:	f001 fcb2 	bl	8001c58 <HAL_UART_Init>
 80002f4:	4603      	mov	r3, r0
 80002f6:	2b00      	cmp	r3, #0
 80002f8:	d001      	beq.n	80002fe <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80002fa:	f000 f831 	bl	8000360 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80002fe:	bf00      	nop
 8000300:	bd80      	pop	{r7, pc}
 8000302:	bf00      	nop
 8000304:	20000074 	.word	0x20000074
 8000308:	40004400 	.word	0x40004400

0800030c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800030c:	b480      	push	{r7}
 800030e:	b083      	sub	sp, #12
 8000310:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000312:	4b0e      	ldr	r3, [pc, #56]	@ (800034c <MX_GPIO_Init+0x40>)
 8000314:	699b      	ldr	r3, [r3, #24]
 8000316:	4a0d      	ldr	r2, [pc, #52]	@ (800034c <MX_GPIO_Init+0x40>)
 8000318:	f043 0320 	orr.w	r3, r3, #32
 800031c:	6193      	str	r3, [r2, #24]
 800031e:	4b0b      	ldr	r3, [pc, #44]	@ (800034c <MX_GPIO_Init+0x40>)
 8000320:	699b      	ldr	r3, [r3, #24]
 8000322:	f003 0320 	and.w	r3, r3, #32
 8000326:	607b      	str	r3, [r7, #4]
 8000328:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800032a:	4b08      	ldr	r3, [pc, #32]	@ (800034c <MX_GPIO_Init+0x40>)
 800032c:	699b      	ldr	r3, [r3, #24]
 800032e:	4a07      	ldr	r2, [pc, #28]	@ (800034c <MX_GPIO_Init+0x40>)
 8000330:	f043 0304 	orr.w	r3, r3, #4
 8000334:	6193      	str	r3, [r2, #24]
 8000336:	4b05      	ldr	r3, [pc, #20]	@ (800034c <MX_GPIO_Init+0x40>)
 8000338:	699b      	ldr	r3, [r3, #24]
 800033a:	f003 0304 	and.w	r3, r3, #4
 800033e:	603b      	str	r3, [r7, #0]
 8000340:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000342:	bf00      	nop
 8000344:	370c      	adds	r7, #12
 8000346:	46bd      	mov	sp, r7
 8000348:	bc80      	pop	{r7}
 800034a:	4770      	bx	lr
 800034c:	40021000 	.word	0x40021000

08000350 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000350:	b580      	push	{r7, lr}
 8000352:	b082      	sub	sp, #8
 8000354:	af00      	add	r7, sp, #0
 8000356:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000358:	2001      	movs	r0, #1
 800035a:	f002 fabd 	bl	80028d8 <osDelay>
 800035e:	e7fb      	b.n	8000358 <StartDefaultTask+0x8>

08000360 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000360:	b480      	push	{r7}
 8000362:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000364:	b672      	cpsid	i
}
 8000366:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000368:	bf00      	nop
 800036a:	e7fd      	b.n	8000368 <Error_Handler+0x8>

0800036c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800036c:	b580      	push	{r7, lr}
 800036e:	b084      	sub	sp, #16
 8000370:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000372:	4b18      	ldr	r3, [pc, #96]	@ (80003d4 <HAL_MspInit+0x68>)
 8000374:	699b      	ldr	r3, [r3, #24]
 8000376:	4a17      	ldr	r2, [pc, #92]	@ (80003d4 <HAL_MspInit+0x68>)
 8000378:	f043 0301 	orr.w	r3, r3, #1
 800037c:	6193      	str	r3, [r2, #24]
 800037e:	4b15      	ldr	r3, [pc, #84]	@ (80003d4 <HAL_MspInit+0x68>)
 8000380:	699b      	ldr	r3, [r3, #24]
 8000382:	f003 0301 	and.w	r3, r3, #1
 8000386:	60bb      	str	r3, [r7, #8]
 8000388:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800038a:	4b12      	ldr	r3, [pc, #72]	@ (80003d4 <HAL_MspInit+0x68>)
 800038c:	69db      	ldr	r3, [r3, #28]
 800038e:	4a11      	ldr	r2, [pc, #68]	@ (80003d4 <HAL_MspInit+0x68>)
 8000390:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000394:	61d3      	str	r3, [r2, #28]
 8000396:	4b0f      	ldr	r3, [pc, #60]	@ (80003d4 <HAL_MspInit+0x68>)
 8000398:	69db      	ldr	r3, [r3, #28]
 800039a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800039e:	607b      	str	r3, [r7, #4]
 80003a0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80003a2:	2200      	movs	r2, #0
 80003a4:	210f      	movs	r1, #15
 80003a6:	f06f 0001 	mvn.w	r0, #1
 80003aa:	f000 fa30 	bl	800080e <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80003ae:	4b0a      	ldr	r3, [pc, #40]	@ (80003d8 <HAL_MspInit+0x6c>)
 80003b0:	685b      	ldr	r3, [r3, #4]
 80003b2:	60fb      	str	r3, [r7, #12]
 80003b4:	68fb      	ldr	r3, [r7, #12]
 80003b6:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80003ba:	60fb      	str	r3, [r7, #12]
 80003bc:	68fb      	ldr	r3, [r7, #12]
 80003be:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80003c2:	60fb      	str	r3, [r7, #12]
 80003c4:	4a04      	ldr	r2, [pc, #16]	@ (80003d8 <HAL_MspInit+0x6c>)
 80003c6:	68fb      	ldr	r3, [r7, #12]
 80003c8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80003ca:	bf00      	nop
 80003cc:	3710      	adds	r7, #16
 80003ce:	46bd      	mov	sp, r7
 80003d0:	bd80      	pop	{r7, pc}
 80003d2:	bf00      	nop
 80003d4:	40021000 	.word	0x40021000
 80003d8:	40010000 	.word	0x40010000

080003dc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80003dc:	b580      	push	{r7, lr}
 80003de:	b084      	sub	sp, #16
 80003e0:	af00      	add	r7, sp, #0
 80003e2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 80003e4:	687b      	ldr	r3, [r7, #4]
 80003e6:	681b      	ldr	r3, [r3, #0]
 80003e8:	4a0d      	ldr	r2, [pc, #52]	@ (8000420 <HAL_TIM_Base_MspInit+0x44>)
 80003ea:	4293      	cmp	r3, r2
 80003ec:	d113      	bne.n	8000416 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 80003ee:	4b0d      	ldr	r3, [pc, #52]	@ (8000424 <HAL_TIM_Base_MspInit+0x48>)
 80003f0:	69db      	ldr	r3, [r3, #28]
 80003f2:	4a0c      	ldr	r2, [pc, #48]	@ (8000424 <HAL_TIM_Base_MspInit+0x48>)
 80003f4:	f043 0304 	orr.w	r3, r3, #4
 80003f8:	61d3      	str	r3, [r2, #28]
 80003fa:	4b0a      	ldr	r3, [pc, #40]	@ (8000424 <HAL_TIM_Base_MspInit+0x48>)
 80003fc:	69db      	ldr	r3, [r3, #28]
 80003fe:	f003 0304 	and.w	r3, r3, #4
 8000402:	60fb      	str	r3, [r7, #12]
 8000404:	68fb      	ldr	r3, [r7, #12]
    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 5, 0);
 8000406:	2200      	movs	r2, #0
 8000408:	2105      	movs	r1, #5
 800040a:	201e      	movs	r0, #30
 800040c:	f000 f9ff 	bl	800080e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8000410:	201e      	movs	r0, #30
 8000412:	f000 fa18 	bl	8000846 <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM4_MspInit 1 */

  }

}
 8000416:	bf00      	nop
 8000418:	3710      	adds	r7, #16
 800041a:	46bd      	mov	sp, r7
 800041c:	bd80      	pop	{r7, pc}
 800041e:	bf00      	nop
 8000420:	40000800 	.word	0x40000800
 8000424:	40021000 	.word	0x40021000

08000428 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000428:	b580      	push	{r7, lr}
 800042a:	b088      	sub	sp, #32
 800042c:	af00      	add	r7, sp, #0
 800042e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000430:	f107 0310 	add.w	r3, r7, #16
 8000434:	2200      	movs	r2, #0
 8000436:	601a      	str	r2, [r3, #0]
 8000438:	605a      	str	r2, [r3, #4]
 800043a:	609a      	str	r2, [r3, #8]
 800043c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 800043e:	687b      	ldr	r3, [r7, #4]
 8000440:	681b      	ldr	r3, [r3, #0]
 8000442:	4a1f      	ldr	r2, [pc, #124]	@ (80004c0 <HAL_UART_MspInit+0x98>)
 8000444:	4293      	cmp	r3, r2
 8000446:	d137      	bne.n	80004b8 <HAL_UART_MspInit+0x90>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000448:	4b1e      	ldr	r3, [pc, #120]	@ (80004c4 <HAL_UART_MspInit+0x9c>)
 800044a:	69db      	ldr	r3, [r3, #28]
 800044c:	4a1d      	ldr	r2, [pc, #116]	@ (80004c4 <HAL_UART_MspInit+0x9c>)
 800044e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000452:	61d3      	str	r3, [r2, #28]
 8000454:	4b1b      	ldr	r3, [pc, #108]	@ (80004c4 <HAL_UART_MspInit+0x9c>)
 8000456:	69db      	ldr	r3, [r3, #28]
 8000458:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800045c:	60fb      	str	r3, [r7, #12]
 800045e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000460:	4b18      	ldr	r3, [pc, #96]	@ (80004c4 <HAL_UART_MspInit+0x9c>)
 8000462:	699b      	ldr	r3, [r3, #24]
 8000464:	4a17      	ldr	r2, [pc, #92]	@ (80004c4 <HAL_UART_MspInit+0x9c>)
 8000466:	f043 0304 	orr.w	r3, r3, #4
 800046a:	6193      	str	r3, [r2, #24]
 800046c:	4b15      	ldr	r3, [pc, #84]	@ (80004c4 <HAL_UART_MspInit+0x9c>)
 800046e:	699b      	ldr	r3, [r3, #24]
 8000470:	f003 0304 	and.w	r3, r3, #4
 8000474:	60bb      	str	r3, [r7, #8]
 8000476:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000478:	2304      	movs	r3, #4
 800047a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800047c:	2302      	movs	r3, #2
 800047e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000480:	2303      	movs	r3, #3
 8000482:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000484:	f107 0310 	add.w	r3, r7, #16
 8000488:	4619      	mov	r1, r3
 800048a:	480f      	ldr	r0, [pc, #60]	@ (80004c8 <HAL_UART_MspInit+0xa0>)
 800048c:	f000 faa8 	bl	80009e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000490:	2308      	movs	r3, #8
 8000492:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000494:	2300      	movs	r3, #0
 8000496:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000498:	2300      	movs	r3, #0
 800049a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800049c:	f107 0310 	add.w	r3, r7, #16
 80004a0:	4619      	mov	r1, r3
 80004a2:	4809      	ldr	r0, [pc, #36]	@ (80004c8 <HAL_UART_MspInit+0xa0>)
 80004a4:	f000 fa9c 	bl	80009e0 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 80004a8:	2200      	movs	r2, #0
 80004aa:	2105      	movs	r1, #5
 80004ac:	2026      	movs	r0, #38	@ 0x26
 80004ae:	f000 f9ae 	bl	800080e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80004b2:	2026      	movs	r0, #38	@ 0x26
 80004b4:	f000 f9c7 	bl	8000846 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 80004b8:	bf00      	nop
 80004ba:	3720      	adds	r7, #32
 80004bc:	46bd      	mov	sp, r7
 80004be:	bd80      	pop	{r7, pc}
 80004c0:	40004400 	.word	0x40004400
 80004c4:	40021000 	.word	0x40021000
 80004c8:	40010800 	.word	0x40010800

080004cc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80004cc:	b480      	push	{r7}
 80004ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80004d0:	bf00      	nop
 80004d2:	e7fd      	b.n	80004d0 <NMI_Handler+0x4>

080004d4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80004d4:	b480      	push	{r7}
 80004d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80004d8:	bf00      	nop
 80004da:	e7fd      	b.n	80004d8 <HardFault_Handler+0x4>

080004dc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80004dc:	b480      	push	{r7}
 80004de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80004e0:	bf00      	nop
 80004e2:	e7fd      	b.n	80004e0 <MemManage_Handler+0x4>

080004e4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80004e4:	b480      	push	{r7}
 80004e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80004e8:	bf00      	nop
 80004ea:	e7fd      	b.n	80004e8 <BusFault_Handler+0x4>

080004ec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80004ec:	b480      	push	{r7}
 80004ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80004f0:	bf00      	nop
 80004f2:	e7fd      	b.n	80004f0 <UsageFault_Handler+0x4>

080004f4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80004f4:	b480      	push	{r7}
 80004f6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80004f8:	bf00      	nop
 80004fa:	46bd      	mov	sp, r7
 80004fc:	bc80      	pop	{r7}
 80004fe:	4770      	bx	lr

08000500 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000500:	b580      	push	{r7, lr}
 8000502:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000504:	f000 f890 	bl	8000628 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8000508:	f003 fe04 	bl	8004114 <xTaskGetSchedulerState>
 800050c:	4603      	mov	r3, r0
 800050e:	2b01      	cmp	r3, #1
 8000510:	d001      	beq.n	8000516 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8000512:	f004 fba9 	bl	8004c68 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000516:	bf00      	nop
 8000518:	bd80      	pop	{r7, pc}
	...

0800051c <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 800051c:	b580      	push	{r7, lr}
 800051e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8000520:	4802      	ldr	r0, [pc, #8]	@ (800052c <TIM4_IRQHandler+0x10>)
 8000522:	f001 f840 	bl	80015a6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8000526:	bf00      	nop
 8000528:	bd80      	pop	{r7, pc}
 800052a:	bf00      	nop
 800052c:	2000002c 	.word	0x2000002c

08000530 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000530:	b580      	push	{r7, lr}
 8000532:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000534:	4802      	ldr	r0, [pc, #8]	@ (8000540 <USART2_IRQHandler+0x10>)
 8000536:	f001 fbdf 	bl	8001cf8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800053a:	bf00      	nop
 800053c:	bd80      	pop	{r7, pc}
 800053e:	bf00      	nop
 8000540:	20000074 	.word	0x20000074

08000544 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000544:	b480      	push	{r7}
 8000546:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000548:	bf00      	nop
 800054a:	46bd      	mov	sp, r7
 800054c:	bc80      	pop	{r7}
 800054e:	4770      	bx	lr

08000550 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000550:	f7ff fff8 	bl	8000544 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000554:	480b      	ldr	r0, [pc, #44]	@ (8000584 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000556:	490c      	ldr	r1, [pc, #48]	@ (8000588 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000558:	4a0c      	ldr	r2, [pc, #48]	@ (800058c <LoopFillZerobss+0x16>)
  movs r3, #0
 800055a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800055c:	e002      	b.n	8000564 <LoopCopyDataInit>

0800055e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800055e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000560:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000562:	3304      	adds	r3, #4

08000564 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000564:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000566:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000568:	d3f9      	bcc.n	800055e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800056a:	4a09      	ldr	r2, [pc, #36]	@ (8000590 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 800056c:	4c09      	ldr	r4, [pc, #36]	@ (8000594 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800056e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000570:	e001      	b.n	8000576 <LoopFillZerobss>

08000572 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000572:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000574:	3204      	adds	r2, #4

08000576 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000576:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000578:	d3fb      	bcc.n	8000572 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800057a:	f004 fded 	bl	8005158 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800057e:	f7ff fde7 	bl	8000150 <main>
  bx lr
 8000582:	4770      	bx	lr
  ldr r0, =_sdata
 8000584:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000588:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 800058c:	08005250 	.word	0x08005250
  ldr r2, =_sbss
 8000590:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000594:	20001a14 	.word	0x20001a14

08000598 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000598:	e7fe      	b.n	8000598 <ADC1_2_IRQHandler>
	...

0800059c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800059c:	b580      	push	{r7, lr}
 800059e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80005a0:	4b08      	ldr	r3, [pc, #32]	@ (80005c4 <HAL_Init+0x28>)
 80005a2:	681b      	ldr	r3, [r3, #0]
 80005a4:	4a07      	ldr	r2, [pc, #28]	@ (80005c4 <HAL_Init+0x28>)
 80005a6:	f043 0310 	orr.w	r3, r3, #16
 80005aa:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80005ac:	2003      	movs	r0, #3
 80005ae:	f000 f923 	bl	80007f8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80005b2:	200f      	movs	r0, #15
 80005b4:	f000 f808 	bl	80005c8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80005b8:	f7ff fed8 	bl	800036c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80005bc:	2300      	movs	r3, #0
}
 80005be:	4618      	mov	r0, r3
 80005c0:	bd80      	pop	{r7, pc}
 80005c2:	bf00      	nop
 80005c4:	40022000 	.word	0x40022000

080005c8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80005c8:	b580      	push	{r7, lr}
 80005ca:	b082      	sub	sp, #8
 80005cc:	af00      	add	r7, sp, #0
 80005ce:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80005d0:	4b12      	ldr	r3, [pc, #72]	@ (800061c <HAL_InitTick+0x54>)
 80005d2:	681a      	ldr	r2, [r3, #0]
 80005d4:	4b12      	ldr	r3, [pc, #72]	@ (8000620 <HAL_InitTick+0x58>)
 80005d6:	781b      	ldrb	r3, [r3, #0]
 80005d8:	4619      	mov	r1, r3
 80005da:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80005de:	fbb3 f3f1 	udiv	r3, r3, r1
 80005e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80005e6:	4618      	mov	r0, r3
 80005e8:	f000 f93b 	bl	8000862 <HAL_SYSTICK_Config>
 80005ec:	4603      	mov	r3, r0
 80005ee:	2b00      	cmp	r3, #0
 80005f0:	d001      	beq.n	80005f6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80005f2:	2301      	movs	r3, #1
 80005f4:	e00e      	b.n	8000614 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80005f6:	687b      	ldr	r3, [r7, #4]
 80005f8:	2b0f      	cmp	r3, #15
 80005fa:	d80a      	bhi.n	8000612 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80005fc:	2200      	movs	r2, #0
 80005fe:	6879      	ldr	r1, [r7, #4]
 8000600:	f04f 30ff 	mov.w	r0, #4294967295
 8000604:	f000 f903 	bl	800080e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000608:	4a06      	ldr	r2, [pc, #24]	@ (8000624 <HAL_InitTick+0x5c>)
 800060a:	687b      	ldr	r3, [r7, #4]
 800060c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800060e:	2300      	movs	r3, #0
 8000610:	e000      	b.n	8000614 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000612:	2301      	movs	r3, #1
}
 8000614:	4618      	mov	r0, r3
 8000616:	3708      	adds	r7, #8
 8000618:	46bd      	mov	sp, r7
 800061a:	bd80      	pop	{r7, pc}
 800061c:	20000000 	.word	0x20000000
 8000620:	20000008 	.word	0x20000008
 8000624:	20000004 	.word	0x20000004

08000628 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000628:	b480      	push	{r7}
 800062a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800062c:	4b05      	ldr	r3, [pc, #20]	@ (8000644 <HAL_IncTick+0x1c>)
 800062e:	781b      	ldrb	r3, [r3, #0]
 8000630:	461a      	mov	r2, r3
 8000632:	4b05      	ldr	r3, [pc, #20]	@ (8000648 <HAL_IncTick+0x20>)
 8000634:	681b      	ldr	r3, [r3, #0]
 8000636:	4413      	add	r3, r2
 8000638:	4a03      	ldr	r2, [pc, #12]	@ (8000648 <HAL_IncTick+0x20>)
 800063a:	6013      	str	r3, [r2, #0]
}
 800063c:	bf00      	nop
 800063e:	46bd      	mov	sp, r7
 8000640:	bc80      	pop	{r7}
 8000642:	4770      	bx	lr
 8000644:	20000008 	.word	0x20000008
 8000648:	200000c0 	.word	0x200000c0

0800064c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800064c:	b480      	push	{r7}
 800064e:	af00      	add	r7, sp, #0
  return uwTick;
 8000650:	4b02      	ldr	r3, [pc, #8]	@ (800065c <HAL_GetTick+0x10>)
 8000652:	681b      	ldr	r3, [r3, #0]
}
 8000654:	4618      	mov	r0, r3
 8000656:	46bd      	mov	sp, r7
 8000658:	bc80      	pop	{r7}
 800065a:	4770      	bx	lr
 800065c:	200000c0 	.word	0x200000c0

08000660 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000660:	b480      	push	{r7}
 8000662:	b085      	sub	sp, #20
 8000664:	af00      	add	r7, sp, #0
 8000666:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000668:	687b      	ldr	r3, [r7, #4]
 800066a:	f003 0307 	and.w	r3, r3, #7
 800066e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000670:	4b0c      	ldr	r3, [pc, #48]	@ (80006a4 <__NVIC_SetPriorityGrouping+0x44>)
 8000672:	68db      	ldr	r3, [r3, #12]
 8000674:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000676:	68ba      	ldr	r2, [r7, #8]
 8000678:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800067c:	4013      	ands	r3, r2
 800067e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000680:	68fb      	ldr	r3, [r7, #12]
 8000682:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000684:	68bb      	ldr	r3, [r7, #8]
 8000686:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000688:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800068c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000690:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000692:	4a04      	ldr	r2, [pc, #16]	@ (80006a4 <__NVIC_SetPriorityGrouping+0x44>)
 8000694:	68bb      	ldr	r3, [r7, #8]
 8000696:	60d3      	str	r3, [r2, #12]
}
 8000698:	bf00      	nop
 800069a:	3714      	adds	r7, #20
 800069c:	46bd      	mov	sp, r7
 800069e:	bc80      	pop	{r7}
 80006a0:	4770      	bx	lr
 80006a2:	bf00      	nop
 80006a4:	e000ed00 	.word	0xe000ed00

080006a8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80006a8:	b480      	push	{r7}
 80006aa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80006ac:	4b04      	ldr	r3, [pc, #16]	@ (80006c0 <__NVIC_GetPriorityGrouping+0x18>)
 80006ae:	68db      	ldr	r3, [r3, #12]
 80006b0:	0a1b      	lsrs	r3, r3, #8
 80006b2:	f003 0307 	and.w	r3, r3, #7
}
 80006b6:	4618      	mov	r0, r3
 80006b8:	46bd      	mov	sp, r7
 80006ba:	bc80      	pop	{r7}
 80006bc:	4770      	bx	lr
 80006be:	bf00      	nop
 80006c0:	e000ed00 	.word	0xe000ed00

080006c4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80006c4:	b480      	push	{r7}
 80006c6:	b083      	sub	sp, #12
 80006c8:	af00      	add	r7, sp, #0
 80006ca:	4603      	mov	r3, r0
 80006cc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80006ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	db0b      	blt.n	80006ee <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80006d6:	79fb      	ldrb	r3, [r7, #7]
 80006d8:	f003 021f 	and.w	r2, r3, #31
 80006dc:	4906      	ldr	r1, [pc, #24]	@ (80006f8 <__NVIC_EnableIRQ+0x34>)
 80006de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006e2:	095b      	lsrs	r3, r3, #5
 80006e4:	2001      	movs	r0, #1
 80006e6:	fa00 f202 	lsl.w	r2, r0, r2
 80006ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80006ee:	bf00      	nop
 80006f0:	370c      	adds	r7, #12
 80006f2:	46bd      	mov	sp, r7
 80006f4:	bc80      	pop	{r7}
 80006f6:	4770      	bx	lr
 80006f8:	e000e100 	.word	0xe000e100

080006fc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80006fc:	b480      	push	{r7}
 80006fe:	b083      	sub	sp, #12
 8000700:	af00      	add	r7, sp, #0
 8000702:	4603      	mov	r3, r0
 8000704:	6039      	str	r1, [r7, #0]
 8000706:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000708:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800070c:	2b00      	cmp	r3, #0
 800070e:	db0a      	blt.n	8000726 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000710:	683b      	ldr	r3, [r7, #0]
 8000712:	b2da      	uxtb	r2, r3
 8000714:	490c      	ldr	r1, [pc, #48]	@ (8000748 <__NVIC_SetPriority+0x4c>)
 8000716:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800071a:	0112      	lsls	r2, r2, #4
 800071c:	b2d2      	uxtb	r2, r2
 800071e:	440b      	add	r3, r1
 8000720:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000724:	e00a      	b.n	800073c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000726:	683b      	ldr	r3, [r7, #0]
 8000728:	b2da      	uxtb	r2, r3
 800072a:	4908      	ldr	r1, [pc, #32]	@ (800074c <__NVIC_SetPriority+0x50>)
 800072c:	79fb      	ldrb	r3, [r7, #7]
 800072e:	f003 030f 	and.w	r3, r3, #15
 8000732:	3b04      	subs	r3, #4
 8000734:	0112      	lsls	r2, r2, #4
 8000736:	b2d2      	uxtb	r2, r2
 8000738:	440b      	add	r3, r1
 800073a:	761a      	strb	r2, [r3, #24]
}
 800073c:	bf00      	nop
 800073e:	370c      	adds	r7, #12
 8000740:	46bd      	mov	sp, r7
 8000742:	bc80      	pop	{r7}
 8000744:	4770      	bx	lr
 8000746:	bf00      	nop
 8000748:	e000e100 	.word	0xe000e100
 800074c:	e000ed00 	.word	0xe000ed00

08000750 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000750:	b480      	push	{r7}
 8000752:	b089      	sub	sp, #36	@ 0x24
 8000754:	af00      	add	r7, sp, #0
 8000756:	60f8      	str	r0, [r7, #12]
 8000758:	60b9      	str	r1, [r7, #8]
 800075a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800075c:	68fb      	ldr	r3, [r7, #12]
 800075e:	f003 0307 	and.w	r3, r3, #7
 8000762:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000764:	69fb      	ldr	r3, [r7, #28]
 8000766:	f1c3 0307 	rsb	r3, r3, #7
 800076a:	2b04      	cmp	r3, #4
 800076c:	bf28      	it	cs
 800076e:	2304      	movcs	r3, #4
 8000770:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000772:	69fb      	ldr	r3, [r7, #28]
 8000774:	3304      	adds	r3, #4
 8000776:	2b06      	cmp	r3, #6
 8000778:	d902      	bls.n	8000780 <NVIC_EncodePriority+0x30>
 800077a:	69fb      	ldr	r3, [r7, #28]
 800077c:	3b03      	subs	r3, #3
 800077e:	e000      	b.n	8000782 <NVIC_EncodePriority+0x32>
 8000780:	2300      	movs	r3, #0
 8000782:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000784:	f04f 32ff 	mov.w	r2, #4294967295
 8000788:	69bb      	ldr	r3, [r7, #24]
 800078a:	fa02 f303 	lsl.w	r3, r2, r3
 800078e:	43da      	mvns	r2, r3
 8000790:	68bb      	ldr	r3, [r7, #8]
 8000792:	401a      	ands	r2, r3
 8000794:	697b      	ldr	r3, [r7, #20]
 8000796:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000798:	f04f 31ff 	mov.w	r1, #4294967295
 800079c:	697b      	ldr	r3, [r7, #20]
 800079e:	fa01 f303 	lsl.w	r3, r1, r3
 80007a2:	43d9      	mvns	r1, r3
 80007a4:	687b      	ldr	r3, [r7, #4]
 80007a6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007a8:	4313      	orrs	r3, r2
         );
}
 80007aa:	4618      	mov	r0, r3
 80007ac:	3724      	adds	r7, #36	@ 0x24
 80007ae:	46bd      	mov	sp, r7
 80007b0:	bc80      	pop	{r7}
 80007b2:	4770      	bx	lr

080007b4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	b082      	sub	sp, #8
 80007b8:	af00      	add	r7, sp, #0
 80007ba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	3b01      	subs	r3, #1
 80007c0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80007c4:	d301      	bcc.n	80007ca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80007c6:	2301      	movs	r3, #1
 80007c8:	e00f      	b.n	80007ea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80007ca:	4a0a      	ldr	r2, [pc, #40]	@ (80007f4 <SysTick_Config+0x40>)
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	3b01      	subs	r3, #1
 80007d0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80007d2:	210f      	movs	r1, #15
 80007d4:	f04f 30ff 	mov.w	r0, #4294967295
 80007d8:	f7ff ff90 	bl	80006fc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80007dc:	4b05      	ldr	r3, [pc, #20]	@ (80007f4 <SysTick_Config+0x40>)
 80007de:	2200      	movs	r2, #0
 80007e0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80007e2:	4b04      	ldr	r3, [pc, #16]	@ (80007f4 <SysTick_Config+0x40>)
 80007e4:	2207      	movs	r2, #7
 80007e6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80007e8:	2300      	movs	r3, #0
}
 80007ea:	4618      	mov	r0, r3
 80007ec:	3708      	adds	r7, #8
 80007ee:	46bd      	mov	sp, r7
 80007f0:	bd80      	pop	{r7, pc}
 80007f2:	bf00      	nop
 80007f4:	e000e010 	.word	0xe000e010

080007f8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80007f8:	b580      	push	{r7, lr}
 80007fa:	b082      	sub	sp, #8
 80007fc:	af00      	add	r7, sp, #0
 80007fe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000800:	6878      	ldr	r0, [r7, #4]
 8000802:	f7ff ff2d 	bl	8000660 <__NVIC_SetPriorityGrouping>
}
 8000806:	bf00      	nop
 8000808:	3708      	adds	r7, #8
 800080a:	46bd      	mov	sp, r7
 800080c:	bd80      	pop	{r7, pc}

0800080e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800080e:	b580      	push	{r7, lr}
 8000810:	b086      	sub	sp, #24
 8000812:	af00      	add	r7, sp, #0
 8000814:	4603      	mov	r3, r0
 8000816:	60b9      	str	r1, [r7, #8]
 8000818:	607a      	str	r2, [r7, #4]
 800081a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800081c:	2300      	movs	r3, #0
 800081e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000820:	f7ff ff42 	bl	80006a8 <__NVIC_GetPriorityGrouping>
 8000824:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000826:	687a      	ldr	r2, [r7, #4]
 8000828:	68b9      	ldr	r1, [r7, #8]
 800082a:	6978      	ldr	r0, [r7, #20]
 800082c:	f7ff ff90 	bl	8000750 <NVIC_EncodePriority>
 8000830:	4602      	mov	r2, r0
 8000832:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000836:	4611      	mov	r1, r2
 8000838:	4618      	mov	r0, r3
 800083a:	f7ff ff5f 	bl	80006fc <__NVIC_SetPriority>
}
 800083e:	bf00      	nop
 8000840:	3718      	adds	r7, #24
 8000842:	46bd      	mov	sp, r7
 8000844:	bd80      	pop	{r7, pc}

08000846 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000846:	b580      	push	{r7, lr}
 8000848:	b082      	sub	sp, #8
 800084a:	af00      	add	r7, sp, #0
 800084c:	4603      	mov	r3, r0
 800084e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000850:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000854:	4618      	mov	r0, r3
 8000856:	f7ff ff35 	bl	80006c4 <__NVIC_EnableIRQ>
}
 800085a:	bf00      	nop
 800085c:	3708      	adds	r7, #8
 800085e:	46bd      	mov	sp, r7
 8000860:	bd80      	pop	{r7, pc}

08000862 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000862:	b580      	push	{r7, lr}
 8000864:	b082      	sub	sp, #8
 8000866:	af00      	add	r7, sp, #0
 8000868:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800086a:	6878      	ldr	r0, [r7, #4]
 800086c:	f7ff ffa2 	bl	80007b4 <SysTick_Config>
 8000870:	4603      	mov	r3, r0
}
 8000872:	4618      	mov	r0, r3
 8000874:	3708      	adds	r7, #8
 8000876:	46bd      	mov	sp, r7
 8000878:	bd80      	pop	{r7, pc}

0800087a <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800087a:	b480      	push	{r7}
 800087c:	b085      	sub	sp, #20
 800087e:	af00      	add	r7, sp, #0
 8000880:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000882:	2300      	movs	r3, #0
 8000884:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000886:	687b      	ldr	r3, [r7, #4]
 8000888:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800088c:	b2db      	uxtb	r3, r3
 800088e:	2b02      	cmp	r3, #2
 8000890:	d008      	beq.n	80008a4 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000892:	687b      	ldr	r3, [r7, #4]
 8000894:	2204      	movs	r2, #4
 8000896:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	2200      	movs	r2, #0
 800089c:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80008a0:	2301      	movs	r3, #1
 80008a2:	e020      	b.n	80008e6 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	681b      	ldr	r3, [r3, #0]
 80008a8:	681a      	ldr	r2, [r3, #0]
 80008aa:	687b      	ldr	r3, [r7, #4]
 80008ac:	681b      	ldr	r3, [r3, #0]
 80008ae:	f022 020e 	bic.w	r2, r2, #14
 80008b2:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	681b      	ldr	r3, [r3, #0]
 80008b8:	681a      	ldr	r2, [r3, #0]
 80008ba:	687b      	ldr	r3, [r7, #4]
 80008bc:	681b      	ldr	r3, [r3, #0]
 80008be:	f022 0201 	bic.w	r2, r2, #1
 80008c2:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80008cc:	2101      	movs	r1, #1
 80008ce:	fa01 f202 	lsl.w	r2, r1, r2
 80008d2:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	2201      	movs	r2, #1
 80008d8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	2200      	movs	r2, #0
 80008e0:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 80008e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80008e6:	4618      	mov	r0, r3
 80008e8:	3714      	adds	r7, #20
 80008ea:	46bd      	mov	sp, r7
 80008ec:	bc80      	pop	{r7}
 80008ee:	4770      	bx	lr

080008f0 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80008f0:	b580      	push	{r7, lr}
 80008f2:	b084      	sub	sp, #16
 80008f4:	af00      	add	r7, sp, #0
 80008f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80008f8:	2300      	movs	r3, #0
 80008fa:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8000902:	b2db      	uxtb	r3, r3
 8000904:	2b02      	cmp	r3, #2
 8000906:	d005      	beq.n	8000914 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	2204      	movs	r2, #4
 800090c:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 800090e:	2301      	movs	r3, #1
 8000910:	73fb      	strb	r3, [r7, #15]
 8000912:	e051      	b.n	80009b8 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	681b      	ldr	r3, [r3, #0]
 8000918:	681a      	ldr	r2, [r3, #0]
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	681b      	ldr	r3, [r3, #0]
 800091e:	f022 020e 	bic.w	r2, r2, #14
 8000922:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	681b      	ldr	r3, [r3, #0]
 8000928:	681a      	ldr	r2, [r3, #0]
 800092a:	687b      	ldr	r3, [r7, #4]
 800092c:	681b      	ldr	r3, [r3, #0]
 800092e:	f022 0201 	bic.w	r2, r2, #1
 8000932:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	681b      	ldr	r3, [r3, #0]
 8000938:	4a22      	ldr	r2, [pc, #136]	@ (80009c4 <HAL_DMA_Abort_IT+0xd4>)
 800093a:	4293      	cmp	r3, r2
 800093c:	d029      	beq.n	8000992 <HAL_DMA_Abort_IT+0xa2>
 800093e:	687b      	ldr	r3, [r7, #4]
 8000940:	681b      	ldr	r3, [r3, #0]
 8000942:	4a21      	ldr	r2, [pc, #132]	@ (80009c8 <HAL_DMA_Abort_IT+0xd8>)
 8000944:	4293      	cmp	r3, r2
 8000946:	d022      	beq.n	800098e <HAL_DMA_Abort_IT+0x9e>
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	681b      	ldr	r3, [r3, #0]
 800094c:	4a1f      	ldr	r2, [pc, #124]	@ (80009cc <HAL_DMA_Abort_IT+0xdc>)
 800094e:	4293      	cmp	r3, r2
 8000950:	d01a      	beq.n	8000988 <HAL_DMA_Abort_IT+0x98>
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	681b      	ldr	r3, [r3, #0]
 8000956:	4a1e      	ldr	r2, [pc, #120]	@ (80009d0 <HAL_DMA_Abort_IT+0xe0>)
 8000958:	4293      	cmp	r3, r2
 800095a:	d012      	beq.n	8000982 <HAL_DMA_Abort_IT+0x92>
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	681b      	ldr	r3, [r3, #0]
 8000960:	4a1c      	ldr	r2, [pc, #112]	@ (80009d4 <HAL_DMA_Abort_IT+0xe4>)
 8000962:	4293      	cmp	r3, r2
 8000964:	d00a      	beq.n	800097c <HAL_DMA_Abort_IT+0x8c>
 8000966:	687b      	ldr	r3, [r7, #4]
 8000968:	681b      	ldr	r3, [r3, #0]
 800096a:	4a1b      	ldr	r2, [pc, #108]	@ (80009d8 <HAL_DMA_Abort_IT+0xe8>)
 800096c:	4293      	cmp	r3, r2
 800096e:	d102      	bne.n	8000976 <HAL_DMA_Abort_IT+0x86>
 8000970:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8000974:	e00e      	b.n	8000994 <HAL_DMA_Abort_IT+0xa4>
 8000976:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800097a:	e00b      	b.n	8000994 <HAL_DMA_Abort_IT+0xa4>
 800097c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000980:	e008      	b.n	8000994 <HAL_DMA_Abort_IT+0xa4>
 8000982:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000986:	e005      	b.n	8000994 <HAL_DMA_Abort_IT+0xa4>
 8000988:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800098c:	e002      	b.n	8000994 <HAL_DMA_Abort_IT+0xa4>
 800098e:	2310      	movs	r3, #16
 8000990:	e000      	b.n	8000994 <HAL_DMA_Abort_IT+0xa4>
 8000992:	2301      	movs	r3, #1
 8000994:	4a11      	ldr	r2, [pc, #68]	@ (80009dc <HAL_DMA_Abort_IT+0xec>)
 8000996:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	2201      	movs	r2, #1
 800099c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	2200      	movs	r2, #0
 80009a4:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80009ac:	2b00      	cmp	r3, #0
 80009ae:	d003      	beq.n	80009b8 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80009b4:	6878      	ldr	r0, [r7, #4]
 80009b6:	4798      	blx	r3
    } 
  }
  return status;
 80009b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80009ba:	4618      	mov	r0, r3
 80009bc:	3710      	adds	r7, #16
 80009be:	46bd      	mov	sp, r7
 80009c0:	bd80      	pop	{r7, pc}
 80009c2:	bf00      	nop
 80009c4:	40020008 	.word	0x40020008
 80009c8:	4002001c 	.word	0x4002001c
 80009cc:	40020030 	.word	0x40020030
 80009d0:	40020044 	.word	0x40020044
 80009d4:	40020058 	.word	0x40020058
 80009d8:	4002006c 	.word	0x4002006c
 80009dc:	40020000 	.word	0x40020000

080009e0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80009e0:	b480      	push	{r7}
 80009e2:	b08b      	sub	sp, #44	@ 0x2c
 80009e4:	af00      	add	r7, sp, #0
 80009e6:	6078      	str	r0, [r7, #4]
 80009e8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80009ea:	2300      	movs	r3, #0
 80009ec:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80009ee:	2300      	movs	r3, #0
 80009f0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80009f2:	e169      	b.n	8000cc8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80009f4:	2201      	movs	r2, #1
 80009f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80009f8:	fa02 f303 	lsl.w	r3, r2, r3
 80009fc:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80009fe:	683b      	ldr	r3, [r7, #0]
 8000a00:	681b      	ldr	r3, [r3, #0]
 8000a02:	69fa      	ldr	r2, [r7, #28]
 8000a04:	4013      	ands	r3, r2
 8000a06:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000a08:	69ba      	ldr	r2, [r7, #24]
 8000a0a:	69fb      	ldr	r3, [r7, #28]
 8000a0c:	429a      	cmp	r2, r3
 8000a0e:	f040 8158 	bne.w	8000cc2 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000a12:	683b      	ldr	r3, [r7, #0]
 8000a14:	685b      	ldr	r3, [r3, #4]
 8000a16:	4a9a      	ldr	r2, [pc, #616]	@ (8000c80 <HAL_GPIO_Init+0x2a0>)
 8000a18:	4293      	cmp	r3, r2
 8000a1a:	d05e      	beq.n	8000ada <HAL_GPIO_Init+0xfa>
 8000a1c:	4a98      	ldr	r2, [pc, #608]	@ (8000c80 <HAL_GPIO_Init+0x2a0>)
 8000a1e:	4293      	cmp	r3, r2
 8000a20:	d875      	bhi.n	8000b0e <HAL_GPIO_Init+0x12e>
 8000a22:	4a98      	ldr	r2, [pc, #608]	@ (8000c84 <HAL_GPIO_Init+0x2a4>)
 8000a24:	4293      	cmp	r3, r2
 8000a26:	d058      	beq.n	8000ada <HAL_GPIO_Init+0xfa>
 8000a28:	4a96      	ldr	r2, [pc, #600]	@ (8000c84 <HAL_GPIO_Init+0x2a4>)
 8000a2a:	4293      	cmp	r3, r2
 8000a2c:	d86f      	bhi.n	8000b0e <HAL_GPIO_Init+0x12e>
 8000a2e:	4a96      	ldr	r2, [pc, #600]	@ (8000c88 <HAL_GPIO_Init+0x2a8>)
 8000a30:	4293      	cmp	r3, r2
 8000a32:	d052      	beq.n	8000ada <HAL_GPIO_Init+0xfa>
 8000a34:	4a94      	ldr	r2, [pc, #592]	@ (8000c88 <HAL_GPIO_Init+0x2a8>)
 8000a36:	4293      	cmp	r3, r2
 8000a38:	d869      	bhi.n	8000b0e <HAL_GPIO_Init+0x12e>
 8000a3a:	4a94      	ldr	r2, [pc, #592]	@ (8000c8c <HAL_GPIO_Init+0x2ac>)
 8000a3c:	4293      	cmp	r3, r2
 8000a3e:	d04c      	beq.n	8000ada <HAL_GPIO_Init+0xfa>
 8000a40:	4a92      	ldr	r2, [pc, #584]	@ (8000c8c <HAL_GPIO_Init+0x2ac>)
 8000a42:	4293      	cmp	r3, r2
 8000a44:	d863      	bhi.n	8000b0e <HAL_GPIO_Init+0x12e>
 8000a46:	4a92      	ldr	r2, [pc, #584]	@ (8000c90 <HAL_GPIO_Init+0x2b0>)
 8000a48:	4293      	cmp	r3, r2
 8000a4a:	d046      	beq.n	8000ada <HAL_GPIO_Init+0xfa>
 8000a4c:	4a90      	ldr	r2, [pc, #576]	@ (8000c90 <HAL_GPIO_Init+0x2b0>)
 8000a4e:	4293      	cmp	r3, r2
 8000a50:	d85d      	bhi.n	8000b0e <HAL_GPIO_Init+0x12e>
 8000a52:	2b12      	cmp	r3, #18
 8000a54:	d82a      	bhi.n	8000aac <HAL_GPIO_Init+0xcc>
 8000a56:	2b12      	cmp	r3, #18
 8000a58:	d859      	bhi.n	8000b0e <HAL_GPIO_Init+0x12e>
 8000a5a:	a201      	add	r2, pc, #4	@ (adr r2, 8000a60 <HAL_GPIO_Init+0x80>)
 8000a5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a60:	08000adb 	.word	0x08000adb
 8000a64:	08000ab5 	.word	0x08000ab5
 8000a68:	08000ac7 	.word	0x08000ac7
 8000a6c:	08000b09 	.word	0x08000b09
 8000a70:	08000b0f 	.word	0x08000b0f
 8000a74:	08000b0f 	.word	0x08000b0f
 8000a78:	08000b0f 	.word	0x08000b0f
 8000a7c:	08000b0f 	.word	0x08000b0f
 8000a80:	08000b0f 	.word	0x08000b0f
 8000a84:	08000b0f 	.word	0x08000b0f
 8000a88:	08000b0f 	.word	0x08000b0f
 8000a8c:	08000b0f 	.word	0x08000b0f
 8000a90:	08000b0f 	.word	0x08000b0f
 8000a94:	08000b0f 	.word	0x08000b0f
 8000a98:	08000b0f 	.word	0x08000b0f
 8000a9c:	08000b0f 	.word	0x08000b0f
 8000aa0:	08000b0f 	.word	0x08000b0f
 8000aa4:	08000abd 	.word	0x08000abd
 8000aa8:	08000ad1 	.word	0x08000ad1
 8000aac:	4a79      	ldr	r2, [pc, #484]	@ (8000c94 <HAL_GPIO_Init+0x2b4>)
 8000aae:	4293      	cmp	r3, r2
 8000ab0:	d013      	beq.n	8000ada <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000ab2:	e02c      	b.n	8000b0e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000ab4:	683b      	ldr	r3, [r7, #0]
 8000ab6:	68db      	ldr	r3, [r3, #12]
 8000ab8:	623b      	str	r3, [r7, #32]
          break;
 8000aba:	e029      	b.n	8000b10 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000abc:	683b      	ldr	r3, [r7, #0]
 8000abe:	68db      	ldr	r3, [r3, #12]
 8000ac0:	3304      	adds	r3, #4
 8000ac2:	623b      	str	r3, [r7, #32]
          break;
 8000ac4:	e024      	b.n	8000b10 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000ac6:	683b      	ldr	r3, [r7, #0]
 8000ac8:	68db      	ldr	r3, [r3, #12]
 8000aca:	3308      	adds	r3, #8
 8000acc:	623b      	str	r3, [r7, #32]
          break;
 8000ace:	e01f      	b.n	8000b10 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000ad0:	683b      	ldr	r3, [r7, #0]
 8000ad2:	68db      	ldr	r3, [r3, #12]
 8000ad4:	330c      	adds	r3, #12
 8000ad6:	623b      	str	r3, [r7, #32]
          break;
 8000ad8:	e01a      	b.n	8000b10 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000ada:	683b      	ldr	r3, [r7, #0]
 8000adc:	689b      	ldr	r3, [r3, #8]
 8000ade:	2b00      	cmp	r3, #0
 8000ae0:	d102      	bne.n	8000ae8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000ae2:	2304      	movs	r3, #4
 8000ae4:	623b      	str	r3, [r7, #32]
          break;
 8000ae6:	e013      	b.n	8000b10 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000ae8:	683b      	ldr	r3, [r7, #0]
 8000aea:	689b      	ldr	r3, [r3, #8]
 8000aec:	2b01      	cmp	r3, #1
 8000aee:	d105      	bne.n	8000afc <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000af0:	2308      	movs	r3, #8
 8000af2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	69fa      	ldr	r2, [r7, #28]
 8000af8:	611a      	str	r2, [r3, #16]
          break;
 8000afa:	e009      	b.n	8000b10 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000afc:	2308      	movs	r3, #8
 8000afe:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	69fa      	ldr	r2, [r7, #28]
 8000b04:	615a      	str	r2, [r3, #20]
          break;
 8000b06:	e003      	b.n	8000b10 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000b08:	2300      	movs	r3, #0
 8000b0a:	623b      	str	r3, [r7, #32]
          break;
 8000b0c:	e000      	b.n	8000b10 <HAL_GPIO_Init+0x130>
          break;
 8000b0e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000b10:	69bb      	ldr	r3, [r7, #24]
 8000b12:	2bff      	cmp	r3, #255	@ 0xff
 8000b14:	d801      	bhi.n	8000b1a <HAL_GPIO_Init+0x13a>
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	e001      	b.n	8000b1e <HAL_GPIO_Init+0x13e>
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	3304      	adds	r3, #4
 8000b1e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000b20:	69bb      	ldr	r3, [r7, #24]
 8000b22:	2bff      	cmp	r3, #255	@ 0xff
 8000b24:	d802      	bhi.n	8000b2c <HAL_GPIO_Init+0x14c>
 8000b26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b28:	009b      	lsls	r3, r3, #2
 8000b2a:	e002      	b.n	8000b32 <HAL_GPIO_Init+0x152>
 8000b2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b2e:	3b08      	subs	r3, #8
 8000b30:	009b      	lsls	r3, r3, #2
 8000b32:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000b34:	697b      	ldr	r3, [r7, #20]
 8000b36:	681a      	ldr	r2, [r3, #0]
 8000b38:	210f      	movs	r1, #15
 8000b3a:	693b      	ldr	r3, [r7, #16]
 8000b3c:	fa01 f303 	lsl.w	r3, r1, r3
 8000b40:	43db      	mvns	r3, r3
 8000b42:	401a      	ands	r2, r3
 8000b44:	6a39      	ldr	r1, [r7, #32]
 8000b46:	693b      	ldr	r3, [r7, #16]
 8000b48:	fa01 f303 	lsl.w	r3, r1, r3
 8000b4c:	431a      	orrs	r2, r3
 8000b4e:	697b      	ldr	r3, [r7, #20]
 8000b50:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000b52:	683b      	ldr	r3, [r7, #0]
 8000b54:	685b      	ldr	r3, [r3, #4]
 8000b56:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000b5a:	2b00      	cmp	r3, #0
 8000b5c:	f000 80b1 	beq.w	8000cc2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000b60:	4b4d      	ldr	r3, [pc, #308]	@ (8000c98 <HAL_GPIO_Init+0x2b8>)
 8000b62:	699b      	ldr	r3, [r3, #24]
 8000b64:	4a4c      	ldr	r2, [pc, #304]	@ (8000c98 <HAL_GPIO_Init+0x2b8>)
 8000b66:	f043 0301 	orr.w	r3, r3, #1
 8000b6a:	6193      	str	r3, [r2, #24]
 8000b6c:	4b4a      	ldr	r3, [pc, #296]	@ (8000c98 <HAL_GPIO_Init+0x2b8>)
 8000b6e:	699b      	ldr	r3, [r3, #24]
 8000b70:	f003 0301 	and.w	r3, r3, #1
 8000b74:	60bb      	str	r3, [r7, #8]
 8000b76:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000b78:	4a48      	ldr	r2, [pc, #288]	@ (8000c9c <HAL_GPIO_Init+0x2bc>)
 8000b7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b7c:	089b      	lsrs	r3, r3, #2
 8000b7e:	3302      	adds	r3, #2
 8000b80:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b84:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000b86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b88:	f003 0303 	and.w	r3, r3, #3
 8000b8c:	009b      	lsls	r3, r3, #2
 8000b8e:	220f      	movs	r2, #15
 8000b90:	fa02 f303 	lsl.w	r3, r2, r3
 8000b94:	43db      	mvns	r3, r3
 8000b96:	68fa      	ldr	r2, [r7, #12]
 8000b98:	4013      	ands	r3, r2
 8000b9a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	4a40      	ldr	r2, [pc, #256]	@ (8000ca0 <HAL_GPIO_Init+0x2c0>)
 8000ba0:	4293      	cmp	r3, r2
 8000ba2:	d013      	beq.n	8000bcc <HAL_GPIO_Init+0x1ec>
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	4a3f      	ldr	r2, [pc, #252]	@ (8000ca4 <HAL_GPIO_Init+0x2c4>)
 8000ba8:	4293      	cmp	r3, r2
 8000baa:	d00d      	beq.n	8000bc8 <HAL_GPIO_Init+0x1e8>
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	4a3e      	ldr	r2, [pc, #248]	@ (8000ca8 <HAL_GPIO_Init+0x2c8>)
 8000bb0:	4293      	cmp	r3, r2
 8000bb2:	d007      	beq.n	8000bc4 <HAL_GPIO_Init+0x1e4>
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	4a3d      	ldr	r2, [pc, #244]	@ (8000cac <HAL_GPIO_Init+0x2cc>)
 8000bb8:	4293      	cmp	r3, r2
 8000bba:	d101      	bne.n	8000bc0 <HAL_GPIO_Init+0x1e0>
 8000bbc:	2303      	movs	r3, #3
 8000bbe:	e006      	b.n	8000bce <HAL_GPIO_Init+0x1ee>
 8000bc0:	2304      	movs	r3, #4
 8000bc2:	e004      	b.n	8000bce <HAL_GPIO_Init+0x1ee>
 8000bc4:	2302      	movs	r3, #2
 8000bc6:	e002      	b.n	8000bce <HAL_GPIO_Init+0x1ee>
 8000bc8:	2301      	movs	r3, #1
 8000bca:	e000      	b.n	8000bce <HAL_GPIO_Init+0x1ee>
 8000bcc:	2300      	movs	r3, #0
 8000bce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000bd0:	f002 0203 	and.w	r2, r2, #3
 8000bd4:	0092      	lsls	r2, r2, #2
 8000bd6:	4093      	lsls	r3, r2
 8000bd8:	68fa      	ldr	r2, [r7, #12]
 8000bda:	4313      	orrs	r3, r2
 8000bdc:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000bde:	492f      	ldr	r1, [pc, #188]	@ (8000c9c <HAL_GPIO_Init+0x2bc>)
 8000be0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000be2:	089b      	lsrs	r3, r3, #2
 8000be4:	3302      	adds	r3, #2
 8000be6:	68fa      	ldr	r2, [r7, #12]
 8000be8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000bec:	683b      	ldr	r3, [r7, #0]
 8000bee:	685b      	ldr	r3, [r3, #4]
 8000bf0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d006      	beq.n	8000c06 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000bf8:	4b2d      	ldr	r3, [pc, #180]	@ (8000cb0 <HAL_GPIO_Init+0x2d0>)
 8000bfa:	689a      	ldr	r2, [r3, #8]
 8000bfc:	492c      	ldr	r1, [pc, #176]	@ (8000cb0 <HAL_GPIO_Init+0x2d0>)
 8000bfe:	69bb      	ldr	r3, [r7, #24]
 8000c00:	4313      	orrs	r3, r2
 8000c02:	608b      	str	r3, [r1, #8]
 8000c04:	e006      	b.n	8000c14 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000c06:	4b2a      	ldr	r3, [pc, #168]	@ (8000cb0 <HAL_GPIO_Init+0x2d0>)
 8000c08:	689a      	ldr	r2, [r3, #8]
 8000c0a:	69bb      	ldr	r3, [r7, #24]
 8000c0c:	43db      	mvns	r3, r3
 8000c0e:	4928      	ldr	r1, [pc, #160]	@ (8000cb0 <HAL_GPIO_Init+0x2d0>)
 8000c10:	4013      	ands	r3, r2
 8000c12:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000c14:	683b      	ldr	r3, [r7, #0]
 8000c16:	685b      	ldr	r3, [r3, #4]
 8000c18:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	d006      	beq.n	8000c2e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000c20:	4b23      	ldr	r3, [pc, #140]	@ (8000cb0 <HAL_GPIO_Init+0x2d0>)
 8000c22:	68da      	ldr	r2, [r3, #12]
 8000c24:	4922      	ldr	r1, [pc, #136]	@ (8000cb0 <HAL_GPIO_Init+0x2d0>)
 8000c26:	69bb      	ldr	r3, [r7, #24]
 8000c28:	4313      	orrs	r3, r2
 8000c2a:	60cb      	str	r3, [r1, #12]
 8000c2c:	e006      	b.n	8000c3c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000c2e:	4b20      	ldr	r3, [pc, #128]	@ (8000cb0 <HAL_GPIO_Init+0x2d0>)
 8000c30:	68da      	ldr	r2, [r3, #12]
 8000c32:	69bb      	ldr	r3, [r7, #24]
 8000c34:	43db      	mvns	r3, r3
 8000c36:	491e      	ldr	r1, [pc, #120]	@ (8000cb0 <HAL_GPIO_Init+0x2d0>)
 8000c38:	4013      	ands	r3, r2
 8000c3a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000c3c:	683b      	ldr	r3, [r7, #0]
 8000c3e:	685b      	ldr	r3, [r3, #4]
 8000c40:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	d006      	beq.n	8000c56 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000c48:	4b19      	ldr	r3, [pc, #100]	@ (8000cb0 <HAL_GPIO_Init+0x2d0>)
 8000c4a:	685a      	ldr	r2, [r3, #4]
 8000c4c:	4918      	ldr	r1, [pc, #96]	@ (8000cb0 <HAL_GPIO_Init+0x2d0>)
 8000c4e:	69bb      	ldr	r3, [r7, #24]
 8000c50:	4313      	orrs	r3, r2
 8000c52:	604b      	str	r3, [r1, #4]
 8000c54:	e006      	b.n	8000c64 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000c56:	4b16      	ldr	r3, [pc, #88]	@ (8000cb0 <HAL_GPIO_Init+0x2d0>)
 8000c58:	685a      	ldr	r2, [r3, #4]
 8000c5a:	69bb      	ldr	r3, [r7, #24]
 8000c5c:	43db      	mvns	r3, r3
 8000c5e:	4914      	ldr	r1, [pc, #80]	@ (8000cb0 <HAL_GPIO_Init+0x2d0>)
 8000c60:	4013      	ands	r3, r2
 8000c62:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000c64:	683b      	ldr	r3, [r7, #0]
 8000c66:	685b      	ldr	r3, [r3, #4]
 8000c68:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000c6c:	2b00      	cmp	r3, #0
 8000c6e:	d021      	beq.n	8000cb4 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000c70:	4b0f      	ldr	r3, [pc, #60]	@ (8000cb0 <HAL_GPIO_Init+0x2d0>)
 8000c72:	681a      	ldr	r2, [r3, #0]
 8000c74:	490e      	ldr	r1, [pc, #56]	@ (8000cb0 <HAL_GPIO_Init+0x2d0>)
 8000c76:	69bb      	ldr	r3, [r7, #24]
 8000c78:	4313      	orrs	r3, r2
 8000c7a:	600b      	str	r3, [r1, #0]
 8000c7c:	e021      	b.n	8000cc2 <HAL_GPIO_Init+0x2e2>
 8000c7e:	bf00      	nop
 8000c80:	10320000 	.word	0x10320000
 8000c84:	10310000 	.word	0x10310000
 8000c88:	10220000 	.word	0x10220000
 8000c8c:	10210000 	.word	0x10210000
 8000c90:	10120000 	.word	0x10120000
 8000c94:	10110000 	.word	0x10110000
 8000c98:	40021000 	.word	0x40021000
 8000c9c:	40010000 	.word	0x40010000
 8000ca0:	40010800 	.word	0x40010800
 8000ca4:	40010c00 	.word	0x40010c00
 8000ca8:	40011000 	.word	0x40011000
 8000cac:	40011400 	.word	0x40011400
 8000cb0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000cb4:	4b0b      	ldr	r3, [pc, #44]	@ (8000ce4 <HAL_GPIO_Init+0x304>)
 8000cb6:	681a      	ldr	r2, [r3, #0]
 8000cb8:	69bb      	ldr	r3, [r7, #24]
 8000cba:	43db      	mvns	r3, r3
 8000cbc:	4909      	ldr	r1, [pc, #36]	@ (8000ce4 <HAL_GPIO_Init+0x304>)
 8000cbe:	4013      	ands	r3, r2
 8000cc0:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8000cc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000cc4:	3301      	adds	r3, #1
 8000cc6:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000cc8:	683b      	ldr	r3, [r7, #0]
 8000cca:	681a      	ldr	r2, [r3, #0]
 8000ccc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000cce:	fa22 f303 	lsr.w	r3, r2, r3
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	f47f ae8e 	bne.w	80009f4 <HAL_GPIO_Init+0x14>
  }
}
 8000cd8:	bf00      	nop
 8000cda:	bf00      	nop
 8000cdc:	372c      	adds	r7, #44	@ 0x2c
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	bc80      	pop	{r7}
 8000ce2:	4770      	bx	lr
 8000ce4:	40010400 	.word	0x40010400

08000ce8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b086      	sub	sp, #24
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d101      	bne.n	8000cfa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000cf6:	2301      	movs	r3, #1
 8000cf8:	e272      	b.n	80011e0 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	681b      	ldr	r3, [r3, #0]
 8000cfe:	f003 0301 	and.w	r3, r3, #1
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	f000 8087 	beq.w	8000e16 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000d08:	4b92      	ldr	r3, [pc, #584]	@ (8000f54 <HAL_RCC_OscConfig+0x26c>)
 8000d0a:	685b      	ldr	r3, [r3, #4]
 8000d0c:	f003 030c 	and.w	r3, r3, #12
 8000d10:	2b04      	cmp	r3, #4
 8000d12:	d00c      	beq.n	8000d2e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000d14:	4b8f      	ldr	r3, [pc, #572]	@ (8000f54 <HAL_RCC_OscConfig+0x26c>)
 8000d16:	685b      	ldr	r3, [r3, #4]
 8000d18:	f003 030c 	and.w	r3, r3, #12
 8000d1c:	2b08      	cmp	r3, #8
 8000d1e:	d112      	bne.n	8000d46 <HAL_RCC_OscConfig+0x5e>
 8000d20:	4b8c      	ldr	r3, [pc, #560]	@ (8000f54 <HAL_RCC_OscConfig+0x26c>)
 8000d22:	685b      	ldr	r3, [r3, #4]
 8000d24:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000d28:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000d2c:	d10b      	bne.n	8000d46 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000d2e:	4b89      	ldr	r3, [pc, #548]	@ (8000f54 <HAL_RCC_OscConfig+0x26c>)
 8000d30:	681b      	ldr	r3, [r3, #0]
 8000d32:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d06c      	beq.n	8000e14 <HAL_RCC_OscConfig+0x12c>
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	685b      	ldr	r3, [r3, #4]
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d168      	bne.n	8000e14 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000d42:	2301      	movs	r3, #1
 8000d44:	e24c      	b.n	80011e0 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	685b      	ldr	r3, [r3, #4]
 8000d4a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000d4e:	d106      	bne.n	8000d5e <HAL_RCC_OscConfig+0x76>
 8000d50:	4b80      	ldr	r3, [pc, #512]	@ (8000f54 <HAL_RCC_OscConfig+0x26c>)
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	4a7f      	ldr	r2, [pc, #508]	@ (8000f54 <HAL_RCC_OscConfig+0x26c>)
 8000d56:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000d5a:	6013      	str	r3, [r2, #0]
 8000d5c:	e02e      	b.n	8000dbc <HAL_RCC_OscConfig+0xd4>
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	685b      	ldr	r3, [r3, #4]
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d10c      	bne.n	8000d80 <HAL_RCC_OscConfig+0x98>
 8000d66:	4b7b      	ldr	r3, [pc, #492]	@ (8000f54 <HAL_RCC_OscConfig+0x26c>)
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	4a7a      	ldr	r2, [pc, #488]	@ (8000f54 <HAL_RCC_OscConfig+0x26c>)
 8000d6c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000d70:	6013      	str	r3, [r2, #0]
 8000d72:	4b78      	ldr	r3, [pc, #480]	@ (8000f54 <HAL_RCC_OscConfig+0x26c>)
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	4a77      	ldr	r2, [pc, #476]	@ (8000f54 <HAL_RCC_OscConfig+0x26c>)
 8000d78:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000d7c:	6013      	str	r3, [r2, #0]
 8000d7e:	e01d      	b.n	8000dbc <HAL_RCC_OscConfig+0xd4>
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	685b      	ldr	r3, [r3, #4]
 8000d84:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8000d88:	d10c      	bne.n	8000da4 <HAL_RCC_OscConfig+0xbc>
 8000d8a:	4b72      	ldr	r3, [pc, #456]	@ (8000f54 <HAL_RCC_OscConfig+0x26c>)
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	4a71      	ldr	r2, [pc, #452]	@ (8000f54 <HAL_RCC_OscConfig+0x26c>)
 8000d90:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000d94:	6013      	str	r3, [r2, #0]
 8000d96:	4b6f      	ldr	r3, [pc, #444]	@ (8000f54 <HAL_RCC_OscConfig+0x26c>)
 8000d98:	681b      	ldr	r3, [r3, #0]
 8000d9a:	4a6e      	ldr	r2, [pc, #440]	@ (8000f54 <HAL_RCC_OscConfig+0x26c>)
 8000d9c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000da0:	6013      	str	r3, [r2, #0]
 8000da2:	e00b      	b.n	8000dbc <HAL_RCC_OscConfig+0xd4>
 8000da4:	4b6b      	ldr	r3, [pc, #428]	@ (8000f54 <HAL_RCC_OscConfig+0x26c>)
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	4a6a      	ldr	r2, [pc, #424]	@ (8000f54 <HAL_RCC_OscConfig+0x26c>)
 8000daa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000dae:	6013      	str	r3, [r2, #0]
 8000db0:	4b68      	ldr	r3, [pc, #416]	@ (8000f54 <HAL_RCC_OscConfig+0x26c>)
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	4a67      	ldr	r2, [pc, #412]	@ (8000f54 <HAL_RCC_OscConfig+0x26c>)
 8000db6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000dba:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	685b      	ldr	r3, [r3, #4]
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	d013      	beq.n	8000dec <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000dc4:	f7ff fc42 	bl	800064c <HAL_GetTick>
 8000dc8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000dca:	e008      	b.n	8000dde <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000dcc:	f7ff fc3e 	bl	800064c <HAL_GetTick>
 8000dd0:	4602      	mov	r2, r0
 8000dd2:	693b      	ldr	r3, [r7, #16]
 8000dd4:	1ad3      	subs	r3, r2, r3
 8000dd6:	2b64      	cmp	r3, #100	@ 0x64
 8000dd8:	d901      	bls.n	8000dde <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000dda:	2303      	movs	r3, #3
 8000ddc:	e200      	b.n	80011e0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000dde:	4b5d      	ldr	r3, [pc, #372]	@ (8000f54 <HAL_RCC_OscConfig+0x26c>)
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d0f0      	beq.n	8000dcc <HAL_RCC_OscConfig+0xe4>
 8000dea:	e014      	b.n	8000e16 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000dec:	f7ff fc2e 	bl	800064c <HAL_GetTick>
 8000df0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000df2:	e008      	b.n	8000e06 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000df4:	f7ff fc2a 	bl	800064c <HAL_GetTick>
 8000df8:	4602      	mov	r2, r0
 8000dfa:	693b      	ldr	r3, [r7, #16]
 8000dfc:	1ad3      	subs	r3, r2, r3
 8000dfe:	2b64      	cmp	r3, #100	@ 0x64
 8000e00:	d901      	bls.n	8000e06 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000e02:	2303      	movs	r3, #3
 8000e04:	e1ec      	b.n	80011e0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000e06:	4b53      	ldr	r3, [pc, #332]	@ (8000f54 <HAL_RCC_OscConfig+0x26c>)
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	d1f0      	bne.n	8000df4 <HAL_RCC_OscConfig+0x10c>
 8000e12:	e000      	b.n	8000e16 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000e14:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	f003 0302 	and.w	r3, r3, #2
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	d063      	beq.n	8000eea <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000e22:	4b4c      	ldr	r3, [pc, #304]	@ (8000f54 <HAL_RCC_OscConfig+0x26c>)
 8000e24:	685b      	ldr	r3, [r3, #4]
 8000e26:	f003 030c 	and.w	r3, r3, #12
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d00b      	beq.n	8000e46 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000e2e:	4b49      	ldr	r3, [pc, #292]	@ (8000f54 <HAL_RCC_OscConfig+0x26c>)
 8000e30:	685b      	ldr	r3, [r3, #4]
 8000e32:	f003 030c 	and.w	r3, r3, #12
 8000e36:	2b08      	cmp	r3, #8
 8000e38:	d11c      	bne.n	8000e74 <HAL_RCC_OscConfig+0x18c>
 8000e3a:	4b46      	ldr	r3, [pc, #280]	@ (8000f54 <HAL_RCC_OscConfig+0x26c>)
 8000e3c:	685b      	ldr	r3, [r3, #4]
 8000e3e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	d116      	bne.n	8000e74 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000e46:	4b43      	ldr	r3, [pc, #268]	@ (8000f54 <HAL_RCC_OscConfig+0x26c>)
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	f003 0302 	and.w	r3, r3, #2
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d005      	beq.n	8000e5e <HAL_RCC_OscConfig+0x176>
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	691b      	ldr	r3, [r3, #16]
 8000e56:	2b01      	cmp	r3, #1
 8000e58:	d001      	beq.n	8000e5e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8000e5a:	2301      	movs	r3, #1
 8000e5c:	e1c0      	b.n	80011e0 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000e5e:	4b3d      	ldr	r3, [pc, #244]	@ (8000f54 <HAL_RCC_OscConfig+0x26c>)
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	695b      	ldr	r3, [r3, #20]
 8000e6a:	00db      	lsls	r3, r3, #3
 8000e6c:	4939      	ldr	r1, [pc, #228]	@ (8000f54 <HAL_RCC_OscConfig+0x26c>)
 8000e6e:	4313      	orrs	r3, r2
 8000e70:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000e72:	e03a      	b.n	8000eea <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	691b      	ldr	r3, [r3, #16]
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	d020      	beq.n	8000ebe <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000e7c:	4b36      	ldr	r3, [pc, #216]	@ (8000f58 <HAL_RCC_OscConfig+0x270>)
 8000e7e:	2201      	movs	r2, #1
 8000e80:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e82:	f7ff fbe3 	bl	800064c <HAL_GetTick>
 8000e86:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000e88:	e008      	b.n	8000e9c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000e8a:	f7ff fbdf 	bl	800064c <HAL_GetTick>
 8000e8e:	4602      	mov	r2, r0
 8000e90:	693b      	ldr	r3, [r7, #16]
 8000e92:	1ad3      	subs	r3, r2, r3
 8000e94:	2b02      	cmp	r3, #2
 8000e96:	d901      	bls.n	8000e9c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8000e98:	2303      	movs	r3, #3
 8000e9a:	e1a1      	b.n	80011e0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000e9c:	4b2d      	ldr	r3, [pc, #180]	@ (8000f54 <HAL_RCC_OscConfig+0x26c>)
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	f003 0302 	and.w	r3, r3, #2
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d0f0      	beq.n	8000e8a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000ea8:	4b2a      	ldr	r3, [pc, #168]	@ (8000f54 <HAL_RCC_OscConfig+0x26c>)
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	695b      	ldr	r3, [r3, #20]
 8000eb4:	00db      	lsls	r3, r3, #3
 8000eb6:	4927      	ldr	r1, [pc, #156]	@ (8000f54 <HAL_RCC_OscConfig+0x26c>)
 8000eb8:	4313      	orrs	r3, r2
 8000eba:	600b      	str	r3, [r1, #0]
 8000ebc:	e015      	b.n	8000eea <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000ebe:	4b26      	ldr	r3, [pc, #152]	@ (8000f58 <HAL_RCC_OscConfig+0x270>)
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ec4:	f7ff fbc2 	bl	800064c <HAL_GetTick>
 8000ec8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000eca:	e008      	b.n	8000ede <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000ecc:	f7ff fbbe 	bl	800064c <HAL_GetTick>
 8000ed0:	4602      	mov	r2, r0
 8000ed2:	693b      	ldr	r3, [r7, #16]
 8000ed4:	1ad3      	subs	r3, r2, r3
 8000ed6:	2b02      	cmp	r3, #2
 8000ed8:	d901      	bls.n	8000ede <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8000eda:	2303      	movs	r3, #3
 8000edc:	e180      	b.n	80011e0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000ede:	4b1d      	ldr	r3, [pc, #116]	@ (8000f54 <HAL_RCC_OscConfig+0x26c>)
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	f003 0302 	and.w	r3, r3, #2
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d1f0      	bne.n	8000ecc <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	f003 0308 	and.w	r3, r3, #8
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d03a      	beq.n	8000f6c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	699b      	ldr	r3, [r3, #24]
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d019      	beq.n	8000f32 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000efe:	4b17      	ldr	r3, [pc, #92]	@ (8000f5c <HAL_RCC_OscConfig+0x274>)
 8000f00:	2201      	movs	r2, #1
 8000f02:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000f04:	f7ff fba2 	bl	800064c <HAL_GetTick>
 8000f08:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000f0a:	e008      	b.n	8000f1e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000f0c:	f7ff fb9e 	bl	800064c <HAL_GetTick>
 8000f10:	4602      	mov	r2, r0
 8000f12:	693b      	ldr	r3, [r7, #16]
 8000f14:	1ad3      	subs	r3, r2, r3
 8000f16:	2b02      	cmp	r3, #2
 8000f18:	d901      	bls.n	8000f1e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8000f1a:	2303      	movs	r3, #3
 8000f1c:	e160      	b.n	80011e0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000f1e:	4b0d      	ldr	r3, [pc, #52]	@ (8000f54 <HAL_RCC_OscConfig+0x26c>)
 8000f20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000f22:	f003 0302 	and.w	r3, r3, #2
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d0f0      	beq.n	8000f0c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8000f2a:	2001      	movs	r0, #1
 8000f2c:	f000 face 	bl	80014cc <RCC_Delay>
 8000f30:	e01c      	b.n	8000f6c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000f32:	4b0a      	ldr	r3, [pc, #40]	@ (8000f5c <HAL_RCC_OscConfig+0x274>)
 8000f34:	2200      	movs	r2, #0
 8000f36:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000f38:	f7ff fb88 	bl	800064c <HAL_GetTick>
 8000f3c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000f3e:	e00f      	b.n	8000f60 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000f40:	f7ff fb84 	bl	800064c <HAL_GetTick>
 8000f44:	4602      	mov	r2, r0
 8000f46:	693b      	ldr	r3, [r7, #16]
 8000f48:	1ad3      	subs	r3, r2, r3
 8000f4a:	2b02      	cmp	r3, #2
 8000f4c:	d908      	bls.n	8000f60 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8000f4e:	2303      	movs	r3, #3
 8000f50:	e146      	b.n	80011e0 <HAL_RCC_OscConfig+0x4f8>
 8000f52:	bf00      	nop
 8000f54:	40021000 	.word	0x40021000
 8000f58:	42420000 	.word	0x42420000
 8000f5c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000f60:	4b92      	ldr	r3, [pc, #584]	@ (80011ac <HAL_RCC_OscConfig+0x4c4>)
 8000f62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000f64:	f003 0302 	and.w	r3, r3, #2
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d1e9      	bne.n	8000f40 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	f003 0304 	and.w	r3, r3, #4
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	f000 80a6 	beq.w	80010c6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000f7e:	4b8b      	ldr	r3, [pc, #556]	@ (80011ac <HAL_RCC_OscConfig+0x4c4>)
 8000f80:	69db      	ldr	r3, [r3, #28]
 8000f82:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d10d      	bne.n	8000fa6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000f8a:	4b88      	ldr	r3, [pc, #544]	@ (80011ac <HAL_RCC_OscConfig+0x4c4>)
 8000f8c:	69db      	ldr	r3, [r3, #28]
 8000f8e:	4a87      	ldr	r2, [pc, #540]	@ (80011ac <HAL_RCC_OscConfig+0x4c4>)
 8000f90:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000f94:	61d3      	str	r3, [r2, #28]
 8000f96:	4b85      	ldr	r3, [pc, #532]	@ (80011ac <HAL_RCC_OscConfig+0x4c4>)
 8000f98:	69db      	ldr	r3, [r3, #28]
 8000f9a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000f9e:	60bb      	str	r3, [r7, #8]
 8000fa0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000fa2:	2301      	movs	r3, #1
 8000fa4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000fa6:	4b82      	ldr	r3, [pc, #520]	@ (80011b0 <HAL_RCC_OscConfig+0x4c8>)
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d118      	bne.n	8000fe4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000fb2:	4b7f      	ldr	r3, [pc, #508]	@ (80011b0 <HAL_RCC_OscConfig+0x4c8>)
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	4a7e      	ldr	r2, [pc, #504]	@ (80011b0 <HAL_RCC_OscConfig+0x4c8>)
 8000fb8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000fbc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000fbe:	f7ff fb45 	bl	800064c <HAL_GetTick>
 8000fc2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000fc4:	e008      	b.n	8000fd8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000fc6:	f7ff fb41 	bl	800064c <HAL_GetTick>
 8000fca:	4602      	mov	r2, r0
 8000fcc:	693b      	ldr	r3, [r7, #16]
 8000fce:	1ad3      	subs	r3, r2, r3
 8000fd0:	2b64      	cmp	r3, #100	@ 0x64
 8000fd2:	d901      	bls.n	8000fd8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8000fd4:	2303      	movs	r3, #3
 8000fd6:	e103      	b.n	80011e0 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000fd8:	4b75      	ldr	r3, [pc, #468]	@ (80011b0 <HAL_RCC_OscConfig+0x4c8>)
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d0f0      	beq.n	8000fc6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	68db      	ldr	r3, [r3, #12]
 8000fe8:	2b01      	cmp	r3, #1
 8000fea:	d106      	bne.n	8000ffa <HAL_RCC_OscConfig+0x312>
 8000fec:	4b6f      	ldr	r3, [pc, #444]	@ (80011ac <HAL_RCC_OscConfig+0x4c4>)
 8000fee:	6a1b      	ldr	r3, [r3, #32]
 8000ff0:	4a6e      	ldr	r2, [pc, #440]	@ (80011ac <HAL_RCC_OscConfig+0x4c4>)
 8000ff2:	f043 0301 	orr.w	r3, r3, #1
 8000ff6:	6213      	str	r3, [r2, #32]
 8000ff8:	e02d      	b.n	8001056 <HAL_RCC_OscConfig+0x36e>
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	68db      	ldr	r3, [r3, #12]
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d10c      	bne.n	800101c <HAL_RCC_OscConfig+0x334>
 8001002:	4b6a      	ldr	r3, [pc, #424]	@ (80011ac <HAL_RCC_OscConfig+0x4c4>)
 8001004:	6a1b      	ldr	r3, [r3, #32]
 8001006:	4a69      	ldr	r2, [pc, #420]	@ (80011ac <HAL_RCC_OscConfig+0x4c4>)
 8001008:	f023 0301 	bic.w	r3, r3, #1
 800100c:	6213      	str	r3, [r2, #32]
 800100e:	4b67      	ldr	r3, [pc, #412]	@ (80011ac <HAL_RCC_OscConfig+0x4c4>)
 8001010:	6a1b      	ldr	r3, [r3, #32]
 8001012:	4a66      	ldr	r2, [pc, #408]	@ (80011ac <HAL_RCC_OscConfig+0x4c4>)
 8001014:	f023 0304 	bic.w	r3, r3, #4
 8001018:	6213      	str	r3, [r2, #32]
 800101a:	e01c      	b.n	8001056 <HAL_RCC_OscConfig+0x36e>
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	68db      	ldr	r3, [r3, #12]
 8001020:	2b05      	cmp	r3, #5
 8001022:	d10c      	bne.n	800103e <HAL_RCC_OscConfig+0x356>
 8001024:	4b61      	ldr	r3, [pc, #388]	@ (80011ac <HAL_RCC_OscConfig+0x4c4>)
 8001026:	6a1b      	ldr	r3, [r3, #32]
 8001028:	4a60      	ldr	r2, [pc, #384]	@ (80011ac <HAL_RCC_OscConfig+0x4c4>)
 800102a:	f043 0304 	orr.w	r3, r3, #4
 800102e:	6213      	str	r3, [r2, #32]
 8001030:	4b5e      	ldr	r3, [pc, #376]	@ (80011ac <HAL_RCC_OscConfig+0x4c4>)
 8001032:	6a1b      	ldr	r3, [r3, #32]
 8001034:	4a5d      	ldr	r2, [pc, #372]	@ (80011ac <HAL_RCC_OscConfig+0x4c4>)
 8001036:	f043 0301 	orr.w	r3, r3, #1
 800103a:	6213      	str	r3, [r2, #32]
 800103c:	e00b      	b.n	8001056 <HAL_RCC_OscConfig+0x36e>
 800103e:	4b5b      	ldr	r3, [pc, #364]	@ (80011ac <HAL_RCC_OscConfig+0x4c4>)
 8001040:	6a1b      	ldr	r3, [r3, #32]
 8001042:	4a5a      	ldr	r2, [pc, #360]	@ (80011ac <HAL_RCC_OscConfig+0x4c4>)
 8001044:	f023 0301 	bic.w	r3, r3, #1
 8001048:	6213      	str	r3, [r2, #32]
 800104a:	4b58      	ldr	r3, [pc, #352]	@ (80011ac <HAL_RCC_OscConfig+0x4c4>)
 800104c:	6a1b      	ldr	r3, [r3, #32]
 800104e:	4a57      	ldr	r2, [pc, #348]	@ (80011ac <HAL_RCC_OscConfig+0x4c4>)
 8001050:	f023 0304 	bic.w	r3, r3, #4
 8001054:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	68db      	ldr	r3, [r3, #12]
 800105a:	2b00      	cmp	r3, #0
 800105c:	d015      	beq.n	800108a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800105e:	f7ff faf5 	bl	800064c <HAL_GetTick>
 8001062:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001064:	e00a      	b.n	800107c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001066:	f7ff faf1 	bl	800064c <HAL_GetTick>
 800106a:	4602      	mov	r2, r0
 800106c:	693b      	ldr	r3, [r7, #16]
 800106e:	1ad3      	subs	r3, r2, r3
 8001070:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001074:	4293      	cmp	r3, r2
 8001076:	d901      	bls.n	800107c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001078:	2303      	movs	r3, #3
 800107a:	e0b1      	b.n	80011e0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800107c:	4b4b      	ldr	r3, [pc, #300]	@ (80011ac <HAL_RCC_OscConfig+0x4c4>)
 800107e:	6a1b      	ldr	r3, [r3, #32]
 8001080:	f003 0302 	and.w	r3, r3, #2
 8001084:	2b00      	cmp	r3, #0
 8001086:	d0ee      	beq.n	8001066 <HAL_RCC_OscConfig+0x37e>
 8001088:	e014      	b.n	80010b4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800108a:	f7ff fadf 	bl	800064c <HAL_GetTick>
 800108e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001090:	e00a      	b.n	80010a8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001092:	f7ff fadb 	bl	800064c <HAL_GetTick>
 8001096:	4602      	mov	r2, r0
 8001098:	693b      	ldr	r3, [r7, #16]
 800109a:	1ad3      	subs	r3, r2, r3
 800109c:	f241 3288 	movw	r2, #5000	@ 0x1388
 80010a0:	4293      	cmp	r3, r2
 80010a2:	d901      	bls.n	80010a8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80010a4:	2303      	movs	r3, #3
 80010a6:	e09b      	b.n	80011e0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80010a8:	4b40      	ldr	r3, [pc, #256]	@ (80011ac <HAL_RCC_OscConfig+0x4c4>)
 80010aa:	6a1b      	ldr	r3, [r3, #32]
 80010ac:	f003 0302 	and.w	r3, r3, #2
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d1ee      	bne.n	8001092 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80010b4:	7dfb      	ldrb	r3, [r7, #23]
 80010b6:	2b01      	cmp	r3, #1
 80010b8:	d105      	bne.n	80010c6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80010ba:	4b3c      	ldr	r3, [pc, #240]	@ (80011ac <HAL_RCC_OscConfig+0x4c4>)
 80010bc:	69db      	ldr	r3, [r3, #28]
 80010be:	4a3b      	ldr	r2, [pc, #236]	@ (80011ac <HAL_RCC_OscConfig+0x4c4>)
 80010c0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80010c4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	69db      	ldr	r3, [r3, #28]
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	f000 8087 	beq.w	80011de <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80010d0:	4b36      	ldr	r3, [pc, #216]	@ (80011ac <HAL_RCC_OscConfig+0x4c4>)
 80010d2:	685b      	ldr	r3, [r3, #4]
 80010d4:	f003 030c 	and.w	r3, r3, #12
 80010d8:	2b08      	cmp	r3, #8
 80010da:	d061      	beq.n	80011a0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	69db      	ldr	r3, [r3, #28]
 80010e0:	2b02      	cmp	r3, #2
 80010e2:	d146      	bne.n	8001172 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80010e4:	4b33      	ldr	r3, [pc, #204]	@ (80011b4 <HAL_RCC_OscConfig+0x4cc>)
 80010e6:	2200      	movs	r2, #0
 80010e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010ea:	f7ff faaf 	bl	800064c <HAL_GetTick>
 80010ee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80010f0:	e008      	b.n	8001104 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80010f2:	f7ff faab 	bl	800064c <HAL_GetTick>
 80010f6:	4602      	mov	r2, r0
 80010f8:	693b      	ldr	r3, [r7, #16]
 80010fa:	1ad3      	subs	r3, r2, r3
 80010fc:	2b02      	cmp	r3, #2
 80010fe:	d901      	bls.n	8001104 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001100:	2303      	movs	r3, #3
 8001102:	e06d      	b.n	80011e0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001104:	4b29      	ldr	r3, [pc, #164]	@ (80011ac <HAL_RCC_OscConfig+0x4c4>)
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800110c:	2b00      	cmp	r3, #0
 800110e:	d1f0      	bne.n	80010f2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	6a1b      	ldr	r3, [r3, #32]
 8001114:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001118:	d108      	bne.n	800112c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800111a:	4b24      	ldr	r3, [pc, #144]	@ (80011ac <HAL_RCC_OscConfig+0x4c4>)
 800111c:	685b      	ldr	r3, [r3, #4]
 800111e:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	689b      	ldr	r3, [r3, #8]
 8001126:	4921      	ldr	r1, [pc, #132]	@ (80011ac <HAL_RCC_OscConfig+0x4c4>)
 8001128:	4313      	orrs	r3, r2
 800112a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800112c:	4b1f      	ldr	r3, [pc, #124]	@ (80011ac <HAL_RCC_OscConfig+0x4c4>)
 800112e:	685b      	ldr	r3, [r3, #4]
 8001130:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	6a19      	ldr	r1, [r3, #32]
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800113c:	430b      	orrs	r3, r1
 800113e:	491b      	ldr	r1, [pc, #108]	@ (80011ac <HAL_RCC_OscConfig+0x4c4>)
 8001140:	4313      	orrs	r3, r2
 8001142:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001144:	4b1b      	ldr	r3, [pc, #108]	@ (80011b4 <HAL_RCC_OscConfig+0x4cc>)
 8001146:	2201      	movs	r2, #1
 8001148:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800114a:	f7ff fa7f 	bl	800064c <HAL_GetTick>
 800114e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001150:	e008      	b.n	8001164 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001152:	f7ff fa7b 	bl	800064c <HAL_GetTick>
 8001156:	4602      	mov	r2, r0
 8001158:	693b      	ldr	r3, [r7, #16]
 800115a:	1ad3      	subs	r3, r2, r3
 800115c:	2b02      	cmp	r3, #2
 800115e:	d901      	bls.n	8001164 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001160:	2303      	movs	r3, #3
 8001162:	e03d      	b.n	80011e0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001164:	4b11      	ldr	r3, [pc, #68]	@ (80011ac <HAL_RCC_OscConfig+0x4c4>)
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800116c:	2b00      	cmp	r3, #0
 800116e:	d0f0      	beq.n	8001152 <HAL_RCC_OscConfig+0x46a>
 8001170:	e035      	b.n	80011de <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001172:	4b10      	ldr	r3, [pc, #64]	@ (80011b4 <HAL_RCC_OscConfig+0x4cc>)
 8001174:	2200      	movs	r2, #0
 8001176:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001178:	f7ff fa68 	bl	800064c <HAL_GetTick>
 800117c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800117e:	e008      	b.n	8001192 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001180:	f7ff fa64 	bl	800064c <HAL_GetTick>
 8001184:	4602      	mov	r2, r0
 8001186:	693b      	ldr	r3, [r7, #16]
 8001188:	1ad3      	subs	r3, r2, r3
 800118a:	2b02      	cmp	r3, #2
 800118c:	d901      	bls.n	8001192 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800118e:	2303      	movs	r3, #3
 8001190:	e026      	b.n	80011e0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001192:	4b06      	ldr	r3, [pc, #24]	@ (80011ac <HAL_RCC_OscConfig+0x4c4>)
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800119a:	2b00      	cmp	r3, #0
 800119c:	d1f0      	bne.n	8001180 <HAL_RCC_OscConfig+0x498>
 800119e:	e01e      	b.n	80011de <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	69db      	ldr	r3, [r3, #28]
 80011a4:	2b01      	cmp	r3, #1
 80011a6:	d107      	bne.n	80011b8 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80011a8:	2301      	movs	r3, #1
 80011aa:	e019      	b.n	80011e0 <HAL_RCC_OscConfig+0x4f8>
 80011ac:	40021000 	.word	0x40021000
 80011b0:	40007000 	.word	0x40007000
 80011b4:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80011b8:	4b0b      	ldr	r3, [pc, #44]	@ (80011e8 <HAL_RCC_OscConfig+0x500>)
 80011ba:	685b      	ldr	r3, [r3, #4]
 80011bc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80011be:	68fb      	ldr	r3, [r7, #12]
 80011c0:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	6a1b      	ldr	r3, [r3, #32]
 80011c8:	429a      	cmp	r2, r3
 80011ca:	d106      	bne.n	80011da <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80011cc:	68fb      	ldr	r3, [r7, #12]
 80011ce:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80011d6:	429a      	cmp	r2, r3
 80011d8:	d001      	beq.n	80011de <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80011da:	2301      	movs	r3, #1
 80011dc:	e000      	b.n	80011e0 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80011de:	2300      	movs	r3, #0
}
 80011e0:	4618      	mov	r0, r3
 80011e2:	3718      	adds	r7, #24
 80011e4:	46bd      	mov	sp, r7
 80011e6:	bd80      	pop	{r7, pc}
 80011e8:	40021000 	.word	0x40021000

080011ec <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b084      	sub	sp, #16
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	6078      	str	r0, [r7, #4]
 80011f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d101      	bne.n	8001200 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80011fc:	2301      	movs	r3, #1
 80011fe:	e0d0      	b.n	80013a2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001200:	4b6a      	ldr	r3, [pc, #424]	@ (80013ac <HAL_RCC_ClockConfig+0x1c0>)
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	f003 0307 	and.w	r3, r3, #7
 8001208:	683a      	ldr	r2, [r7, #0]
 800120a:	429a      	cmp	r2, r3
 800120c:	d910      	bls.n	8001230 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800120e:	4b67      	ldr	r3, [pc, #412]	@ (80013ac <HAL_RCC_ClockConfig+0x1c0>)
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	f023 0207 	bic.w	r2, r3, #7
 8001216:	4965      	ldr	r1, [pc, #404]	@ (80013ac <HAL_RCC_ClockConfig+0x1c0>)
 8001218:	683b      	ldr	r3, [r7, #0]
 800121a:	4313      	orrs	r3, r2
 800121c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800121e:	4b63      	ldr	r3, [pc, #396]	@ (80013ac <HAL_RCC_ClockConfig+0x1c0>)
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	f003 0307 	and.w	r3, r3, #7
 8001226:	683a      	ldr	r2, [r7, #0]
 8001228:	429a      	cmp	r2, r3
 800122a:	d001      	beq.n	8001230 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800122c:	2301      	movs	r3, #1
 800122e:	e0b8      	b.n	80013a2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	f003 0302 	and.w	r3, r3, #2
 8001238:	2b00      	cmp	r3, #0
 800123a:	d020      	beq.n	800127e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	f003 0304 	and.w	r3, r3, #4
 8001244:	2b00      	cmp	r3, #0
 8001246:	d005      	beq.n	8001254 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001248:	4b59      	ldr	r3, [pc, #356]	@ (80013b0 <HAL_RCC_ClockConfig+0x1c4>)
 800124a:	685b      	ldr	r3, [r3, #4]
 800124c:	4a58      	ldr	r2, [pc, #352]	@ (80013b0 <HAL_RCC_ClockConfig+0x1c4>)
 800124e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001252:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	f003 0308 	and.w	r3, r3, #8
 800125c:	2b00      	cmp	r3, #0
 800125e:	d005      	beq.n	800126c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001260:	4b53      	ldr	r3, [pc, #332]	@ (80013b0 <HAL_RCC_ClockConfig+0x1c4>)
 8001262:	685b      	ldr	r3, [r3, #4]
 8001264:	4a52      	ldr	r2, [pc, #328]	@ (80013b0 <HAL_RCC_ClockConfig+0x1c4>)
 8001266:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 800126a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800126c:	4b50      	ldr	r3, [pc, #320]	@ (80013b0 <HAL_RCC_ClockConfig+0x1c4>)
 800126e:	685b      	ldr	r3, [r3, #4]
 8001270:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	689b      	ldr	r3, [r3, #8]
 8001278:	494d      	ldr	r1, [pc, #308]	@ (80013b0 <HAL_RCC_ClockConfig+0x1c4>)
 800127a:	4313      	orrs	r3, r2
 800127c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	f003 0301 	and.w	r3, r3, #1
 8001286:	2b00      	cmp	r3, #0
 8001288:	d040      	beq.n	800130c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	685b      	ldr	r3, [r3, #4]
 800128e:	2b01      	cmp	r3, #1
 8001290:	d107      	bne.n	80012a2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001292:	4b47      	ldr	r3, [pc, #284]	@ (80013b0 <HAL_RCC_ClockConfig+0x1c4>)
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800129a:	2b00      	cmp	r3, #0
 800129c:	d115      	bne.n	80012ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800129e:	2301      	movs	r3, #1
 80012a0:	e07f      	b.n	80013a2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	685b      	ldr	r3, [r3, #4]
 80012a6:	2b02      	cmp	r3, #2
 80012a8:	d107      	bne.n	80012ba <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80012aa:	4b41      	ldr	r3, [pc, #260]	@ (80013b0 <HAL_RCC_ClockConfig+0x1c4>)
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d109      	bne.n	80012ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80012b6:	2301      	movs	r3, #1
 80012b8:	e073      	b.n	80013a2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80012ba:	4b3d      	ldr	r3, [pc, #244]	@ (80013b0 <HAL_RCC_ClockConfig+0x1c4>)
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	f003 0302 	and.w	r3, r3, #2
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d101      	bne.n	80012ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80012c6:	2301      	movs	r3, #1
 80012c8:	e06b      	b.n	80013a2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80012ca:	4b39      	ldr	r3, [pc, #228]	@ (80013b0 <HAL_RCC_ClockConfig+0x1c4>)
 80012cc:	685b      	ldr	r3, [r3, #4]
 80012ce:	f023 0203 	bic.w	r2, r3, #3
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	685b      	ldr	r3, [r3, #4]
 80012d6:	4936      	ldr	r1, [pc, #216]	@ (80013b0 <HAL_RCC_ClockConfig+0x1c4>)
 80012d8:	4313      	orrs	r3, r2
 80012da:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80012dc:	f7ff f9b6 	bl	800064c <HAL_GetTick>
 80012e0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80012e2:	e00a      	b.n	80012fa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80012e4:	f7ff f9b2 	bl	800064c <HAL_GetTick>
 80012e8:	4602      	mov	r2, r0
 80012ea:	68fb      	ldr	r3, [r7, #12]
 80012ec:	1ad3      	subs	r3, r2, r3
 80012ee:	f241 3288 	movw	r2, #5000	@ 0x1388
 80012f2:	4293      	cmp	r3, r2
 80012f4:	d901      	bls.n	80012fa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80012f6:	2303      	movs	r3, #3
 80012f8:	e053      	b.n	80013a2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80012fa:	4b2d      	ldr	r3, [pc, #180]	@ (80013b0 <HAL_RCC_ClockConfig+0x1c4>)
 80012fc:	685b      	ldr	r3, [r3, #4]
 80012fe:	f003 020c 	and.w	r2, r3, #12
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	685b      	ldr	r3, [r3, #4]
 8001306:	009b      	lsls	r3, r3, #2
 8001308:	429a      	cmp	r2, r3
 800130a:	d1eb      	bne.n	80012e4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800130c:	4b27      	ldr	r3, [pc, #156]	@ (80013ac <HAL_RCC_ClockConfig+0x1c0>)
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	f003 0307 	and.w	r3, r3, #7
 8001314:	683a      	ldr	r2, [r7, #0]
 8001316:	429a      	cmp	r2, r3
 8001318:	d210      	bcs.n	800133c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800131a:	4b24      	ldr	r3, [pc, #144]	@ (80013ac <HAL_RCC_ClockConfig+0x1c0>)
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	f023 0207 	bic.w	r2, r3, #7
 8001322:	4922      	ldr	r1, [pc, #136]	@ (80013ac <HAL_RCC_ClockConfig+0x1c0>)
 8001324:	683b      	ldr	r3, [r7, #0]
 8001326:	4313      	orrs	r3, r2
 8001328:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800132a:	4b20      	ldr	r3, [pc, #128]	@ (80013ac <HAL_RCC_ClockConfig+0x1c0>)
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	f003 0307 	and.w	r3, r3, #7
 8001332:	683a      	ldr	r2, [r7, #0]
 8001334:	429a      	cmp	r2, r3
 8001336:	d001      	beq.n	800133c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001338:	2301      	movs	r3, #1
 800133a:	e032      	b.n	80013a2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	f003 0304 	and.w	r3, r3, #4
 8001344:	2b00      	cmp	r3, #0
 8001346:	d008      	beq.n	800135a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001348:	4b19      	ldr	r3, [pc, #100]	@ (80013b0 <HAL_RCC_ClockConfig+0x1c4>)
 800134a:	685b      	ldr	r3, [r3, #4]
 800134c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	68db      	ldr	r3, [r3, #12]
 8001354:	4916      	ldr	r1, [pc, #88]	@ (80013b0 <HAL_RCC_ClockConfig+0x1c4>)
 8001356:	4313      	orrs	r3, r2
 8001358:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	f003 0308 	and.w	r3, r3, #8
 8001362:	2b00      	cmp	r3, #0
 8001364:	d009      	beq.n	800137a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001366:	4b12      	ldr	r3, [pc, #72]	@ (80013b0 <HAL_RCC_ClockConfig+0x1c4>)
 8001368:	685b      	ldr	r3, [r3, #4]
 800136a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	691b      	ldr	r3, [r3, #16]
 8001372:	00db      	lsls	r3, r3, #3
 8001374:	490e      	ldr	r1, [pc, #56]	@ (80013b0 <HAL_RCC_ClockConfig+0x1c4>)
 8001376:	4313      	orrs	r3, r2
 8001378:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800137a:	f000 f821 	bl	80013c0 <HAL_RCC_GetSysClockFreq>
 800137e:	4602      	mov	r2, r0
 8001380:	4b0b      	ldr	r3, [pc, #44]	@ (80013b0 <HAL_RCC_ClockConfig+0x1c4>)
 8001382:	685b      	ldr	r3, [r3, #4]
 8001384:	091b      	lsrs	r3, r3, #4
 8001386:	f003 030f 	and.w	r3, r3, #15
 800138a:	490a      	ldr	r1, [pc, #40]	@ (80013b4 <HAL_RCC_ClockConfig+0x1c8>)
 800138c:	5ccb      	ldrb	r3, [r1, r3]
 800138e:	fa22 f303 	lsr.w	r3, r2, r3
 8001392:	4a09      	ldr	r2, [pc, #36]	@ (80013b8 <HAL_RCC_ClockConfig+0x1cc>)
 8001394:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001396:	4b09      	ldr	r3, [pc, #36]	@ (80013bc <HAL_RCC_ClockConfig+0x1d0>)
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	4618      	mov	r0, r3
 800139c:	f7ff f914 	bl	80005c8 <HAL_InitTick>

  return HAL_OK;
 80013a0:	2300      	movs	r3, #0
}
 80013a2:	4618      	mov	r0, r3
 80013a4:	3710      	adds	r7, #16
 80013a6:	46bd      	mov	sp, r7
 80013a8:	bd80      	pop	{r7, pc}
 80013aa:	bf00      	nop
 80013ac:	40022000 	.word	0x40022000
 80013b0:	40021000 	.word	0x40021000
 80013b4:	0800521c 	.word	0x0800521c
 80013b8:	20000000 	.word	0x20000000
 80013bc:	20000004 	.word	0x20000004

080013c0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80013c0:	b480      	push	{r7}
 80013c2:	b087      	sub	sp, #28
 80013c4:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80013c6:	2300      	movs	r3, #0
 80013c8:	60fb      	str	r3, [r7, #12]
 80013ca:	2300      	movs	r3, #0
 80013cc:	60bb      	str	r3, [r7, #8]
 80013ce:	2300      	movs	r3, #0
 80013d0:	617b      	str	r3, [r7, #20]
 80013d2:	2300      	movs	r3, #0
 80013d4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80013d6:	2300      	movs	r3, #0
 80013d8:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80013da:	4b1e      	ldr	r3, [pc, #120]	@ (8001454 <HAL_RCC_GetSysClockFreq+0x94>)
 80013dc:	685b      	ldr	r3, [r3, #4]
 80013de:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80013e0:	68fb      	ldr	r3, [r7, #12]
 80013e2:	f003 030c 	and.w	r3, r3, #12
 80013e6:	2b04      	cmp	r3, #4
 80013e8:	d002      	beq.n	80013f0 <HAL_RCC_GetSysClockFreq+0x30>
 80013ea:	2b08      	cmp	r3, #8
 80013ec:	d003      	beq.n	80013f6 <HAL_RCC_GetSysClockFreq+0x36>
 80013ee:	e027      	b.n	8001440 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80013f0:	4b19      	ldr	r3, [pc, #100]	@ (8001458 <HAL_RCC_GetSysClockFreq+0x98>)
 80013f2:	613b      	str	r3, [r7, #16]
      break;
 80013f4:	e027      	b.n	8001446 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80013f6:	68fb      	ldr	r3, [r7, #12]
 80013f8:	0c9b      	lsrs	r3, r3, #18
 80013fa:	f003 030f 	and.w	r3, r3, #15
 80013fe:	4a17      	ldr	r2, [pc, #92]	@ (800145c <HAL_RCC_GetSysClockFreq+0x9c>)
 8001400:	5cd3      	ldrb	r3, [r2, r3]
 8001402:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001404:	68fb      	ldr	r3, [r7, #12]
 8001406:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800140a:	2b00      	cmp	r3, #0
 800140c:	d010      	beq.n	8001430 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800140e:	4b11      	ldr	r3, [pc, #68]	@ (8001454 <HAL_RCC_GetSysClockFreq+0x94>)
 8001410:	685b      	ldr	r3, [r3, #4]
 8001412:	0c5b      	lsrs	r3, r3, #17
 8001414:	f003 0301 	and.w	r3, r3, #1
 8001418:	4a11      	ldr	r2, [pc, #68]	@ (8001460 <HAL_RCC_GetSysClockFreq+0xa0>)
 800141a:	5cd3      	ldrb	r3, [r2, r3]
 800141c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	4a0d      	ldr	r2, [pc, #52]	@ (8001458 <HAL_RCC_GetSysClockFreq+0x98>)
 8001422:	fb03 f202 	mul.w	r2, r3, r2
 8001426:	68bb      	ldr	r3, [r7, #8]
 8001428:	fbb2 f3f3 	udiv	r3, r2, r3
 800142c:	617b      	str	r3, [r7, #20]
 800142e:	e004      	b.n	800143a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	4a0c      	ldr	r2, [pc, #48]	@ (8001464 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001434:	fb02 f303 	mul.w	r3, r2, r3
 8001438:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800143a:	697b      	ldr	r3, [r7, #20]
 800143c:	613b      	str	r3, [r7, #16]
      break;
 800143e:	e002      	b.n	8001446 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001440:	4b05      	ldr	r3, [pc, #20]	@ (8001458 <HAL_RCC_GetSysClockFreq+0x98>)
 8001442:	613b      	str	r3, [r7, #16]
      break;
 8001444:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001446:	693b      	ldr	r3, [r7, #16]
}
 8001448:	4618      	mov	r0, r3
 800144a:	371c      	adds	r7, #28
 800144c:	46bd      	mov	sp, r7
 800144e:	bc80      	pop	{r7}
 8001450:	4770      	bx	lr
 8001452:	bf00      	nop
 8001454:	40021000 	.word	0x40021000
 8001458:	007a1200 	.word	0x007a1200
 800145c:	08005234 	.word	0x08005234
 8001460:	08005244 	.word	0x08005244
 8001464:	003d0900 	.word	0x003d0900

08001468 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001468:	b480      	push	{r7}
 800146a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800146c:	4b02      	ldr	r3, [pc, #8]	@ (8001478 <HAL_RCC_GetHCLKFreq+0x10>)
 800146e:	681b      	ldr	r3, [r3, #0]
}
 8001470:	4618      	mov	r0, r3
 8001472:	46bd      	mov	sp, r7
 8001474:	bc80      	pop	{r7}
 8001476:	4770      	bx	lr
 8001478:	20000000 	.word	0x20000000

0800147c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001480:	f7ff fff2 	bl	8001468 <HAL_RCC_GetHCLKFreq>
 8001484:	4602      	mov	r2, r0
 8001486:	4b05      	ldr	r3, [pc, #20]	@ (800149c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001488:	685b      	ldr	r3, [r3, #4]
 800148a:	0a1b      	lsrs	r3, r3, #8
 800148c:	f003 0307 	and.w	r3, r3, #7
 8001490:	4903      	ldr	r1, [pc, #12]	@ (80014a0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001492:	5ccb      	ldrb	r3, [r1, r3]
 8001494:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001498:	4618      	mov	r0, r3
 800149a:	bd80      	pop	{r7, pc}
 800149c:	40021000 	.word	0x40021000
 80014a0:	0800522c 	.word	0x0800522c

080014a4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80014a8:	f7ff ffde 	bl	8001468 <HAL_RCC_GetHCLKFreq>
 80014ac:	4602      	mov	r2, r0
 80014ae:	4b05      	ldr	r3, [pc, #20]	@ (80014c4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80014b0:	685b      	ldr	r3, [r3, #4]
 80014b2:	0adb      	lsrs	r3, r3, #11
 80014b4:	f003 0307 	and.w	r3, r3, #7
 80014b8:	4903      	ldr	r1, [pc, #12]	@ (80014c8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80014ba:	5ccb      	ldrb	r3, [r1, r3]
 80014bc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80014c0:	4618      	mov	r0, r3
 80014c2:	bd80      	pop	{r7, pc}
 80014c4:	40021000 	.word	0x40021000
 80014c8:	0800522c 	.word	0x0800522c

080014cc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80014cc:	b480      	push	{r7}
 80014ce:	b085      	sub	sp, #20
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80014d4:	4b0a      	ldr	r3, [pc, #40]	@ (8001500 <RCC_Delay+0x34>)
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	4a0a      	ldr	r2, [pc, #40]	@ (8001504 <RCC_Delay+0x38>)
 80014da:	fba2 2303 	umull	r2, r3, r2, r3
 80014de:	0a5b      	lsrs	r3, r3, #9
 80014e0:	687a      	ldr	r2, [r7, #4]
 80014e2:	fb02 f303 	mul.w	r3, r2, r3
 80014e6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80014e8:	bf00      	nop
  }
  while (Delay --);
 80014ea:	68fb      	ldr	r3, [r7, #12]
 80014ec:	1e5a      	subs	r2, r3, #1
 80014ee:	60fa      	str	r2, [r7, #12]
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d1f9      	bne.n	80014e8 <RCC_Delay+0x1c>
}
 80014f4:	bf00      	nop
 80014f6:	bf00      	nop
 80014f8:	3714      	adds	r7, #20
 80014fa:	46bd      	mov	sp, r7
 80014fc:	bc80      	pop	{r7}
 80014fe:	4770      	bx	lr
 8001500:	20000000 	.word	0x20000000
 8001504:	10624dd3 	.word	0x10624dd3

08001508 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	b082      	sub	sp, #8
 800150c:	af00      	add	r7, sp, #0
 800150e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	2b00      	cmp	r3, #0
 8001514:	d101      	bne.n	800151a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001516:	2301      	movs	r3, #1
 8001518:	e041      	b.n	800159e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001520:	b2db      	uxtb	r3, r3
 8001522:	2b00      	cmp	r3, #0
 8001524:	d106      	bne.n	8001534 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	2200      	movs	r2, #0
 800152a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800152e:	6878      	ldr	r0, [r7, #4]
 8001530:	f7fe ff54 	bl	80003dc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	2202      	movs	r2, #2
 8001538:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	681a      	ldr	r2, [r3, #0]
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	3304      	adds	r3, #4
 8001544:	4619      	mov	r1, r3
 8001546:	4610      	mov	r0, r2
 8001548:	f000 fa12 	bl	8001970 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	2201      	movs	r2, #1
 8001550:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	2201      	movs	r2, #1
 8001558:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	2201      	movs	r2, #1
 8001560:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	2201      	movs	r2, #1
 8001568:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	2201      	movs	r2, #1
 8001570:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	2201      	movs	r2, #1
 8001578:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	2201      	movs	r2, #1
 8001580:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	2201      	movs	r2, #1
 8001588:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	2201      	movs	r2, #1
 8001590:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	2201      	movs	r2, #1
 8001598:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800159c:	2300      	movs	r3, #0
}
 800159e:	4618      	mov	r0, r3
 80015a0:	3708      	adds	r7, #8
 80015a2:	46bd      	mov	sp, r7
 80015a4:	bd80      	pop	{r7, pc}

080015a6 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80015a6:	b580      	push	{r7, lr}
 80015a8:	b084      	sub	sp, #16
 80015aa:	af00      	add	r7, sp, #0
 80015ac:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	68db      	ldr	r3, [r3, #12]
 80015b4:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	691b      	ldr	r3, [r3, #16]
 80015bc:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80015be:	68bb      	ldr	r3, [r7, #8]
 80015c0:	f003 0302 	and.w	r3, r3, #2
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d020      	beq.n	800160a <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80015c8:	68fb      	ldr	r3, [r7, #12]
 80015ca:	f003 0302 	and.w	r3, r3, #2
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d01b      	beq.n	800160a <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	f06f 0202 	mvn.w	r2, #2
 80015da:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	2201      	movs	r2, #1
 80015e0:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	699b      	ldr	r3, [r3, #24]
 80015e8:	f003 0303 	and.w	r3, r3, #3
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d003      	beq.n	80015f8 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80015f0:	6878      	ldr	r0, [r7, #4]
 80015f2:	f000 f9a1 	bl	8001938 <HAL_TIM_IC_CaptureCallback>
 80015f6:	e005      	b.n	8001604 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80015f8:	6878      	ldr	r0, [r7, #4]
 80015fa:	f000 f994 	bl	8001926 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80015fe:	6878      	ldr	r0, [r7, #4]
 8001600:	f000 f9a3 	bl	800194a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	2200      	movs	r2, #0
 8001608:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800160a:	68bb      	ldr	r3, [r7, #8]
 800160c:	f003 0304 	and.w	r3, r3, #4
 8001610:	2b00      	cmp	r3, #0
 8001612:	d020      	beq.n	8001656 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8001614:	68fb      	ldr	r3, [r7, #12]
 8001616:	f003 0304 	and.w	r3, r3, #4
 800161a:	2b00      	cmp	r3, #0
 800161c:	d01b      	beq.n	8001656 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	f06f 0204 	mvn.w	r2, #4
 8001626:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	2202      	movs	r2, #2
 800162c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	699b      	ldr	r3, [r3, #24]
 8001634:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001638:	2b00      	cmp	r3, #0
 800163a:	d003      	beq.n	8001644 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800163c:	6878      	ldr	r0, [r7, #4]
 800163e:	f000 f97b 	bl	8001938 <HAL_TIM_IC_CaptureCallback>
 8001642:	e005      	b.n	8001650 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001644:	6878      	ldr	r0, [r7, #4]
 8001646:	f000 f96e 	bl	8001926 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800164a:	6878      	ldr	r0, [r7, #4]
 800164c:	f000 f97d 	bl	800194a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	2200      	movs	r2, #0
 8001654:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8001656:	68bb      	ldr	r3, [r7, #8]
 8001658:	f003 0308 	and.w	r3, r3, #8
 800165c:	2b00      	cmp	r3, #0
 800165e:	d020      	beq.n	80016a2 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8001660:	68fb      	ldr	r3, [r7, #12]
 8001662:	f003 0308 	and.w	r3, r3, #8
 8001666:	2b00      	cmp	r3, #0
 8001668:	d01b      	beq.n	80016a2 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	f06f 0208 	mvn.w	r2, #8
 8001672:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	2204      	movs	r2, #4
 8001678:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	69db      	ldr	r3, [r3, #28]
 8001680:	f003 0303 	and.w	r3, r3, #3
 8001684:	2b00      	cmp	r3, #0
 8001686:	d003      	beq.n	8001690 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001688:	6878      	ldr	r0, [r7, #4]
 800168a:	f000 f955 	bl	8001938 <HAL_TIM_IC_CaptureCallback>
 800168e:	e005      	b.n	800169c <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001690:	6878      	ldr	r0, [r7, #4]
 8001692:	f000 f948 	bl	8001926 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001696:	6878      	ldr	r0, [r7, #4]
 8001698:	f000 f957 	bl	800194a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	2200      	movs	r2, #0
 80016a0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80016a2:	68bb      	ldr	r3, [r7, #8]
 80016a4:	f003 0310 	and.w	r3, r3, #16
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d020      	beq.n	80016ee <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	f003 0310 	and.w	r3, r3, #16
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d01b      	beq.n	80016ee <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	f06f 0210 	mvn.w	r2, #16
 80016be:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	2208      	movs	r2, #8
 80016c4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	69db      	ldr	r3, [r3, #28]
 80016cc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d003      	beq.n	80016dc <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80016d4:	6878      	ldr	r0, [r7, #4]
 80016d6:	f000 f92f 	bl	8001938 <HAL_TIM_IC_CaptureCallback>
 80016da:	e005      	b.n	80016e8 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80016dc:	6878      	ldr	r0, [r7, #4]
 80016de:	f000 f922 	bl	8001926 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80016e2:	6878      	ldr	r0, [r7, #4]
 80016e4:	f000 f931 	bl	800194a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	2200      	movs	r2, #0
 80016ec:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80016ee:	68bb      	ldr	r3, [r7, #8]
 80016f0:	f003 0301 	and.w	r3, r3, #1
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d00c      	beq.n	8001712 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	f003 0301 	and.w	r3, r3, #1
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d007      	beq.n	8001712 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	f06f 0201 	mvn.w	r2, #1
 800170a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800170c:	6878      	ldr	r0, [r7, #4]
 800170e:	f000 f901 	bl	8001914 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8001712:	68bb      	ldr	r3, [r7, #8]
 8001714:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001718:	2b00      	cmp	r3, #0
 800171a:	d00c      	beq.n	8001736 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001722:	2b00      	cmp	r3, #0
 8001724:	d007      	beq.n	8001736 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800172e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001730:	6878      	ldr	r0, [r7, #4]
 8001732:	f000 fa88 	bl	8001c46 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8001736:	68bb      	ldr	r3, [r7, #8]
 8001738:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800173c:	2b00      	cmp	r3, #0
 800173e:	d00c      	beq.n	800175a <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001746:	2b00      	cmp	r3, #0
 8001748:	d007      	beq.n	800175a <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8001752:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001754:	6878      	ldr	r0, [r7, #4]
 8001756:	f000 f901 	bl	800195c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800175a:	68bb      	ldr	r3, [r7, #8]
 800175c:	f003 0320 	and.w	r3, r3, #32
 8001760:	2b00      	cmp	r3, #0
 8001762:	d00c      	beq.n	800177e <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	f003 0320 	and.w	r3, r3, #32
 800176a:	2b00      	cmp	r3, #0
 800176c:	d007      	beq.n	800177e <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	f06f 0220 	mvn.w	r2, #32
 8001776:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001778:	6878      	ldr	r0, [r7, #4]
 800177a:	f000 fa5b 	bl	8001c34 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800177e:	bf00      	nop
 8001780:	3710      	adds	r7, #16
 8001782:	46bd      	mov	sp, r7
 8001784:	bd80      	pop	{r7, pc}

08001786 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8001786:	b580      	push	{r7, lr}
 8001788:	b084      	sub	sp, #16
 800178a:	af00      	add	r7, sp, #0
 800178c:	6078      	str	r0, [r7, #4]
 800178e:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001790:	2300      	movs	r3, #0
 8001792:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800179a:	2b01      	cmp	r3, #1
 800179c:	d101      	bne.n	80017a2 <HAL_TIM_ConfigClockSource+0x1c>
 800179e:	2302      	movs	r3, #2
 80017a0:	e0b4      	b.n	800190c <HAL_TIM_ConfigClockSource+0x186>
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	2201      	movs	r2, #1
 80017a6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	2202      	movs	r2, #2
 80017ae:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	689b      	ldr	r3, [r3, #8]
 80017b8:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80017ba:	68bb      	ldr	r3, [r7, #8]
 80017bc:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80017c0:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80017c2:	68bb      	ldr	r3, [r7, #8]
 80017c4:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80017c8:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	68ba      	ldr	r2, [r7, #8]
 80017d0:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80017d2:	683b      	ldr	r3, [r7, #0]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80017da:	d03e      	beq.n	800185a <HAL_TIM_ConfigClockSource+0xd4>
 80017dc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80017e0:	f200 8087 	bhi.w	80018f2 <HAL_TIM_ConfigClockSource+0x16c>
 80017e4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80017e8:	f000 8086 	beq.w	80018f8 <HAL_TIM_ConfigClockSource+0x172>
 80017ec:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80017f0:	d87f      	bhi.n	80018f2 <HAL_TIM_ConfigClockSource+0x16c>
 80017f2:	2b70      	cmp	r3, #112	@ 0x70
 80017f4:	d01a      	beq.n	800182c <HAL_TIM_ConfigClockSource+0xa6>
 80017f6:	2b70      	cmp	r3, #112	@ 0x70
 80017f8:	d87b      	bhi.n	80018f2 <HAL_TIM_ConfigClockSource+0x16c>
 80017fa:	2b60      	cmp	r3, #96	@ 0x60
 80017fc:	d050      	beq.n	80018a0 <HAL_TIM_ConfigClockSource+0x11a>
 80017fe:	2b60      	cmp	r3, #96	@ 0x60
 8001800:	d877      	bhi.n	80018f2 <HAL_TIM_ConfigClockSource+0x16c>
 8001802:	2b50      	cmp	r3, #80	@ 0x50
 8001804:	d03c      	beq.n	8001880 <HAL_TIM_ConfigClockSource+0xfa>
 8001806:	2b50      	cmp	r3, #80	@ 0x50
 8001808:	d873      	bhi.n	80018f2 <HAL_TIM_ConfigClockSource+0x16c>
 800180a:	2b40      	cmp	r3, #64	@ 0x40
 800180c:	d058      	beq.n	80018c0 <HAL_TIM_ConfigClockSource+0x13a>
 800180e:	2b40      	cmp	r3, #64	@ 0x40
 8001810:	d86f      	bhi.n	80018f2 <HAL_TIM_ConfigClockSource+0x16c>
 8001812:	2b30      	cmp	r3, #48	@ 0x30
 8001814:	d064      	beq.n	80018e0 <HAL_TIM_ConfigClockSource+0x15a>
 8001816:	2b30      	cmp	r3, #48	@ 0x30
 8001818:	d86b      	bhi.n	80018f2 <HAL_TIM_ConfigClockSource+0x16c>
 800181a:	2b20      	cmp	r3, #32
 800181c:	d060      	beq.n	80018e0 <HAL_TIM_ConfigClockSource+0x15a>
 800181e:	2b20      	cmp	r3, #32
 8001820:	d867      	bhi.n	80018f2 <HAL_TIM_ConfigClockSource+0x16c>
 8001822:	2b00      	cmp	r3, #0
 8001824:	d05c      	beq.n	80018e0 <HAL_TIM_ConfigClockSource+0x15a>
 8001826:	2b10      	cmp	r3, #16
 8001828:	d05a      	beq.n	80018e0 <HAL_TIM_ConfigClockSource+0x15a>
 800182a:	e062      	b.n	80018f2 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8001830:	683b      	ldr	r3, [r7, #0]
 8001832:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8001834:	683b      	ldr	r3, [r7, #0]
 8001836:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8001838:	683b      	ldr	r3, [r7, #0]
 800183a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800183c:	f000 f97d 	bl	8001b3a <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	689b      	ldr	r3, [r3, #8]
 8001846:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8001848:	68bb      	ldr	r3, [r7, #8]
 800184a:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800184e:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	68ba      	ldr	r2, [r7, #8]
 8001856:	609a      	str	r2, [r3, #8]
      break;
 8001858:	e04f      	b.n	80018fa <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800185e:	683b      	ldr	r3, [r7, #0]
 8001860:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8001862:	683b      	ldr	r3, [r7, #0]
 8001864:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8001866:	683b      	ldr	r3, [r7, #0]
 8001868:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800186a:	f000 f966 	bl	8001b3a <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	689a      	ldr	r2, [r3, #8]
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800187c:	609a      	str	r2, [r3, #8]
      break;
 800187e:	e03c      	b.n	80018fa <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8001884:	683b      	ldr	r3, [r7, #0]
 8001886:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8001888:	683b      	ldr	r3, [r7, #0]
 800188a:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800188c:	461a      	mov	r2, r3
 800188e:	f000 f8dd 	bl	8001a4c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	2150      	movs	r1, #80	@ 0x50
 8001898:	4618      	mov	r0, r3
 800189a:	f000 f934 	bl	8001b06 <TIM_ITRx_SetConfig>
      break;
 800189e:	e02c      	b.n	80018fa <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80018a4:	683b      	ldr	r3, [r7, #0]
 80018a6:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80018a8:	683b      	ldr	r3, [r7, #0]
 80018aa:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80018ac:	461a      	mov	r2, r3
 80018ae:	f000 f8fb 	bl	8001aa8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	2160      	movs	r1, #96	@ 0x60
 80018b8:	4618      	mov	r0, r3
 80018ba:	f000 f924 	bl	8001b06 <TIM_ITRx_SetConfig>
      break;
 80018be:	e01c      	b.n	80018fa <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80018c4:	683b      	ldr	r3, [r7, #0]
 80018c6:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80018c8:	683b      	ldr	r3, [r7, #0]
 80018ca:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80018cc:	461a      	mov	r2, r3
 80018ce:	f000 f8bd 	bl	8001a4c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	2140      	movs	r1, #64	@ 0x40
 80018d8:	4618      	mov	r0, r3
 80018da:	f000 f914 	bl	8001b06 <TIM_ITRx_SetConfig>
      break;
 80018de:	e00c      	b.n	80018fa <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681a      	ldr	r2, [r3, #0]
 80018e4:	683b      	ldr	r3, [r7, #0]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	4619      	mov	r1, r3
 80018ea:	4610      	mov	r0, r2
 80018ec:	f000 f90b 	bl	8001b06 <TIM_ITRx_SetConfig>
      break;
 80018f0:	e003      	b.n	80018fa <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80018f2:	2301      	movs	r3, #1
 80018f4:	73fb      	strb	r3, [r7, #15]
      break;
 80018f6:	e000      	b.n	80018fa <HAL_TIM_ConfigClockSource+0x174>
      break;
 80018f8:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	2201      	movs	r2, #1
 80018fe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	2200      	movs	r2, #0
 8001906:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800190a:	7bfb      	ldrb	r3, [r7, #15]
}
 800190c:	4618      	mov	r0, r3
 800190e:	3710      	adds	r7, #16
 8001910:	46bd      	mov	sp, r7
 8001912:	bd80      	pop	{r7, pc}

08001914 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001914:	b480      	push	{r7}
 8001916:	b083      	sub	sp, #12
 8001918:	af00      	add	r7, sp, #0
 800191a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800191c:	bf00      	nop
 800191e:	370c      	adds	r7, #12
 8001920:	46bd      	mov	sp, r7
 8001922:	bc80      	pop	{r7}
 8001924:	4770      	bx	lr

08001926 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001926:	b480      	push	{r7}
 8001928:	b083      	sub	sp, #12
 800192a:	af00      	add	r7, sp, #0
 800192c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800192e:	bf00      	nop
 8001930:	370c      	adds	r7, #12
 8001932:	46bd      	mov	sp, r7
 8001934:	bc80      	pop	{r7}
 8001936:	4770      	bx	lr

08001938 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001938:	b480      	push	{r7}
 800193a:	b083      	sub	sp, #12
 800193c:	af00      	add	r7, sp, #0
 800193e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001940:	bf00      	nop
 8001942:	370c      	adds	r7, #12
 8001944:	46bd      	mov	sp, r7
 8001946:	bc80      	pop	{r7}
 8001948:	4770      	bx	lr

0800194a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800194a:	b480      	push	{r7}
 800194c:	b083      	sub	sp, #12
 800194e:	af00      	add	r7, sp, #0
 8001950:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001952:	bf00      	nop
 8001954:	370c      	adds	r7, #12
 8001956:	46bd      	mov	sp, r7
 8001958:	bc80      	pop	{r7}
 800195a:	4770      	bx	lr

0800195c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800195c:	b480      	push	{r7}
 800195e:	b083      	sub	sp, #12
 8001960:	af00      	add	r7, sp, #0
 8001962:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001964:	bf00      	nop
 8001966:	370c      	adds	r7, #12
 8001968:	46bd      	mov	sp, r7
 800196a:	bc80      	pop	{r7}
 800196c:	4770      	bx	lr
	...

08001970 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8001970:	b480      	push	{r7}
 8001972:	b085      	sub	sp, #20
 8001974:	af00      	add	r7, sp, #0
 8001976:	6078      	str	r0, [r7, #4]
 8001978:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	4a2f      	ldr	r2, [pc, #188]	@ (8001a40 <TIM_Base_SetConfig+0xd0>)
 8001984:	4293      	cmp	r3, r2
 8001986:	d00b      	beq.n	80019a0 <TIM_Base_SetConfig+0x30>
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800198e:	d007      	beq.n	80019a0 <TIM_Base_SetConfig+0x30>
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	4a2c      	ldr	r2, [pc, #176]	@ (8001a44 <TIM_Base_SetConfig+0xd4>)
 8001994:	4293      	cmp	r3, r2
 8001996:	d003      	beq.n	80019a0 <TIM_Base_SetConfig+0x30>
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	4a2b      	ldr	r2, [pc, #172]	@ (8001a48 <TIM_Base_SetConfig+0xd8>)
 800199c:	4293      	cmp	r3, r2
 800199e:	d108      	bne.n	80019b2 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80019a6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80019a8:	683b      	ldr	r3, [r7, #0]
 80019aa:	685b      	ldr	r3, [r3, #4]
 80019ac:	68fa      	ldr	r2, [r7, #12]
 80019ae:	4313      	orrs	r3, r2
 80019b0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	4a22      	ldr	r2, [pc, #136]	@ (8001a40 <TIM_Base_SetConfig+0xd0>)
 80019b6:	4293      	cmp	r3, r2
 80019b8:	d00b      	beq.n	80019d2 <TIM_Base_SetConfig+0x62>
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80019c0:	d007      	beq.n	80019d2 <TIM_Base_SetConfig+0x62>
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	4a1f      	ldr	r2, [pc, #124]	@ (8001a44 <TIM_Base_SetConfig+0xd4>)
 80019c6:	4293      	cmp	r3, r2
 80019c8:	d003      	beq.n	80019d2 <TIM_Base_SetConfig+0x62>
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	4a1e      	ldr	r2, [pc, #120]	@ (8001a48 <TIM_Base_SetConfig+0xd8>)
 80019ce:	4293      	cmp	r3, r2
 80019d0:	d108      	bne.n	80019e4 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80019d8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80019da:	683b      	ldr	r3, [r7, #0]
 80019dc:	68db      	ldr	r3, [r3, #12]
 80019de:	68fa      	ldr	r2, [r7, #12]
 80019e0:	4313      	orrs	r3, r2
 80019e2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80019ea:	683b      	ldr	r3, [r7, #0]
 80019ec:	695b      	ldr	r3, [r3, #20]
 80019ee:	4313      	orrs	r3, r2
 80019f0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	68fa      	ldr	r2, [r7, #12]
 80019f6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80019f8:	683b      	ldr	r3, [r7, #0]
 80019fa:	689a      	ldr	r2, [r3, #8]
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001a00:	683b      	ldr	r3, [r7, #0]
 8001a02:	681a      	ldr	r2, [r3, #0]
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	4a0d      	ldr	r2, [pc, #52]	@ (8001a40 <TIM_Base_SetConfig+0xd0>)
 8001a0c:	4293      	cmp	r3, r2
 8001a0e:	d103      	bne.n	8001a18 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001a10:	683b      	ldr	r3, [r7, #0]
 8001a12:	691a      	ldr	r2, [r3, #16]
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	2201      	movs	r2, #1
 8001a1c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	691b      	ldr	r3, [r3, #16]
 8001a22:	f003 0301 	and.w	r3, r3, #1
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d005      	beq.n	8001a36 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	691b      	ldr	r3, [r3, #16]
 8001a2e:	f023 0201 	bic.w	r2, r3, #1
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	611a      	str	r2, [r3, #16]
  }
}
 8001a36:	bf00      	nop
 8001a38:	3714      	adds	r7, #20
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	bc80      	pop	{r7}
 8001a3e:	4770      	bx	lr
 8001a40:	40012c00 	.word	0x40012c00
 8001a44:	40000400 	.word	0x40000400
 8001a48:	40000800 	.word	0x40000800

08001a4c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8001a4c:	b480      	push	{r7}
 8001a4e:	b087      	sub	sp, #28
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	60f8      	str	r0, [r7, #12]
 8001a54:	60b9      	str	r1, [r7, #8]
 8001a56:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	6a1b      	ldr	r3, [r3, #32]
 8001a5c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	6a1b      	ldr	r3, [r3, #32]
 8001a62:	f023 0201 	bic.w	r2, r3, #1
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	699b      	ldr	r3, [r3, #24]
 8001a6e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001a70:	693b      	ldr	r3, [r7, #16]
 8001a72:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001a76:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	011b      	lsls	r3, r3, #4
 8001a7c:	693a      	ldr	r2, [r7, #16]
 8001a7e:	4313      	orrs	r3, r2
 8001a80:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001a82:	697b      	ldr	r3, [r7, #20]
 8001a84:	f023 030a 	bic.w	r3, r3, #10
 8001a88:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8001a8a:	697a      	ldr	r2, [r7, #20]
 8001a8c:	68bb      	ldr	r3, [r7, #8]
 8001a8e:	4313      	orrs	r3, r2
 8001a90:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	693a      	ldr	r2, [r7, #16]
 8001a96:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	697a      	ldr	r2, [r7, #20]
 8001a9c:	621a      	str	r2, [r3, #32]
}
 8001a9e:	bf00      	nop
 8001aa0:	371c      	adds	r7, #28
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	bc80      	pop	{r7}
 8001aa6:	4770      	bx	lr

08001aa8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8001aa8:	b480      	push	{r7}
 8001aaa:	b087      	sub	sp, #28
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	60f8      	str	r0, [r7, #12]
 8001ab0:	60b9      	str	r1, [r7, #8]
 8001ab2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	6a1b      	ldr	r3, [r3, #32]
 8001ab8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	6a1b      	ldr	r3, [r3, #32]
 8001abe:	f023 0210 	bic.w	r2, r3, #16
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	699b      	ldr	r3, [r3, #24]
 8001aca:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8001acc:	693b      	ldr	r3, [r7, #16]
 8001ace:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8001ad2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	031b      	lsls	r3, r3, #12
 8001ad8:	693a      	ldr	r2, [r7, #16]
 8001ada:	4313      	orrs	r3, r2
 8001adc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8001ade:	697b      	ldr	r3, [r7, #20]
 8001ae0:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8001ae4:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8001ae6:	68bb      	ldr	r3, [r7, #8]
 8001ae8:	011b      	lsls	r3, r3, #4
 8001aea:	697a      	ldr	r2, [r7, #20]
 8001aec:	4313      	orrs	r3, r2
 8001aee:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	693a      	ldr	r2, [r7, #16]
 8001af4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	697a      	ldr	r2, [r7, #20]
 8001afa:	621a      	str	r2, [r3, #32]
}
 8001afc:	bf00      	nop
 8001afe:	371c      	adds	r7, #28
 8001b00:	46bd      	mov	sp, r7
 8001b02:	bc80      	pop	{r7}
 8001b04:	4770      	bx	lr

08001b06 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8001b06:	b480      	push	{r7}
 8001b08:	b085      	sub	sp, #20
 8001b0a:	af00      	add	r7, sp, #0
 8001b0c:	6078      	str	r0, [r7, #4]
 8001b0e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	689b      	ldr	r3, [r3, #8]
 8001b14:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001b1c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8001b1e:	683a      	ldr	r2, [r7, #0]
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	4313      	orrs	r3, r2
 8001b24:	f043 0307 	orr.w	r3, r3, #7
 8001b28:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	68fa      	ldr	r2, [r7, #12]
 8001b2e:	609a      	str	r2, [r3, #8]
}
 8001b30:	bf00      	nop
 8001b32:	3714      	adds	r7, #20
 8001b34:	46bd      	mov	sp, r7
 8001b36:	bc80      	pop	{r7}
 8001b38:	4770      	bx	lr

08001b3a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8001b3a:	b480      	push	{r7}
 8001b3c:	b087      	sub	sp, #28
 8001b3e:	af00      	add	r7, sp, #0
 8001b40:	60f8      	str	r0, [r7, #12]
 8001b42:	60b9      	str	r1, [r7, #8]
 8001b44:	607a      	str	r2, [r7, #4]
 8001b46:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	689b      	ldr	r3, [r3, #8]
 8001b4c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001b4e:	697b      	ldr	r3, [r7, #20]
 8001b50:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8001b54:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001b56:	683b      	ldr	r3, [r7, #0]
 8001b58:	021a      	lsls	r2, r3, #8
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	431a      	orrs	r2, r3
 8001b5e:	68bb      	ldr	r3, [r7, #8]
 8001b60:	4313      	orrs	r3, r2
 8001b62:	697a      	ldr	r2, [r7, #20]
 8001b64:	4313      	orrs	r3, r2
 8001b66:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	697a      	ldr	r2, [r7, #20]
 8001b6c:	609a      	str	r2, [r3, #8]
}
 8001b6e:	bf00      	nop
 8001b70:	371c      	adds	r7, #28
 8001b72:	46bd      	mov	sp, r7
 8001b74:	bc80      	pop	{r7}
 8001b76:	4770      	bx	lr

08001b78 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8001b78:	b480      	push	{r7}
 8001b7a:	b085      	sub	sp, #20
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	6078      	str	r0, [r7, #4]
 8001b80:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001b88:	2b01      	cmp	r3, #1
 8001b8a:	d101      	bne.n	8001b90 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8001b8c:	2302      	movs	r3, #2
 8001b8e:	e046      	b.n	8001c1e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	2201      	movs	r2, #1
 8001b94:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	2202      	movs	r2, #2
 8001b9c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	685b      	ldr	r3, [r3, #4]
 8001ba6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	689b      	ldr	r3, [r3, #8]
 8001bae:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001bb6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8001bb8:	683b      	ldr	r3, [r7, #0]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	68fa      	ldr	r2, [r7, #12]
 8001bbe:	4313      	orrs	r3, r2
 8001bc0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	68fa      	ldr	r2, [r7, #12]
 8001bc8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	4a16      	ldr	r2, [pc, #88]	@ (8001c28 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8001bd0:	4293      	cmp	r3, r2
 8001bd2:	d00e      	beq.n	8001bf2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001bdc:	d009      	beq.n	8001bf2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	4a12      	ldr	r2, [pc, #72]	@ (8001c2c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8001be4:	4293      	cmp	r3, r2
 8001be6:	d004      	beq.n	8001bf2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	4a10      	ldr	r2, [pc, #64]	@ (8001c30 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8001bee:	4293      	cmp	r3, r2
 8001bf0:	d10c      	bne.n	8001c0c <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8001bf2:	68bb      	ldr	r3, [r7, #8]
 8001bf4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8001bf8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8001bfa:	683b      	ldr	r3, [r7, #0]
 8001bfc:	685b      	ldr	r3, [r3, #4]
 8001bfe:	68ba      	ldr	r2, [r7, #8]
 8001c00:	4313      	orrs	r3, r2
 8001c02:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	68ba      	ldr	r2, [r7, #8]
 8001c0a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	2201      	movs	r2, #1
 8001c10:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	2200      	movs	r2, #0
 8001c18:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8001c1c:	2300      	movs	r3, #0
}
 8001c1e:	4618      	mov	r0, r3
 8001c20:	3714      	adds	r7, #20
 8001c22:	46bd      	mov	sp, r7
 8001c24:	bc80      	pop	{r7}
 8001c26:	4770      	bx	lr
 8001c28:	40012c00 	.word	0x40012c00
 8001c2c:	40000400 	.word	0x40000400
 8001c30:	40000800 	.word	0x40000800

08001c34 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001c34:	b480      	push	{r7}
 8001c36:	b083      	sub	sp, #12
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001c3c:	bf00      	nop
 8001c3e:	370c      	adds	r7, #12
 8001c40:	46bd      	mov	sp, r7
 8001c42:	bc80      	pop	{r7}
 8001c44:	4770      	bx	lr

08001c46 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001c46:	b480      	push	{r7}
 8001c48:	b083      	sub	sp, #12
 8001c4a:	af00      	add	r7, sp, #0
 8001c4c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001c4e:	bf00      	nop
 8001c50:	370c      	adds	r7, #12
 8001c52:	46bd      	mov	sp, r7
 8001c54:	bc80      	pop	{r7}
 8001c56:	4770      	bx	lr

08001c58 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	b082      	sub	sp, #8
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d101      	bne.n	8001c6a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001c66:	2301      	movs	r3, #1
 8001c68:	e042      	b.n	8001cf0 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001c70:	b2db      	uxtb	r3, r3
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d106      	bne.n	8001c84 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	2200      	movs	r2, #0
 8001c7a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001c7e:	6878      	ldr	r0, [r7, #4]
 8001c80:	f7fe fbd2 	bl	8000428 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	2224      	movs	r2, #36	@ 0x24
 8001c88:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	68da      	ldr	r2, [r3, #12]
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8001c9a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001c9c:	6878      	ldr	r0, [r7, #4]
 8001c9e:	f000 fc7f 	bl	80025a0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	691a      	ldr	r2, [r3, #16]
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8001cb0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	695a      	ldr	r2, [r3, #20]
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8001cc0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	68da      	ldr	r2, [r3, #12]
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8001cd0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	2220      	movs	r2, #32
 8001cdc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	2220      	movs	r2, #32
 8001ce4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	2200      	movs	r2, #0
 8001cec:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8001cee:	2300      	movs	r3, #0
}
 8001cf0:	4618      	mov	r0, r3
 8001cf2:	3708      	adds	r7, #8
 8001cf4:	46bd      	mov	sp, r7
 8001cf6:	bd80      	pop	{r7, pc}

08001cf8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	b0ba      	sub	sp, #232	@ 0xe8
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	68db      	ldr	r3, [r3, #12]
 8001d10:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	695b      	ldr	r3, [r3, #20]
 8001d1a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8001d1e:	2300      	movs	r3, #0
 8001d20:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8001d24:	2300      	movs	r3, #0
 8001d26:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8001d2a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001d2e:	f003 030f 	and.w	r3, r3, #15
 8001d32:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8001d36:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d10f      	bne.n	8001d5e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001d3e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001d42:	f003 0320 	and.w	r3, r3, #32
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d009      	beq.n	8001d5e <HAL_UART_IRQHandler+0x66>
 8001d4a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8001d4e:	f003 0320 	and.w	r3, r3, #32
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d003      	beq.n	8001d5e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8001d56:	6878      	ldr	r0, [r7, #4]
 8001d58:	f000 fb63 	bl	8002422 <UART_Receive_IT>
      return;
 8001d5c:	e25b      	b.n	8002216 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8001d5e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	f000 80de 	beq.w	8001f24 <HAL_UART_IRQHandler+0x22c>
 8001d68:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8001d6c:	f003 0301 	and.w	r3, r3, #1
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d106      	bne.n	8001d82 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8001d74:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8001d78:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	f000 80d1 	beq.w	8001f24 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8001d82:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001d86:	f003 0301 	and.w	r3, r3, #1
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d00b      	beq.n	8001da6 <HAL_UART_IRQHandler+0xae>
 8001d8e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8001d92:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d005      	beq.n	8001da6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d9e:	f043 0201 	orr.w	r2, r3, #1
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001da6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001daa:	f003 0304 	and.w	r3, r3, #4
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d00b      	beq.n	8001dca <HAL_UART_IRQHandler+0xd2>
 8001db2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8001db6:	f003 0301 	and.w	r3, r3, #1
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d005      	beq.n	8001dca <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001dc2:	f043 0202 	orr.w	r2, r3, #2
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001dca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001dce:	f003 0302 	and.w	r3, r3, #2
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d00b      	beq.n	8001dee <HAL_UART_IRQHandler+0xf6>
 8001dd6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8001dda:	f003 0301 	and.w	r3, r3, #1
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d005      	beq.n	8001dee <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001de6:	f043 0204 	orr.w	r2, r3, #4
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8001dee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001df2:	f003 0308 	and.w	r3, r3, #8
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d011      	beq.n	8001e1e <HAL_UART_IRQHandler+0x126>
 8001dfa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8001dfe:	f003 0320 	and.w	r3, r3, #32
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d105      	bne.n	8001e12 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8001e06:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8001e0a:	f003 0301 	and.w	r3, r3, #1
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d005      	beq.n	8001e1e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e16:	f043 0208 	orr.w	r2, r3, #8
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	f000 81f2 	beq.w	800220c <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001e28:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001e2c:	f003 0320 	and.w	r3, r3, #32
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d008      	beq.n	8001e46 <HAL_UART_IRQHandler+0x14e>
 8001e34:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8001e38:	f003 0320 	and.w	r3, r3, #32
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d002      	beq.n	8001e46 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8001e40:	6878      	ldr	r0, [r7, #4]
 8001e42:	f000 faee 	bl	8002422 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	695b      	ldr	r3, [r3, #20]
 8001e4c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	bf14      	ite	ne
 8001e54:	2301      	movne	r3, #1
 8001e56:	2300      	moveq	r3, #0
 8001e58:	b2db      	uxtb	r3, r3
 8001e5a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e62:	f003 0308 	and.w	r3, r3, #8
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d103      	bne.n	8001e72 <HAL_UART_IRQHandler+0x17a>
 8001e6a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d04f      	beq.n	8001f12 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8001e72:	6878      	ldr	r0, [r7, #4]
 8001e74:	f000 f9f8 	bl	8002268 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	695b      	ldr	r3, [r3, #20]
 8001e7e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d041      	beq.n	8001f0a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	3314      	adds	r3, #20
 8001e8c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001e90:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8001e94:	e853 3f00 	ldrex	r3, [r3]
 8001e98:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8001e9c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001ea0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8001ea4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	3314      	adds	r3, #20
 8001eae:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8001eb2:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8001eb6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001eba:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8001ebe:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8001ec2:	e841 2300 	strex	r3, r2, [r1]
 8001ec6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8001eca:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d1d9      	bne.n	8001e86 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d013      	beq.n	8001f02 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001ede:	4a7e      	ldr	r2, [pc, #504]	@ (80020d8 <HAL_UART_IRQHandler+0x3e0>)
 8001ee0:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001ee6:	4618      	mov	r0, r3
 8001ee8:	f7fe fd02 	bl	80008f0 <HAL_DMA_Abort_IT>
 8001eec:	4603      	mov	r3, r0
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d016      	beq.n	8001f20 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001ef6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001ef8:	687a      	ldr	r2, [r7, #4]
 8001efa:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8001efc:	4610      	mov	r0, r2
 8001efe:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001f00:	e00e      	b.n	8001f20 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8001f02:	6878      	ldr	r0, [r7, #4]
 8001f04:	f000 f99c 	bl	8002240 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001f08:	e00a      	b.n	8001f20 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8001f0a:	6878      	ldr	r0, [r7, #4]
 8001f0c:	f000 f998 	bl	8002240 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001f10:	e006      	b.n	8001f20 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8001f12:	6878      	ldr	r0, [r7, #4]
 8001f14:	f000 f994 	bl	8002240 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	2200      	movs	r2, #0
 8001f1c:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8001f1e:	e175      	b.n	800220c <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001f20:	bf00      	nop
    return;
 8001f22:	e173      	b.n	800220c <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f28:	2b01      	cmp	r3, #1
 8001f2a:	f040 814f 	bne.w	80021cc <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8001f2e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001f32:	f003 0310 	and.w	r3, r3, #16
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	f000 8148 	beq.w	80021cc <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8001f3c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8001f40:	f003 0310 	and.w	r3, r3, #16
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	f000 8141 	beq.w	80021cc <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8001f4a:	2300      	movs	r3, #0
 8001f4c:	60bb      	str	r3, [r7, #8]
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	60bb      	str	r3, [r7, #8]
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	685b      	ldr	r3, [r3, #4]
 8001f5c:	60bb      	str	r3, [r7, #8]
 8001f5e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	695b      	ldr	r3, [r3, #20]
 8001f66:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	f000 80b6 	beq.w	80020dc <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	685b      	ldr	r3, [r3, #4]
 8001f78:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8001f7c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	f000 8145 	beq.w	8002210 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8001f8a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8001f8e:	429a      	cmp	r2, r3
 8001f90:	f080 813e 	bcs.w	8002210 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8001f9a:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001fa0:	699b      	ldr	r3, [r3, #24]
 8001fa2:	2b20      	cmp	r3, #32
 8001fa4:	f000 8088 	beq.w	80020b8 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	330c      	adds	r3, #12
 8001fae:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001fb2:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001fb6:	e853 3f00 	ldrex	r3, [r3]
 8001fba:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8001fbe:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001fc2:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001fc6:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	330c      	adds	r3, #12
 8001fd0:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8001fd4:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8001fd8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001fdc:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8001fe0:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8001fe4:	e841 2300 	strex	r3, r2, [r1]
 8001fe8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8001fec:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d1d9      	bne.n	8001fa8 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	3314      	adds	r3, #20
 8001ffa:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001ffc:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001ffe:	e853 3f00 	ldrex	r3, [r3]
 8002002:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8002004:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002006:	f023 0301 	bic.w	r3, r3, #1
 800200a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	3314      	adds	r3, #20
 8002014:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8002018:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800201c:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800201e:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8002020:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8002024:	e841 2300 	strex	r3, r2, [r1]
 8002028:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800202a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800202c:	2b00      	cmp	r3, #0
 800202e:	d1e1      	bne.n	8001ff4 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	3314      	adds	r3, #20
 8002036:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002038:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800203a:	e853 3f00 	ldrex	r3, [r3]
 800203e:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8002040:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002042:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002046:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	3314      	adds	r3, #20
 8002050:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8002054:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8002056:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002058:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800205a:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800205c:	e841 2300 	strex	r3, r2, [r1]
 8002060:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8002062:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002064:	2b00      	cmp	r3, #0
 8002066:	d1e3      	bne.n	8002030 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	2220      	movs	r2, #32
 800206c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	2200      	movs	r2, #0
 8002074:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	330c      	adds	r3, #12
 800207c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800207e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002080:	e853 3f00 	ldrex	r3, [r3]
 8002084:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8002086:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002088:	f023 0310 	bic.w	r3, r3, #16
 800208c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	330c      	adds	r3, #12
 8002096:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800209a:	65ba      	str	r2, [r7, #88]	@ 0x58
 800209c:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800209e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80020a0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80020a2:	e841 2300 	strex	r3, r2, [r1]
 80020a6:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80020a8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d1e3      	bne.n	8002076 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80020b2:	4618      	mov	r0, r3
 80020b4:	f7fe fbe1 	bl	800087a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	2202      	movs	r2, #2
 80020bc:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80020c6:	b29b      	uxth	r3, r3
 80020c8:	1ad3      	subs	r3, r2, r3
 80020ca:	b29b      	uxth	r3, r3
 80020cc:	4619      	mov	r1, r3
 80020ce:	6878      	ldr	r0, [r7, #4]
 80020d0:	f000 f8bf 	bl	8002252 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80020d4:	e09c      	b.n	8002210 <HAL_UART_IRQHandler+0x518>
 80020d6:	bf00      	nop
 80020d8:	0800232d 	.word	0x0800232d
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80020e4:	b29b      	uxth	r3, r3
 80020e6:	1ad3      	subs	r3, r2, r3
 80020e8:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80020f0:	b29b      	uxth	r3, r3
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	f000 808e 	beq.w	8002214 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80020f8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	f000 8089 	beq.w	8002214 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	330c      	adds	r3, #12
 8002108:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800210a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800210c:	e853 3f00 	ldrex	r3, [r3]
 8002110:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8002112:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002114:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002118:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	330c      	adds	r3, #12
 8002122:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8002126:	647a      	str	r2, [r7, #68]	@ 0x44
 8002128:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800212a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800212c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800212e:	e841 2300 	strex	r3, r2, [r1]
 8002132:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8002134:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002136:	2b00      	cmp	r3, #0
 8002138:	d1e3      	bne.n	8002102 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	3314      	adds	r3, #20
 8002140:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002142:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002144:	e853 3f00 	ldrex	r3, [r3]
 8002148:	623b      	str	r3, [r7, #32]
   return(result);
 800214a:	6a3b      	ldr	r3, [r7, #32]
 800214c:	f023 0301 	bic.w	r3, r3, #1
 8002150:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	3314      	adds	r3, #20
 800215a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800215e:	633a      	str	r2, [r7, #48]	@ 0x30
 8002160:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002162:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002164:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002166:	e841 2300 	strex	r3, r2, [r1]
 800216a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800216c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800216e:	2b00      	cmp	r3, #0
 8002170:	d1e3      	bne.n	800213a <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	2220      	movs	r2, #32
 8002176:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	2200      	movs	r2, #0
 800217e:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	330c      	adds	r3, #12
 8002186:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002188:	693b      	ldr	r3, [r7, #16]
 800218a:	e853 3f00 	ldrex	r3, [r3]
 800218e:	60fb      	str	r3, [r7, #12]
   return(result);
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	f023 0310 	bic.w	r3, r3, #16
 8002196:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	330c      	adds	r3, #12
 80021a0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80021a4:	61fa      	str	r2, [r7, #28]
 80021a6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80021a8:	69b9      	ldr	r1, [r7, #24]
 80021aa:	69fa      	ldr	r2, [r7, #28]
 80021ac:	e841 2300 	strex	r3, r2, [r1]
 80021b0:	617b      	str	r3, [r7, #20]
   return(result);
 80021b2:	697b      	ldr	r3, [r7, #20]
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d1e3      	bne.n	8002180 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	2202      	movs	r2, #2
 80021bc:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80021be:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80021c2:	4619      	mov	r1, r3
 80021c4:	6878      	ldr	r0, [r7, #4]
 80021c6:	f000 f844 	bl	8002252 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80021ca:	e023      	b.n	8002214 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80021cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80021d0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d009      	beq.n	80021ec <HAL_UART_IRQHandler+0x4f4>
 80021d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80021dc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d003      	beq.n	80021ec <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80021e4:	6878      	ldr	r0, [r7, #4]
 80021e6:	f000 f8b5 	bl	8002354 <UART_Transmit_IT>
    return;
 80021ea:	e014      	b.n	8002216 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80021ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80021f0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d00e      	beq.n	8002216 <HAL_UART_IRQHandler+0x51e>
 80021f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80021fc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002200:	2b00      	cmp	r3, #0
 8002202:	d008      	beq.n	8002216 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8002204:	6878      	ldr	r0, [r7, #4]
 8002206:	f000 f8f4 	bl	80023f2 <UART_EndTransmit_IT>
    return;
 800220a:	e004      	b.n	8002216 <HAL_UART_IRQHandler+0x51e>
    return;
 800220c:	bf00      	nop
 800220e:	e002      	b.n	8002216 <HAL_UART_IRQHandler+0x51e>
      return;
 8002210:	bf00      	nop
 8002212:	e000      	b.n	8002216 <HAL_UART_IRQHandler+0x51e>
      return;
 8002214:	bf00      	nop
  }
}
 8002216:	37e8      	adds	r7, #232	@ 0xe8
 8002218:	46bd      	mov	sp, r7
 800221a:	bd80      	pop	{r7, pc}

0800221c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800221c:	b480      	push	{r7}
 800221e:	b083      	sub	sp, #12
 8002220:	af00      	add	r7, sp, #0
 8002222:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002224:	bf00      	nop
 8002226:	370c      	adds	r7, #12
 8002228:	46bd      	mov	sp, r7
 800222a:	bc80      	pop	{r7}
 800222c:	4770      	bx	lr

0800222e <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800222e:	b480      	push	{r7}
 8002230:	b083      	sub	sp, #12
 8002232:	af00      	add	r7, sp, #0
 8002234:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8002236:	bf00      	nop
 8002238:	370c      	adds	r7, #12
 800223a:	46bd      	mov	sp, r7
 800223c:	bc80      	pop	{r7}
 800223e:	4770      	bx	lr

08002240 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002240:	b480      	push	{r7}
 8002242:	b083      	sub	sp, #12
 8002244:	af00      	add	r7, sp, #0
 8002246:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002248:	bf00      	nop
 800224a:	370c      	adds	r7, #12
 800224c:	46bd      	mov	sp, r7
 800224e:	bc80      	pop	{r7}
 8002250:	4770      	bx	lr

08002252 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002252:	b480      	push	{r7}
 8002254:	b083      	sub	sp, #12
 8002256:	af00      	add	r7, sp, #0
 8002258:	6078      	str	r0, [r7, #4]
 800225a:	460b      	mov	r3, r1
 800225c:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800225e:	bf00      	nop
 8002260:	370c      	adds	r7, #12
 8002262:	46bd      	mov	sp, r7
 8002264:	bc80      	pop	{r7}
 8002266:	4770      	bx	lr

08002268 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002268:	b480      	push	{r7}
 800226a:	b095      	sub	sp, #84	@ 0x54
 800226c:	af00      	add	r7, sp, #0
 800226e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	330c      	adds	r3, #12
 8002276:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002278:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800227a:	e853 3f00 	ldrex	r3, [r3]
 800227e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8002280:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002282:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002286:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	330c      	adds	r3, #12
 800228e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002290:	643a      	str	r2, [r7, #64]	@ 0x40
 8002292:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002294:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8002296:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002298:	e841 2300 	strex	r3, r2, [r1]
 800229c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800229e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d1e5      	bne.n	8002270 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	3314      	adds	r3, #20
 80022aa:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80022ac:	6a3b      	ldr	r3, [r7, #32]
 80022ae:	e853 3f00 	ldrex	r3, [r3]
 80022b2:	61fb      	str	r3, [r7, #28]
   return(result);
 80022b4:	69fb      	ldr	r3, [r7, #28]
 80022b6:	f023 0301 	bic.w	r3, r3, #1
 80022ba:	64bb      	str	r3, [r7, #72]	@ 0x48
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	3314      	adds	r3, #20
 80022c2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80022c4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80022c6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80022c8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80022ca:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80022cc:	e841 2300 	strex	r3, r2, [r1]
 80022d0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80022d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d1e5      	bne.n	80022a4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022dc:	2b01      	cmp	r3, #1
 80022de:	d119      	bne.n	8002314 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	330c      	adds	r3, #12
 80022e6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	e853 3f00 	ldrex	r3, [r3]
 80022ee:	60bb      	str	r3, [r7, #8]
   return(result);
 80022f0:	68bb      	ldr	r3, [r7, #8]
 80022f2:	f023 0310 	bic.w	r3, r3, #16
 80022f6:	647b      	str	r3, [r7, #68]	@ 0x44
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	330c      	adds	r3, #12
 80022fe:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002300:	61ba      	str	r2, [r7, #24]
 8002302:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002304:	6979      	ldr	r1, [r7, #20]
 8002306:	69ba      	ldr	r2, [r7, #24]
 8002308:	e841 2300 	strex	r3, r2, [r1]
 800230c:	613b      	str	r3, [r7, #16]
   return(result);
 800230e:	693b      	ldr	r3, [r7, #16]
 8002310:	2b00      	cmp	r3, #0
 8002312:	d1e5      	bne.n	80022e0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	2220      	movs	r2, #32
 8002318:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	2200      	movs	r2, #0
 8002320:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8002322:	bf00      	nop
 8002324:	3754      	adds	r7, #84	@ 0x54
 8002326:	46bd      	mov	sp, r7
 8002328:	bc80      	pop	{r7}
 800232a:	4770      	bx	lr

0800232c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800232c:	b580      	push	{r7, lr}
 800232e:	b084      	sub	sp, #16
 8002330:	af00      	add	r7, sp, #0
 8002332:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002338:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	2200      	movs	r2, #0
 800233e:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	2200      	movs	r2, #0
 8002344:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002346:	68f8      	ldr	r0, [r7, #12]
 8002348:	f7ff ff7a 	bl	8002240 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800234c:	bf00      	nop
 800234e:	3710      	adds	r7, #16
 8002350:	46bd      	mov	sp, r7
 8002352:	bd80      	pop	{r7, pc}

08002354 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002354:	b480      	push	{r7}
 8002356:	b085      	sub	sp, #20
 8002358:	af00      	add	r7, sp, #0
 800235a:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002362:	b2db      	uxtb	r3, r3
 8002364:	2b21      	cmp	r3, #33	@ 0x21
 8002366:	d13e      	bne.n	80023e6 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	689b      	ldr	r3, [r3, #8]
 800236c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002370:	d114      	bne.n	800239c <UART_Transmit_IT+0x48>
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	691b      	ldr	r3, [r3, #16]
 8002376:	2b00      	cmp	r3, #0
 8002378:	d110      	bne.n	800239c <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	6a1b      	ldr	r3, [r3, #32]
 800237e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	881b      	ldrh	r3, [r3, #0]
 8002384:	461a      	mov	r2, r3
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800238e:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	6a1b      	ldr	r3, [r3, #32]
 8002394:	1c9a      	adds	r2, r3, #2
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	621a      	str	r2, [r3, #32]
 800239a:	e008      	b.n	80023ae <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	6a1b      	ldr	r3, [r3, #32]
 80023a0:	1c59      	adds	r1, r3, #1
 80023a2:	687a      	ldr	r2, [r7, #4]
 80023a4:	6211      	str	r1, [r2, #32]
 80023a6:	781a      	ldrb	r2, [r3, #0]
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80023b2:	b29b      	uxth	r3, r3
 80023b4:	3b01      	subs	r3, #1
 80023b6:	b29b      	uxth	r3, r3
 80023b8:	687a      	ldr	r2, [r7, #4]
 80023ba:	4619      	mov	r1, r3
 80023bc:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d10f      	bne.n	80023e2 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	68da      	ldr	r2, [r3, #12]
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80023d0:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	68da      	ldr	r2, [r3, #12]
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80023e0:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80023e2:	2300      	movs	r3, #0
 80023e4:	e000      	b.n	80023e8 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80023e6:	2302      	movs	r3, #2
  }
}
 80023e8:	4618      	mov	r0, r3
 80023ea:	3714      	adds	r7, #20
 80023ec:	46bd      	mov	sp, r7
 80023ee:	bc80      	pop	{r7}
 80023f0:	4770      	bx	lr

080023f2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80023f2:	b580      	push	{r7, lr}
 80023f4:	b082      	sub	sp, #8
 80023f6:	af00      	add	r7, sp, #0
 80023f8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	68da      	ldr	r2, [r3, #12]
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002408:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	2220      	movs	r2, #32
 800240e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002412:	6878      	ldr	r0, [r7, #4]
 8002414:	f7ff ff02 	bl	800221c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002418:	2300      	movs	r3, #0
}
 800241a:	4618      	mov	r0, r3
 800241c:	3708      	adds	r7, #8
 800241e:	46bd      	mov	sp, r7
 8002420:	bd80      	pop	{r7, pc}

08002422 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002422:	b580      	push	{r7, lr}
 8002424:	b08c      	sub	sp, #48	@ 0x30
 8002426:	af00      	add	r7, sp, #0
 8002428:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002430:	b2db      	uxtb	r3, r3
 8002432:	2b22      	cmp	r3, #34	@ 0x22
 8002434:	f040 80ae 	bne.w	8002594 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	689b      	ldr	r3, [r3, #8]
 800243c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002440:	d117      	bne.n	8002472 <UART_Receive_IT+0x50>
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	691b      	ldr	r3, [r3, #16]
 8002446:	2b00      	cmp	r3, #0
 8002448:	d113      	bne.n	8002472 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800244a:	2300      	movs	r3, #0
 800244c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002452:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	685b      	ldr	r3, [r3, #4]
 800245a:	b29b      	uxth	r3, r3
 800245c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002460:	b29a      	uxth	r2, r3
 8002462:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002464:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800246a:	1c9a      	adds	r2, r3, #2
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	629a      	str	r2, [r3, #40]	@ 0x28
 8002470:	e026      	b.n	80024c0 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002476:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8002478:	2300      	movs	r3, #0
 800247a:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	689b      	ldr	r3, [r3, #8]
 8002480:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002484:	d007      	beq.n	8002496 <UART_Receive_IT+0x74>
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	689b      	ldr	r3, [r3, #8]
 800248a:	2b00      	cmp	r3, #0
 800248c:	d10a      	bne.n	80024a4 <UART_Receive_IT+0x82>
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	691b      	ldr	r3, [r3, #16]
 8002492:	2b00      	cmp	r3, #0
 8002494:	d106      	bne.n	80024a4 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	685b      	ldr	r3, [r3, #4]
 800249c:	b2da      	uxtb	r2, r3
 800249e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80024a0:	701a      	strb	r2, [r3, #0]
 80024a2:	e008      	b.n	80024b6 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	685b      	ldr	r3, [r3, #4]
 80024aa:	b2db      	uxtb	r3, r3
 80024ac:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80024b0:	b2da      	uxtb	r2, r3
 80024b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80024b4:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024ba:	1c5a      	adds	r2, r3, #1
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80024c4:	b29b      	uxth	r3, r3
 80024c6:	3b01      	subs	r3, #1
 80024c8:	b29b      	uxth	r3, r3
 80024ca:	687a      	ldr	r2, [r7, #4]
 80024cc:	4619      	mov	r1, r3
 80024ce:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d15d      	bne.n	8002590 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	68da      	ldr	r2, [r3, #12]
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	f022 0220 	bic.w	r2, r2, #32
 80024e2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	68da      	ldr	r2, [r3, #12]
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80024f2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	695a      	ldr	r2, [r3, #20]
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	f022 0201 	bic.w	r2, r2, #1
 8002502:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	2220      	movs	r2, #32
 8002508:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	2200      	movs	r2, #0
 8002510:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002516:	2b01      	cmp	r3, #1
 8002518:	d135      	bne.n	8002586 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	2200      	movs	r2, #0
 800251e:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	330c      	adds	r3, #12
 8002526:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002528:	697b      	ldr	r3, [r7, #20]
 800252a:	e853 3f00 	ldrex	r3, [r3]
 800252e:	613b      	str	r3, [r7, #16]
   return(result);
 8002530:	693b      	ldr	r3, [r7, #16]
 8002532:	f023 0310 	bic.w	r3, r3, #16
 8002536:	627b      	str	r3, [r7, #36]	@ 0x24
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	330c      	adds	r3, #12
 800253e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002540:	623a      	str	r2, [r7, #32]
 8002542:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002544:	69f9      	ldr	r1, [r7, #28]
 8002546:	6a3a      	ldr	r2, [r7, #32]
 8002548:	e841 2300 	strex	r3, r2, [r1]
 800254c:	61bb      	str	r3, [r7, #24]
   return(result);
 800254e:	69bb      	ldr	r3, [r7, #24]
 8002550:	2b00      	cmp	r3, #0
 8002552:	d1e5      	bne.n	8002520 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	f003 0310 	and.w	r3, r3, #16
 800255e:	2b10      	cmp	r3, #16
 8002560:	d10a      	bne.n	8002578 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002562:	2300      	movs	r3, #0
 8002564:	60fb      	str	r3, [r7, #12]
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	60fb      	str	r3, [r7, #12]
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	685b      	ldr	r3, [r3, #4]
 8002574:	60fb      	str	r3, [r7, #12]
 8002576:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800257c:	4619      	mov	r1, r3
 800257e:	6878      	ldr	r0, [r7, #4]
 8002580:	f7ff fe67 	bl	8002252 <HAL_UARTEx_RxEventCallback>
 8002584:	e002      	b.n	800258c <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8002586:	6878      	ldr	r0, [r7, #4]
 8002588:	f7ff fe51 	bl	800222e <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800258c:	2300      	movs	r3, #0
 800258e:	e002      	b.n	8002596 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8002590:	2300      	movs	r3, #0
 8002592:	e000      	b.n	8002596 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8002594:	2302      	movs	r3, #2
  }
}
 8002596:	4618      	mov	r0, r3
 8002598:	3730      	adds	r7, #48	@ 0x30
 800259a:	46bd      	mov	sp, r7
 800259c:	bd80      	pop	{r7, pc}
	...

080025a0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80025a0:	b580      	push	{r7, lr}
 80025a2:	b084      	sub	sp, #16
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	691b      	ldr	r3, [r3, #16]
 80025ae:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	68da      	ldr	r2, [r3, #12]
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	430a      	orrs	r2, r1
 80025bc:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	689a      	ldr	r2, [r3, #8]
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	691b      	ldr	r3, [r3, #16]
 80025c6:	431a      	orrs	r2, r3
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	695b      	ldr	r3, [r3, #20]
 80025cc:	4313      	orrs	r3, r2
 80025ce:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	68db      	ldr	r3, [r3, #12]
 80025d6:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 80025da:	f023 030c 	bic.w	r3, r3, #12
 80025de:	687a      	ldr	r2, [r7, #4]
 80025e0:	6812      	ldr	r2, [r2, #0]
 80025e2:	68b9      	ldr	r1, [r7, #8]
 80025e4:	430b      	orrs	r3, r1
 80025e6:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	695b      	ldr	r3, [r3, #20]
 80025ee:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	699a      	ldr	r2, [r3, #24]
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	430a      	orrs	r2, r1
 80025fc:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	4a2c      	ldr	r2, [pc, #176]	@ (80026b4 <UART_SetConfig+0x114>)
 8002604:	4293      	cmp	r3, r2
 8002606:	d103      	bne.n	8002610 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002608:	f7fe ff4c 	bl	80014a4 <HAL_RCC_GetPCLK2Freq>
 800260c:	60f8      	str	r0, [r7, #12]
 800260e:	e002      	b.n	8002616 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002610:	f7fe ff34 	bl	800147c <HAL_RCC_GetPCLK1Freq>
 8002614:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002616:	68fa      	ldr	r2, [r7, #12]
 8002618:	4613      	mov	r3, r2
 800261a:	009b      	lsls	r3, r3, #2
 800261c:	4413      	add	r3, r2
 800261e:	009a      	lsls	r2, r3, #2
 8002620:	441a      	add	r2, r3
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	685b      	ldr	r3, [r3, #4]
 8002626:	009b      	lsls	r3, r3, #2
 8002628:	fbb2 f3f3 	udiv	r3, r2, r3
 800262c:	4a22      	ldr	r2, [pc, #136]	@ (80026b8 <UART_SetConfig+0x118>)
 800262e:	fba2 2303 	umull	r2, r3, r2, r3
 8002632:	095b      	lsrs	r3, r3, #5
 8002634:	0119      	lsls	r1, r3, #4
 8002636:	68fa      	ldr	r2, [r7, #12]
 8002638:	4613      	mov	r3, r2
 800263a:	009b      	lsls	r3, r3, #2
 800263c:	4413      	add	r3, r2
 800263e:	009a      	lsls	r2, r3, #2
 8002640:	441a      	add	r2, r3
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	685b      	ldr	r3, [r3, #4]
 8002646:	009b      	lsls	r3, r3, #2
 8002648:	fbb2 f2f3 	udiv	r2, r2, r3
 800264c:	4b1a      	ldr	r3, [pc, #104]	@ (80026b8 <UART_SetConfig+0x118>)
 800264e:	fba3 0302 	umull	r0, r3, r3, r2
 8002652:	095b      	lsrs	r3, r3, #5
 8002654:	2064      	movs	r0, #100	@ 0x64
 8002656:	fb00 f303 	mul.w	r3, r0, r3
 800265a:	1ad3      	subs	r3, r2, r3
 800265c:	011b      	lsls	r3, r3, #4
 800265e:	3332      	adds	r3, #50	@ 0x32
 8002660:	4a15      	ldr	r2, [pc, #84]	@ (80026b8 <UART_SetConfig+0x118>)
 8002662:	fba2 2303 	umull	r2, r3, r2, r3
 8002666:	095b      	lsrs	r3, r3, #5
 8002668:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800266c:	4419      	add	r1, r3
 800266e:	68fa      	ldr	r2, [r7, #12]
 8002670:	4613      	mov	r3, r2
 8002672:	009b      	lsls	r3, r3, #2
 8002674:	4413      	add	r3, r2
 8002676:	009a      	lsls	r2, r3, #2
 8002678:	441a      	add	r2, r3
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	685b      	ldr	r3, [r3, #4]
 800267e:	009b      	lsls	r3, r3, #2
 8002680:	fbb2 f2f3 	udiv	r2, r2, r3
 8002684:	4b0c      	ldr	r3, [pc, #48]	@ (80026b8 <UART_SetConfig+0x118>)
 8002686:	fba3 0302 	umull	r0, r3, r3, r2
 800268a:	095b      	lsrs	r3, r3, #5
 800268c:	2064      	movs	r0, #100	@ 0x64
 800268e:	fb00 f303 	mul.w	r3, r0, r3
 8002692:	1ad3      	subs	r3, r2, r3
 8002694:	011b      	lsls	r3, r3, #4
 8002696:	3332      	adds	r3, #50	@ 0x32
 8002698:	4a07      	ldr	r2, [pc, #28]	@ (80026b8 <UART_SetConfig+0x118>)
 800269a:	fba2 2303 	umull	r2, r3, r2, r3
 800269e:	095b      	lsrs	r3, r3, #5
 80026a0:	f003 020f 	and.w	r2, r3, #15
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	440a      	add	r2, r1
 80026aa:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80026ac:	bf00      	nop
 80026ae:	3710      	adds	r7, #16
 80026b0:	46bd      	mov	sp, r7
 80026b2:	bd80      	pop	{r7, pc}
 80026b4:	40013800 	.word	0x40013800
 80026b8:	51eb851f 	.word	0x51eb851f

080026bc <__NVIC_SetPriority>:
{
 80026bc:	b480      	push	{r7}
 80026be:	b083      	sub	sp, #12
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	4603      	mov	r3, r0
 80026c4:	6039      	str	r1, [r7, #0]
 80026c6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80026c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	db0a      	blt.n	80026e6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026d0:	683b      	ldr	r3, [r7, #0]
 80026d2:	b2da      	uxtb	r2, r3
 80026d4:	490c      	ldr	r1, [pc, #48]	@ (8002708 <__NVIC_SetPriority+0x4c>)
 80026d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026da:	0112      	lsls	r2, r2, #4
 80026dc:	b2d2      	uxtb	r2, r2
 80026de:	440b      	add	r3, r1
 80026e0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80026e4:	e00a      	b.n	80026fc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026e6:	683b      	ldr	r3, [r7, #0]
 80026e8:	b2da      	uxtb	r2, r3
 80026ea:	4908      	ldr	r1, [pc, #32]	@ (800270c <__NVIC_SetPriority+0x50>)
 80026ec:	79fb      	ldrb	r3, [r7, #7]
 80026ee:	f003 030f 	and.w	r3, r3, #15
 80026f2:	3b04      	subs	r3, #4
 80026f4:	0112      	lsls	r2, r2, #4
 80026f6:	b2d2      	uxtb	r2, r2
 80026f8:	440b      	add	r3, r1
 80026fa:	761a      	strb	r2, [r3, #24]
}
 80026fc:	bf00      	nop
 80026fe:	370c      	adds	r7, #12
 8002700:	46bd      	mov	sp, r7
 8002702:	bc80      	pop	{r7}
 8002704:	4770      	bx	lr
 8002706:	bf00      	nop
 8002708:	e000e100 	.word	0xe000e100
 800270c:	e000ed00 	.word	0xe000ed00

08002710 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8002710:	b580      	push	{r7, lr}
 8002712:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8002714:	2100      	movs	r1, #0
 8002716:	f06f 0004 	mvn.w	r0, #4
 800271a:	f7ff ffcf 	bl	80026bc <__NVIC_SetPriority>
#endif
}
 800271e:	bf00      	nop
 8002720:	bd80      	pop	{r7, pc}
	...

08002724 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8002724:	b480      	push	{r7}
 8002726:	b083      	sub	sp, #12
 8002728:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800272a:	f3ef 8305 	mrs	r3, IPSR
 800272e:	603b      	str	r3, [r7, #0]
  return(result);
 8002730:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002732:	2b00      	cmp	r3, #0
 8002734:	d003      	beq.n	800273e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8002736:	f06f 0305 	mvn.w	r3, #5
 800273a:	607b      	str	r3, [r7, #4]
 800273c:	e00c      	b.n	8002758 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800273e:	4b09      	ldr	r3, [pc, #36]	@ (8002764 <osKernelInitialize+0x40>)
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	2b00      	cmp	r3, #0
 8002744:	d105      	bne.n	8002752 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8002746:	4b07      	ldr	r3, [pc, #28]	@ (8002764 <osKernelInitialize+0x40>)
 8002748:	2201      	movs	r2, #1
 800274a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800274c:	2300      	movs	r3, #0
 800274e:	607b      	str	r3, [r7, #4]
 8002750:	e002      	b.n	8002758 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8002752:	f04f 33ff 	mov.w	r3, #4294967295
 8002756:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8002758:	687b      	ldr	r3, [r7, #4]
}
 800275a:	4618      	mov	r0, r3
 800275c:	370c      	adds	r7, #12
 800275e:	46bd      	mov	sp, r7
 8002760:	bc80      	pop	{r7}
 8002762:	4770      	bx	lr
 8002764:	200000c4 	.word	0x200000c4

08002768 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8002768:	b580      	push	{r7, lr}
 800276a:	b082      	sub	sp, #8
 800276c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800276e:	f3ef 8305 	mrs	r3, IPSR
 8002772:	603b      	str	r3, [r7, #0]
  return(result);
 8002774:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002776:	2b00      	cmp	r3, #0
 8002778:	d003      	beq.n	8002782 <osKernelStart+0x1a>
    stat = osErrorISR;
 800277a:	f06f 0305 	mvn.w	r3, #5
 800277e:	607b      	str	r3, [r7, #4]
 8002780:	e010      	b.n	80027a4 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8002782:	4b0b      	ldr	r3, [pc, #44]	@ (80027b0 <osKernelStart+0x48>)
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	2b01      	cmp	r3, #1
 8002788:	d109      	bne.n	800279e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800278a:	f7ff ffc1 	bl	8002710 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800278e:	4b08      	ldr	r3, [pc, #32]	@ (80027b0 <osKernelStart+0x48>)
 8002790:	2202      	movs	r2, #2
 8002792:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8002794:	f001 f872 	bl	800387c <vTaskStartScheduler>
      stat = osOK;
 8002798:	2300      	movs	r3, #0
 800279a:	607b      	str	r3, [r7, #4]
 800279c:	e002      	b.n	80027a4 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800279e:	f04f 33ff 	mov.w	r3, #4294967295
 80027a2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80027a4:	687b      	ldr	r3, [r7, #4]
}
 80027a6:	4618      	mov	r0, r3
 80027a8:	3708      	adds	r7, #8
 80027aa:	46bd      	mov	sp, r7
 80027ac:	bd80      	pop	{r7, pc}
 80027ae:	bf00      	nop
 80027b0:	200000c4 	.word	0x200000c4

080027b4 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80027b4:	b580      	push	{r7, lr}
 80027b6:	b08e      	sub	sp, #56	@ 0x38
 80027b8:	af04      	add	r7, sp, #16
 80027ba:	60f8      	str	r0, [r7, #12]
 80027bc:	60b9      	str	r1, [r7, #8]
 80027be:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80027c0:	2300      	movs	r3, #0
 80027c2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80027c4:	f3ef 8305 	mrs	r3, IPSR
 80027c8:	617b      	str	r3, [r7, #20]
  return(result);
 80027ca:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d17e      	bne.n	80028ce <osThreadNew+0x11a>
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d07b      	beq.n	80028ce <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80027d6:	2380      	movs	r3, #128	@ 0x80
 80027d8:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80027da:	2318      	movs	r3, #24
 80027dc:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80027de:	2300      	movs	r3, #0
 80027e0:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 80027e2:	f04f 33ff 	mov.w	r3, #4294967295
 80027e6:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d045      	beq.n	800287a <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d002      	beq.n	80027fc <osThreadNew+0x48>
        name = attr->name;
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	699b      	ldr	r3, [r3, #24]
 8002800:	2b00      	cmp	r3, #0
 8002802:	d002      	beq.n	800280a <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	699b      	ldr	r3, [r3, #24]
 8002808:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800280a:	69fb      	ldr	r3, [r7, #28]
 800280c:	2b00      	cmp	r3, #0
 800280e:	d008      	beq.n	8002822 <osThreadNew+0x6e>
 8002810:	69fb      	ldr	r3, [r7, #28]
 8002812:	2b38      	cmp	r3, #56	@ 0x38
 8002814:	d805      	bhi.n	8002822 <osThreadNew+0x6e>
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	685b      	ldr	r3, [r3, #4]
 800281a:	f003 0301 	and.w	r3, r3, #1
 800281e:	2b00      	cmp	r3, #0
 8002820:	d001      	beq.n	8002826 <osThreadNew+0x72>
        return (NULL);
 8002822:	2300      	movs	r3, #0
 8002824:	e054      	b.n	80028d0 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	695b      	ldr	r3, [r3, #20]
 800282a:	2b00      	cmp	r3, #0
 800282c:	d003      	beq.n	8002836 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	695b      	ldr	r3, [r3, #20]
 8002832:	089b      	lsrs	r3, r3, #2
 8002834:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	689b      	ldr	r3, [r3, #8]
 800283a:	2b00      	cmp	r3, #0
 800283c:	d00e      	beq.n	800285c <osThreadNew+0xa8>
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	68db      	ldr	r3, [r3, #12]
 8002842:	2b5b      	cmp	r3, #91	@ 0x5b
 8002844:	d90a      	bls.n	800285c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800284a:	2b00      	cmp	r3, #0
 800284c:	d006      	beq.n	800285c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	695b      	ldr	r3, [r3, #20]
 8002852:	2b00      	cmp	r3, #0
 8002854:	d002      	beq.n	800285c <osThreadNew+0xa8>
        mem = 1;
 8002856:	2301      	movs	r3, #1
 8002858:	61bb      	str	r3, [r7, #24]
 800285a:	e010      	b.n	800287e <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	689b      	ldr	r3, [r3, #8]
 8002860:	2b00      	cmp	r3, #0
 8002862:	d10c      	bne.n	800287e <osThreadNew+0xca>
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	68db      	ldr	r3, [r3, #12]
 8002868:	2b00      	cmp	r3, #0
 800286a:	d108      	bne.n	800287e <osThreadNew+0xca>
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	691b      	ldr	r3, [r3, #16]
 8002870:	2b00      	cmp	r3, #0
 8002872:	d104      	bne.n	800287e <osThreadNew+0xca>
          mem = 0;
 8002874:	2300      	movs	r3, #0
 8002876:	61bb      	str	r3, [r7, #24]
 8002878:	e001      	b.n	800287e <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800287a:	2300      	movs	r3, #0
 800287c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800287e:	69bb      	ldr	r3, [r7, #24]
 8002880:	2b01      	cmp	r3, #1
 8002882:	d110      	bne.n	80028a6 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8002888:	687a      	ldr	r2, [r7, #4]
 800288a:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800288c:	9202      	str	r2, [sp, #8]
 800288e:	9301      	str	r3, [sp, #4]
 8002890:	69fb      	ldr	r3, [r7, #28]
 8002892:	9300      	str	r3, [sp, #0]
 8002894:	68bb      	ldr	r3, [r7, #8]
 8002896:	6a3a      	ldr	r2, [r7, #32]
 8002898:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800289a:	68f8      	ldr	r0, [r7, #12]
 800289c:	f000 fe12 	bl	80034c4 <xTaskCreateStatic>
 80028a0:	4603      	mov	r3, r0
 80028a2:	613b      	str	r3, [r7, #16]
 80028a4:	e013      	b.n	80028ce <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80028a6:	69bb      	ldr	r3, [r7, #24]
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d110      	bne.n	80028ce <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80028ac:	6a3b      	ldr	r3, [r7, #32]
 80028ae:	b29a      	uxth	r2, r3
 80028b0:	f107 0310 	add.w	r3, r7, #16
 80028b4:	9301      	str	r3, [sp, #4]
 80028b6:	69fb      	ldr	r3, [r7, #28]
 80028b8:	9300      	str	r3, [sp, #0]
 80028ba:	68bb      	ldr	r3, [r7, #8]
 80028bc:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80028be:	68f8      	ldr	r0, [r7, #12]
 80028c0:	f000 fe60 	bl	8003584 <xTaskCreate>
 80028c4:	4603      	mov	r3, r0
 80028c6:	2b01      	cmp	r3, #1
 80028c8:	d001      	beq.n	80028ce <osThreadNew+0x11a>
            hTask = NULL;
 80028ca:	2300      	movs	r3, #0
 80028cc:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80028ce:	693b      	ldr	r3, [r7, #16]
}
 80028d0:	4618      	mov	r0, r3
 80028d2:	3728      	adds	r7, #40	@ 0x28
 80028d4:	46bd      	mov	sp, r7
 80028d6:	bd80      	pop	{r7, pc}

080028d8 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80028d8:	b580      	push	{r7, lr}
 80028da:	b084      	sub	sp, #16
 80028dc:	af00      	add	r7, sp, #0
 80028de:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80028e0:	f3ef 8305 	mrs	r3, IPSR
 80028e4:	60bb      	str	r3, [r7, #8]
  return(result);
 80028e6:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d003      	beq.n	80028f4 <osDelay+0x1c>
    stat = osErrorISR;
 80028ec:	f06f 0305 	mvn.w	r3, #5
 80028f0:	60fb      	str	r3, [r7, #12]
 80028f2:	e007      	b.n	8002904 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80028f4:	2300      	movs	r3, #0
 80028f6:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d002      	beq.n	8002904 <osDelay+0x2c>
      vTaskDelay(ticks);
 80028fe:	6878      	ldr	r0, [r7, #4]
 8002900:	f000 ff86 	bl	8003810 <vTaskDelay>
    }
  }

  return (stat);
 8002904:	68fb      	ldr	r3, [r7, #12]
}
 8002906:	4618      	mov	r0, r3
 8002908:	3710      	adds	r7, #16
 800290a:	46bd      	mov	sp, r7
 800290c:	bd80      	pop	{r7, pc}
	...

08002910 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8002910:	b480      	push	{r7}
 8002912:	b085      	sub	sp, #20
 8002914:	af00      	add	r7, sp, #0
 8002916:	60f8      	str	r0, [r7, #12]
 8002918:	60b9      	str	r1, [r7, #8]
 800291a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	4a06      	ldr	r2, [pc, #24]	@ (8002938 <vApplicationGetIdleTaskMemory+0x28>)
 8002920:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8002922:	68bb      	ldr	r3, [r7, #8]
 8002924:	4a05      	ldr	r2, [pc, #20]	@ (800293c <vApplicationGetIdleTaskMemory+0x2c>)
 8002926:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	2280      	movs	r2, #128	@ 0x80
 800292c:	601a      	str	r2, [r3, #0]
}
 800292e:	bf00      	nop
 8002930:	3714      	adds	r7, #20
 8002932:	46bd      	mov	sp, r7
 8002934:	bc80      	pop	{r7}
 8002936:	4770      	bx	lr
 8002938:	200000c8 	.word	0x200000c8
 800293c:	20000124 	.word	0x20000124

08002940 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8002940:	b480      	push	{r7}
 8002942:	b085      	sub	sp, #20
 8002944:	af00      	add	r7, sp, #0
 8002946:	60f8      	str	r0, [r7, #12]
 8002948:	60b9      	str	r1, [r7, #8]
 800294a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	4a07      	ldr	r2, [pc, #28]	@ (800296c <vApplicationGetTimerTaskMemory+0x2c>)
 8002950:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8002952:	68bb      	ldr	r3, [r7, #8]
 8002954:	4a06      	ldr	r2, [pc, #24]	@ (8002970 <vApplicationGetTimerTaskMemory+0x30>)
 8002956:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800295e:	601a      	str	r2, [r3, #0]
}
 8002960:	bf00      	nop
 8002962:	3714      	adds	r7, #20
 8002964:	46bd      	mov	sp, r7
 8002966:	bc80      	pop	{r7}
 8002968:	4770      	bx	lr
 800296a:	bf00      	nop
 800296c:	20000324 	.word	0x20000324
 8002970:	20000380 	.word	0x20000380

08002974 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002974:	b480      	push	{r7}
 8002976:	b083      	sub	sp, #12
 8002978:	af00      	add	r7, sp, #0
 800297a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	f103 0208 	add.w	r2, r3, #8
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	f04f 32ff 	mov.w	r2, #4294967295
 800298c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	f103 0208 	add.w	r2, r3, #8
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	f103 0208 	add.w	r2, r3, #8
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	2200      	movs	r2, #0
 80029a6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80029a8:	bf00      	nop
 80029aa:	370c      	adds	r7, #12
 80029ac:	46bd      	mov	sp, r7
 80029ae:	bc80      	pop	{r7}
 80029b0:	4770      	bx	lr

080029b2 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80029b2:	b480      	push	{r7}
 80029b4:	b083      	sub	sp, #12
 80029b6:	af00      	add	r7, sp, #0
 80029b8:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	2200      	movs	r2, #0
 80029be:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80029c0:	bf00      	nop
 80029c2:	370c      	adds	r7, #12
 80029c4:	46bd      	mov	sp, r7
 80029c6:	bc80      	pop	{r7}
 80029c8:	4770      	bx	lr

080029ca <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80029ca:	b480      	push	{r7}
 80029cc:	b085      	sub	sp, #20
 80029ce:	af00      	add	r7, sp, #0
 80029d0:	6078      	str	r0, [r7, #4]
 80029d2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	685b      	ldr	r3, [r3, #4]
 80029d8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80029da:	683b      	ldr	r3, [r7, #0]
 80029dc:	68fa      	ldr	r2, [r7, #12]
 80029de:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	689a      	ldr	r2, [r3, #8]
 80029e4:	683b      	ldr	r3, [r7, #0]
 80029e6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	689b      	ldr	r3, [r3, #8]
 80029ec:	683a      	ldr	r2, [r7, #0]
 80029ee:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	683a      	ldr	r2, [r7, #0]
 80029f4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80029f6:	683b      	ldr	r3, [r7, #0]
 80029f8:	687a      	ldr	r2, [r7, #4]
 80029fa:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	1c5a      	adds	r2, r3, #1
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	601a      	str	r2, [r3, #0]
}
 8002a06:	bf00      	nop
 8002a08:	3714      	adds	r7, #20
 8002a0a:	46bd      	mov	sp, r7
 8002a0c:	bc80      	pop	{r7}
 8002a0e:	4770      	bx	lr

08002a10 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002a10:	b480      	push	{r7}
 8002a12:	b085      	sub	sp, #20
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	6078      	str	r0, [r7, #4]
 8002a18:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002a1a:	683b      	ldr	r3, [r7, #0]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002a20:	68bb      	ldr	r3, [r7, #8]
 8002a22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a26:	d103      	bne.n	8002a30 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	691b      	ldr	r3, [r3, #16]
 8002a2c:	60fb      	str	r3, [r7, #12]
 8002a2e:	e00c      	b.n	8002a4a <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	3308      	adds	r3, #8
 8002a34:	60fb      	str	r3, [r7, #12]
 8002a36:	e002      	b.n	8002a3e <vListInsert+0x2e>
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	685b      	ldr	r3, [r3, #4]
 8002a3c:	60fb      	str	r3, [r7, #12]
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	685b      	ldr	r3, [r3, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	68ba      	ldr	r2, [r7, #8]
 8002a46:	429a      	cmp	r2, r3
 8002a48:	d2f6      	bcs.n	8002a38 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	685a      	ldr	r2, [r3, #4]
 8002a4e:	683b      	ldr	r3, [r7, #0]
 8002a50:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002a52:	683b      	ldr	r3, [r7, #0]
 8002a54:	685b      	ldr	r3, [r3, #4]
 8002a56:	683a      	ldr	r2, [r7, #0]
 8002a58:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002a5a:	683b      	ldr	r3, [r7, #0]
 8002a5c:	68fa      	ldr	r2, [r7, #12]
 8002a5e:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	683a      	ldr	r2, [r7, #0]
 8002a64:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8002a66:	683b      	ldr	r3, [r7, #0]
 8002a68:	687a      	ldr	r2, [r7, #4]
 8002a6a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	1c5a      	adds	r2, r3, #1
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	601a      	str	r2, [r3, #0]
}
 8002a76:	bf00      	nop
 8002a78:	3714      	adds	r7, #20
 8002a7a:	46bd      	mov	sp, r7
 8002a7c:	bc80      	pop	{r7}
 8002a7e:	4770      	bx	lr

08002a80 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002a80:	b480      	push	{r7}
 8002a82:	b085      	sub	sp, #20
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	691b      	ldr	r3, [r3, #16]
 8002a8c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	685b      	ldr	r3, [r3, #4]
 8002a92:	687a      	ldr	r2, [r7, #4]
 8002a94:	6892      	ldr	r2, [r2, #8]
 8002a96:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	689b      	ldr	r3, [r3, #8]
 8002a9c:	687a      	ldr	r2, [r7, #4]
 8002a9e:	6852      	ldr	r2, [r2, #4]
 8002aa0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	685b      	ldr	r3, [r3, #4]
 8002aa6:	687a      	ldr	r2, [r7, #4]
 8002aa8:	429a      	cmp	r2, r3
 8002aaa:	d103      	bne.n	8002ab4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	689a      	ldr	r2, [r3, #8]
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	2200      	movs	r2, #0
 8002ab8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	1e5a      	subs	r2, r3, #1
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	681b      	ldr	r3, [r3, #0]
}
 8002ac8:	4618      	mov	r0, r3
 8002aca:	3714      	adds	r7, #20
 8002acc:	46bd      	mov	sp, r7
 8002ace:	bc80      	pop	{r7}
 8002ad0:	4770      	bx	lr
	...

08002ad4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8002ad4:	b580      	push	{r7, lr}
 8002ad6:	b084      	sub	sp, #16
 8002ad8:	af00      	add	r7, sp, #0
 8002ada:	6078      	str	r0, [r7, #4]
 8002adc:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d10b      	bne.n	8002b00 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002ae8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002aec:	f383 8811 	msr	BASEPRI, r3
 8002af0:	f3bf 8f6f 	isb	sy
 8002af4:	f3bf 8f4f 	dsb	sy
 8002af8:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8002afa:	bf00      	nop
 8002afc:	bf00      	nop
 8002afe:	e7fd      	b.n	8002afc <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8002b00:	f002 f834 	bl	8004b6c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	681a      	ldr	r2, [r3, #0]
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b0c:	68f9      	ldr	r1, [r7, #12]
 8002b0e:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8002b10:	fb01 f303 	mul.w	r3, r1, r3
 8002b14:	441a      	add	r2, r3
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	2200      	movs	r2, #0
 8002b1e:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	681a      	ldr	r2, [r3, #0]
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	681a      	ldr	r2, [r3, #0]
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b30:	3b01      	subs	r3, #1
 8002b32:	68f9      	ldr	r1, [r7, #12]
 8002b34:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8002b36:	fb01 f303 	mul.w	r3, r1, r3
 8002b3a:	441a      	add	r2, r3
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	22ff      	movs	r2, #255	@ 0xff
 8002b44:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	22ff      	movs	r2, #255	@ 0xff
 8002b4c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8002b50:	683b      	ldr	r3, [r7, #0]
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d114      	bne.n	8002b80 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	691b      	ldr	r3, [r3, #16]
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d01a      	beq.n	8002b94 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	3310      	adds	r3, #16
 8002b62:	4618      	mov	r0, r3
 8002b64:	f001 f916 	bl	8003d94 <xTaskRemoveFromEventList>
 8002b68:	4603      	mov	r3, r0
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d012      	beq.n	8002b94 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8002b6e:	4b0d      	ldr	r3, [pc, #52]	@ (8002ba4 <xQueueGenericReset+0xd0>)
 8002b70:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002b74:	601a      	str	r2, [r3, #0]
 8002b76:	f3bf 8f4f 	dsb	sy
 8002b7a:	f3bf 8f6f 	isb	sy
 8002b7e:	e009      	b.n	8002b94 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	3310      	adds	r3, #16
 8002b84:	4618      	mov	r0, r3
 8002b86:	f7ff fef5 	bl	8002974 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	3324      	adds	r3, #36	@ 0x24
 8002b8e:	4618      	mov	r0, r3
 8002b90:	f7ff fef0 	bl	8002974 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8002b94:	f002 f81a 	bl	8004bcc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8002b98:	2301      	movs	r3, #1
}
 8002b9a:	4618      	mov	r0, r3
 8002b9c:	3710      	adds	r7, #16
 8002b9e:	46bd      	mov	sp, r7
 8002ba0:	bd80      	pop	{r7, pc}
 8002ba2:	bf00      	nop
 8002ba4:	e000ed04 	.word	0xe000ed04

08002ba8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8002ba8:	b580      	push	{r7, lr}
 8002baa:	b08e      	sub	sp, #56	@ 0x38
 8002bac:	af02      	add	r7, sp, #8
 8002bae:	60f8      	str	r0, [r7, #12]
 8002bb0:	60b9      	str	r1, [r7, #8]
 8002bb2:	607a      	str	r2, [r7, #4]
 8002bb4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d10b      	bne.n	8002bd4 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8002bbc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002bc0:	f383 8811 	msr	BASEPRI, r3
 8002bc4:	f3bf 8f6f 	isb	sy
 8002bc8:	f3bf 8f4f 	dsb	sy
 8002bcc:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8002bce:	bf00      	nop
 8002bd0:	bf00      	nop
 8002bd2:	e7fd      	b.n	8002bd0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8002bd4:	683b      	ldr	r3, [r7, #0]
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d10b      	bne.n	8002bf2 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8002bda:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002bde:	f383 8811 	msr	BASEPRI, r3
 8002be2:	f3bf 8f6f 	isb	sy
 8002be6:	f3bf 8f4f 	dsb	sy
 8002bea:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8002bec:	bf00      	nop
 8002bee:	bf00      	nop
 8002bf0:	e7fd      	b.n	8002bee <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d002      	beq.n	8002bfe <xQueueGenericCreateStatic+0x56>
 8002bf8:	68bb      	ldr	r3, [r7, #8]
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d001      	beq.n	8002c02 <xQueueGenericCreateStatic+0x5a>
 8002bfe:	2301      	movs	r3, #1
 8002c00:	e000      	b.n	8002c04 <xQueueGenericCreateStatic+0x5c>
 8002c02:	2300      	movs	r3, #0
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d10b      	bne.n	8002c20 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8002c08:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002c0c:	f383 8811 	msr	BASEPRI, r3
 8002c10:	f3bf 8f6f 	isb	sy
 8002c14:	f3bf 8f4f 	dsb	sy
 8002c18:	623b      	str	r3, [r7, #32]
}
 8002c1a:	bf00      	nop
 8002c1c:	bf00      	nop
 8002c1e:	e7fd      	b.n	8002c1c <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d102      	bne.n	8002c2c <xQueueGenericCreateStatic+0x84>
 8002c26:	68bb      	ldr	r3, [r7, #8]
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d101      	bne.n	8002c30 <xQueueGenericCreateStatic+0x88>
 8002c2c:	2301      	movs	r3, #1
 8002c2e:	e000      	b.n	8002c32 <xQueueGenericCreateStatic+0x8a>
 8002c30:	2300      	movs	r3, #0
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d10b      	bne.n	8002c4e <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8002c36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002c3a:	f383 8811 	msr	BASEPRI, r3
 8002c3e:	f3bf 8f6f 	isb	sy
 8002c42:	f3bf 8f4f 	dsb	sy
 8002c46:	61fb      	str	r3, [r7, #28]
}
 8002c48:	bf00      	nop
 8002c4a:	bf00      	nop
 8002c4c:	e7fd      	b.n	8002c4a <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8002c4e:	2350      	movs	r3, #80	@ 0x50
 8002c50:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8002c52:	697b      	ldr	r3, [r7, #20]
 8002c54:	2b50      	cmp	r3, #80	@ 0x50
 8002c56:	d00b      	beq.n	8002c70 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8002c58:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002c5c:	f383 8811 	msr	BASEPRI, r3
 8002c60:	f3bf 8f6f 	isb	sy
 8002c64:	f3bf 8f4f 	dsb	sy
 8002c68:	61bb      	str	r3, [r7, #24]
}
 8002c6a:	bf00      	nop
 8002c6c:	bf00      	nop
 8002c6e:	e7fd      	b.n	8002c6c <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8002c70:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002c72:	683b      	ldr	r3, [r7, #0]
 8002c74:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8002c76:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d00d      	beq.n	8002c98 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8002c7c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002c7e:	2201      	movs	r2, #1
 8002c80:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002c84:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8002c88:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002c8a:	9300      	str	r3, [sp, #0]
 8002c8c:	4613      	mov	r3, r2
 8002c8e:	687a      	ldr	r2, [r7, #4]
 8002c90:	68b9      	ldr	r1, [r7, #8]
 8002c92:	68f8      	ldr	r0, [r7, #12]
 8002c94:	f000 f805 	bl	8002ca2 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8002c98:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8002c9a:	4618      	mov	r0, r3
 8002c9c:	3730      	adds	r7, #48	@ 0x30
 8002c9e:	46bd      	mov	sp, r7
 8002ca0:	bd80      	pop	{r7, pc}

08002ca2 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8002ca2:	b580      	push	{r7, lr}
 8002ca4:	b084      	sub	sp, #16
 8002ca6:	af00      	add	r7, sp, #0
 8002ca8:	60f8      	str	r0, [r7, #12]
 8002caa:	60b9      	str	r1, [r7, #8]
 8002cac:	607a      	str	r2, [r7, #4]
 8002cae:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8002cb0:	68bb      	ldr	r3, [r7, #8]
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d103      	bne.n	8002cbe <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002cb6:	69bb      	ldr	r3, [r7, #24]
 8002cb8:	69ba      	ldr	r2, [r7, #24]
 8002cba:	601a      	str	r2, [r3, #0]
 8002cbc:	e002      	b.n	8002cc4 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002cbe:	69bb      	ldr	r3, [r7, #24]
 8002cc0:	687a      	ldr	r2, [r7, #4]
 8002cc2:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8002cc4:	69bb      	ldr	r3, [r7, #24]
 8002cc6:	68fa      	ldr	r2, [r7, #12]
 8002cc8:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8002cca:	69bb      	ldr	r3, [r7, #24]
 8002ccc:	68ba      	ldr	r2, [r7, #8]
 8002cce:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002cd0:	2101      	movs	r1, #1
 8002cd2:	69b8      	ldr	r0, [r7, #24]
 8002cd4:	f7ff fefe 	bl	8002ad4 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8002cd8:	69bb      	ldr	r3, [r7, #24]
 8002cda:	78fa      	ldrb	r2, [r7, #3]
 8002cdc:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8002ce0:	bf00      	nop
 8002ce2:	3710      	adds	r7, #16
 8002ce4:	46bd      	mov	sp, r7
 8002ce6:	bd80      	pop	{r7, pc}

08002ce8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8002ce8:	b580      	push	{r7, lr}
 8002cea:	b08e      	sub	sp, #56	@ 0x38
 8002cec:	af00      	add	r7, sp, #0
 8002cee:	60f8      	str	r0, [r7, #12]
 8002cf0:	60b9      	str	r1, [r7, #8]
 8002cf2:	607a      	str	r2, [r7, #4]
 8002cf4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8002cf6:	2300      	movs	r3, #0
 8002cf8:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8002cfe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d10b      	bne.n	8002d1c <xQueueGenericSend+0x34>
	__asm volatile
 8002d04:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002d08:	f383 8811 	msr	BASEPRI, r3
 8002d0c:	f3bf 8f6f 	isb	sy
 8002d10:	f3bf 8f4f 	dsb	sy
 8002d14:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8002d16:	bf00      	nop
 8002d18:	bf00      	nop
 8002d1a:	e7fd      	b.n	8002d18 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002d1c:	68bb      	ldr	r3, [r7, #8]
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d103      	bne.n	8002d2a <xQueueGenericSend+0x42>
 8002d22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d101      	bne.n	8002d2e <xQueueGenericSend+0x46>
 8002d2a:	2301      	movs	r3, #1
 8002d2c:	e000      	b.n	8002d30 <xQueueGenericSend+0x48>
 8002d2e:	2300      	movs	r3, #0
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d10b      	bne.n	8002d4c <xQueueGenericSend+0x64>
	__asm volatile
 8002d34:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002d38:	f383 8811 	msr	BASEPRI, r3
 8002d3c:	f3bf 8f6f 	isb	sy
 8002d40:	f3bf 8f4f 	dsb	sy
 8002d44:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8002d46:	bf00      	nop
 8002d48:	bf00      	nop
 8002d4a:	e7fd      	b.n	8002d48 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002d4c:	683b      	ldr	r3, [r7, #0]
 8002d4e:	2b02      	cmp	r3, #2
 8002d50:	d103      	bne.n	8002d5a <xQueueGenericSend+0x72>
 8002d52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d54:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002d56:	2b01      	cmp	r3, #1
 8002d58:	d101      	bne.n	8002d5e <xQueueGenericSend+0x76>
 8002d5a:	2301      	movs	r3, #1
 8002d5c:	e000      	b.n	8002d60 <xQueueGenericSend+0x78>
 8002d5e:	2300      	movs	r3, #0
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d10b      	bne.n	8002d7c <xQueueGenericSend+0x94>
	__asm volatile
 8002d64:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002d68:	f383 8811 	msr	BASEPRI, r3
 8002d6c:	f3bf 8f6f 	isb	sy
 8002d70:	f3bf 8f4f 	dsb	sy
 8002d74:	623b      	str	r3, [r7, #32]
}
 8002d76:	bf00      	nop
 8002d78:	bf00      	nop
 8002d7a:	e7fd      	b.n	8002d78 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002d7c:	f001 f9ca 	bl	8004114 <xTaskGetSchedulerState>
 8002d80:	4603      	mov	r3, r0
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d102      	bne.n	8002d8c <xQueueGenericSend+0xa4>
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d101      	bne.n	8002d90 <xQueueGenericSend+0xa8>
 8002d8c:	2301      	movs	r3, #1
 8002d8e:	e000      	b.n	8002d92 <xQueueGenericSend+0xaa>
 8002d90:	2300      	movs	r3, #0
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d10b      	bne.n	8002dae <xQueueGenericSend+0xc6>
	__asm volatile
 8002d96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002d9a:	f383 8811 	msr	BASEPRI, r3
 8002d9e:	f3bf 8f6f 	isb	sy
 8002da2:	f3bf 8f4f 	dsb	sy
 8002da6:	61fb      	str	r3, [r7, #28]
}
 8002da8:	bf00      	nop
 8002daa:	bf00      	nop
 8002dac:	e7fd      	b.n	8002daa <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002dae:	f001 fedd 	bl	8004b6c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002db2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002db4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002db6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002db8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002dba:	429a      	cmp	r2, r3
 8002dbc:	d302      	bcc.n	8002dc4 <xQueueGenericSend+0xdc>
 8002dbe:	683b      	ldr	r3, [r7, #0]
 8002dc0:	2b02      	cmp	r3, #2
 8002dc2:	d129      	bne.n	8002e18 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002dc4:	683a      	ldr	r2, [r7, #0]
 8002dc6:	68b9      	ldr	r1, [r7, #8]
 8002dc8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002dca:	f000 fa0f 	bl	80031ec <prvCopyDataToQueue>
 8002dce:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002dd0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002dd2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d010      	beq.n	8002dfa <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002dd8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002dda:	3324      	adds	r3, #36	@ 0x24
 8002ddc:	4618      	mov	r0, r3
 8002dde:	f000 ffd9 	bl	8003d94 <xTaskRemoveFromEventList>
 8002de2:	4603      	mov	r3, r0
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d013      	beq.n	8002e10 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8002de8:	4b3f      	ldr	r3, [pc, #252]	@ (8002ee8 <xQueueGenericSend+0x200>)
 8002dea:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002dee:	601a      	str	r2, [r3, #0]
 8002df0:	f3bf 8f4f 	dsb	sy
 8002df4:	f3bf 8f6f 	isb	sy
 8002df8:	e00a      	b.n	8002e10 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8002dfa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d007      	beq.n	8002e10 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8002e00:	4b39      	ldr	r3, [pc, #228]	@ (8002ee8 <xQueueGenericSend+0x200>)
 8002e02:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002e06:	601a      	str	r2, [r3, #0]
 8002e08:	f3bf 8f4f 	dsb	sy
 8002e0c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8002e10:	f001 fedc 	bl	8004bcc <vPortExitCritical>
				return pdPASS;
 8002e14:	2301      	movs	r3, #1
 8002e16:	e063      	b.n	8002ee0 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d103      	bne.n	8002e26 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002e1e:	f001 fed5 	bl	8004bcc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8002e22:	2300      	movs	r3, #0
 8002e24:	e05c      	b.n	8002ee0 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002e26:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d106      	bne.n	8002e3a <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002e2c:	f107 0314 	add.w	r3, r7, #20
 8002e30:	4618      	mov	r0, r3
 8002e32:	f001 f813 	bl	8003e5c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002e36:	2301      	movs	r3, #1
 8002e38:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002e3a:	f001 fec7 	bl	8004bcc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002e3e:	f000 fd85 	bl	800394c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002e42:	f001 fe93 	bl	8004b6c <vPortEnterCritical>
 8002e46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e48:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002e4c:	b25b      	sxtb	r3, r3
 8002e4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e52:	d103      	bne.n	8002e5c <xQueueGenericSend+0x174>
 8002e54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e56:	2200      	movs	r2, #0
 8002e58:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002e5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e5e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002e62:	b25b      	sxtb	r3, r3
 8002e64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e68:	d103      	bne.n	8002e72 <xQueueGenericSend+0x18a>
 8002e6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e6c:	2200      	movs	r2, #0
 8002e6e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002e72:	f001 feab 	bl	8004bcc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002e76:	1d3a      	adds	r2, r7, #4
 8002e78:	f107 0314 	add.w	r3, r7, #20
 8002e7c:	4611      	mov	r1, r2
 8002e7e:	4618      	mov	r0, r3
 8002e80:	f001 f802 	bl	8003e88 <xTaskCheckForTimeOut>
 8002e84:	4603      	mov	r3, r0
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d124      	bne.n	8002ed4 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8002e8a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002e8c:	f000 faa6 	bl	80033dc <prvIsQueueFull>
 8002e90:	4603      	mov	r3, r0
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d018      	beq.n	8002ec8 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8002e96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e98:	3310      	adds	r3, #16
 8002e9a:	687a      	ldr	r2, [r7, #4]
 8002e9c:	4611      	mov	r1, r2
 8002e9e:	4618      	mov	r0, r3
 8002ea0:	f000 ff26 	bl	8003cf0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8002ea4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002ea6:	f000 fa31 	bl	800330c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8002eaa:	f000 fd5d 	bl	8003968 <xTaskResumeAll>
 8002eae:	4603      	mov	r3, r0
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	f47f af7c 	bne.w	8002dae <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8002eb6:	4b0c      	ldr	r3, [pc, #48]	@ (8002ee8 <xQueueGenericSend+0x200>)
 8002eb8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002ebc:	601a      	str	r2, [r3, #0]
 8002ebe:	f3bf 8f4f 	dsb	sy
 8002ec2:	f3bf 8f6f 	isb	sy
 8002ec6:	e772      	b.n	8002dae <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8002ec8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002eca:	f000 fa1f 	bl	800330c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002ece:	f000 fd4b 	bl	8003968 <xTaskResumeAll>
 8002ed2:	e76c      	b.n	8002dae <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8002ed4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002ed6:	f000 fa19 	bl	800330c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002eda:	f000 fd45 	bl	8003968 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8002ede:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8002ee0:	4618      	mov	r0, r3
 8002ee2:	3738      	adds	r7, #56	@ 0x38
 8002ee4:	46bd      	mov	sp, r7
 8002ee6:	bd80      	pop	{r7, pc}
 8002ee8:	e000ed04 	.word	0xe000ed04

08002eec <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8002eec:	b580      	push	{r7, lr}
 8002eee:	b090      	sub	sp, #64	@ 0x40
 8002ef0:	af00      	add	r7, sp, #0
 8002ef2:	60f8      	str	r0, [r7, #12]
 8002ef4:	60b9      	str	r1, [r7, #8]
 8002ef6:	607a      	str	r2, [r7, #4]
 8002ef8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8002efe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d10b      	bne.n	8002f1c <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8002f04:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002f08:	f383 8811 	msr	BASEPRI, r3
 8002f0c:	f3bf 8f6f 	isb	sy
 8002f10:	f3bf 8f4f 	dsb	sy
 8002f14:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8002f16:	bf00      	nop
 8002f18:	bf00      	nop
 8002f1a:	e7fd      	b.n	8002f18 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002f1c:	68bb      	ldr	r3, [r7, #8]
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d103      	bne.n	8002f2a <xQueueGenericSendFromISR+0x3e>
 8002f22:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002f24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d101      	bne.n	8002f2e <xQueueGenericSendFromISR+0x42>
 8002f2a:	2301      	movs	r3, #1
 8002f2c:	e000      	b.n	8002f30 <xQueueGenericSendFromISR+0x44>
 8002f2e:	2300      	movs	r3, #0
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d10b      	bne.n	8002f4c <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8002f34:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002f38:	f383 8811 	msr	BASEPRI, r3
 8002f3c:	f3bf 8f6f 	isb	sy
 8002f40:	f3bf 8f4f 	dsb	sy
 8002f44:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8002f46:	bf00      	nop
 8002f48:	bf00      	nop
 8002f4a:	e7fd      	b.n	8002f48 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002f4c:	683b      	ldr	r3, [r7, #0]
 8002f4e:	2b02      	cmp	r3, #2
 8002f50:	d103      	bne.n	8002f5a <xQueueGenericSendFromISR+0x6e>
 8002f52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002f54:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002f56:	2b01      	cmp	r3, #1
 8002f58:	d101      	bne.n	8002f5e <xQueueGenericSendFromISR+0x72>
 8002f5a:	2301      	movs	r3, #1
 8002f5c:	e000      	b.n	8002f60 <xQueueGenericSendFromISR+0x74>
 8002f5e:	2300      	movs	r3, #0
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d10b      	bne.n	8002f7c <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8002f64:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002f68:	f383 8811 	msr	BASEPRI, r3
 8002f6c:	f3bf 8f6f 	isb	sy
 8002f70:	f3bf 8f4f 	dsb	sy
 8002f74:	623b      	str	r3, [r7, #32]
}
 8002f76:	bf00      	nop
 8002f78:	bf00      	nop
 8002f7a:	e7fd      	b.n	8002f78 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002f7c:	f001 feb8 	bl	8004cf0 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8002f80:	f3ef 8211 	mrs	r2, BASEPRI
 8002f84:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002f88:	f383 8811 	msr	BASEPRI, r3
 8002f8c:	f3bf 8f6f 	isb	sy
 8002f90:	f3bf 8f4f 	dsb	sy
 8002f94:	61fa      	str	r2, [r7, #28]
 8002f96:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8002f98:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002f9a:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002f9c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002f9e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002fa0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002fa2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002fa4:	429a      	cmp	r2, r3
 8002fa6:	d302      	bcc.n	8002fae <xQueueGenericSendFromISR+0xc2>
 8002fa8:	683b      	ldr	r3, [r7, #0]
 8002faa:	2b02      	cmp	r3, #2
 8002fac:	d12f      	bne.n	800300e <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8002fae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002fb0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002fb4:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002fb8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002fba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002fbc:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002fbe:	683a      	ldr	r2, [r7, #0]
 8002fc0:	68b9      	ldr	r1, [r7, #8]
 8002fc2:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8002fc4:	f000 f912 	bl	80031ec <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8002fc8:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8002fcc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fd0:	d112      	bne.n	8002ff8 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002fd2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002fd4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d016      	beq.n	8003008 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002fda:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002fdc:	3324      	adds	r3, #36	@ 0x24
 8002fde:	4618      	mov	r0, r3
 8002fe0:	f000 fed8 	bl	8003d94 <xTaskRemoveFromEventList>
 8002fe4:	4603      	mov	r3, r0
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d00e      	beq.n	8003008 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d00b      	beq.n	8003008 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	2201      	movs	r2, #1
 8002ff4:	601a      	str	r2, [r3, #0]
 8002ff6:	e007      	b.n	8003008 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8002ff8:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8002ffc:	3301      	adds	r3, #1
 8002ffe:	b2db      	uxtb	r3, r3
 8003000:	b25a      	sxtb	r2, r3
 8003002:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003004:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8003008:	2301      	movs	r3, #1
 800300a:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 800300c:	e001      	b.n	8003012 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800300e:	2300      	movs	r3, #0
 8003010:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003012:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003014:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003016:	697b      	ldr	r3, [r7, #20]
 8003018:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800301c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800301e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8003020:	4618      	mov	r0, r3
 8003022:	3740      	adds	r7, #64	@ 0x40
 8003024:	46bd      	mov	sp, r7
 8003026:	bd80      	pop	{r7, pc}

08003028 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8003028:	b580      	push	{r7, lr}
 800302a:	b08c      	sub	sp, #48	@ 0x30
 800302c:	af00      	add	r7, sp, #0
 800302e:	60f8      	str	r0, [r7, #12]
 8003030:	60b9      	str	r1, [r7, #8]
 8003032:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8003034:	2300      	movs	r3, #0
 8003036:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800303c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800303e:	2b00      	cmp	r3, #0
 8003040:	d10b      	bne.n	800305a <xQueueReceive+0x32>
	__asm volatile
 8003042:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003046:	f383 8811 	msr	BASEPRI, r3
 800304a:	f3bf 8f6f 	isb	sy
 800304e:	f3bf 8f4f 	dsb	sy
 8003052:	623b      	str	r3, [r7, #32]
}
 8003054:	bf00      	nop
 8003056:	bf00      	nop
 8003058:	e7fd      	b.n	8003056 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800305a:	68bb      	ldr	r3, [r7, #8]
 800305c:	2b00      	cmp	r3, #0
 800305e:	d103      	bne.n	8003068 <xQueueReceive+0x40>
 8003060:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003062:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003064:	2b00      	cmp	r3, #0
 8003066:	d101      	bne.n	800306c <xQueueReceive+0x44>
 8003068:	2301      	movs	r3, #1
 800306a:	e000      	b.n	800306e <xQueueReceive+0x46>
 800306c:	2300      	movs	r3, #0
 800306e:	2b00      	cmp	r3, #0
 8003070:	d10b      	bne.n	800308a <xQueueReceive+0x62>
	__asm volatile
 8003072:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003076:	f383 8811 	msr	BASEPRI, r3
 800307a:	f3bf 8f6f 	isb	sy
 800307e:	f3bf 8f4f 	dsb	sy
 8003082:	61fb      	str	r3, [r7, #28]
}
 8003084:	bf00      	nop
 8003086:	bf00      	nop
 8003088:	e7fd      	b.n	8003086 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800308a:	f001 f843 	bl	8004114 <xTaskGetSchedulerState>
 800308e:	4603      	mov	r3, r0
 8003090:	2b00      	cmp	r3, #0
 8003092:	d102      	bne.n	800309a <xQueueReceive+0x72>
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	2b00      	cmp	r3, #0
 8003098:	d101      	bne.n	800309e <xQueueReceive+0x76>
 800309a:	2301      	movs	r3, #1
 800309c:	e000      	b.n	80030a0 <xQueueReceive+0x78>
 800309e:	2300      	movs	r3, #0
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d10b      	bne.n	80030bc <xQueueReceive+0x94>
	__asm volatile
 80030a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80030a8:	f383 8811 	msr	BASEPRI, r3
 80030ac:	f3bf 8f6f 	isb	sy
 80030b0:	f3bf 8f4f 	dsb	sy
 80030b4:	61bb      	str	r3, [r7, #24]
}
 80030b6:	bf00      	nop
 80030b8:	bf00      	nop
 80030ba:	e7fd      	b.n	80030b8 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80030bc:	f001 fd56 	bl	8004b6c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80030c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80030c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80030c4:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80030c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d01f      	beq.n	800310c <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80030cc:	68b9      	ldr	r1, [r7, #8]
 80030ce:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80030d0:	f000 f8f6 	bl	80032c0 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80030d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030d6:	1e5a      	subs	r2, r3, #1
 80030d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80030da:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80030dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80030de:	691b      	ldr	r3, [r3, #16]
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d00f      	beq.n	8003104 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80030e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80030e6:	3310      	adds	r3, #16
 80030e8:	4618      	mov	r0, r3
 80030ea:	f000 fe53 	bl	8003d94 <xTaskRemoveFromEventList>
 80030ee:	4603      	mov	r3, r0
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d007      	beq.n	8003104 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80030f4:	4b3c      	ldr	r3, [pc, #240]	@ (80031e8 <xQueueReceive+0x1c0>)
 80030f6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80030fa:	601a      	str	r2, [r3, #0]
 80030fc:	f3bf 8f4f 	dsb	sy
 8003100:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003104:	f001 fd62 	bl	8004bcc <vPortExitCritical>
				return pdPASS;
 8003108:	2301      	movs	r3, #1
 800310a:	e069      	b.n	80031e0 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	2b00      	cmp	r3, #0
 8003110:	d103      	bne.n	800311a <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003112:	f001 fd5b 	bl	8004bcc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003116:	2300      	movs	r3, #0
 8003118:	e062      	b.n	80031e0 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800311a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800311c:	2b00      	cmp	r3, #0
 800311e:	d106      	bne.n	800312e <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003120:	f107 0310 	add.w	r3, r7, #16
 8003124:	4618      	mov	r0, r3
 8003126:	f000 fe99 	bl	8003e5c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800312a:	2301      	movs	r3, #1
 800312c:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800312e:	f001 fd4d 	bl	8004bcc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003132:	f000 fc0b 	bl	800394c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003136:	f001 fd19 	bl	8004b6c <vPortEnterCritical>
 800313a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800313c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003140:	b25b      	sxtb	r3, r3
 8003142:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003146:	d103      	bne.n	8003150 <xQueueReceive+0x128>
 8003148:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800314a:	2200      	movs	r2, #0
 800314c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003150:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003152:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003156:	b25b      	sxtb	r3, r3
 8003158:	f1b3 3fff 	cmp.w	r3, #4294967295
 800315c:	d103      	bne.n	8003166 <xQueueReceive+0x13e>
 800315e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003160:	2200      	movs	r2, #0
 8003162:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003166:	f001 fd31 	bl	8004bcc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800316a:	1d3a      	adds	r2, r7, #4
 800316c:	f107 0310 	add.w	r3, r7, #16
 8003170:	4611      	mov	r1, r2
 8003172:	4618      	mov	r0, r3
 8003174:	f000 fe88 	bl	8003e88 <xTaskCheckForTimeOut>
 8003178:	4603      	mov	r3, r0
 800317a:	2b00      	cmp	r3, #0
 800317c:	d123      	bne.n	80031c6 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800317e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003180:	f000 f916 	bl	80033b0 <prvIsQueueEmpty>
 8003184:	4603      	mov	r3, r0
 8003186:	2b00      	cmp	r3, #0
 8003188:	d017      	beq.n	80031ba <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800318a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800318c:	3324      	adds	r3, #36	@ 0x24
 800318e:	687a      	ldr	r2, [r7, #4]
 8003190:	4611      	mov	r1, r2
 8003192:	4618      	mov	r0, r3
 8003194:	f000 fdac 	bl	8003cf0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003198:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800319a:	f000 f8b7 	bl	800330c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800319e:	f000 fbe3 	bl	8003968 <xTaskResumeAll>
 80031a2:	4603      	mov	r3, r0
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d189      	bne.n	80030bc <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 80031a8:	4b0f      	ldr	r3, [pc, #60]	@ (80031e8 <xQueueReceive+0x1c0>)
 80031aa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80031ae:	601a      	str	r2, [r3, #0]
 80031b0:	f3bf 8f4f 	dsb	sy
 80031b4:	f3bf 8f6f 	isb	sy
 80031b8:	e780      	b.n	80030bc <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80031ba:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80031bc:	f000 f8a6 	bl	800330c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80031c0:	f000 fbd2 	bl	8003968 <xTaskResumeAll>
 80031c4:	e77a      	b.n	80030bc <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80031c6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80031c8:	f000 f8a0 	bl	800330c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80031cc:	f000 fbcc 	bl	8003968 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80031d0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80031d2:	f000 f8ed 	bl	80033b0 <prvIsQueueEmpty>
 80031d6:	4603      	mov	r3, r0
 80031d8:	2b00      	cmp	r3, #0
 80031da:	f43f af6f 	beq.w	80030bc <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80031de:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80031e0:	4618      	mov	r0, r3
 80031e2:	3730      	adds	r7, #48	@ 0x30
 80031e4:	46bd      	mov	sp, r7
 80031e6:	bd80      	pop	{r7, pc}
 80031e8:	e000ed04 	.word	0xe000ed04

080031ec <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80031ec:	b580      	push	{r7, lr}
 80031ee:	b086      	sub	sp, #24
 80031f0:	af00      	add	r7, sp, #0
 80031f2:	60f8      	str	r0, [r7, #12]
 80031f4:	60b9      	str	r1, [r7, #8]
 80031f6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80031f8:	2300      	movs	r3, #0
 80031fa:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003200:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003206:	2b00      	cmp	r3, #0
 8003208:	d10d      	bne.n	8003226 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	2b00      	cmp	r3, #0
 8003210:	d14d      	bne.n	80032ae <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	689b      	ldr	r3, [r3, #8]
 8003216:	4618      	mov	r0, r3
 8003218:	f000 ff9a 	bl	8004150 <xTaskPriorityDisinherit>
 800321c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	2200      	movs	r2, #0
 8003222:	609a      	str	r2, [r3, #8]
 8003224:	e043      	b.n	80032ae <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	2b00      	cmp	r3, #0
 800322a:	d119      	bne.n	8003260 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	6858      	ldr	r0, [r3, #4]
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003234:	461a      	mov	r2, r3
 8003236:	68b9      	ldr	r1, [r7, #8]
 8003238:	f001 ffb2 	bl	80051a0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	685a      	ldr	r2, [r3, #4]
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003244:	441a      	add	r2, r3
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	685a      	ldr	r2, [r3, #4]
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	689b      	ldr	r3, [r3, #8]
 8003252:	429a      	cmp	r2, r3
 8003254:	d32b      	bcc.n	80032ae <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	681a      	ldr	r2, [r3, #0]
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	605a      	str	r2, [r3, #4]
 800325e:	e026      	b.n	80032ae <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	68d8      	ldr	r0, [r3, #12]
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003268:	461a      	mov	r2, r3
 800326a:	68b9      	ldr	r1, [r7, #8]
 800326c:	f001 ff98 	bl	80051a0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	68da      	ldr	r2, [r3, #12]
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003278:	425b      	negs	r3, r3
 800327a:	441a      	add	r2, r3
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	68da      	ldr	r2, [r3, #12]
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	429a      	cmp	r2, r3
 800328a:	d207      	bcs.n	800329c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	689a      	ldr	r2, [r3, #8]
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003294:	425b      	negs	r3, r3
 8003296:	441a      	add	r2, r3
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	2b02      	cmp	r3, #2
 80032a0:	d105      	bne.n	80032ae <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80032a2:	693b      	ldr	r3, [r7, #16]
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d002      	beq.n	80032ae <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80032a8:	693b      	ldr	r3, [r7, #16]
 80032aa:	3b01      	subs	r3, #1
 80032ac:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80032ae:	693b      	ldr	r3, [r7, #16]
 80032b0:	1c5a      	adds	r2, r3, #1
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 80032b6:	697b      	ldr	r3, [r7, #20]
}
 80032b8:	4618      	mov	r0, r3
 80032ba:	3718      	adds	r7, #24
 80032bc:	46bd      	mov	sp, r7
 80032be:	bd80      	pop	{r7, pc}

080032c0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80032c0:	b580      	push	{r7, lr}
 80032c2:	b082      	sub	sp, #8
 80032c4:	af00      	add	r7, sp, #0
 80032c6:	6078      	str	r0, [r7, #4]
 80032c8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d018      	beq.n	8003304 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	68da      	ldr	r2, [r3, #12]
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032da:	441a      	add	r2, r3
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	68da      	ldr	r2, [r3, #12]
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	689b      	ldr	r3, [r3, #8]
 80032e8:	429a      	cmp	r2, r3
 80032ea:	d303      	bcc.n	80032f4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681a      	ldr	r2, [r3, #0]
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	68d9      	ldr	r1, [r3, #12]
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032fc:	461a      	mov	r2, r3
 80032fe:	6838      	ldr	r0, [r7, #0]
 8003300:	f001 ff4e 	bl	80051a0 <memcpy>
	}
}
 8003304:	bf00      	nop
 8003306:	3708      	adds	r7, #8
 8003308:	46bd      	mov	sp, r7
 800330a:	bd80      	pop	{r7, pc}

0800330c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800330c:	b580      	push	{r7, lr}
 800330e:	b084      	sub	sp, #16
 8003310:	af00      	add	r7, sp, #0
 8003312:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8003314:	f001 fc2a 	bl	8004b6c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800331e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003320:	e011      	b.n	8003346 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003326:	2b00      	cmp	r3, #0
 8003328:	d012      	beq.n	8003350 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	3324      	adds	r3, #36	@ 0x24
 800332e:	4618      	mov	r0, r3
 8003330:	f000 fd30 	bl	8003d94 <xTaskRemoveFromEventList>
 8003334:	4603      	mov	r3, r0
 8003336:	2b00      	cmp	r3, #0
 8003338:	d001      	beq.n	800333e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800333a:	f000 fe09 	bl	8003f50 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800333e:	7bfb      	ldrb	r3, [r7, #15]
 8003340:	3b01      	subs	r3, #1
 8003342:	b2db      	uxtb	r3, r3
 8003344:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003346:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800334a:	2b00      	cmp	r3, #0
 800334c:	dce9      	bgt.n	8003322 <prvUnlockQueue+0x16>
 800334e:	e000      	b.n	8003352 <prvUnlockQueue+0x46>
					break;
 8003350:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	22ff      	movs	r2, #255	@ 0xff
 8003356:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800335a:	f001 fc37 	bl	8004bcc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800335e:	f001 fc05 	bl	8004b6c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003368:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800336a:	e011      	b.n	8003390 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	691b      	ldr	r3, [r3, #16]
 8003370:	2b00      	cmp	r3, #0
 8003372:	d012      	beq.n	800339a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	3310      	adds	r3, #16
 8003378:	4618      	mov	r0, r3
 800337a:	f000 fd0b 	bl	8003d94 <xTaskRemoveFromEventList>
 800337e:	4603      	mov	r3, r0
 8003380:	2b00      	cmp	r3, #0
 8003382:	d001      	beq.n	8003388 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8003384:	f000 fde4 	bl	8003f50 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8003388:	7bbb      	ldrb	r3, [r7, #14]
 800338a:	3b01      	subs	r3, #1
 800338c:	b2db      	uxtb	r3, r3
 800338e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003390:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003394:	2b00      	cmp	r3, #0
 8003396:	dce9      	bgt.n	800336c <prvUnlockQueue+0x60>
 8003398:	e000      	b.n	800339c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800339a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	22ff      	movs	r2, #255	@ 0xff
 80033a0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 80033a4:	f001 fc12 	bl	8004bcc <vPortExitCritical>
}
 80033a8:	bf00      	nop
 80033aa:	3710      	adds	r7, #16
 80033ac:	46bd      	mov	sp, r7
 80033ae:	bd80      	pop	{r7, pc}

080033b0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80033b0:	b580      	push	{r7, lr}
 80033b2:	b084      	sub	sp, #16
 80033b4:	af00      	add	r7, sp, #0
 80033b6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80033b8:	f001 fbd8 	bl	8004b6c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d102      	bne.n	80033ca <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80033c4:	2301      	movs	r3, #1
 80033c6:	60fb      	str	r3, [r7, #12]
 80033c8:	e001      	b.n	80033ce <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80033ca:	2300      	movs	r3, #0
 80033cc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80033ce:	f001 fbfd 	bl	8004bcc <vPortExitCritical>

	return xReturn;
 80033d2:	68fb      	ldr	r3, [r7, #12]
}
 80033d4:	4618      	mov	r0, r3
 80033d6:	3710      	adds	r7, #16
 80033d8:	46bd      	mov	sp, r7
 80033da:	bd80      	pop	{r7, pc}

080033dc <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80033dc:	b580      	push	{r7, lr}
 80033de:	b084      	sub	sp, #16
 80033e0:	af00      	add	r7, sp, #0
 80033e2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80033e4:	f001 fbc2 	bl	8004b6c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80033f0:	429a      	cmp	r2, r3
 80033f2:	d102      	bne.n	80033fa <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80033f4:	2301      	movs	r3, #1
 80033f6:	60fb      	str	r3, [r7, #12]
 80033f8:	e001      	b.n	80033fe <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80033fa:	2300      	movs	r3, #0
 80033fc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80033fe:	f001 fbe5 	bl	8004bcc <vPortExitCritical>

	return xReturn;
 8003402:	68fb      	ldr	r3, [r7, #12]
}
 8003404:	4618      	mov	r0, r3
 8003406:	3710      	adds	r7, #16
 8003408:	46bd      	mov	sp, r7
 800340a:	bd80      	pop	{r7, pc}

0800340c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800340c:	b480      	push	{r7}
 800340e:	b085      	sub	sp, #20
 8003410:	af00      	add	r7, sp, #0
 8003412:	6078      	str	r0, [r7, #4]
 8003414:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003416:	2300      	movs	r3, #0
 8003418:	60fb      	str	r3, [r7, #12]
 800341a:	e014      	b.n	8003446 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800341c:	4a0e      	ldr	r2, [pc, #56]	@ (8003458 <vQueueAddToRegistry+0x4c>)
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003424:	2b00      	cmp	r3, #0
 8003426:	d10b      	bne.n	8003440 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8003428:	490b      	ldr	r1, [pc, #44]	@ (8003458 <vQueueAddToRegistry+0x4c>)
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	683a      	ldr	r2, [r7, #0]
 800342e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8003432:	4a09      	ldr	r2, [pc, #36]	@ (8003458 <vQueueAddToRegistry+0x4c>)
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	00db      	lsls	r3, r3, #3
 8003438:	4413      	add	r3, r2
 800343a:	687a      	ldr	r2, [r7, #4]
 800343c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800343e:	e006      	b.n	800344e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	3301      	adds	r3, #1
 8003444:	60fb      	str	r3, [r7, #12]
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	2b07      	cmp	r3, #7
 800344a:	d9e7      	bls.n	800341c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800344c:	bf00      	nop
 800344e:	bf00      	nop
 8003450:	3714      	adds	r7, #20
 8003452:	46bd      	mov	sp, r7
 8003454:	bc80      	pop	{r7}
 8003456:	4770      	bx	lr
 8003458:	20000780 	.word	0x20000780

0800345c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800345c:	b580      	push	{r7, lr}
 800345e:	b086      	sub	sp, #24
 8003460:	af00      	add	r7, sp, #0
 8003462:	60f8      	str	r0, [r7, #12]
 8003464:	60b9      	str	r1, [r7, #8]
 8003466:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800346c:	f001 fb7e 	bl	8004b6c <vPortEnterCritical>
 8003470:	697b      	ldr	r3, [r7, #20]
 8003472:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003476:	b25b      	sxtb	r3, r3
 8003478:	f1b3 3fff 	cmp.w	r3, #4294967295
 800347c:	d103      	bne.n	8003486 <vQueueWaitForMessageRestricted+0x2a>
 800347e:	697b      	ldr	r3, [r7, #20]
 8003480:	2200      	movs	r2, #0
 8003482:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003486:	697b      	ldr	r3, [r7, #20]
 8003488:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800348c:	b25b      	sxtb	r3, r3
 800348e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003492:	d103      	bne.n	800349c <vQueueWaitForMessageRestricted+0x40>
 8003494:	697b      	ldr	r3, [r7, #20]
 8003496:	2200      	movs	r2, #0
 8003498:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800349c:	f001 fb96 	bl	8004bcc <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80034a0:	697b      	ldr	r3, [r7, #20]
 80034a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d106      	bne.n	80034b6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80034a8:	697b      	ldr	r3, [r7, #20]
 80034aa:	3324      	adds	r3, #36	@ 0x24
 80034ac:	687a      	ldr	r2, [r7, #4]
 80034ae:	68b9      	ldr	r1, [r7, #8]
 80034b0:	4618      	mov	r0, r3
 80034b2:	f000 fc43 	bl	8003d3c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80034b6:	6978      	ldr	r0, [r7, #20]
 80034b8:	f7ff ff28 	bl	800330c <prvUnlockQueue>
	}
 80034bc:	bf00      	nop
 80034be:	3718      	adds	r7, #24
 80034c0:	46bd      	mov	sp, r7
 80034c2:	bd80      	pop	{r7, pc}

080034c4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80034c4:	b580      	push	{r7, lr}
 80034c6:	b08e      	sub	sp, #56	@ 0x38
 80034c8:	af04      	add	r7, sp, #16
 80034ca:	60f8      	str	r0, [r7, #12]
 80034cc:	60b9      	str	r1, [r7, #8]
 80034ce:	607a      	str	r2, [r7, #4]
 80034d0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80034d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d10b      	bne.n	80034f0 <xTaskCreateStatic+0x2c>
	__asm volatile
 80034d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80034dc:	f383 8811 	msr	BASEPRI, r3
 80034e0:	f3bf 8f6f 	isb	sy
 80034e4:	f3bf 8f4f 	dsb	sy
 80034e8:	623b      	str	r3, [r7, #32]
}
 80034ea:	bf00      	nop
 80034ec:	bf00      	nop
 80034ee:	e7fd      	b.n	80034ec <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80034f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d10b      	bne.n	800350e <xTaskCreateStatic+0x4a>
	__asm volatile
 80034f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80034fa:	f383 8811 	msr	BASEPRI, r3
 80034fe:	f3bf 8f6f 	isb	sy
 8003502:	f3bf 8f4f 	dsb	sy
 8003506:	61fb      	str	r3, [r7, #28]
}
 8003508:	bf00      	nop
 800350a:	bf00      	nop
 800350c:	e7fd      	b.n	800350a <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800350e:	235c      	movs	r3, #92	@ 0x5c
 8003510:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003512:	693b      	ldr	r3, [r7, #16]
 8003514:	2b5c      	cmp	r3, #92	@ 0x5c
 8003516:	d00b      	beq.n	8003530 <xTaskCreateStatic+0x6c>
	__asm volatile
 8003518:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800351c:	f383 8811 	msr	BASEPRI, r3
 8003520:	f3bf 8f6f 	isb	sy
 8003524:	f3bf 8f4f 	dsb	sy
 8003528:	61bb      	str	r3, [r7, #24]
}
 800352a:	bf00      	nop
 800352c:	bf00      	nop
 800352e:	e7fd      	b.n	800352c <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8003530:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003532:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003534:	2b00      	cmp	r3, #0
 8003536:	d01e      	beq.n	8003576 <xTaskCreateStatic+0xb2>
 8003538:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800353a:	2b00      	cmp	r3, #0
 800353c:	d01b      	beq.n	8003576 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800353e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003540:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003542:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003544:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003546:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003548:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800354a:	2202      	movs	r2, #2
 800354c:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003550:	2300      	movs	r3, #0
 8003552:	9303      	str	r3, [sp, #12]
 8003554:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003556:	9302      	str	r3, [sp, #8]
 8003558:	f107 0314 	add.w	r3, r7, #20
 800355c:	9301      	str	r3, [sp, #4]
 800355e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003560:	9300      	str	r3, [sp, #0]
 8003562:	683b      	ldr	r3, [r7, #0]
 8003564:	687a      	ldr	r2, [r7, #4]
 8003566:	68b9      	ldr	r1, [r7, #8]
 8003568:	68f8      	ldr	r0, [r7, #12]
 800356a:	f000 f850 	bl	800360e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800356e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8003570:	f000 f8de 	bl	8003730 <prvAddNewTaskToReadyList>
 8003574:	e001      	b.n	800357a <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8003576:	2300      	movs	r3, #0
 8003578:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800357a:	697b      	ldr	r3, [r7, #20]
	}
 800357c:	4618      	mov	r0, r3
 800357e:	3728      	adds	r7, #40	@ 0x28
 8003580:	46bd      	mov	sp, r7
 8003582:	bd80      	pop	{r7, pc}

08003584 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003584:	b580      	push	{r7, lr}
 8003586:	b08c      	sub	sp, #48	@ 0x30
 8003588:	af04      	add	r7, sp, #16
 800358a:	60f8      	str	r0, [r7, #12]
 800358c:	60b9      	str	r1, [r7, #8]
 800358e:	603b      	str	r3, [r7, #0]
 8003590:	4613      	mov	r3, r2
 8003592:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8003594:	88fb      	ldrh	r3, [r7, #6]
 8003596:	009b      	lsls	r3, r3, #2
 8003598:	4618      	mov	r0, r3
 800359a:	f001 fbe9 	bl	8004d70 <pvPortMalloc>
 800359e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80035a0:	697b      	ldr	r3, [r7, #20]
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d00e      	beq.n	80035c4 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80035a6:	205c      	movs	r0, #92	@ 0x5c
 80035a8:	f001 fbe2 	bl	8004d70 <pvPortMalloc>
 80035ac:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80035ae:	69fb      	ldr	r3, [r7, #28]
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d003      	beq.n	80035bc <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80035b4:	69fb      	ldr	r3, [r7, #28]
 80035b6:	697a      	ldr	r2, [r7, #20]
 80035b8:	631a      	str	r2, [r3, #48]	@ 0x30
 80035ba:	e005      	b.n	80035c8 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80035bc:	6978      	ldr	r0, [r7, #20]
 80035be:	f001 fca5 	bl	8004f0c <vPortFree>
 80035c2:	e001      	b.n	80035c8 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80035c4:	2300      	movs	r3, #0
 80035c6:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80035c8:	69fb      	ldr	r3, [r7, #28]
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d017      	beq.n	80035fe <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80035ce:	69fb      	ldr	r3, [r7, #28]
 80035d0:	2200      	movs	r2, #0
 80035d2:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80035d6:	88fa      	ldrh	r2, [r7, #6]
 80035d8:	2300      	movs	r3, #0
 80035da:	9303      	str	r3, [sp, #12]
 80035dc:	69fb      	ldr	r3, [r7, #28]
 80035de:	9302      	str	r3, [sp, #8]
 80035e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80035e2:	9301      	str	r3, [sp, #4]
 80035e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80035e6:	9300      	str	r3, [sp, #0]
 80035e8:	683b      	ldr	r3, [r7, #0]
 80035ea:	68b9      	ldr	r1, [r7, #8]
 80035ec:	68f8      	ldr	r0, [r7, #12]
 80035ee:	f000 f80e 	bl	800360e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80035f2:	69f8      	ldr	r0, [r7, #28]
 80035f4:	f000 f89c 	bl	8003730 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80035f8:	2301      	movs	r3, #1
 80035fa:	61bb      	str	r3, [r7, #24]
 80035fc:	e002      	b.n	8003604 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80035fe:	f04f 33ff 	mov.w	r3, #4294967295
 8003602:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003604:	69bb      	ldr	r3, [r7, #24]
	}
 8003606:	4618      	mov	r0, r3
 8003608:	3720      	adds	r7, #32
 800360a:	46bd      	mov	sp, r7
 800360c:	bd80      	pop	{r7, pc}

0800360e <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800360e:	b580      	push	{r7, lr}
 8003610:	b088      	sub	sp, #32
 8003612:	af00      	add	r7, sp, #0
 8003614:	60f8      	str	r0, [r7, #12]
 8003616:	60b9      	str	r1, [r7, #8]
 8003618:	607a      	str	r2, [r7, #4]
 800361a:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800361c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800361e:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	009b      	lsls	r3, r3, #2
 8003624:	461a      	mov	r2, r3
 8003626:	21a5      	movs	r1, #165	@ 0xa5
 8003628:	f001 fd8e 	bl	8005148 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800362c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800362e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003636:	3b01      	subs	r3, #1
 8003638:	009b      	lsls	r3, r3, #2
 800363a:	4413      	add	r3, r2
 800363c:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800363e:	69bb      	ldr	r3, [r7, #24]
 8003640:	f023 0307 	bic.w	r3, r3, #7
 8003644:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003646:	69bb      	ldr	r3, [r7, #24]
 8003648:	f003 0307 	and.w	r3, r3, #7
 800364c:	2b00      	cmp	r3, #0
 800364e:	d00b      	beq.n	8003668 <prvInitialiseNewTask+0x5a>
	__asm volatile
 8003650:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003654:	f383 8811 	msr	BASEPRI, r3
 8003658:	f3bf 8f6f 	isb	sy
 800365c:	f3bf 8f4f 	dsb	sy
 8003660:	617b      	str	r3, [r7, #20]
}
 8003662:	bf00      	nop
 8003664:	bf00      	nop
 8003666:	e7fd      	b.n	8003664 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8003668:	68bb      	ldr	r3, [r7, #8]
 800366a:	2b00      	cmp	r3, #0
 800366c:	d01f      	beq.n	80036ae <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800366e:	2300      	movs	r3, #0
 8003670:	61fb      	str	r3, [r7, #28]
 8003672:	e012      	b.n	800369a <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003674:	68ba      	ldr	r2, [r7, #8]
 8003676:	69fb      	ldr	r3, [r7, #28]
 8003678:	4413      	add	r3, r2
 800367a:	7819      	ldrb	r1, [r3, #0]
 800367c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800367e:	69fb      	ldr	r3, [r7, #28]
 8003680:	4413      	add	r3, r2
 8003682:	3334      	adds	r3, #52	@ 0x34
 8003684:	460a      	mov	r2, r1
 8003686:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8003688:	68ba      	ldr	r2, [r7, #8]
 800368a:	69fb      	ldr	r3, [r7, #28]
 800368c:	4413      	add	r3, r2
 800368e:	781b      	ldrb	r3, [r3, #0]
 8003690:	2b00      	cmp	r3, #0
 8003692:	d006      	beq.n	80036a2 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003694:	69fb      	ldr	r3, [r7, #28]
 8003696:	3301      	adds	r3, #1
 8003698:	61fb      	str	r3, [r7, #28]
 800369a:	69fb      	ldr	r3, [r7, #28]
 800369c:	2b0f      	cmp	r3, #15
 800369e:	d9e9      	bls.n	8003674 <prvInitialiseNewTask+0x66>
 80036a0:	e000      	b.n	80036a4 <prvInitialiseNewTask+0x96>
			{
				break;
 80036a2:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80036a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80036a6:	2200      	movs	r2, #0
 80036a8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80036ac:	e003      	b.n	80036b6 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80036ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80036b0:	2200      	movs	r2, #0
 80036b2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80036b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80036b8:	2b37      	cmp	r3, #55	@ 0x37
 80036ba:	d901      	bls.n	80036c0 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80036bc:	2337      	movs	r3, #55	@ 0x37
 80036be:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80036c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80036c2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80036c4:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80036c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80036c8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80036ca:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80036cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80036ce:	2200      	movs	r2, #0
 80036d0:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80036d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80036d4:	3304      	adds	r3, #4
 80036d6:	4618      	mov	r0, r3
 80036d8:	f7ff f96b 	bl	80029b2 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80036dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80036de:	3318      	adds	r3, #24
 80036e0:	4618      	mov	r0, r3
 80036e2:	f7ff f966 	bl	80029b2 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80036e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80036e8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80036ea:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80036ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80036ee:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80036f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80036f4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80036f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80036f8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80036fa:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80036fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80036fe:	2200      	movs	r2, #0
 8003700:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003702:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003704:	2200      	movs	r2, #0
 8003706:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800370a:	683a      	ldr	r2, [r7, #0]
 800370c:	68f9      	ldr	r1, [r7, #12]
 800370e:	69b8      	ldr	r0, [r7, #24]
 8003710:	f001 f93a 	bl	8004988 <pxPortInitialiseStack>
 8003714:	4602      	mov	r2, r0
 8003716:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003718:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800371a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800371c:	2b00      	cmp	r3, #0
 800371e:	d002      	beq.n	8003726 <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003720:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003722:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003724:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003726:	bf00      	nop
 8003728:	3720      	adds	r7, #32
 800372a:	46bd      	mov	sp, r7
 800372c:	bd80      	pop	{r7, pc}
	...

08003730 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003730:	b580      	push	{r7, lr}
 8003732:	b082      	sub	sp, #8
 8003734:	af00      	add	r7, sp, #0
 8003736:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003738:	f001 fa18 	bl	8004b6c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800373c:	4b2d      	ldr	r3, [pc, #180]	@ (80037f4 <prvAddNewTaskToReadyList+0xc4>)
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	3301      	adds	r3, #1
 8003742:	4a2c      	ldr	r2, [pc, #176]	@ (80037f4 <prvAddNewTaskToReadyList+0xc4>)
 8003744:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8003746:	4b2c      	ldr	r3, [pc, #176]	@ (80037f8 <prvAddNewTaskToReadyList+0xc8>)
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	2b00      	cmp	r3, #0
 800374c:	d109      	bne.n	8003762 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800374e:	4a2a      	ldr	r2, [pc, #168]	@ (80037f8 <prvAddNewTaskToReadyList+0xc8>)
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003754:	4b27      	ldr	r3, [pc, #156]	@ (80037f4 <prvAddNewTaskToReadyList+0xc4>)
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	2b01      	cmp	r3, #1
 800375a:	d110      	bne.n	800377e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800375c:	f000 fc1c 	bl	8003f98 <prvInitialiseTaskLists>
 8003760:	e00d      	b.n	800377e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8003762:	4b26      	ldr	r3, [pc, #152]	@ (80037fc <prvAddNewTaskToReadyList+0xcc>)
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	2b00      	cmp	r3, #0
 8003768:	d109      	bne.n	800377e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800376a:	4b23      	ldr	r3, [pc, #140]	@ (80037f8 <prvAddNewTaskToReadyList+0xc8>)
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003774:	429a      	cmp	r2, r3
 8003776:	d802      	bhi.n	800377e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003778:	4a1f      	ldr	r2, [pc, #124]	@ (80037f8 <prvAddNewTaskToReadyList+0xc8>)
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800377e:	4b20      	ldr	r3, [pc, #128]	@ (8003800 <prvAddNewTaskToReadyList+0xd0>)
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	3301      	adds	r3, #1
 8003784:	4a1e      	ldr	r2, [pc, #120]	@ (8003800 <prvAddNewTaskToReadyList+0xd0>)
 8003786:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8003788:	4b1d      	ldr	r3, [pc, #116]	@ (8003800 <prvAddNewTaskToReadyList+0xd0>)
 800378a:	681a      	ldr	r2, [r3, #0]
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003794:	4b1b      	ldr	r3, [pc, #108]	@ (8003804 <prvAddNewTaskToReadyList+0xd4>)
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	429a      	cmp	r2, r3
 800379a:	d903      	bls.n	80037a4 <prvAddNewTaskToReadyList+0x74>
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037a0:	4a18      	ldr	r2, [pc, #96]	@ (8003804 <prvAddNewTaskToReadyList+0xd4>)
 80037a2:	6013      	str	r3, [r2, #0]
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80037a8:	4613      	mov	r3, r2
 80037aa:	009b      	lsls	r3, r3, #2
 80037ac:	4413      	add	r3, r2
 80037ae:	009b      	lsls	r3, r3, #2
 80037b0:	4a15      	ldr	r2, [pc, #84]	@ (8003808 <prvAddNewTaskToReadyList+0xd8>)
 80037b2:	441a      	add	r2, r3
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	3304      	adds	r3, #4
 80037b8:	4619      	mov	r1, r3
 80037ba:	4610      	mov	r0, r2
 80037bc:	f7ff f905 	bl	80029ca <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80037c0:	f001 fa04 	bl	8004bcc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80037c4:	4b0d      	ldr	r3, [pc, #52]	@ (80037fc <prvAddNewTaskToReadyList+0xcc>)
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d00e      	beq.n	80037ea <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80037cc:	4b0a      	ldr	r3, [pc, #40]	@ (80037f8 <prvAddNewTaskToReadyList+0xc8>)
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037d6:	429a      	cmp	r2, r3
 80037d8:	d207      	bcs.n	80037ea <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80037da:	4b0c      	ldr	r3, [pc, #48]	@ (800380c <prvAddNewTaskToReadyList+0xdc>)
 80037dc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80037e0:	601a      	str	r2, [r3, #0]
 80037e2:	f3bf 8f4f 	dsb	sy
 80037e6:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80037ea:	bf00      	nop
 80037ec:	3708      	adds	r7, #8
 80037ee:	46bd      	mov	sp, r7
 80037f0:	bd80      	pop	{r7, pc}
 80037f2:	bf00      	nop
 80037f4:	20000c94 	.word	0x20000c94
 80037f8:	200007c0 	.word	0x200007c0
 80037fc:	20000ca0 	.word	0x20000ca0
 8003800:	20000cb0 	.word	0x20000cb0
 8003804:	20000c9c 	.word	0x20000c9c
 8003808:	200007c4 	.word	0x200007c4
 800380c:	e000ed04 	.word	0xe000ed04

08003810 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8003810:	b580      	push	{r7, lr}
 8003812:	b084      	sub	sp, #16
 8003814:	af00      	add	r7, sp, #0
 8003816:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003818:	2300      	movs	r3, #0
 800381a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	2b00      	cmp	r3, #0
 8003820:	d018      	beq.n	8003854 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8003822:	4b14      	ldr	r3, [pc, #80]	@ (8003874 <vTaskDelay+0x64>)
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	2b00      	cmp	r3, #0
 8003828:	d00b      	beq.n	8003842 <vTaskDelay+0x32>
	__asm volatile
 800382a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800382e:	f383 8811 	msr	BASEPRI, r3
 8003832:	f3bf 8f6f 	isb	sy
 8003836:	f3bf 8f4f 	dsb	sy
 800383a:	60bb      	str	r3, [r7, #8]
}
 800383c:	bf00      	nop
 800383e:	bf00      	nop
 8003840:	e7fd      	b.n	800383e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8003842:	f000 f883 	bl	800394c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003846:	2100      	movs	r1, #0
 8003848:	6878      	ldr	r0, [r7, #4]
 800384a:	f000 fcf1 	bl	8004230 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800384e:	f000 f88b 	bl	8003968 <xTaskResumeAll>
 8003852:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	2b00      	cmp	r3, #0
 8003858:	d107      	bne.n	800386a <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800385a:	4b07      	ldr	r3, [pc, #28]	@ (8003878 <vTaskDelay+0x68>)
 800385c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003860:	601a      	str	r2, [r3, #0]
 8003862:	f3bf 8f4f 	dsb	sy
 8003866:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800386a:	bf00      	nop
 800386c:	3710      	adds	r7, #16
 800386e:	46bd      	mov	sp, r7
 8003870:	bd80      	pop	{r7, pc}
 8003872:	bf00      	nop
 8003874:	20000cbc 	.word	0x20000cbc
 8003878:	e000ed04 	.word	0xe000ed04

0800387c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800387c:	b580      	push	{r7, lr}
 800387e:	b08a      	sub	sp, #40	@ 0x28
 8003880:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8003882:	2300      	movs	r3, #0
 8003884:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8003886:	2300      	movs	r3, #0
 8003888:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800388a:	463a      	mov	r2, r7
 800388c:	1d39      	adds	r1, r7, #4
 800388e:	f107 0308 	add.w	r3, r7, #8
 8003892:	4618      	mov	r0, r3
 8003894:	f7ff f83c 	bl	8002910 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003898:	6839      	ldr	r1, [r7, #0]
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	68ba      	ldr	r2, [r7, #8]
 800389e:	9202      	str	r2, [sp, #8]
 80038a0:	9301      	str	r3, [sp, #4]
 80038a2:	2300      	movs	r3, #0
 80038a4:	9300      	str	r3, [sp, #0]
 80038a6:	2300      	movs	r3, #0
 80038a8:	460a      	mov	r2, r1
 80038aa:	4922      	ldr	r1, [pc, #136]	@ (8003934 <vTaskStartScheduler+0xb8>)
 80038ac:	4822      	ldr	r0, [pc, #136]	@ (8003938 <vTaskStartScheduler+0xbc>)
 80038ae:	f7ff fe09 	bl	80034c4 <xTaskCreateStatic>
 80038b2:	4603      	mov	r3, r0
 80038b4:	4a21      	ldr	r2, [pc, #132]	@ (800393c <vTaskStartScheduler+0xc0>)
 80038b6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80038b8:	4b20      	ldr	r3, [pc, #128]	@ (800393c <vTaskStartScheduler+0xc0>)
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d002      	beq.n	80038c6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80038c0:	2301      	movs	r3, #1
 80038c2:	617b      	str	r3, [r7, #20]
 80038c4:	e001      	b.n	80038ca <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80038c6:	2300      	movs	r3, #0
 80038c8:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80038ca:	697b      	ldr	r3, [r7, #20]
 80038cc:	2b01      	cmp	r3, #1
 80038ce:	d102      	bne.n	80038d6 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80038d0:	f000 fd02 	bl	80042d8 <xTimerCreateTimerTask>
 80038d4:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80038d6:	697b      	ldr	r3, [r7, #20]
 80038d8:	2b01      	cmp	r3, #1
 80038da:	d116      	bne.n	800390a <vTaskStartScheduler+0x8e>
	__asm volatile
 80038dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80038e0:	f383 8811 	msr	BASEPRI, r3
 80038e4:	f3bf 8f6f 	isb	sy
 80038e8:	f3bf 8f4f 	dsb	sy
 80038ec:	613b      	str	r3, [r7, #16]
}
 80038ee:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80038f0:	4b13      	ldr	r3, [pc, #76]	@ (8003940 <vTaskStartScheduler+0xc4>)
 80038f2:	f04f 32ff 	mov.w	r2, #4294967295
 80038f6:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80038f8:	4b12      	ldr	r3, [pc, #72]	@ (8003944 <vTaskStartScheduler+0xc8>)
 80038fa:	2201      	movs	r2, #1
 80038fc:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80038fe:	4b12      	ldr	r3, [pc, #72]	@ (8003948 <vTaskStartScheduler+0xcc>)
 8003900:	2200      	movs	r2, #0
 8003902:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003904:	f001 f8c0 	bl	8004a88 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003908:	e00f      	b.n	800392a <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800390a:	697b      	ldr	r3, [r7, #20]
 800390c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003910:	d10b      	bne.n	800392a <vTaskStartScheduler+0xae>
	__asm volatile
 8003912:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003916:	f383 8811 	msr	BASEPRI, r3
 800391a:	f3bf 8f6f 	isb	sy
 800391e:	f3bf 8f4f 	dsb	sy
 8003922:	60fb      	str	r3, [r7, #12]
}
 8003924:	bf00      	nop
 8003926:	bf00      	nop
 8003928:	e7fd      	b.n	8003926 <vTaskStartScheduler+0xaa>
}
 800392a:	bf00      	nop
 800392c:	3718      	adds	r7, #24
 800392e:	46bd      	mov	sp, r7
 8003930:	bd80      	pop	{r7, pc}
 8003932:	bf00      	nop
 8003934:	080051e0 	.word	0x080051e0
 8003938:	08003f69 	.word	0x08003f69
 800393c:	20000cb8 	.word	0x20000cb8
 8003940:	20000cb4 	.word	0x20000cb4
 8003944:	20000ca0 	.word	0x20000ca0
 8003948:	20000c98 	.word	0x20000c98

0800394c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800394c:	b480      	push	{r7}
 800394e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8003950:	4b04      	ldr	r3, [pc, #16]	@ (8003964 <vTaskSuspendAll+0x18>)
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	3301      	adds	r3, #1
 8003956:	4a03      	ldr	r2, [pc, #12]	@ (8003964 <vTaskSuspendAll+0x18>)
 8003958:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800395a:	bf00      	nop
 800395c:	46bd      	mov	sp, r7
 800395e:	bc80      	pop	{r7}
 8003960:	4770      	bx	lr
 8003962:	bf00      	nop
 8003964:	20000cbc 	.word	0x20000cbc

08003968 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003968:	b580      	push	{r7, lr}
 800396a:	b084      	sub	sp, #16
 800396c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800396e:	2300      	movs	r3, #0
 8003970:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003972:	2300      	movs	r3, #0
 8003974:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003976:	4b42      	ldr	r3, [pc, #264]	@ (8003a80 <xTaskResumeAll+0x118>)
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	2b00      	cmp	r3, #0
 800397c:	d10b      	bne.n	8003996 <xTaskResumeAll+0x2e>
	__asm volatile
 800397e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003982:	f383 8811 	msr	BASEPRI, r3
 8003986:	f3bf 8f6f 	isb	sy
 800398a:	f3bf 8f4f 	dsb	sy
 800398e:	603b      	str	r3, [r7, #0]
}
 8003990:	bf00      	nop
 8003992:	bf00      	nop
 8003994:	e7fd      	b.n	8003992 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003996:	f001 f8e9 	bl	8004b6c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800399a:	4b39      	ldr	r3, [pc, #228]	@ (8003a80 <xTaskResumeAll+0x118>)
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	3b01      	subs	r3, #1
 80039a0:	4a37      	ldr	r2, [pc, #220]	@ (8003a80 <xTaskResumeAll+0x118>)
 80039a2:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80039a4:	4b36      	ldr	r3, [pc, #216]	@ (8003a80 <xTaskResumeAll+0x118>)
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d162      	bne.n	8003a72 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80039ac:	4b35      	ldr	r3, [pc, #212]	@ (8003a84 <xTaskResumeAll+0x11c>)
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d05e      	beq.n	8003a72 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80039b4:	e02f      	b.n	8003a16 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80039b6:	4b34      	ldr	r3, [pc, #208]	@ (8003a88 <xTaskResumeAll+0x120>)
 80039b8:	68db      	ldr	r3, [r3, #12]
 80039ba:	68db      	ldr	r3, [r3, #12]
 80039bc:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	3318      	adds	r3, #24
 80039c2:	4618      	mov	r0, r3
 80039c4:	f7ff f85c 	bl	8002a80 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	3304      	adds	r3, #4
 80039cc:	4618      	mov	r0, r3
 80039ce:	f7ff f857 	bl	8002a80 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80039d6:	4b2d      	ldr	r3, [pc, #180]	@ (8003a8c <xTaskResumeAll+0x124>)
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	429a      	cmp	r2, r3
 80039dc:	d903      	bls.n	80039e6 <xTaskResumeAll+0x7e>
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80039e2:	4a2a      	ldr	r2, [pc, #168]	@ (8003a8c <xTaskResumeAll+0x124>)
 80039e4:	6013      	str	r3, [r2, #0]
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80039ea:	4613      	mov	r3, r2
 80039ec:	009b      	lsls	r3, r3, #2
 80039ee:	4413      	add	r3, r2
 80039f0:	009b      	lsls	r3, r3, #2
 80039f2:	4a27      	ldr	r2, [pc, #156]	@ (8003a90 <xTaskResumeAll+0x128>)
 80039f4:	441a      	add	r2, r3
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	3304      	adds	r3, #4
 80039fa:	4619      	mov	r1, r3
 80039fc:	4610      	mov	r0, r2
 80039fe:	f7fe ffe4 	bl	80029ca <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003a06:	4b23      	ldr	r3, [pc, #140]	@ (8003a94 <xTaskResumeAll+0x12c>)
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a0c:	429a      	cmp	r2, r3
 8003a0e:	d302      	bcc.n	8003a16 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8003a10:	4b21      	ldr	r3, [pc, #132]	@ (8003a98 <xTaskResumeAll+0x130>)
 8003a12:	2201      	movs	r2, #1
 8003a14:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003a16:	4b1c      	ldr	r3, [pc, #112]	@ (8003a88 <xTaskResumeAll+0x120>)
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d1cb      	bne.n	80039b6 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d001      	beq.n	8003a28 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003a24:	f000 fb56 	bl	80040d4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8003a28:	4b1c      	ldr	r3, [pc, #112]	@ (8003a9c <xTaskResumeAll+0x134>)
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d010      	beq.n	8003a56 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003a34:	f000 f844 	bl	8003ac0 <xTaskIncrementTick>
 8003a38:	4603      	mov	r3, r0
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d002      	beq.n	8003a44 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8003a3e:	4b16      	ldr	r3, [pc, #88]	@ (8003a98 <xTaskResumeAll+0x130>)
 8003a40:	2201      	movs	r2, #1
 8003a42:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	3b01      	subs	r3, #1
 8003a48:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d1f1      	bne.n	8003a34 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8003a50:	4b12      	ldr	r3, [pc, #72]	@ (8003a9c <xTaskResumeAll+0x134>)
 8003a52:	2200      	movs	r2, #0
 8003a54:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003a56:	4b10      	ldr	r3, [pc, #64]	@ (8003a98 <xTaskResumeAll+0x130>)
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d009      	beq.n	8003a72 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003a5e:	2301      	movs	r3, #1
 8003a60:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003a62:	4b0f      	ldr	r3, [pc, #60]	@ (8003aa0 <xTaskResumeAll+0x138>)
 8003a64:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003a68:	601a      	str	r2, [r3, #0]
 8003a6a:	f3bf 8f4f 	dsb	sy
 8003a6e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003a72:	f001 f8ab 	bl	8004bcc <vPortExitCritical>

	return xAlreadyYielded;
 8003a76:	68bb      	ldr	r3, [r7, #8]
}
 8003a78:	4618      	mov	r0, r3
 8003a7a:	3710      	adds	r7, #16
 8003a7c:	46bd      	mov	sp, r7
 8003a7e:	bd80      	pop	{r7, pc}
 8003a80:	20000cbc 	.word	0x20000cbc
 8003a84:	20000c94 	.word	0x20000c94
 8003a88:	20000c54 	.word	0x20000c54
 8003a8c:	20000c9c 	.word	0x20000c9c
 8003a90:	200007c4 	.word	0x200007c4
 8003a94:	200007c0 	.word	0x200007c0
 8003a98:	20000ca8 	.word	0x20000ca8
 8003a9c:	20000ca4 	.word	0x20000ca4
 8003aa0:	e000ed04 	.word	0xe000ed04

08003aa4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8003aa4:	b480      	push	{r7}
 8003aa6:	b083      	sub	sp, #12
 8003aa8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8003aaa:	4b04      	ldr	r3, [pc, #16]	@ (8003abc <xTaskGetTickCount+0x18>)
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8003ab0:	687b      	ldr	r3, [r7, #4]
}
 8003ab2:	4618      	mov	r0, r3
 8003ab4:	370c      	adds	r7, #12
 8003ab6:	46bd      	mov	sp, r7
 8003ab8:	bc80      	pop	{r7}
 8003aba:	4770      	bx	lr
 8003abc:	20000c98 	.word	0x20000c98

08003ac0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003ac0:	b580      	push	{r7, lr}
 8003ac2:	b086      	sub	sp, #24
 8003ac4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003ac6:	2300      	movs	r3, #0
 8003ac8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003aca:	4b4f      	ldr	r3, [pc, #316]	@ (8003c08 <xTaskIncrementTick+0x148>)
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	f040 8090 	bne.w	8003bf4 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003ad4:	4b4d      	ldr	r3, [pc, #308]	@ (8003c0c <xTaskIncrementTick+0x14c>)
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	3301      	adds	r3, #1
 8003ada:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003adc:	4a4b      	ldr	r2, [pc, #300]	@ (8003c0c <xTaskIncrementTick+0x14c>)
 8003ade:	693b      	ldr	r3, [r7, #16]
 8003ae0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003ae2:	693b      	ldr	r3, [r7, #16]
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d121      	bne.n	8003b2c <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8003ae8:	4b49      	ldr	r3, [pc, #292]	@ (8003c10 <xTaskIncrementTick+0x150>)
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d00b      	beq.n	8003b0a <xTaskIncrementTick+0x4a>
	__asm volatile
 8003af2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003af6:	f383 8811 	msr	BASEPRI, r3
 8003afa:	f3bf 8f6f 	isb	sy
 8003afe:	f3bf 8f4f 	dsb	sy
 8003b02:	603b      	str	r3, [r7, #0]
}
 8003b04:	bf00      	nop
 8003b06:	bf00      	nop
 8003b08:	e7fd      	b.n	8003b06 <xTaskIncrementTick+0x46>
 8003b0a:	4b41      	ldr	r3, [pc, #260]	@ (8003c10 <xTaskIncrementTick+0x150>)
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	60fb      	str	r3, [r7, #12]
 8003b10:	4b40      	ldr	r3, [pc, #256]	@ (8003c14 <xTaskIncrementTick+0x154>)
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	4a3e      	ldr	r2, [pc, #248]	@ (8003c10 <xTaskIncrementTick+0x150>)
 8003b16:	6013      	str	r3, [r2, #0]
 8003b18:	4a3e      	ldr	r2, [pc, #248]	@ (8003c14 <xTaskIncrementTick+0x154>)
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	6013      	str	r3, [r2, #0]
 8003b1e:	4b3e      	ldr	r3, [pc, #248]	@ (8003c18 <xTaskIncrementTick+0x158>)
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	3301      	adds	r3, #1
 8003b24:	4a3c      	ldr	r2, [pc, #240]	@ (8003c18 <xTaskIncrementTick+0x158>)
 8003b26:	6013      	str	r3, [r2, #0]
 8003b28:	f000 fad4 	bl	80040d4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003b2c:	4b3b      	ldr	r3, [pc, #236]	@ (8003c1c <xTaskIncrementTick+0x15c>)
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	693a      	ldr	r2, [r7, #16]
 8003b32:	429a      	cmp	r2, r3
 8003b34:	d349      	bcc.n	8003bca <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003b36:	4b36      	ldr	r3, [pc, #216]	@ (8003c10 <xTaskIncrementTick+0x150>)
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d104      	bne.n	8003b4a <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003b40:	4b36      	ldr	r3, [pc, #216]	@ (8003c1c <xTaskIncrementTick+0x15c>)
 8003b42:	f04f 32ff 	mov.w	r2, #4294967295
 8003b46:	601a      	str	r2, [r3, #0]
					break;
 8003b48:	e03f      	b.n	8003bca <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003b4a:	4b31      	ldr	r3, [pc, #196]	@ (8003c10 <xTaskIncrementTick+0x150>)
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	68db      	ldr	r3, [r3, #12]
 8003b50:	68db      	ldr	r3, [r3, #12]
 8003b52:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003b54:	68bb      	ldr	r3, [r7, #8]
 8003b56:	685b      	ldr	r3, [r3, #4]
 8003b58:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003b5a:	693a      	ldr	r2, [r7, #16]
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	429a      	cmp	r2, r3
 8003b60:	d203      	bcs.n	8003b6a <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003b62:	4a2e      	ldr	r2, [pc, #184]	@ (8003c1c <xTaskIncrementTick+0x15c>)
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8003b68:	e02f      	b.n	8003bca <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003b6a:	68bb      	ldr	r3, [r7, #8]
 8003b6c:	3304      	adds	r3, #4
 8003b6e:	4618      	mov	r0, r3
 8003b70:	f7fe ff86 	bl	8002a80 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003b74:	68bb      	ldr	r3, [r7, #8]
 8003b76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d004      	beq.n	8003b86 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003b7c:	68bb      	ldr	r3, [r7, #8]
 8003b7e:	3318      	adds	r3, #24
 8003b80:	4618      	mov	r0, r3
 8003b82:	f7fe ff7d 	bl	8002a80 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003b86:	68bb      	ldr	r3, [r7, #8]
 8003b88:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003b8a:	4b25      	ldr	r3, [pc, #148]	@ (8003c20 <xTaskIncrementTick+0x160>)
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	429a      	cmp	r2, r3
 8003b90:	d903      	bls.n	8003b9a <xTaskIncrementTick+0xda>
 8003b92:	68bb      	ldr	r3, [r7, #8]
 8003b94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b96:	4a22      	ldr	r2, [pc, #136]	@ (8003c20 <xTaskIncrementTick+0x160>)
 8003b98:	6013      	str	r3, [r2, #0]
 8003b9a:	68bb      	ldr	r3, [r7, #8]
 8003b9c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003b9e:	4613      	mov	r3, r2
 8003ba0:	009b      	lsls	r3, r3, #2
 8003ba2:	4413      	add	r3, r2
 8003ba4:	009b      	lsls	r3, r3, #2
 8003ba6:	4a1f      	ldr	r2, [pc, #124]	@ (8003c24 <xTaskIncrementTick+0x164>)
 8003ba8:	441a      	add	r2, r3
 8003baa:	68bb      	ldr	r3, [r7, #8]
 8003bac:	3304      	adds	r3, #4
 8003bae:	4619      	mov	r1, r3
 8003bb0:	4610      	mov	r0, r2
 8003bb2:	f7fe ff0a 	bl	80029ca <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003bb6:	68bb      	ldr	r3, [r7, #8]
 8003bb8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003bba:	4b1b      	ldr	r3, [pc, #108]	@ (8003c28 <xTaskIncrementTick+0x168>)
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003bc0:	429a      	cmp	r2, r3
 8003bc2:	d3b8      	bcc.n	8003b36 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8003bc4:	2301      	movs	r3, #1
 8003bc6:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003bc8:	e7b5      	b.n	8003b36 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003bca:	4b17      	ldr	r3, [pc, #92]	@ (8003c28 <xTaskIncrementTick+0x168>)
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003bd0:	4914      	ldr	r1, [pc, #80]	@ (8003c24 <xTaskIncrementTick+0x164>)
 8003bd2:	4613      	mov	r3, r2
 8003bd4:	009b      	lsls	r3, r3, #2
 8003bd6:	4413      	add	r3, r2
 8003bd8:	009b      	lsls	r3, r3, #2
 8003bda:	440b      	add	r3, r1
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	2b01      	cmp	r3, #1
 8003be0:	d901      	bls.n	8003be6 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8003be2:	2301      	movs	r3, #1
 8003be4:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8003be6:	4b11      	ldr	r3, [pc, #68]	@ (8003c2c <xTaskIncrementTick+0x16c>)
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d007      	beq.n	8003bfe <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8003bee:	2301      	movs	r3, #1
 8003bf0:	617b      	str	r3, [r7, #20]
 8003bf2:	e004      	b.n	8003bfe <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8003bf4:	4b0e      	ldr	r3, [pc, #56]	@ (8003c30 <xTaskIncrementTick+0x170>)
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	3301      	adds	r3, #1
 8003bfa:	4a0d      	ldr	r2, [pc, #52]	@ (8003c30 <xTaskIncrementTick+0x170>)
 8003bfc:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8003bfe:	697b      	ldr	r3, [r7, #20]
}
 8003c00:	4618      	mov	r0, r3
 8003c02:	3718      	adds	r7, #24
 8003c04:	46bd      	mov	sp, r7
 8003c06:	bd80      	pop	{r7, pc}
 8003c08:	20000cbc 	.word	0x20000cbc
 8003c0c:	20000c98 	.word	0x20000c98
 8003c10:	20000c4c 	.word	0x20000c4c
 8003c14:	20000c50 	.word	0x20000c50
 8003c18:	20000cac 	.word	0x20000cac
 8003c1c:	20000cb4 	.word	0x20000cb4
 8003c20:	20000c9c 	.word	0x20000c9c
 8003c24:	200007c4 	.word	0x200007c4
 8003c28:	200007c0 	.word	0x200007c0
 8003c2c:	20000ca8 	.word	0x20000ca8
 8003c30:	20000ca4 	.word	0x20000ca4

08003c34 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003c34:	b480      	push	{r7}
 8003c36:	b085      	sub	sp, #20
 8003c38:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003c3a:	4b28      	ldr	r3, [pc, #160]	@ (8003cdc <vTaskSwitchContext+0xa8>)
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d003      	beq.n	8003c4a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8003c42:	4b27      	ldr	r3, [pc, #156]	@ (8003ce0 <vTaskSwitchContext+0xac>)
 8003c44:	2201      	movs	r2, #1
 8003c46:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003c48:	e042      	b.n	8003cd0 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 8003c4a:	4b25      	ldr	r3, [pc, #148]	@ (8003ce0 <vTaskSwitchContext+0xac>)
 8003c4c:	2200      	movs	r2, #0
 8003c4e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003c50:	4b24      	ldr	r3, [pc, #144]	@ (8003ce4 <vTaskSwitchContext+0xb0>)
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	60fb      	str	r3, [r7, #12]
 8003c56:	e011      	b.n	8003c7c <vTaskSwitchContext+0x48>
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d10b      	bne.n	8003c76 <vTaskSwitchContext+0x42>
	__asm volatile
 8003c5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003c62:	f383 8811 	msr	BASEPRI, r3
 8003c66:	f3bf 8f6f 	isb	sy
 8003c6a:	f3bf 8f4f 	dsb	sy
 8003c6e:	607b      	str	r3, [r7, #4]
}
 8003c70:	bf00      	nop
 8003c72:	bf00      	nop
 8003c74:	e7fd      	b.n	8003c72 <vTaskSwitchContext+0x3e>
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	3b01      	subs	r3, #1
 8003c7a:	60fb      	str	r3, [r7, #12]
 8003c7c:	491a      	ldr	r1, [pc, #104]	@ (8003ce8 <vTaskSwitchContext+0xb4>)
 8003c7e:	68fa      	ldr	r2, [r7, #12]
 8003c80:	4613      	mov	r3, r2
 8003c82:	009b      	lsls	r3, r3, #2
 8003c84:	4413      	add	r3, r2
 8003c86:	009b      	lsls	r3, r3, #2
 8003c88:	440b      	add	r3, r1
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d0e3      	beq.n	8003c58 <vTaskSwitchContext+0x24>
 8003c90:	68fa      	ldr	r2, [r7, #12]
 8003c92:	4613      	mov	r3, r2
 8003c94:	009b      	lsls	r3, r3, #2
 8003c96:	4413      	add	r3, r2
 8003c98:	009b      	lsls	r3, r3, #2
 8003c9a:	4a13      	ldr	r2, [pc, #76]	@ (8003ce8 <vTaskSwitchContext+0xb4>)
 8003c9c:	4413      	add	r3, r2
 8003c9e:	60bb      	str	r3, [r7, #8]
 8003ca0:	68bb      	ldr	r3, [r7, #8]
 8003ca2:	685b      	ldr	r3, [r3, #4]
 8003ca4:	685a      	ldr	r2, [r3, #4]
 8003ca6:	68bb      	ldr	r3, [r7, #8]
 8003ca8:	605a      	str	r2, [r3, #4]
 8003caa:	68bb      	ldr	r3, [r7, #8]
 8003cac:	685a      	ldr	r2, [r3, #4]
 8003cae:	68bb      	ldr	r3, [r7, #8]
 8003cb0:	3308      	adds	r3, #8
 8003cb2:	429a      	cmp	r2, r3
 8003cb4:	d104      	bne.n	8003cc0 <vTaskSwitchContext+0x8c>
 8003cb6:	68bb      	ldr	r3, [r7, #8]
 8003cb8:	685b      	ldr	r3, [r3, #4]
 8003cba:	685a      	ldr	r2, [r3, #4]
 8003cbc:	68bb      	ldr	r3, [r7, #8]
 8003cbe:	605a      	str	r2, [r3, #4]
 8003cc0:	68bb      	ldr	r3, [r7, #8]
 8003cc2:	685b      	ldr	r3, [r3, #4]
 8003cc4:	68db      	ldr	r3, [r3, #12]
 8003cc6:	4a09      	ldr	r2, [pc, #36]	@ (8003cec <vTaskSwitchContext+0xb8>)
 8003cc8:	6013      	str	r3, [r2, #0]
 8003cca:	4a06      	ldr	r2, [pc, #24]	@ (8003ce4 <vTaskSwitchContext+0xb0>)
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	6013      	str	r3, [r2, #0]
}
 8003cd0:	bf00      	nop
 8003cd2:	3714      	adds	r7, #20
 8003cd4:	46bd      	mov	sp, r7
 8003cd6:	bc80      	pop	{r7}
 8003cd8:	4770      	bx	lr
 8003cda:	bf00      	nop
 8003cdc:	20000cbc 	.word	0x20000cbc
 8003ce0:	20000ca8 	.word	0x20000ca8
 8003ce4:	20000c9c 	.word	0x20000c9c
 8003ce8:	200007c4 	.word	0x200007c4
 8003cec:	200007c0 	.word	0x200007c0

08003cf0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8003cf0:	b580      	push	{r7, lr}
 8003cf2:	b084      	sub	sp, #16
 8003cf4:	af00      	add	r7, sp, #0
 8003cf6:	6078      	str	r0, [r7, #4]
 8003cf8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d10b      	bne.n	8003d18 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8003d00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d04:	f383 8811 	msr	BASEPRI, r3
 8003d08:	f3bf 8f6f 	isb	sy
 8003d0c:	f3bf 8f4f 	dsb	sy
 8003d10:	60fb      	str	r3, [r7, #12]
}
 8003d12:	bf00      	nop
 8003d14:	bf00      	nop
 8003d16:	e7fd      	b.n	8003d14 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003d18:	4b07      	ldr	r3, [pc, #28]	@ (8003d38 <vTaskPlaceOnEventList+0x48>)
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	3318      	adds	r3, #24
 8003d1e:	4619      	mov	r1, r3
 8003d20:	6878      	ldr	r0, [r7, #4]
 8003d22:	f7fe fe75 	bl	8002a10 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003d26:	2101      	movs	r1, #1
 8003d28:	6838      	ldr	r0, [r7, #0]
 8003d2a:	f000 fa81 	bl	8004230 <prvAddCurrentTaskToDelayedList>
}
 8003d2e:	bf00      	nop
 8003d30:	3710      	adds	r7, #16
 8003d32:	46bd      	mov	sp, r7
 8003d34:	bd80      	pop	{r7, pc}
 8003d36:	bf00      	nop
 8003d38:	200007c0 	.word	0x200007c0

08003d3c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003d3c:	b580      	push	{r7, lr}
 8003d3e:	b086      	sub	sp, #24
 8003d40:	af00      	add	r7, sp, #0
 8003d42:	60f8      	str	r0, [r7, #12]
 8003d44:	60b9      	str	r1, [r7, #8]
 8003d46:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d10b      	bne.n	8003d66 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8003d4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d52:	f383 8811 	msr	BASEPRI, r3
 8003d56:	f3bf 8f6f 	isb	sy
 8003d5a:	f3bf 8f4f 	dsb	sy
 8003d5e:	617b      	str	r3, [r7, #20]
}
 8003d60:	bf00      	nop
 8003d62:	bf00      	nop
 8003d64:	e7fd      	b.n	8003d62 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003d66:	4b0a      	ldr	r3, [pc, #40]	@ (8003d90 <vTaskPlaceOnEventListRestricted+0x54>)
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	3318      	adds	r3, #24
 8003d6c:	4619      	mov	r1, r3
 8003d6e:	68f8      	ldr	r0, [r7, #12]
 8003d70:	f7fe fe2b 	bl	80029ca <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d002      	beq.n	8003d80 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8003d7a:	f04f 33ff 	mov.w	r3, #4294967295
 8003d7e:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8003d80:	6879      	ldr	r1, [r7, #4]
 8003d82:	68b8      	ldr	r0, [r7, #8]
 8003d84:	f000 fa54 	bl	8004230 <prvAddCurrentTaskToDelayedList>
	}
 8003d88:	bf00      	nop
 8003d8a:	3718      	adds	r7, #24
 8003d8c:	46bd      	mov	sp, r7
 8003d8e:	bd80      	pop	{r7, pc}
 8003d90:	200007c0 	.word	0x200007c0

08003d94 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003d94:	b580      	push	{r7, lr}
 8003d96:	b086      	sub	sp, #24
 8003d98:	af00      	add	r7, sp, #0
 8003d9a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	68db      	ldr	r3, [r3, #12]
 8003da0:	68db      	ldr	r3, [r3, #12]
 8003da2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8003da4:	693b      	ldr	r3, [r7, #16]
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d10b      	bne.n	8003dc2 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8003daa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003dae:	f383 8811 	msr	BASEPRI, r3
 8003db2:	f3bf 8f6f 	isb	sy
 8003db6:	f3bf 8f4f 	dsb	sy
 8003dba:	60fb      	str	r3, [r7, #12]
}
 8003dbc:	bf00      	nop
 8003dbe:	bf00      	nop
 8003dc0:	e7fd      	b.n	8003dbe <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8003dc2:	693b      	ldr	r3, [r7, #16]
 8003dc4:	3318      	adds	r3, #24
 8003dc6:	4618      	mov	r0, r3
 8003dc8:	f7fe fe5a 	bl	8002a80 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003dcc:	4b1d      	ldr	r3, [pc, #116]	@ (8003e44 <xTaskRemoveFromEventList+0xb0>)
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d11d      	bne.n	8003e10 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8003dd4:	693b      	ldr	r3, [r7, #16]
 8003dd6:	3304      	adds	r3, #4
 8003dd8:	4618      	mov	r0, r3
 8003dda:	f7fe fe51 	bl	8002a80 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8003dde:	693b      	ldr	r3, [r7, #16]
 8003de0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003de2:	4b19      	ldr	r3, [pc, #100]	@ (8003e48 <xTaskRemoveFromEventList+0xb4>)
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	429a      	cmp	r2, r3
 8003de8:	d903      	bls.n	8003df2 <xTaskRemoveFromEventList+0x5e>
 8003dea:	693b      	ldr	r3, [r7, #16]
 8003dec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003dee:	4a16      	ldr	r2, [pc, #88]	@ (8003e48 <xTaskRemoveFromEventList+0xb4>)
 8003df0:	6013      	str	r3, [r2, #0]
 8003df2:	693b      	ldr	r3, [r7, #16]
 8003df4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003df6:	4613      	mov	r3, r2
 8003df8:	009b      	lsls	r3, r3, #2
 8003dfa:	4413      	add	r3, r2
 8003dfc:	009b      	lsls	r3, r3, #2
 8003dfe:	4a13      	ldr	r2, [pc, #76]	@ (8003e4c <xTaskRemoveFromEventList+0xb8>)
 8003e00:	441a      	add	r2, r3
 8003e02:	693b      	ldr	r3, [r7, #16]
 8003e04:	3304      	adds	r3, #4
 8003e06:	4619      	mov	r1, r3
 8003e08:	4610      	mov	r0, r2
 8003e0a:	f7fe fdde 	bl	80029ca <vListInsertEnd>
 8003e0e:	e005      	b.n	8003e1c <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003e10:	693b      	ldr	r3, [r7, #16]
 8003e12:	3318      	adds	r3, #24
 8003e14:	4619      	mov	r1, r3
 8003e16:	480e      	ldr	r0, [pc, #56]	@ (8003e50 <xTaskRemoveFromEventList+0xbc>)
 8003e18:	f7fe fdd7 	bl	80029ca <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003e1c:	693b      	ldr	r3, [r7, #16]
 8003e1e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003e20:	4b0c      	ldr	r3, [pc, #48]	@ (8003e54 <xTaskRemoveFromEventList+0xc0>)
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e26:	429a      	cmp	r2, r3
 8003e28:	d905      	bls.n	8003e36 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8003e2a:	2301      	movs	r3, #1
 8003e2c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8003e2e:	4b0a      	ldr	r3, [pc, #40]	@ (8003e58 <xTaskRemoveFromEventList+0xc4>)
 8003e30:	2201      	movs	r2, #1
 8003e32:	601a      	str	r2, [r3, #0]
 8003e34:	e001      	b.n	8003e3a <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8003e36:	2300      	movs	r3, #0
 8003e38:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8003e3a:	697b      	ldr	r3, [r7, #20]
}
 8003e3c:	4618      	mov	r0, r3
 8003e3e:	3718      	adds	r7, #24
 8003e40:	46bd      	mov	sp, r7
 8003e42:	bd80      	pop	{r7, pc}
 8003e44:	20000cbc 	.word	0x20000cbc
 8003e48:	20000c9c 	.word	0x20000c9c
 8003e4c:	200007c4 	.word	0x200007c4
 8003e50:	20000c54 	.word	0x20000c54
 8003e54:	200007c0 	.word	0x200007c0
 8003e58:	20000ca8 	.word	0x20000ca8

08003e5c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003e5c:	b480      	push	{r7}
 8003e5e:	b083      	sub	sp, #12
 8003e60:	af00      	add	r7, sp, #0
 8003e62:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003e64:	4b06      	ldr	r3, [pc, #24]	@ (8003e80 <vTaskInternalSetTimeOutState+0x24>)
 8003e66:	681a      	ldr	r2, [r3, #0]
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8003e6c:	4b05      	ldr	r3, [pc, #20]	@ (8003e84 <vTaskInternalSetTimeOutState+0x28>)
 8003e6e:	681a      	ldr	r2, [r3, #0]
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	605a      	str	r2, [r3, #4]
}
 8003e74:	bf00      	nop
 8003e76:	370c      	adds	r7, #12
 8003e78:	46bd      	mov	sp, r7
 8003e7a:	bc80      	pop	{r7}
 8003e7c:	4770      	bx	lr
 8003e7e:	bf00      	nop
 8003e80:	20000cac 	.word	0x20000cac
 8003e84:	20000c98 	.word	0x20000c98

08003e88 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8003e88:	b580      	push	{r7, lr}
 8003e8a:	b088      	sub	sp, #32
 8003e8c:	af00      	add	r7, sp, #0
 8003e8e:	6078      	str	r0, [r7, #4]
 8003e90:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d10b      	bne.n	8003eb0 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8003e98:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e9c:	f383 8811 	msr	BASEPRI, r3
 8003ea0:	f3bf 8f6f 	isb	sy
 8003ea4:	f3bf 8f4f 	dsb	sy
 8003ea8:	613b      	str	r3, [r7, #16]
}
 8003eaa:	bf00      	nop
 8003eac:	bf00      	nop
 8003eae:	e7fd      	b.n	8003eac <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8003eb0:	683b      	ldr	r3, [r7, #0]
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d10b      	bne.n	8003ece <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8003eb6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003eba:	f383 8811 	msr	BASEPRI, r3
 8003ebe:	f3bf 8f6f 	isb	sy
 8003ec2:	f3bf 8f4f 	dsb	sy
 8003ec6:	60fb      	str	r3, [r7, #12]
}
 8003ec8:	bf00      	nop
 8003eca:	bf00      	nop
 8003ecc:	e7fd      	b.n	8003eca <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8003ece:	f000 fe4d 	bl	8004b6c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8003ed2:	4b1d      	ldr	r3, [pc, #116]	@ (8003f48 <xTaskCheckForTimeOut+0xc0>)
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	685b      	ldr	r3, [r3, #4]
 8003edc:	69ba      	ldr	r2, [r7, #24]
 8003ede:	1ad3      	subs	r3, r2, r3
 8003ee0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8003ee2:	683b      	ldr	r3, [r7, #0]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003eea:	d102      	bne.n	8003ef2 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8003eec:	2300      	movs	r3, #0
 8003eee:	61fb      	str	r3, [r7, #28]
 8003ef0:	e023      	b.n	8003f3a <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681a      	ldr	r2, [r3, #0]
 8003ef6:	4b15      	ldr	r3, [pc, #84]	@ (8003f4c <xTaskCheckForTimeOut+0xc4>)
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	429a      	cmp	r2, r3
 8003efc:	d007      	beq.n	8003f0e <xTaskCheckForTimeOut+0x86>
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	685b      	ldr	r3, [r3, #4]
 8003f02:	69ba      	ldr	r2, [r7, #24]
 8003f04:	429a      	cmp	r2, r3
 8003f06:	d302      	bcc.n	8003f0e <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8003f08:	2301      	movs	r3, #1
 8003f0a:	61fb      	str	r3, [r7, #28]
 8003f0c:	e015      	b.n	8003f3a <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8003f0e:	683b      	ldr	r3, [r7, #0]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	697a      	ldr	r2, [r7, #20]
 8003f14:	429a      	cmp	r2, r3
 8003f16:	d20b      	bcs.n	8003f30 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8003f18:	683b      	ldr	r3, [r7, #0]
 8003f1a:	681a      	ldr	r2, [r3, #0]
 8003f1c:	697b      	ldr	r3, [r7, #20]
 8003f1e:	1ad2      	subs	r2, r2, r3
 8003f20:	683b      	ldr	r3, [r7, #0]
 8003f22:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8003f24:	6878      	ldr	r0, [r7, #4]
 8003f26:	f7ff ff99 	bl	8003e5c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8003f2a:	2300      	movs	r3, #0
 8003f2c:	61fb      	str	r3, [r7, #28]
 8003f2e:	e004      	b.n	8003f3a <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8003f30:	683b      	ldr	r3, [r7, #0]
 8003f32:	2200      	movs	r2, #0
 8003f34:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8003f36:	2301      	movs	r3, #1
 8003f38:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8003f3a:	f000 fe47 	bl	8004bcc <vPortExitCritical>

	return xReturn;
 8003f3e:	69fb      	ldr	r3, [r7, #28]
}
 8003f40:	4618      	mov	r0, r3
 8003f42:	3720      	adds	r7, #32
 8003f44:	46bd      	mov	sp, r7
 8003f46:	bd80      	pop	{r7, pc}
 8003f48:	20000c98 	.word	0x20000c98
 8003f4c:	20000cac 	.word	0x20000cac

08003f50 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003f50:	b480      	push	{r7}
 8003f52:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8003f54:	4b03      	ldr	r3, [pc, #12]	@ (8003f64 <vTaskMissedYield+0x14>)
 8003f56:	2201      	movs	r2, #1
 8003f58:	601a      	str	r2, [r3, #0]
}
 8003f5a:	bf00      	nop
 8003f5c:	46bd      	mov	sp, r7
 8003f5e:	bc80      	pop	{r7}
 8003f60:	4770      	bx	lr
 8003f62:	bf00      	nop
 8003f64:	20000ca8 	.word	0x20000ca8

08003f68 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003f68:	b580      	push	{r7, lr}
 8003f6a:	b082      	sub	sp, #8
 8003f6c:	af00      	add	r7, sp, #0
 8003f6e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8003f70:	f000 f852 	bl	8004018 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003f74:	4b06      	ldr	r3, [pc, #24]	@ (8003f90 <prvIdleTask+0x28>)
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	2b01      	cmp	r3, #1
 8003f7a:	d9f9      	bls.n	8003f70 <prvIdleTask+0x8>
			{
				taskYIELD();
 8003f7c:	4b05      	ldr	r3, [pc, #20]	@ (8003f94 <prvIdleTask+0x2c>)
 8003f7e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003f82:	601a      	str	r2, [r3, #0]
 8003f84:	f3bf 8f4f 	dsb	sy
 8003f88:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8003f8c:	e7f0      	b.n	8003f70 <prvIdleTask+0x8>
 8003f8e:	bf00      	nop
 8003f90:	200007c4 	.word	0x200007c4
 8003f94:	e000ed04 	.word	0xe000ed04

08003f98 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003f98:	b580      	push	{r7, lr}
 8003f9a:	b082      	sub	sp, #8
 8003f9c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003f9e:	2300      	movs	r3, #0
 8003fa0:	607b      	str	r3, [r7, #4]
 8003fa2:	e00c      	b.n	8003fbe <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003fa4:	687a      	ldr	r2, [r7, #4]
 8003fa6:	4613      	mov	r3, r2
 8003fa8:	009b      	lsls	r3, r3, #2
 8003faa:	4413      	add	r3, r2
 8003fac:	009b      	lsls	r3, r3, #2
 8003fae:	4a12      	ldr	r2, [pc, #72]	@ (8003ff8 <prvInitialiseTaskLists+0x60>)
 8003fb0:	4413      	add	r3, r2
 8003fb2:	4618      	mov	r0, r3
 8003fb4:	f7fe fcde 	bl	8002974 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	3301      	adds	r3, #1
 8003fbc:	607b      	str	r3, [r7, #4]
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	2b37      	cmp	r3, #55	@ 0x37
 8003fc2:	d9ef      	bls.n	8003fa4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8003fc4:	480d      	ldr	r0, [pc, #52]	@ (8003ffc <prvInitialiseTaskLists+0x64>)
 8003fc6:	f7fe fcd5 	bl	8002974 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8003fca:	480d      	ldr	r0, [pc, #52]	@ (8004000 <prvInitialiseTaskLists+0x68>)
 8003fcc:	f7fe fcd2 	bl	8002974 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8003fd0:	480c      	ldr	r0, [pc, #48]	@ (8004004 <prvInitialiseTaskLists+0x6c>)
 8003fd2:	f7fe fccf 	bl	8002974 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8003fd6:	480c      	ldr	r0, [pc, #48]	@ (8004008 <prvInitialiseTaskLists+0x70>)
 8003fd8:	f7fe fccc 	bl	8002974 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8003fdc:	480b      	ldr	r0, [pc, #44]	@ (800400c <prvInitialiseTaskLists+0x74>)
 8003fde:	f7fe fcc9 	bl	8002974 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8003fe2:	4b0b      	ldr	r3, [pc, #44]	@ (8004010 <prvInitialiseTaskLists+0x78>)
 8003fe4:	4a05      	ldr	r2, [pc, #20]	@ (8003ffc <prvInitialiseTaskLists+0x64>)
 8003fe6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003fe8:	4b0a      	ldr	r3, [pc, #40]	@ (8004014 <prvInitialiseTaskLists+0x7c>)
 8003fea:	4a05      	ldr	r2, [pc, #20]	@ (8004000 <prvInitialiseTaskLists+0x68>)
 8003fec:	601a      	str	r2, [r3, #0]
}
 8003fee:	bf00      	nop
 8003ff0:	3708      	adds	r7, #8
 8003ff2:	46bd      	mov	sp, r7
 8003ff4:	bd80      	pop	{r7, pc}
 8003ff6:	bf00      	nop
 8003ff8:	200007c4 	.word	0x200007c4
 8003ffc:	20000c24 	.word	0x20000c24
 8004000:	20000c38 	.word	0x20000c38
 8004004:	20000c54 	.word	0x20000c54
 8004008:	20000c68 	.word	0x20000c68
 800400c:	20000c80 	.word	0x20000c80
 8004010:	20000c4c 	.word	0x20000c4c
 8004014:	20000c50 	.word	0x20000c50

08004018 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004018:	b580      	push	{r7, lr}
 800401a:	b082      	sub	sp, #8
 800401c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800401e:	e019      	b.n	8004054 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004020:	f000 fda4 	bl	8004b6c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004024:	4b10      	ldr	r3, [pc, #64]	@ (8004068 <prvCheckTasksWaitingTermination+0x50>)
 8004026:	68db      	ldr	r3, [r3, #12]
 8004028:	68db      	ldr	r3, [r3, #12]
 800402a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	3304      	adds	r3, #4
 8004030:	4618      	mov	r0, r3
 8004032:	f7fe fd25 	bl	8002a80 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004036:	4b0d      	ldr	r3, [pc, #52]	@ (800406c <prvCheckTasksWaitingTermination+0x54>)
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	3b01      	subs	r3, #1
 800403c:	4a0b      	ldr	r2, [pc, #44]	@ (800406c <prvCheckTasksWaitingTermination+0x54>)
 800403e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004040:	4b0b      	ldr	r3, [pc, #44]	@ (8004070 <prvCheckTasksWaitingTermination+0x58>)
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	3b01      	subs	r3, #1
 8004046:	4a0a      	ldr	r2, [pc, #40]	@ (8004070 <prvCheckTasksWaitingTermination+0x58>)
 8004048:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800404a:	f000 fdbf 	bl	8004bcc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800404e:	6878      	ldr	r0, [r7, #4]
 8004050:	f000 f810 	bl	8004074 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004054:	4b06      	ldr	r3, [pc, #24]	@ (8004070 <prvCheckTasksWaitingTermination+0x58>)
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	2b00      	cmp	r3, #0
 800405a:	d1e1      	bne.n	8004020 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800405c:	bf00      	nop
 800405e:	bf00      	nop
 8004060:	3708      	adds	r7, #8
 8004062:	46bd      	mov	sp, r7
 8004064:	bd80      	pop	{r7, pc}
 8004066:	bf00      	nop
 8004068:	20000c68 	.word	0x20000c68
 800406c:	20000c94 	.word	0x20000c94
 8004070:	20000c7c 	.word	0x20000c7c

08004074 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004074:	b580      	push	{r7, lr}
 8004076:	b084      	sub	sp, #16
 8004078:	af00      	add	r7, sp, #0
 800407a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8004082:	2b00      	cmp	r3, #0
 8004084:	d108      	bne.n	8004098 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800408a:	4618      	mov	r0, r3
 800408c:	f000 ff3e 	bl	8004f0c <vPortFree>
				vPortFree( pxTCB );
 8004090:	6878      	ldr	r0, [r7, #4]
 8004092:	f000 ff3b 	bl	8004f0c <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004096:	e019      	b.n	80040cc <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800409e:	2b01      	cmp	r3, #1
 80040a0:	d103      	bne.n	80040aa <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80040a2:	6878      	ldr	r0, [r7, #4]
 80040a4:	f000 ff32 	bl	8004f0c <vPortFree>
	}
 80040a8:	e010      	b.n	80040cc <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 80040b0:	2b02      	cmp	r3, #2
 80040b2:	d00b      	beq.n	80040cc <prvDeleteTCB+0x58>
	__asm volatile
 80040b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80040b8:	f383 8811 	msr	BASEPRI, r3
 80040bc:	f3bf 8f6f 	isb	sy
 80040c0:	f3bf 8f4f 	dsb	sy
 80040c4:	60fb      	str	r3, [r7, #12]
}
 80040c6:	bf00      	nop
 80040c8:	bf00      	nop
 80040ca:	e7fd      	b.n	80040c8 <prvDeleteTCB+0x54>
	}
 80040cc:	bf00      	nop
 80040ce:	3710      	adds	r7, #16
 80040d0:	46bd      	mov	sp, r7
 80040d2:	bd80      	pop	{r7, pc}

080040d4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80040d4:	b480      	push	{r7}
 80040d6:	b083      	sub	sp, #12
 80040d8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80040da:	4b0c      	ldr	r3, [pc, #48]	@ (800410c <prvResetNextTaskUnblockTime+0x38>)
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d104      	bne.n	80040ee <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80040e4:	4b0a      	ldr	r3, [pc, #40]	@ (8004110 <prvResetNextTaskUnblockTime+0x3c>)
 80040e6:	f04f 32ff 	mov.w	r2, #4294967295
 80040ea:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80040ec:	e008      	b.n	8004100 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80040ee:	4b07      	ldr	r3, [pc, #28]	@ (800410c <prvResetNextTaskUnblockTime+0x38>)
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	68db      	ldr	r3, [r3, #12]
 80040f4:	68db      	ldr	r3, [r3, #12]
 80040f6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	685b      	ldr	r3, [r3, #4]
 80040fc:	4a04      	ldr	r2, [pc, #16]	@ (8004110 <prvResetNextTaskUnblockTime+0x3c>)
 80040fe:	6013      	str	r3, [r2, #0]
}
 8004100:	bf00      	nop
 8004102:	370c      	adds	r7, #12
 8004104:	46bd      	mov	sp, r7
 8004106:	bc80      	pop	{r7}
 8004108:	4770      	bx	lr
 800410a:	bf00      	nop
 800410c:	20000c4c 	.word	0x20000c4c
 8004110:	20000cb4 	.word	0x20000cb4

08004114 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004114:	b480      	push	{r7}
 8004116:	b083      	sub	sp, #12
 8004118:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800411a:	4b0b      	ldr	r3, [pc, #44]	@ (8004148 <xTaskGetSchedulerState+0x34>)
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	2b00      	cmp	r3, #0
 8004120:	d102      	bne.n	8004128 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8004122:	2301      	movs	r3, #1
 8004124:	607b      	str	r3, [r7, #4]
 8004126:	e008      	b.n	800413a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004128:	4b08      	ldr	r3, [pc, #32]	@ (800414c <xTaskGetSchedulerState+0x38>)
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	2b00      	cmp	r3, #0
 800412e:	d102      	bne.n	8004136 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004130:	2302      	movs	r3, #2
 8004132:	607b      	str	r3, [r7, #4]
 8004134:	e001      	b.n	800413a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8004136:	2300      	movs	r3, #0
 8004138:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800413a:	687b      	ldr	r3, [r7, #4]
	}
 800413c:	4618      	mov	r0, r3
 800413e:	370c      	adds	r7, #12
 8004140:	46bd      	mov	sp, r7
 8004142:	bc80      	pop	{r7}
 8004144:	4770      	bx	lr
 8004146:	bf00      	nop
 8004148:	20000ca0 	.word	0x20000ca0
 800414c:	20000cbc 	.word	0x20000cbc

08004150 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8004150:	b580      	push	{r7, lr}
 8004152:	b086      	sub	sp, #24
 8004154:	af00      	add	r7, sp, #0
 8004156:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800415c:	2300      	movs	r3, #0
 800415e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	2b00      	cmp	r3, #0
 8004164:	d058      	beq.n	8004218 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8004166:	4b2f      	ldr	r3, [pc, #188]	@ (8004224 <xTaskPriorityDisinherit+0xd4>)
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	693a      	ldr	r2, [r7, #16]
 800416c:	429a      	cmp	r2, r3
 800416e:	d00b      	beq.n	8004188 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8004170:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004174:	f383 8811 	msr	BASEPRI, r3
 8004178:	f3bf 8f6f 	isb	sy
 800417c:	f3bf 8f4f 	dsb	sy
 8004180:	60fb      	str	r3, [r7, #12]
}
 8004182:	bf00      	nop
 8004184:	bf00      	nop
 8004186:	e7fd      	b.n	8004184 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8004188:	693b      	ldr	r3, [r7, #16]
 800418a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800418c:	2b00      	cmp	r3, #0
 800418e:	d10b      	bne.n	80041a8 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8004190:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004194:	f383 8811 	msr	BASEPRI, r3
 8004198:	f3bf 8f6f 	isb	sy
 800419c:	f3bf 8f4f 	dsb	sy
 80041a0:	60bb      	str	r3, [r7, #8]
}
 80041a2:	bf00      	nop
 80041a4:	bf00      	nop
 80041a6:	e7fd      	b.n	80041a4 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 80041a8:	693b      	ldr	r3, [r7, #16]
 80041aa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80041ac:	1e5a      	subs	r2, r3, #1
 80041ae:	693b      	ldr	r3, [r7, #16]
 80041b0:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80041b2:	693b      	ldr	r3, [r7, #16]
 80041b4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80041b6:	693b      	ldr	r3, [r7, #16]
 80041b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80041ba:	429a      	cmp	r2, r3
 80041bc:	d02c      	beq.n	8004218 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80041be:	693b      	ldr	r3, [r7, #16]
 80041c0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d128      	bne.n	8004218 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80041c6:	693b      	ldr	r3, [r7, #16]
 80041c8:	3304      	adds	r3, #4
 80041ca:	4618      	mov	r0, r3
 80041cc:	f7fe fc58 	bl	8002a80 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80041d0:	693b      	ldr	r3, [r7, #16]
 80041d2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80041d4:	693b      	ldr	r3, [r7, #16]
 80041d6:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80041d8:	693b      	ldr	r3, [r7, #16]
 80041da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041dc:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80041e0:	693b      	ldr	r3, [r7, #16]
 80041e2:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80041e4:	693b      	ldr	r3, [r7, #16]
 80041e6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80041e8:	4b0f      	ldr	r3, [pc, #60]	@ (8004228 <xTaskPriorityDisinherit+0xd8>)
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	429a      	cmp	r2, r3
 80041ee:	d903      	bls.n	80041f8 <xTaskPriorityDisinherit+0xa8>
 80041f0:	693b      	ldr	r3, [r7, #16]
 80041f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041f4:	4a0c      	ldr	r2, [pc, #48]	@ (8004228 <xTaskPriorityDisinherit+0xd8>)
 80041f6:	6013      	str	r3, [r2, #0]
 80041f8:	693b      	ldr	r3, [r7, #16]
 80041fa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80041fc:	4613      	mov	r3, r2
 80041fe:	009b      	lsls	r3, r3, #2
 8004200:	4413      	add	r3, r2
 8004202:	009b      	lsls	r3, r3, #2
 8004204:	4a09      	ldr	r2, [pc, #36]	@ (800422c <xTaskPriorityDisinherit+0xdc>)
 8004206:	441a      	add	r2, r3
 8004208:	693b      	ldr	r3, [r7, #16]
 800420a:	3304      	adds	r3, #4
 800420c:	4619      	mov	r1, r3
 800420e:	4610      	mov	r0, r2
 8004210:	f7fe fbdb 	bl	80029ca <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8004214:	2301      	movs	r3, #1
 8004216:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004218:	697b      	ldr	r3, [r7, #20]
	}
 800421a:	4618      	mov	r0, r3
 800421c:	3718      	adds	r7, #24
 800421e:	46bd      	mov	sp, r7
 8004220:	bd80      	pop	{r7, pc}
 8004222:	bf00      	nop
 8004224:	200007c0 	.word	0x200007c0
 8004228:	20000c9c 	.word	0x20000c9c
 800422c:	200007c4 	.word	0x200007c4

08004230 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004230:	b580      	push	{r7, lr}
 8004232:	b084      	sub	sp, #16
 8004234:	af00      	add	r7, sp, #0
 8004236:	6078      	str	r0, [r7, #4]
 8004238:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800423a:	4b21      	ldr	r3, [pc, #132]	@ (80042c0 <prvAddCurrentTaskToDelayedList+0x90>)
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004240:	4b20      	ldr	r3, [pc, #128]	@ (80042c4 <prvAddCurrentTaskToDelayedList+0x94>)
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	3304      	adds	r3, #4
 8004246:	4618      	mov	r0, r3
 8004248:	f7fe fc1a 	bl	8002a80 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004252:	d10a      	bne.n	800426a <prvAddCurrentTaskToDelayedList+0x3a>
 8004254:	683b      	ldr	r3, [r7, #0]
 8004256:	2b00      	cmp	r3, #0
 8004258:	d007      	beq.n	800426a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800425a:	4b1a      	ldr	r3, [pc, #104]	@ (80042c4 <prvAddCurrentTaskToDelayedList+0x94>)
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	3304      	adds	r3, #4
 8004260:	4619      	mov	r1, r3
 8004262:	4819      	ldr	r0, [pc, #100]	@ (80042c8 <prvAddCurrentTaskToDelayedList+0x98>)
 8004264:	f7fe fbb1 	bl	80029ca <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004268:	e026      	b.n	80042b8 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800426a:	68fa      	ldr	r2, [r7, #12]
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	4413      	add	r3, r2
 8004270:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004272:	4b14      	ldr	r3, [pc, #80]	@ (80042c4 <prvAddCurrentTaskToDelayedList+0x94>)
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	68ba      	ldr	r2, [r7, #8]
 8004278:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800427a:	68ba      	ldr	r2, [r7, #8]
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	429a      	cmp	r2, r3
 8004280:	d209      	bcs.n	8004296 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004282:	4b12      	ldr	r3, [pc, #72]	@ (80042cc <prvAddCurrentTaskToDelayedList+0x9c>)
 8004284:	681a      	ldr	r2, [r3, #0]
 8004286:	4b0f      	ldr	r3, [pc, #60]	@ (80042c4 <prvAddCurrentTaskToDelayedList+0x94>)
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	3304      	adds	r3, #4
 800428c:	4619      	mov	r1, r3
 800428e:	4610      	mov	r0, r2
 8004290:	f7fe fbbe 	bl	8002a10 <vListInsert>
}
 8004294:	e010      	b.n	80042b8 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004296:	4b0e      	ldr	r3, [pc, #56]	@ (80042d0 <prvAddCurrentTaskToDelayedList+0xa0>)
 8004298:	681a      	ldr	r2, [r3, #0]
 800429a:	4b0a      	ldr	r3, [pc, #40]	@ (80042c4 <prvAddCurrentTaskToDelayedList+0x94>)
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	3304      	adds	r3, #4
 80042a0:	4619      	mov	r1, r3
 80042a2:	4610      	mov	r0, r2
 80042a4:	f7fe fbb4 	bl	8002a10 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80042a8:	4b0a      	ldr	r3, [pc, #40]	@ (80042d4 <prvAddCurrentTaskToDelayedList+0xa4>)
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	68ba      	ldr	r2, [r7, #8]
 80042ae:	429a      	cmp	r2, r3
 80042b0:	d202      	bcs.n	80042b8 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80042b2:	4a08      	ldr	r2, [pc, #32]	@ (80042d4 <prvAddCurrentTaskToDelayedList+0xa4>)
 80042b4:	68bb      	ldr	r3, [r7, #8]
 80042b6:	6013      	str	r3, [r2, #0]
}
 80042b8:	bf00      	nop
 80042ba:	3710      	adds	r7, #16
 80042bc:	46bd      	mov	sp, r7
 80042be:	bd80      	pop	{r7, pc}
 80042c0:	20000c98 	.word	0x20000c98
 80042c4:	200007c0 	.word	0x200007c0
 80042c8:	20000c80 	.word	0x20000c80
 80042cc:	20000c50 	.word	0x20000c50
 80042d0:	20000c4c 	.word	0x20000c4c
 80042d4:	20000cb4 	.word	0x20000cb4

080042d8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80042d8:	b580      	push	{r7, lr}
 80042da:	b08a      	sub	sp, #40	@ 0x28
 80042dc:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80042de:	2300      	movs	r3, #0
 80042e0:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80042e2:	f000 fb11 	bl	8004908 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80042e6:	4b1d      	ldr	r3, [pc, #116]	@ (800435c <xTimerCreateTimerTask+0x84>)
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d021      	beq.n	8004332 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80042ee:	2300      	movs	r3, #0
 80042f0:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80042f2:	2300      	movs	r3, #0
 80042f4:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80042f6:	1d3a      	adds	r2, r7, #4
 80042f8:	f107 0108 	add.w	r1, r7, #8
 80042fc:	f107 030c 	add.w	r3, r7, #12
 8004300:	4618      	mov	r0, r3
 8004302:	f7fe fb1d 	bl	8002940 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8004306:	6879      	ldr	r1, [r7, #4]
 8004308:	68bb      	ldr	r3, [r7, #8]
 800430a:	68fa      	ldr	r2, [r7, #12]
 800430c:	9202      	str	r2, [sp, #8]
 800430e:	9301      	str	r3, [sp, #4]
 8004310:	2302      	movs	r3, #2
 8004312:	9300      	str	r3, [sp, #0]
 8004314:	2300      	movs	r3, #0
 8004316:	460a      	mov	r2, r1
 8004318:	4911      	ldr	r1, [pc, #68]	@ (8004360 <xTimerCreateTimerTask+0x88>)
 800431a:	4812      	ldr	r0, [pc, #72]	@ (8004364 <xTimerCreateTimerTask+0x8c>)
 800431c:	f7ff f8d2 	bl	80034c4 <xTaskCreateStatic>
 8004320:	4603      	mov	r3, r0
 8004322:	4a11      	ldr	r2, [pc, #68]	@ (8004368 <xTimerCreateTimerTask+0x90>)
 8004324:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8004326:	4b10      	ldr	r3, [pc, #64]	@ (8004368 <xTimerCreateTimerTask+0x90>)
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	2b00      	cmp	r3, #0
 800432c:	d001      	beq.n	8004332 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800432e:	2301      	movs	r3, #1
 8004330:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8004332:	697b      	ldr	r3, [r7, #20]
 8004334:	2b00      	cmp	r3, #0
 8004336:	d10b      	bne.n	8004350 <xTimerCreateTimerTask+0x78>
	__asm volatile
 8004338:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800433c:	f383 8811 	msr	BASEPRI, r3
 8004340:	f3bf 8f6f 	isb	sy
 8004344:	f3bf 8f4f 	dsb	sy
 8004348:	613b      	str	r3, [r7, #16]
}
 800434a:	bf00      	nop
 800434c:	bf00      	nop
 800434e:	e7fd      	b.n	800434c <xTimerCreateTimerTask+0x74>
	return xReturn;
 8004350:	697b      	ldr	r3, [r7, #20]
}
 8004352:	4618      	mov	r0, r3
 8004354:	3718      	adds	r7, #24
 8004356:	46bd      	mov	sp, r7
 8004358:	bd80      	pop	{r7, pc}
 800435a:	bf00      	nop
 800435c:	20000cf0 	.word	0x20000cf0
 8004360:	080051e8 	.word	0x080051e8
 8004364:	080044a5 	.word	0x080044a5
 8004368:	20000cf4 	.word	0x20000cf4

0800436c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800436c:	b580      	push	{r7, lr}
 800436e:	b08a      	sub	sp, #40	@ 0x28
 8004370:	af00      	add	r7, sp, #0
 8004372:	60f8      	str	r0, [r7, #12]
 8004374:	60b9      	str	r1, [r7, #8]
 8004376:	607a      	str	r2, [r7, #4]
 8004378:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800437a:	2300      	movs	r3, #0
 800437c:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	2b00      	cmp	r3, #0
 8004382:	d10b      	bne.n	800439c <xTimerGenericCommand+0x30>
	__asm volatile
 8004384:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004388:	f383 8811 	msr	BASEPRI, r3
 800438c:	f3bf 8f6f 	isb	sy
 8004390:	f3bf 8f4f 	dsb	sy
 8004394:	623b      	str	r3, [r7, #32]
}
 8004396:	bf00      	nop
 8004398:	bf00      	nop
 800439a:	e7fd      	b.n	8004398 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800439c:	4b19      	ldr	r3, [pc, #100]	@ (8004404 <xTimerGenericCommand+0x98>)
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d02a      	beq.n	80043fa <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80043a4:	68bb      	ldr	r3, [r7, #8]
 80043a6:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80043b0:	68bb      	ldr	r3, [r7, #8]
 80043b2:	2b05      	cmp	r3, #5
 80043b4:	dc18      	bgt.n	80043e8 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80043b6:	f7ff fead 	bl	8004114 <xTaskGetSchedulerState>
 80043ba:	4603      	mov	r3, r0
 80043bc:	2b02      	cmp	r3, #2
 80043be:	d109      	bne.n	80043d4 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80043c0:	4b10      	ldr	r3, [pc, #64]	@ (8004404 <xTimerGenericCommand+0x98>)
 80043c2:	6818      	ldr	r0, [r3, #0]
 80043c4:	f107 0110 	add.w	r1, r7, #16
 80043c8:	2300      	movs	r3, #0
 80043ca:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80043cc:	f7fe fc8c 	bl	8002ce8 <xQueueGenericSend>
 80043d0:	6278      	str	r0, [r7, #36]	@ 0x24
 80043d2:	e012      	b.n	80043fa <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80043d4:	4b0b      	ldr	r3, [pc, #44]	@ (8004404 <xTimerGenericCommand+0x98>)
 80043d6:	6818      	ldr	r0, [r3, #0]
 80043d8:	f107 0110 	add.w	r1, r7, #16
 80043dc:	2300      	movs	r3, #0
 80043de:	2200      	movs	r2, #0
 80043e0:	f7fe fc82 	bl	8002ce8 <xQueueGenericSend>
 80043e4:	6278      	str	r0, [r7, #36]	@ 0x24
 80043e6:	e008      	b.n	80043fa <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80043e8:	4b06      	ldr	r3, [pc, #24]	@ (8004404 <xTimerGenericCommand+0x98>)
 80043ea:	6818      	ldr	r0, [r3, #0]
 80043ec:	f107 0110 	add.w	r1, r7, #16
 80043f0:	2300      	movs	r3, #0
 80043f2:	683a      	ldr	r2, [r7, #0]
 80043f4:	f7fe fd7a 	bl	8002eec <xQueueGenericSendFromISR>
 80043f8:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80043fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80043fc:	4618      	mov	r0, r3
 80043fe:	3728      	adds	r7, #40	@ 0x28
 8004400:	46bd      	mov	sp, r7
 8004402:	bd80      	pop	{r7, pc}
 8004404:	20000cf0 	.word	0x20000cf0

08004408 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8004408:	b580      	push	{r7, lr}
 800440a:	b088      	sub	sp, #32
 800440c:	af02      	add	r7, sp, #8
 800440e:	6078      	str	r0, [r7, #4]
 8004410:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004412:	4b23      	ldr	r3, [pc, #140]	@ (80044a0 <prvProcessExpiredTimer+0x98>)
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	68db      	ldr	r3, [r3, #12]
 8004418:	68db      	ldr	r3, [r3, #12]
 800441a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800441c:	697b      	ldr	r3, [r7, #20]
 800441e:	3304      	adds	r3, #4
 8004420:	4618      	mov	r0, r3
 8004422:	f7fe fb2d 	bl	8002a80 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004426:	697b      	ldr	r3, [r7, #20]
 8004428:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800442c:	f003 0304 	and.w	r3, r3, #4
 8004430:	2b00      	cmp	r3, #0
 8004432:	d023      	beq.n	800447c <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8004434:	697b      	ldr	r3, [r7, #20]
 8004436:	699a      	ldr	r2, [r3, #24]
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	18d1      	adds	r1, r2, r3
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	683a      	ldr	r2, [r7, #0]
 8004440:	6978      	ldr	r0, [r7, #20]
 8004442:	f000 f8d3 	bl	80045ec <prvInsertTimerInActiveList>
 8004446:	4603      	mov	r3, r0
 8004448:	2b00      	cmp	r3, #0
 800444a:	d020      	beq.n	800448e <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800444c:	2300      	movs	r3, #0
 800444e:	9300      	str	r3, [sp, #0]
 8004450:	2300      	movs	r3, #0
 8004452:	687a      	ldr	r2, [r7, #4]
 8004454:	2100      	movs	r1, #0
 8004456:	6978      	ldr	r0, [r7, #20]
 8004458:	f7ff ff88 	bl	800436c <xTimerGenericCommand>
 800445c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800445e:	693b      	ldr	r3, [r7, #16]
 8004460:	2b00      	cmp	r3, #0
 8004462:	d114      	bne.n	800448e <prvProcessExpiredTimer+0x86>
	__asm volatile
 8004464:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004468:	f383 8811 	msr	BASEPRI, r3
 800446c:	f3bf 8f6f 	isb	sy
 8004470:	f3bf 8f4f 	dsb	sy
 8004474:	60fb      	str	r3, [r7, #12]
}
 8004476:	bf00      	nop
 8004478:	bf00      	nop
 800447a:	e7fd      	b.n	8004478 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800447c:	697b      	ldr	r3, [r7, #20]
 800447e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004482:	f023 0301 	bic.w	r3, r3, #1
 8004486:	b2da      	uxtb	r2, r3
 8004488:	697b      	ldr	r3, [r7, #20]
 800448a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800448e:	697b      	ldr	r3, [r7, #20]
 8004490:	6a1b      	ldr	r3, [r3, #32]
 8004492:	6978      	ldr	r0, [r7, #20]
 8004494:	4798      	blx	r3
}
 8004496:	bf00      	nop
 8004498:	3718      	adds	r7, #24
 800449a:	46bd      	mov	sp, r7
 800449c:	bd80      	pop	{r7, pc}
 800449e:	bf00      	nop
 80044a0:	20000ce8 	.word	0x20000ce8

080044a4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80044a4:	b580      	push	{r7, lr}
 80044a6:	b084      	sub	sp, #16
 80044a8:	af00      	add	r7, sp, #0
 80044aa:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80044ac:	f107 0308 	add.w	r3, r7, #8
 80044b0:	4618      	mov	r0, r3
 80044b2:	f000 f859 	bl	8004568 <prvGetNextExpireTime>
 80044b6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80044b8:	68bb      	ldr	r3, [r7, #8]
 80044ba:	4619      	mov	r1, r3
 80044bc:	68f8      	ldr	r0, [r7, #12]
 80044be:	f000 f805 	bl	80044cc <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80044c2:	f000 f8d5 	bl	8004670 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80044c6:	bf00      	nop
 80044c8:	e7f0      	b.n	80044ac <prvTimerTask+0x8>
	...

080044cc <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80044cc:	b580      	push	{r7, lr}
 80044ce:	b084      	sub	sp, #16
 80044d0:	af00      	add	r7, sp, #0
 80044d2:	6078      	str	r0, [r7, #4]
 80044d4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80044d6:	f7ff fa39 	bl	800394c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80044da:	f107 0308 	add.w	r3, r7, #8
 80044de:	4618      	mov	r0, r3
 80044e0:	f000 f864 	bl	80045ac <prvSampleTimeNow>
 80044e4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80044e6:	68bb      	ldr	r3, [r7, #8]
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d130      	bne.n	800454e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80044ec:	683b      	ldr	r3, [r7, #0]
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d10a      	bne.n	8004508 <prvProcessTimerOrBlockTask+0x3c>
 80044f2:	687a      	ldr	r2, [r7, #4]
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	429a      	cmp	r2, r3
 80044f8:	d806      	bhi.n	8004508 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80044fa:	f7ff fa35 	bl	8003968 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80044fe:	68f9      	ldr	r1, [r7, #12]
 8004500:	6878      	ldr	r0, [r7, #4]
 8004502:	f7ff ff81 	bl	8004408 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8004506:	e024      	b.n	8004552 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8004508:	683b      	ldr	r3, [r7, #0]
 800450a:	2b00      	cmp	r3, #0
 800450c:	d008      	beq.n	8004520 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800450e:	4b13      	ldr	r3, [pc, #76]	@ (800455c <prvProcessTimerOrBlockTask+0x90>)
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	2b00      	cmp	r3, #0
 8004516:	d101      	bne.n	800451c <prvProcessTimerOrBlockTask+0x50>
 8004518:	2301      	movs	r3, #1
 800451a:	e000      	b.n	800451e <prvProcessTimerOrBlockTask+0x52>
 800451c:	2300      	movs	r3, #0
 800451e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8004520:	4b0f      	ldr	r3, [pc, #60]	@ (8004560 <prvProcessTimerOrBlockTask+0x94>)
 8004522:	6818      	ldr	r0, [r3, #0]
 8004524:	687a      	ldr	r2, [r7, #4]
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	1ad3      	subs	r3, r2, r3
 800452a:	683a      	ldr	r2, [r7, #0]
 800452c:	4619      	mov	r1, r3
 800452e:	f7fe ff95 	bl	800345c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8004532:	f7ff fa19 	bl	8003968 <xTaskResumeAll>
 8004536:	4603      	mov	r3, r0
 8004538:	2b00      	cmp	r3, #0
 800453a:	d10a      	bne.n	8004552 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800453c:	4b09      	ldr	r3, [pc, #36]	@ (8004564 <prvProcessTimerOrBlockTask+0x98>)
 800453e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004542:	601a      	str	r2, [r3, #0]
 8004544:	f3bf 8f4f 	dsb	sy
 8004548:	f3bf 8f6f 	isb	sy
}
 800454c:	e001      	b.n	8004552 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800454e:	f7ff fa0b 	bl	8003968 <xTaskResumeAll>
}
 8004552:	bf00      	nop
 8004554:	3710      	adds	r7, #16
 8004556:	46bd      	mov	sp, r7
 8004558:	bd80      	pop	{r7, pc}
 800455a:	bf00      	nop
 800455c:	20000cec 	.word	0x20000cec
 8004560:	20000cf0 	.word	0x20000cf0
 8004564:	e000ed04 	.word	0xe000ed04

08004568 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8004568:	b480      	push	{r7}
 800456a:	b085      	sub	sp, #20
 800456c:	af00      	add	r7, sp, #0
 800456e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8004570:	4b0d      	ldr	r3, [pc, #52]	@ (80045a8 <prvGetNextExpireTime+0x40>)
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	2b00      	cmp	r3, #0
 8004578:	d101      	bne.n	800457e <prvGetNextExpireTime+0x16>
 800457a:	2201      	movs	r2, #1
 800457c:	e000      	b.n	8004580 <prvGetNextExpireTime+0x18>
 800457e:	2200      	movs	r2, #0
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	2b00      	cmp	r3, #0
 800458a:	d105      	bne.n	8004598 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800458c:	4b06      	ldr	r3, [pc, #24]	@ (80045a8 <prvGetNextExpireTime+0x40>)
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	68db      	ldr	r3, [r3, #12]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	60fb      	str	r3, [r7, #12]
 8004596:	e001      	b.n	800459c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8004598:	2300      	movs	r3, #0
 800459a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800459c:	68fb      	ldr	r3, [r7, #12]
}
 800459e:	4618      	mov	r0, r3
 80045a0:	3714      	adds	r7, #20
 80045a2:	46bd      	mov	sp, r7
 80045a4:	bc80      	pop	{r7}
 80045a6:	4770      	bx	lr
 80045a8:	20000ce8 	.word	0x20000ce8

080045ac <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80045ac:	b580      	push	{r7, lr}
 80045ae:	b084      	sub	sp, #16
 80045b0:	af00      	add	r7, sp, #0
 80045b2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80045b4:	f7ff fa76 	bl	8003aa4 <xTaskGetTickCount>
 80045b8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80045ba:	4b0b      	ldr	r3, [pc, #44]	@ (80045e8 <prvSampleTimeNow+0x3c>)
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	68fa      	ldr	r2, [r7, #12]
 80045c0:	429a      	cmp	r2, r3
 80045c2:	d205      	bcs.n	80045d0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80045c4:	f000 f93a 	bl	800483c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	2201      	movs	r2, #1
 80045cc:	601a      	str	r2, [r3, #0]
 80045ce:	e002      	b.n	80045d6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	2200      	movs	r2, #0
 80045d4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80045d6:	4a04      	ldr	r2, [pc, #16]	@ (80045e8 <prvSampleTimeNow+0x3c>)
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80045dc:	68fb      	ldr	r3, [r7, #12]
}
 80045de:	4618      	mov	r0, r3
 80045e0:	3710      	adds	r7, #16
 80045e2:	46bd      	mov	sp, r7
 80045e4:	bd80      	pop	{r7, pc}
 80045e6:	bf00      	nop
 80045e8:	20000cf8 	.word	0x20000cf8

080045ec <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80045ec:	b580      	push	{r7, lr}
 80045ee:	b086      	sub	sp, #24
 80045f0:	af00      	add	r7, sp, #0
 80045f2:	60f8      	str	r0, [r7, #12]
 80045f4:	60b9      	str	r1, [r7, #8]
 80045f6:	607a      	str	r2, [r7, #4]
 80045f8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80045fa:	2300      	movs	r3, #0
 80045fc:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	68ba      	ldr	r2, [r7, #8]
 8004602:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	68fa      	ldr	r2, [r7, #12]
 8004608:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800460a:	68ba      	ldr	r2, [r7, #8]
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	429a      	cmp	r2, r3
 8004610:	d812      	bhi.n	8004638 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004612:	687a      	ldr	r2, [r7, #4]
 8004614:	683b      	ldr	r3, [r7, #0]
 8004616:	1ad2      	subs	r2, r2, r3
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	699b      	ldr	r3, [r3, #24]
 800461c:	429a      	cmp	r2, r3
 800461e:	d302      	bcc.n	8004626 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8004620:	2301      	movs	r3, #1
 8004622:	617b      	str	r3, [r7, #20]
 8004624:	e01b      	b.n	800465e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8004626:	4b10      	ldr	r3, [pc, #64]	@ (8004668 <prvInsertTimerInActiveList+0x7c>)
 8004628:	681a      	ldr	r2, [r3, #0]
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	3304      	adds	r3, #4
 800462e:	4619      	mov	r1, r3
 8004630:	4610      	mov	r0, r2
 8004632:	f7fe f9ed 	bl	8002a10 <vListInsert>
 8004636:	e012      	b.n	800465e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8004638:	687a      	ldr	r2, [r7, #4]
 800463a:	683b      	ldr	r3, [r7, #0]
 800463c:	429a      	cmp	r2, r3
 800463e:	d206      	bcs.n	800464e <prvInsertTimerInActiveList+0x62>
 8004640:	68ba      	ldr	r2, [r7, #8]
 8004642:	683b      	ldr	r3, [r7, #0]
 8004644:	429a      	cmp	r2, r3
 8004646:	d302      	bcc.n	800464e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8004648:	2301      	movs	r3, #1
 800464a:	617b      	str	r3, [r7, #20]
 800464c:	e007      	b.n	800465e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800464e:	4b07      	ldr	r3, [pc, #28]	@ (800466c <prvInsertTimerInActiveList+0x80>)
 8004650:	681a      	ldr	r2, [r3, #0]
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	3304      	adds	r3, #4
 8004656:	4619      	mov	r1, r3
 8004658:	4610      	mov	r0, r2
 800465a:	f7fe f9d9 	bl	8002a10 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800465e:	697b      	ldr	r3, [r7, #20]
}
 8004660:	4618      	mov	r0, r3
 8004662:	3718      	adds	r7, #24
 8004664:	46bd      	mov	sp, r7
 8004666:	bd80      	pop	{r7, pc}
 8004668:	20000cec 	.word	0x20000cec
 800466c:	20000ce8 	.word	0x20000ce8

08004670 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8004670:	b580      	push	{r7, lr}
 8004672:	b08e      	sub	sp, #56	@ 0x38
 8004674:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004676:	e0ce      	b.n	8004816 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	2b00      	cmp	r3, #0
 800467c:	da19      	bge.n	80046b2 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800467e:	1d3b      	adds	r3, r7, #4
 8004680:	3304      	adds	r3, #4
 8004682:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8004684:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004686:	2b00      	cmp	r3, #0
 8004688:	d10b      	bne.n	80046a2 <prvProcessReceivedCommands+0x32>
	__asm volatile
 800468a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800468e:	f383 8811 	msr	BASEPRI, r3
 8004692:	f3bf 8f6f 	isb	sy
 8004696:	f3bf 8f4f 	dsb	sy
 800469a:	61fb      	str	r3, [r7, #28]
}
 800469c:	bf00      	nop
 800469e:	bf00      	nop
 80046a0:	e7fd      	b.n	800469e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80046a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80046a8:	6850      	ldr	r0, [r2, #4]
 80046aa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80046ac:	6892      	ldr	r2, [r2, #8]
 80046ae:	4611      	mov	r1, r2
 80046b0:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	f2c0 80ae 	blt.w	8004816 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80046be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80046c0:	695b      	ldr	r3, [r3, #20]
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d004      	beq.n	80046d0 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80046c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80046c8:	3304      	adds	r3, #4
 80046ca:	4618      	mov	r0, r3
 80046cc:	f7fe f9d8 	bl	8002a80 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80046d0:	463b      	mov	r3, r7
 80046d2:	4618      	mov	r0, r3
 80046d4:	f7ff ff6a 	bl	80045ac <prvSampleTimeNow>
 80046d8:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	2b09      	cmp	r3, #9
 80046de:	f200 8097 	bhi.w	8004810 <prvProcessReceivedCommands+0x1a0>
 80046e2:	a201      	add	r2, pc, #4	@ (adr r2, 80046e8 <prvProcessReceivedCommands+0x78>)
 80046e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046e8:	08004711 	.word	0x08004711
 80046ec:	08004711 	.word	0x08004711
 80046f0:	08004711 	.word	0x08004711
 80046f4:	08004787 	.word	0x08004787
 80046f8:	0800479b 	.word	0x0800479b
 80046fc:	080047e7 	.word	0x080047e7
 8004700:	08004711 	.word	0x08004711
 8004704:	08004711 	.word	0x08004711
 8004708:	08004787 	.word	0x08004787
 800470c:	0800479b 	.word	0x0800479b
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004710:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004712:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004716:	f043 0301 	orr.w	r3, r3, #1
 800471a:	b2da      	uxtb	r2, r3
 800471c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800471e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8004722:	68ba      	ldr	r2, [r7, #8]
 8004724:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004726:	699b      	ldr	r3, [r3, #24]
 8004728:	18d1      	adds	r1, r2, r3
 800472a:	68bb      	ldr	r3, [r7, #8]
 800472c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800472e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004730:	f7ff ff5c 	bl	80045ec <prvInsertTimerInActiveList>
 8004734:	4603      	mov	r3, r0
 8004736:	2b00      	cmp	r3, #0
 8004738:	d06c      	beq.n	8004814 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800473a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800473c:	6a1b      	ldr	r3, [r3, #32]
 800473e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004740:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004742:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004744:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004748:	f003 0304 	and.w	r3, r3, #4
 800474c:	2b00      	cmp	r3, #0
 800474e:	d061      	beq.n	8004814 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8004750:	68ba      	ldr	r2, [r7, #8]
 8004752:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004754:	699b      	ldr	r3, [r3, #24]
 8004756:	441a      	add	r2, r3
 8004758:	2300      	movs	r3, #0
 800475a:	9300      	str	r3, [sp, #0]
 800475c:	2300      	movs	r3, #0
 800475e:	2100      	movs	r1, #0
 8004760:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004762:	f7ff fe03 	bl	800436c <xTimerGenericCommand>
 8004766:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8004768:	6a3b      	ldr	r3, [r7, #32]
 800476a:	2b00      	cmp	r3, #0
 800476c:	d152      	bne.n	8004814 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800476e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004772:	f383 8811 	msr	BASEPRI, r3
 8004776:	f3bf 8f6f 	isb	sy
 800477a:	f3bf 8f4f 	dsb	sy
 800477e:	61bb      	str	r3, [r7, #24]
}
 8004780:	bf00      	nop
 8004782:	bf00      	nop
 8004784:	e7fd      	b.n	8004782 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004786:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004788:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800478c:	f023 0301 	bic.w	r3, r3, #1
 8004790:	b2da      	uxtb	r2, r3
 8004792:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004794:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8004798:	e03d      	b.n	8004816 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800479a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800479c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80047a0:	f043 0301 	orr.w	r3, r3, #1
 80047a4:	b2da      	uxtb	r2, r3
 80047a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80047a8:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80047ac:	68ba      	ldr	r2, [r7, #8]
 80047ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80047b0:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80047b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80047b4:	699b      	ldr	r3, [r3, #24]
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d10b      	bne.n	80047d2 <prvProcessReceivedCommands+0x162>
	__asm volatile
 80047ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80047be:	f383 8811 	msr	BASEPRI, r3
 80047c2:	f3bf 8f6f 	isb	sy
 80047c6:	f3bf 8f4f 	dsb	sy
 80047ca:	617b      	str	r3, [r7, #20]
}
 80047cc:	bf00      	nop
 80047ce:	bf00      	nop
 80047d0:	e7fd      	b.n	80047ce <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80047d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80047d4:	699a      	ldr	r2, [r3, #24]
 80047d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047d8:	18d1      	adds	r1, r2, r3
 80047da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047dc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80047de:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80047e0:	f7ff ff04 	bl	80045ec <prvInsertTimerInActiveList>
					break;
 80047e4:	e017      	b.n	8004816 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80047e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80047e8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80047ec:	f003 0302 	and.w	r3, r3, #2
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d103      	bne.n	80047fc <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 80047f4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80047f6:	f000 fb89 	bl	8004f0c <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80047fa:	e00c      	b.n	8004816 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80047fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80047fe:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004802:	f023 0301 	bic.w	r3, r3, #1
 8004806:	b2da      	uxtb	r2, r3
 8004808:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800480a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800480e:	e002      	b.n	8004816 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8004810:	bf00      	nop
 8004812:	e000      	b.n	8004816 <prvProcessReceivedCommands+0x1a6>
					break;
 8004814:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004816:	4b08      	ldr	r3, [pc, #32]	@ (8004838 <prvProcessReceivedCommands+0x1c8>)
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	1d39      	adds	r1, r7, #4
 800481c:	2200      	movs	r2, #0
 800481e:	4618      	mov	r0, r3
 8004820:	f7fe fc02 	bl	8003028 <xQueueReceive>
 8004824:	4603      	mov	r3, r0
 8004826:	2b00      	cmp	r3, #0
 8004828:	f47f af26 	bne.w	8004678 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800482c:	bf00      	nop
 800482e:	bf00      	nop
 8004830:	3730      	adds	r7, #48	@ 0x30
 8004832:	46bd      	mov	sp, r7
 8004834:	bd80      	pop	{r7, pc}
 8004836:	bf00      	nop
 8004838:	20000cf0 	.word	0x20000cf0

0800483c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800483c:	b580      	push	{r7, lr}
 800483e:	b088      	sub	sp, #32
 8004840:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004842:	e049      	b.n	80048d8 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004844:	4b2e      	ldr	r3, [pc, #184]	@ (8004900 <prvSwitchTimerLists+0xc4>)
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	68db      	ldr	r3, [r3, #12]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800484e:	4b2c      	ldr	r3, [pc, #176]	@ (8004900 <prvSwitchTimerLists+0xc4>)
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	68db      	ldr	r3, [r3, #12]
 8004854:	68db      	ldr	r3, [r3, #12]
 8004856:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	3304      	adds	r3, #4
 800485c:	4618      	mov	r0, r3
 800485e:	f7fe f90f 	bl	8002a80 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	6a1b      	ldr	r3, [r3, #32]
 8004866:	68f8      	ldr	r0, [r7, #12]
 8004868:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004870:	f003 0304 	and.w	r3, r3, #4
 8004874:	2b00      	cmp	r3, #0
 8004876:	d02f      	beq.n	80048d8 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	699b      	ldr	r3, [r3, #24]
 800487c:	693a      	ldr	r2, [r7, #16]
 800487e:	4413      	add	r3, r2
 8004880:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8004882:	68ba      	ldr	r2, [r7, #8]
 8004884:	693b      	ldr	r3, [r7, #16]
 8004886:	429a      	cmp	r2, r3
 8004888:	d90e      	bls.n	80048a8 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	68ba      	ldr	r2, [r7, #8]
 800488e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	68fa      	ldr	r2, [r7, #12]
 8004894:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004896:	4b1a      	ldr	r3, [pc, #104]	@ (8004900 <prvSwitchTimerLists+0xc4>)
 8004898:	681a      	ldr	r2, [r3, #0]
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	3304      	adds	r3, #4
 800489e:	4619      	mov	r1, r3
 80048a0:	4610      	mov	r0, r2
 80048a2:	f7fe f8b5 	bl	8002a10 <vListInsert>
 80048a6:	e017      	b.n	80048d8 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80048a8:	2300      	movs	r3, #0
 80048aa:	9300      	str	r3, [sp, #0]
 80048ac:	2300      	movs	r3, #0
 80048ae:	693a      	ldr	r2, [r7, #16]
 80048b0:	2100      	movs	r1, #0
 80048b2:	68f8      	ldr	r0, [r7, #12]
 80048b4:	f7ff fd5a 	bl	800436c <xTimerGenericCommand>
 80048b8:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d10b      	bne.n	80048d8 <prvSwitchTimerLists+0x9c>
	__asm volatile
 80048c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80048c4:	f383 8811 	msr	BASEPRI, r3
 80048c8:	f3bf 8f6f 	isb	sy
 80048cc:	f3bf 8f4f 	dsb	sy
 80048d0:	603b      	str	r3, [r7, #0]
}
 80048d2:	bf00      	nop
 80048d4:	bf00      	nop
 80048d6:	e7fd      	b.n	80048d4 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80048d8:	4b09      	ldr	r3, [pc, #36]	@ (8004900 <prvSwitchTimerLists+0xc4>)
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d1b0      	bne.n	8004844 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80048e2:	4b07      	ldr	r3, [pc, #28]	@ (8004900 <prvSwitchTimerLists+0xc4>)
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80048e8:	4b06      	ldr	r3, [pc, #24]	@ (8004904 <prvSwitchTimerLists+0xc8>)
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	4a04      	ldr	r2, [pc, #16]	@ (8004900 <prvSwitchTimerLists+0xc4>)
 80048ee:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80048f0:	4a04      	ldr	r2, [pc, #16]	@ (8004904 <prvSwitchTimerLists+0xc8>)
 80048f2:	697b      	ldr	r3, [r7, #20]
 80048f4:	6013      	str	r3, [r2, #0]
}
 80048f6:	bf00      	nop
 80048f8:	3718      	adds	r7, #24
 80048fa:	46bd      	mov	sp, r7
 80048fc:	bd80      	pop	{r7, pc}
 80048fe:	bf00      	nop
 8004900:	20000ce8 	.word	0x20000ce8
 8004904:	20000cec 	.word	0x20000cec

08004908 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8004908:	b580      	push	{r7, lr}
 800490a:	b082      	sub	sp, #8
 800490c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800490e:	f000 f92d 	bl	8004b6c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8004912:	4b15      	ldr	r3, [pc, #84]	@ (8004968 <prvCheckForValidListAndQueue+0x60>)
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	2b00      	cmp	r3, #0
 8004918:	d120      	bne.n	800495c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800491a:	4814      	ldr	r0, [pc, #80]	@ (800496c <prvCheckForValidListAndQueue+0x64>)
 800491c:	f7fe f82a 	bl	8002974 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8004920:	4813      	ldr	r0, [pc, #76]	@ (8004970 <prvCheckForValidListAndQueue+0x68>)
 8004922:	f7fe f827 	bl	8002974 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8004926:	4b13      	ldr	r3, [pc, #76]	@ (8004974 <prvCheckForValidListAndQueue+0x6c>)
 8004928:	4a10      	ldr	r2, [pc, #64]	@ (800496c <prvCheckForValidListAndQueue+0x64>)
 800492a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800492c:	4b12      	ldr	r3, [pc, #72]	@ (8004978 <prvCheckForValidListAndQueue+0x70>)
 800492e:	4a10      	ldr	r2, [pc, #64]	@ (8004970 <prvCheckForValidListAndQueue+0x68>)
 8004930:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8004932:	2300      	movs	r3, #0
 8004934:	9300      	str	r3, [sp, #0]
 8004936:	4b11      	ldr	r3, [pc, #68]	@ (800497c <prvCheckForValidListAndQueue+0x74>)
 8004938:	4a11      	ldr	r2, [pc, #68]	@ (8004980 <prvCheckForValidListAndQueue+0x78>)
 800493a:	2110      	movs	r1, #16
 800493c:	200a      	movs	r0, #10
 800493e:	f7fe f933 	bl	8002ba8 <xQueueGenericCreateStatic>
 8004942:	4603      	mov	r3, r0
 8004944:	4a08      	ldr	r2, [pc, #32]	@ (8004968 <prvCheckForValidListAndQueue+0x60>)
 8004946:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8004948:	4b07      	ldr	r3, [pc, #28]	@ (8004968 <prvCheckForValidListAndQueue+0x60>)
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	2b00      	cmp	r3, #0
 800494e:	d005      	beq.n	800495c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8004950:	4b05      	ldr	r3, [pc, #20]	@ (8004968 <prvCheckForValidListAndQueue+0x60>)
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	490b      	ldr	r1, [pc, #44]	@ (8004984 <prvCheckForValidListAndQueue+0x7c>)
 8004956:	4618      	mov	r0, r3
 8004958:	f7fe fd58 	bl	800340c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800495c:	f000 f936 	bl	8004bcc <vPortExitCritical>
}
 8004960:	bf00      	nop
 8004962:	46bd      	mov	sp, r7
 8004964:	bd80      	pop	{r7, pc}
 8004966:	bf00      	nop
 8004968:	20000cf0 	.word	0x20000cf0
 800496c:	20000cc0 	.word	0x20000cc0
 8004970:	20000cd4 	.word	0x20000cd4
 8004974:	20000ce8 	.word	0x20000ce8
 8004978:	20000cec 	.word	0x20000cec
 800497c:	20000d9c 	.word	0x20000d9c
 8004980:	20000cfc 	.word	0x20000cfc
 8004984:	080051f0 	.word	0x080051f0

08004988 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004988:	b480      	push	{r7}
 800498a:	b085      	sub	sp, #20
 800498c:	af00      	add	r7, sp, #0
 800498e:	60f8      	str	r0, [r7, #12]
 8004990:	60b9      	str	r1, [r7, #8]
 8004992:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	3b04      	subs	r3, #4
 8004998:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80049a0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	3b04      	subs	r3, #4
 80049a6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80049a8:	68bb      	ldr	r3, [r7, #8]
 80049aa:	f023 0201 	bic.w	r2, r3, #1
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	3b04      	subs	r3, #4
 80049b6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80049b8:	4a08      	ldr	r2, [pc, #32]	@ (80049dc <pxPortInitialiseStack+0x54>)
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	3b14      	subs	r3, #20
 80049c2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80049c4:	687a      	ldr	r2, [r7, #4]
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	3b20      	subs	r3, #32
 80049ce:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80049d0:	68fb      	ldr	r3, [r7, #12]
}
 80049d2:	4618      	mov	r0, r3
 80049d4:	3714      	adds	r7, #20
 80049d6:	46bd      	mov	sp, r7
 80049d8:	bc80      	pop	{r7}
 80049da:	4770      	bx	lr
 80049dc:	080049e1 	.word	0x080049e1

080049e0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80049e0:	b480      	push	{r7}
 80049e2:	b085      	sub	sp, #20
 80049e4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 80049e6:	2300      	movs	r3, #0
 80049e8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80049ea:	4b12      	ldr	r3, [pc, #72]	@ (8004a34 <prvTaskExitError+0x54>)
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049f2:	d00b      	beq.n	8004a0c <prvTaskExitError+0x2c>
	__asm volatile
 80049f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80049f8:	f383 8811 	msr	BASEPRI, r3
 80049fc:	f3bf 8f6f 	isb	sy
 8004a00:	f3bf 8f4f 	dsb	sy
 8004a04:	60fb      	str	r3, [r7, #12]
}
 8004a06:	bf00      	nop
 8004a08:	bf00      	nop
 8004a0a:	e7fd      	b.n	8004a08 <prvTaskExitError+0x28>
	__asm volatile
 8004a0c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a10:	f383 8811 	msr	BASEPRI, r3
 8004a14:	f3bf 8f6f 	isb	sy
 8004a18:	f3bf 8f4f 	dsb	sy
 8004a1c:	60bb      	str	r3, [r7, #8]
}
 8004a1e:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004a20:	bf00      	nop
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d0fc      	beq.n	8004a22 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004a28:	bf00      	nop
 8004a2a:	bf00      	nop
 8004a2c:	3714      	adds	r7, #20
 8004a2e:	46bd      	mov	sp, r7
 8004a30:	bc80      	pop	{r7}
 8004a32:	4770      	bx	lr
 8004a34:	2000000c 	.word	0x2000000c
	...

08004a40 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004a40:	4b07      	ldr	r3, [pc, #28]	@ (8004a60 <pxCurrentTCBConst2>)
 8004a42:	6819      	ldr	r1, [r3, #0]
 8004a44:	6808      	ldr	r0, [r1, #0]
 8004a46:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8004a4a:	f380 8809 	msr	PSP, r0
 8004a4e:	f3bf 8f6f 	isb	sy
 8004a52:	f04f 0000 	mov.w	r0, #0
 8004a56:	f380 8811 	msr	BASEPRI, r0
 8004a5a:	f04e 0e0d 	orr.w	lr, lr, #13
 8004a5e:	4770      	bx	lr

08004a60 <pxCurrentTCBConst2>:
 8004a60:	200007c0 	.word	0x200007c0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004a64:	bf00      	nop
 8004a66:	bf00      	nop

08004a68 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8004a68:	4806      	ldr	r0, [pc, #24]	@ (8004a84 <prvPortStartFirstTask+0x1c>)
 8004a6a:	6800      	ldr	r0, [r0, #0]
 8004a6c:	6800      	ldr	r0, [r0, #0]
 8004a6e:	f380 8808 	msr	MSP, r0
 8004a72:	b662      	cpsie	i
 8004a74:	b661      	cpsie	f
 8004a76:	f3bf 8f4f 	dsb	sy
 8004a7a:	f3bf 8f6f 	isb	sy
 8004a7e:	df00      	svc	0
 8004a80:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8004a82:	bf00      	nop
 8004a84:	e000ed08 	.word	0xe000ed08

08004a88 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004a88:	b580      	push	{r7, lr}
 8004a8a:	b084      	sub	sp, #16
 8004a8c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004a8e:	4b32      	ldr	r3, [pc, #200]	@ (8004b58 <xPortStartScheduler+0xd0>)
 8004a90:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	781b      	ldrb	r3, [r3, #0]
 8004a96:	b2db      	uxtb	r3, r3
 8004a98:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	22ff      	movs	r2, #255	@ 0xff
 8004a9e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	781b      	ldrb	r3, [r3, #0]
 8004aa4:	b2db      	uxtb	r3, r3
 8004aa6:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004aa8:	78fb      	ldrb	r3, [r7, #3]
 8004aaa:	b2db      	uxtb	r3, r3
 8004aac:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8004ab0:	b2da      	uxtb	r2, r3
 8004ab2:	4b2a      	ldr	r3, [pc, #168]	@ (8004b5c <xPortStartScheduler+0xd4>)
 8004ab4:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004ab6:	4b2a      	ldr	r3, [pc, #168]	@ (8004b60 <xPortStartScheduler+0xd8>)
 8004ab8:	2207      	movs	r2, #7
 8004aba:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004abc:	e009      	b.n	8004ad2 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8004abe:	4b28      	ldr	r3, [pc, #160]	@ (8004b60 <xPortStartScheduler+0xd8>)
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	3b01      	subs	r3, #1
 8004ac4:	4a26      	ldr	r2, [pc, #152]	@ (8004b60 <xPortStartScheduler+0xd8>)
 8004ac6:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004ac8:	78fb      	ldrb	r3, [r7, #3]
 8004aca:	b2db      	uxtb	r3, r3
 8004acc:	005b      	lsls	r3, r3, #1
 8004ace:	b2db      	uxtb	r3, r3
 8004ad0:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004ad2:	78fb      	ldrb	r3, [r7, #3]
 8004ad4:	b2db      	uxtb	r3, r3
 8004ad6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004ada:	2b80      	cmp	r3, #128	@ 0x80
 8004adc:	d0ef      	beq.n	8004abe <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004ade:	4b20      	ldr	r3, [pc, #128]	@ (8004b60 <xPortStartScheduler+0xd8>)
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	f1c3 0307 	rsb	r3, r3, #7
 8004ae6:	2b04      	cmp	r3, #4
 8004ae8:	d00b      	beq.n	8004b02 <xPortStartScheduler+0x7a>
	__asm volatile
 8004aea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004aee:	f383 8811 	msr	BASEPRI, r3
 8004af2:	f3bf 8f6f 	isb	sy
 8004af6:	f3bf 8f4f 	dsb	sy
 8004afa:	60bb      	str	r3, [r7, #8]
}
 8004afc:	bf00      	nop
 8004afe:	bf00      	nop
 8004b00:	e7fd      	b.n	8004afe <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004b02:	4b17      	ldr	r3, [pc, #92]	@ (8004b60 <xPortStartScheduler+0xd8>)
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	021b      	lsls	r3, r3, #8
 8004b08:	4a15      	ldr	r2, [pc, #84]	@ (8004b60 <xPortStartScheduler+0xd8>)
 8004b0a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004b0c:	4b14      	ldr	r3, [pc, #80]	@ (8004b60 <xPortStartScheduler+0xd8>)
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004b14:	4a12      	ldr	r2, [pc, #72]	@ (8004b60 <xPortStartScheduler+0xd8>)
 8004b16:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	b2da      	uxtb	r2, r3
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004b20:	4b10      	ldr	r3, [pc, #64]	@ (8004b64 <xPortStartScheduler+0xdc>)
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	4a0f      	ldr	r2, [pc, #60]	@ (8004b64 <xPortStartScheduler+0xdc>)
 8004b26:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8004b2a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004b2c:	4b0d      	ldr	r3, [pc, #52]	@ (8004b64 <xPortStartScheduler+0xdc>)
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	4a0c      	ldr	r2, [pc, #48]	@ (8004b64 <xPortStartScheduler+0xdc>)
 8004b32:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8004b36:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004b38:	f000 f8b8 	bl	8004cac <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004b3c:	4b0a      	ldr	r3, [pc, #40]	@ (8004b68 <xPortStartScheduler+0xe0>)
 8004b3e:	2200      	movs	r2, #0
 8004b40:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004b42:	f7ff ff91 	bl	8004a68 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004b46:	f7ff f875 	bl	8003c34 <vTaskSwitchContext>
	prvTaskExitError();
 8004b4a:	f7ff ff49 	bl	80049e0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8004b4e:	2300      	movs	r3, #0
}
 8004b50:	4618      	mov	r0, r3
 8004b52:	3710      	adds	r7, #16
 8004b54:	46bd      	mov	sp, r7
 8004b56:	bd80      	pop	{r7, pc}
 8004b58:	e000e400 	.word	0xe000e400
 8004b5c:	20000dec 	.word	0x20000dec
 8004b60:	20000df0 	.word	0x20000df0
 8004b64:	e000ed20 	.word	0xe000ed20
 8004b68:	2000000c 	.word	0x2000000c

08004b6c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004b6c:	b480      	push	{r7}
 8004b6e:	b083      	sub	sp, #12
 8004b70:	af00      	add	r7, sp, #0
	__asm volatile
 8004b72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b76:	f383 8811 	msr	BASEPRI, r3
 8004b7a:	f3bf 8f6f 	isb	sy
 8004b7e:	f3bf 8f4f 	dsb	sy
 8004b82:	607b      	str	r3, [r7, #4]
}
 8004b84:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8004b86:	4b0f      	ldr	r3, [pc, #60]	@ (8004bc4 <vPortEnterCritical+0x58>)
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	3301      	adds	r3, #1
 8004b8c:	4a0d      	ldr	r2, [pc, #52]	@ (8004bc4 <vPortEnterCritical+0x58>)
 8004b8e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8004b90:	4b0c      	ldr	r3, [pc, #48]	@ (8004bc4 <vPortEnterCritical+0x58>)
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	2b01      	cmp	r3, #1
 8004b96:	d110      	bne.n	8004bba <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004b98:	4b0b      	ldr	r3, [pc, #44]	@ (8004bc8 <vPortEnterCritical+0x5c>)
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	b2db      	uxtb	r3, r3
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d00b      	beq.n	8004bba <vPortEnterCritical+0x4e>
	__asm volatile
 8004ba2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ba6:	f383 8811 	msr	BASEPRI, r3
 8004baa:	f3bf 8f6f 	isb	sy
 8004bae:	f3bf 8f4f 	dsb	sy
 8004bb2:	603b      	str	r3, [r7, #0]
}
 8004bb4:	bf00      	nop
 8004bb6:	bf00      	nop
 8004bb8:	e7fd      	b.n	8004bb6 <vPortEnterCritical+0x4a>
	}
}
 8004bba:	bf00      	nop
 8004bbc:	370c      	adds	r7, #12
 8004bbe:	46bd      	mov	sp, r7
 8004bc0:	bc80      	pop	{r7}
 8004bc2:	4770      	bx	lr
 8004bc4:	2000000c 	.word	0x2000000c
 8004bc8:	e000ed04 	.word	0xe000ed04

08004bcc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004bcc:	b480      	push	{r7}
 8004bce:	b083      	sub	sp, #12
 8004bd0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8004bd2:	4b12      	ldr	r3, [pc, #72]	@ (8004c1c <vPortExitCritical+0x50>)
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d10b      	bne.n	8004bf2 <vPortExitCritical+0x26>
	__asm volatile
 8004bda:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004bde:	f383 8811 	msr	BASEPRI, r3
 8004be2:	f3bf 8f6f 	isb	sy
 8004be6:	f3bf 8f4f 	dsb	sy
 8004bea:	607b      	str	r3, [r7, #4]
}
 8004bec:	bf00      	nop
 8004bee:	bf00      	nop
 8004bf0:	e7fd      	b.n	8004bee <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8004bf2:	4b0a      	ldr	r3, [pc, #40]	@ (8004c1c <vPortExitCritical+0x50>)
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	3b01      	subs	r3, #1
 8004bf8:	4a08      	ldr	r2, [pc, #32]	@ (8004c1c <vPortExitCritical+0x50>)
 8004bfa:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004bfc:	4b07      	ldr	r3, [pc, #28]	@ (8004c1c <vPortExitCritical+0x50>)
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d105      	bne.n	8004c10 <vPortExitCritical+0x44>
 8004c04:	2300      	movs	r3, #0
 8004c06:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004c08:	683b      	ldr	r3, [r7, #0]
 8004c0a:	f383 8811 	msr	BASEPRI, r3
}
 8004c0e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8004c10:	bf00      	nop
 8004c12:	370c      	adds	r7, #12
 8004c14:	46bd      	mov	sp, r7
 8004c16:	bc80      	pop	{r7}
 8004c18:	4770      	bx	lr
 8004c1a:	bf00      	nop
 8004c1c:	2000000c 	.word	0x2000000c

08004c20 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004c20:	f3ef 8009 	mrs	r0, PSP
 8004c24:	f3bf 8f6f 	isb	sy
 8004c28:	4b0d      	ldr	r3, [pc, #52]	@ (8004c60 <pxCurrentTCBConst>)
 8004c2a:	681a      	ldr	r2, [r3, #0]
 8004c2c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8004c30:	6010      	str	r0, [r2, #0]
 8004c32:	e92d 4008 	stmdb	sp!, {r3, lr}
 8004c36:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8004c3a:	f380 8811 	msr	BASEPRI, r0
 8004c3e:	f7fe fff9 	bl	8003c34 <vTaskSwitchContext>
 8004c42:	f04f 0000 	mov.w	r0, #0
 8004c46:	f380 8811 	msr	BASEPRI, r0
 8004c4a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8004c4e:	6819      	ldr	r1, [r3, #0]
 8004c50:	6808      	ldr	r0, [r1, #0]
 8004c52:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8004c56:	f380 8809 	msr	PSP, r0
 8004c5a:	f3bf 8f6f 	isb	sy
 8004c5e:	4770      	bx	lr

08004c60 <pxCurrentTCBConst>:
 8004c60:	200007c0 	.word	0x200007c0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004c64:	bf00      	nop
 8004c66:	bf00      	nop

08004c68 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004c68:	b580      	push	{r7, lr}
 8004c6a:	b082      	sub	sp, #8
 8004c6c:	af00      	add	r7, sp, #0
	__asm volatile
 8004c6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c72:	f383 8811 	msr	BASEPRI, r3
 8004c76:	f3bf 8f6f 	isb	sy
 8004c7a:	f3bf 8f4f 	dsb	sy
 8004c7e:	607b      	str	r3, [r7, #4]
}
 8004c80:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004c82:	f7fe ff1d 	bl	8003ac0 <xTaskIncrementTick>
 8004c86:	4603      	mov	r3, r0
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d003      	beq.n	8004c94 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004c8c:	4b06      	ldr	r3, [pc, #24]	@ (8004ca8 <xPortSysTickHandler+0x40>)
 8004c8e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004c92:	601a      	str	r2, [r3, #0]
 8004c94:	2300      	movs	r3, #0
 8004c96:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004c98:	683b      	ldr	r3, [r7, #0]
 8004c9a:	f383 8811 	msr	BASEPRI, r3
}
 8004c9e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8004ca0:	bf00      	nop
 8004ca2:	3708      	adds	r7, #8
 8004ca4:	46bd      	mov	sp, r7
 8004ca6:	bd80      	pop	{r7, pc}
 8004ca8:	e000ed04 	.word	0xe000ed04

08004cac <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8004cac:	b480      	push	{r7}
 8004cae:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004cb0:	4b0a      	ldr	r3, [pc, #40]	@ (8004cdc <vPortSetupTimerInterrupt+0x30>)
 8004cb2:	2200      	movs	r2, #0
 8004cb4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004cb6:	4b0a      	ldr	r3, [pc, #40]	@ (8004ce0 <vPortSetupTimerInterrupt+0x34>)
 8004cb8:	2200      	movs	r2, #0
 8004cba:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8004cbc:	4b09      	ldr	r3, [pc, #36]	@ (8004ce4 <vPortSetupTimerInterrupt+0x38>)
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	4a09      	ldr	r2, [pc, #36]	@ (8004ce8 <vPortSetupTimerInterrupt+0x3c>)
 8004cc2:	fba2 2303 	umull	r2, r3, r2, r3
 8004cc6:	099b      	lsrs	r3, r3, #6
 8004cc8:	4a08      	ldr	r2, [pc, #32]	@ (8004cec <vPortSetupTimerInterrupt+0x40>)
 8004cca:	3b01      	subs	r3, #1
 8004ccc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8004cce:	4b03      	ldr	r3, [pc, #12]	@ (8004cdc <vPortSetupTimerInterrupt+0x30>)
 8004cd0:	2207      	movs	r2, #7
 8004cd2:	601a      	str	r2, [r3, #0]
}
 8004cd4:	bf00      	nop
 8004cd6:	46bd      	mov	sp, r7
 8004cd8:	bc80      	pop	{r7}
 8004cda:	4770      	bx	lr
 8004cdc:	e000e010 	.word	0xe000e010
 8004ce0:	e000e018 	.word	0xe000e018
 8004ce4:	20000000 	.word	0x20000000
 8004ce8:	10624dd3 	.word	0x10624dd3
 8004cec:	e000e014 	.word	0xe000e014

08004cf0 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8004cf0:	b480      	push	{r7}
 8004cf2:	b085      	sub	sp, #20
 8004cf4:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8004cf6:	f3ef 8305 	mrs	r3, IPSR
 8004cfa:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	2b0f      	cmp	r3, #15
 8004d00:	d915      	bls.n	8004d2e <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8004d02:	4a17      	ldr	r2, [pc, #92]	@ (8004d60 <vPortValidateInterruptPriority+0x70>)
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	4413      	add	r3, r2
 8004d08:	781b      	ldrb	r3, [r3, #0]
 8004d0a:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8004d0c:	4b15      	ldr	r3, [pc, #84]	@ (8004d64 <vPortValidateInterruptPriority+0x74>)
 8004d0e:	781b      	ldrb	r3, [r3, #0]
 8004d10:	7afa      	ldrb	r2, [r7, #11]
 8004d12:	429a      	cmp	r2, r3
 8004d14:	d20b      	bcs.n	8004d2e <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8004d16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d1a:	f383 8811 	msr	BASEPRI, r3
 8004d1e:	f3bf 8f6f 	isb	sy
 8004d22:	f3bf 8f4f 	dsb	sy
 8004d26:	607b      	str	r3, [r7, #4]
}
 8004d28:	bf00      	nop
 8004d2a:	bf00      	nop
 8004d2c:	e7fd      	b.n	8004d2a <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8004d2e:	4b0e      	ldr	r3, [pc, #56]	@ (8004d68 <vPortValidateInterruptPriority+0x78>)
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8004d36:	4b0d      	ldr	r3, [pc, #52]	@ (8004d6c <vPortValidateInterruptPriority+0x7c>)
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	429a      	cmp	r2, r3
 8004d3c:	d90b      	bls.n	8004d56 <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8004d3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d42:	f383 8811 	msr	BASEPRI, r3
 8004d46:	f3bf 8f6f 	isb	sy
 8004d4a:	f3bf 8f4f 	dsb	sy
 8004d4e:	603b      	str	r3, [r7, #0]
}
 8004d50:	bf00      	nop
 8004d52:	bf00      	nop
 8004d54:	e7fd      	b.n	8004d52 <vPortValidateInterruptPriority+0x62>
	}
 8004d56:	bf00      	nop
 8004d58:	3714      	adds	r7, #20
 8004d5a:	46bd      	mov	sp, r7
 8004d5c:	bc80      	pop	{r7}
 8004d5e:	4770      	bx	lr
 8004d60:	e000e3f0 	.word	0xe000e3f0
 8004d64:	20000dec 	.word	0x20000dec
 8004d68:	e000ed0c 	.word	0xe000ed0c
 8004d6c:	20000df0 	.word	0x20000df0

08004d70 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004d70:	b580      	push	{r7, lr}
 8004d72:	b08a      	sub	sp, #40	@ 0x28
 8004d74:	af00      	add	r7, sp, #0
 8004d76:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004d78:	2300      	movs	r3, #0
 8004d7a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8004d7c:	f7fe fde6 	bl	800394c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004d80:	4b5c      	ldr	r3, [pc, #368]	@ (8004ef4 <pvPortMalloc+0x184>)
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d101      	bne.n	8004d8c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004d88:	f000 f924 	bl	8004fd4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004d8c:	4b5a      	ldr	r3, [pc, #360]	@ (8004ef8 <pvPortMalloc+0x188>)
 8004d8e:	681a      	ldr	r2, [r3, #0]
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	4013      	ands	r3, r2
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	f040 8095 	bne.w	8004ec4 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d01e      	beq.n	8004dde <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8004da0:	2208      	movs	r2, #8
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	4413      	add	r3, r2
 8004da6:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	f003 0307 	and.w	r3, r3, #7
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d015      	beq.n	8004dde <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	f023 0307 	bic.w	r3, r3, #7
 8004db8:	3308      	adds	r3, #8
 8004dba:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	f003 0307 	and.w	r3, r3, #7
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d00b      	beq.n	8004dde <pvPortMalloc+0x6e>
	__asm volatile
 8004dc6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004dca:	f383 8811 	msr	BASEPRI, r3
 8004dce:	f3bf 8f6f 	isb	sy
 8004dd2:	f3bf 8f4f 	dsb	sy
 8004dd6:	617b      	str	r3, [r7, #20]
}
 8004dd8:	bf00      	nop
 8004dda:	bf00      	nop
 8004ddc:	e7fd      	b.n	8004dda <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d06f      	beq.n	8004ec4 <pvPortMalloc+0x154>
 8004de4:	4b45      	ldr	r3, [pc, #276]	@ (8004efc <pvPortMalloc+0x18c>)
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	687a      	ldr	r2, [r7, #4]
 8004dea:	429a      	cmp	r2, r3
 8004dec:	d86a      	bhi.n	8004ec4 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8004dee:	4b44      	ldr	r3, [pc, #272]	@ (8004f00 <pvPortMalloc+0x190>)
 8004df0:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8004df2:	4b43      	ldr	r3, [pc, #268]	@ (8004f00 <pvPortMalloc+0x190>)
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004df8:	e004      	b.n	8004e04 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8004dfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004dfc:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8004dfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004e04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e06:	685b      	ldr	r3, [r3, #4]
 8004e08:	687a      	ldr	r2, [r7, #4]
 8004e0a:	429a      	cmp	r2, r3
 8004e0c:	d903      	bls.n	8004e16 <pvPortMalloc+0xa6>
 8004e0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d1f1      	bne.n	8004dfa <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8004e16:	4b37      	ldr	r3, [pc, #220]	@ (8004ef4 <pvPortMalloc+0x184>)
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004e1c:	429a      	cmp	r2, r3
 8004e1e:	d051      	beq.n	8004ec4 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004e20:	6a3b      	ldr	r3, [r7, #32]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	2208      	movs	r2, #8
 8004e26:	4413      	add	r3, r2
 8004e28:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004e2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e2c:	681a      	ldr	r2, [r3, #0]
 8004e2e:	6a3b      	ldr	r3, [r7, #32]
 8004e30:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004e32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e34:	685a      	ldr	r2, [r3, #4]
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	1ad2      	subs	r2, r2, r3
 8004e3a:	2308      	movs	r3, #8
 8004e3c:	005b      	lsls	r3, r3, #1
 8004e3e:	429a      	cmp	r2, r3
 8004e40:	d920      	bls.n	8004e84 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004e42:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	4413      	add	r3, r2
 8004e48:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004e4a:	69bb      	ldr	r3, [r7, #24]
 8004e4c:	f003 0307 	and.w	r3, r3, #7
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d00b      	beq.n	8004e6c <pvPortMalloc+0xfc>
	__asm volatile
 8004e54:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e58:	f383 8811 	msr	BASEPRI, r3
 8004e5c:	f3bf 8f6f 	isb	sy
 8004e60:	f3bf 8f4f 	dsb	sy
 8004e64:	613b      	str	r3, [r7, #16]
}
 8004e66:	bf00      	nop
 8004e68:	bf00      	nop
 8004e6a:	e7fd      	b.n	8004e68 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004e6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e6e:	685a      	ldr	r2, [r3, #4]
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	1ad2      	subs	r2, r2, r3
 8004e74:	69bb      	ldr	r3, [r7, #24]
 8004e76:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8004e78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e7a:	687a      	ldr	r2, [r7, #4]
 8004e7c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004e7e:	69b8      	ldr	r0, [r7, #24]
 8004e80:	f000 f90a 	bl	8005098 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004e84:	4b1d      	ldr	r3, [pc, #116]	@ (8004efc <pvPortMalloc+0x18c>)
 8004e86:	681a      	ldr	r2, [r3, #0]
 8004e88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e8a:	685b      	ldr	r3, [r3, #4]
 8004e8c:	1ad3      	subs	r3, r2, r3
 8004e8e:	4a1b      	ldr	r2, [pc, #108]	@ (8004efc <pvPortMalloc+0x18c>)
 8004e90:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004e92:	4b1a      	ldr	r3, [pc, #104]	@ (8004efc <pvPortMalloc+0x18c>)
 8004e94:	681a      	ldr	r2, [r3, #0]
 8004e96:	4b1b      	ldr	r3, [pc, #108]	@ (8004f04 <pvPortMalloc+0x194>)
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	429a      	cmp	r2, r3
 8004e9c:	d203      	bcs.n	8004ea6 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004e9e:	4b17      	ldr	r3, [pc, #92]	@ (8004efc <pvPortMalloc+0x18c>)
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	4a18      	ldr	r2, [pc, #96]	@ (8004f04 <pvPortMalloc+0x194>)
 8004ea4:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004ea6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ea8:	685a      	ldr	r2, [r3, #4]
 8004eaa:	4b13      	ldr	r3, [pc, #76]	@ (8004ef8 <pvPortMalloc+0x188>)
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	431a      	orrs	r2, r3
 8004eb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004eb2:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8004eb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004eb6:	2200      	movs	r2, #0
 8004eb8:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8004eba:	4b13      	ldr	r3, [pc, #76]	@ (8004f08 <pvPortMalloc+0x198>)
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	3301      	adds	r3, #1
 8004ec0:	4a11      	ldr	r2, [pc, #68]	@ (8004f08 <pvPortMalloc+0x198>)
 8004ec2:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8004ec4:	f7fe fd50 	bl	8003968 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004ec8:	69fb      	ldr	r3, [r7, #28]
 8004eca:	f003 0307 	and.w	r3, r3, #7
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d00b      	beq.n	8004eea <pvPortMalloc+0x17a>
	__asm volatile
 8004ed2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ed6:	f383 8811 	msr	BASEPRI, r3
 8004eda:	f3bf 8f6f 	isb	sy
 8004ede:	f3bf 8f4f 	dsb	sy
 8004ee2:	60fb      	str	r3, [r7, #12]
}
 8004ee4:	bf00      	nop
 8004ee6:	bf00      	nop
 8004ee8:	e7fd      	b.n	8004ee6 <pvPortMalloc+0x176>
	return pvReturn;
 8004eea:	69fb      	ldr	r3, [r7, #28]
}
 8004eec:	4618      	mov	r0, r3
 8004eee:	3728      	adds	r7, #40	@ 0x28
 8004ef0:	46bd      	mov	sp, r7
 8004ef2:	bd80      	pop	{r7, pc}
 8004ef4:	200019fc 	.word	0x200019fc
 8004ef8:	20001a10 	.word	0x20001a10
 8004efc:	20001a00 	.word	0x20001a00
 8004f00:	200019f4 	.word	0x200019f4
 8004f04:	20001a04 	.word	0x20001a04
 8004f08:	20001a08 	.word	0x20001a08

08004f0c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004f0c:	b580      	push	{r7, lr}
 8004f0e:	b086      	sub	sp, #24
 8004f10:	af00      	add	r7, sp, #0
 8004f12:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d04f      	beq.n	8004fbe <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8004f1e:	2308      	movs	r3, #8
 8004f20:	425b      	negs	r3, r3
 8004f22:	697a      	ldr	r2, [r7, #20]
 8004f24:	4413      	add	r3, r2
 8004f26:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8004f28:	697b      	ldr	r3, [r7, #20]
 8004f2a:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004f2c:	693b      	ldr	r3, [r7, #16]
 8004f2e:	685a      	ldr	r2, [r3, #4]
 8004f30:	4b25      	ldr	r3, [pc, #148]	@ (8004fc8 <vPortFree+0xbc>)
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	4013      	ands	r3, r2
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d10b      	bne.n	8004f52 <vPortFree+0x46>
	__asm volatile
 8004f3a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f3e:	f383 8811 	msr	BASEPRI, r3
 8004f42:	f3bf 8f6f 	isb	sy
 8004f46:	f3bf 8f4f 	dsb	sy
 8004f4a:	60fb      	str	r3, [r7, #12]
}
 8004f4c:	bf00      	nop
 8004f4e:	bf00      	nop
 8004f50:	e7fd      	b.n	8004f4e <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004f52:	693b      	ldr	r3, [r7, #16]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d00b      	beq.n	8004f72 <vPortFree+0x66>
	__asm volatile
 8004f5a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f5e:	f383 8811 	msr	BASEPRI, r3
 8004f62:	f3bf 8f6f 	isb	sy
 8004f66:	f3bf 8f4f 	dsb	sy
 8004f6a:	60bb      	str	r3, [r7, #8]
}
 8004f6c:	bf00      	nop
 8004f6e:	bf00      	nop
 8004f70:	e7fd      	b.n	8004f6e <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004f72:	693b      	ldr	r3, [r7, #16]
 8004f74:	685a      	ldr	r2, [r3, #4]
 8004f76:	4b14      	ldr	r3, [pc, #80]	@ (8004fc8 <vPortFree+0xbc>)
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	4013      	ands	r3, r2
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d01e      	beq.n	8004fbe <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004f80:	693b      	ldr	r3, [r7, #16]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d11a      	bne.n	8004fbe <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004f88:	693b      	ldr	r3, [r7, #16]
 8004f8a:	685a      	ldr	r2, [r3, #4]
 8004f8c:	4b0e      	ldr	r3, [pc, #56]	@ (8004fc8 <vPortFree+0xbc>)
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	43db      	mvns	r3, r3
 8004f92:	401a      	ands	r2, r3
 8004f94:	693b      	ldr	r3, [r7, #16]
 8004f96:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8004f98:	f7fe fcd8 	bl	800394c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8004f9c:	693b      	ldr	r3, [r7, #16]
 8004f9e:	685a      	ldr	r2, [r3, #4]
 8004fa0:	4b0a      	ldr	r3, [pc, #40]	@ (8004fcc <vPortFree+0xc0>)
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	4413      	add	r3, r2
 8004fa6:	4a09      	ldr	r2, [pc, #36]	@ (8004fcc <vPortFree+0xc0>)
 8004fa8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004faa:	6938      	ldr	r0, [r7, #16]
 8004fac:	f000 f874 	bl	8005098 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8004fb0:	4b07      	ldr	r3, [pc, #28]	@ (8004fd0 <vPortFree+0xc4>)
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	3301      	adds	r3, #1
 8004fb6:	4a06      	ldr	r2, [pc, #24]	@ (8004fd0 <vPortFree+0xc4>)
 8004fb8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8004fba:	f7fe fcd5 	bl	8003968 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8004fbe:	bf00      	nop
 8004fc0:	3718      	adds	r7, #24
 8004fc2:	46bd      	mov	sp, r7
 8004fc4:	bd80      	pop	{r7, pc}
 8004fc6:	bf00      	nop
 8004fc8:	20001a10 	.word	0x20001a10
 8004fcc:	20001a00 	.word	0x20001a00
 8004fd0:	20001a0c 	.word	0x20001a0c

08004fd4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8004fd4:	b480      	push	{r7}
 8004fd6:	b085      	sub	sp, #20
 8004fd8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004fda:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8004fde:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8004fe0:	4b27      	ldr	r3, [pc, #156]	@ (8005080 <prvHeapInit+0xac>)
 8004fe2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	f003 0307 	and.w	r3, r3, #7
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d00c      	beq.n	8005008 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	3307      	adds	r3, #7
 8004ff2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	f023 0307 	bic.w	r3, r3, #7
 8004ffa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004ffc:	68ba      	ldr	r2, [r7, #8]
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	1ad3      	subs	r3, r2, r3
 8005002:	4a1f      	ldr	r2, [pc, #124]	@ (8005080 <prvHeapInit+0xac>)
 8005004:	4413      	add	r3, r2
 8005006:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800500c:	4a1d      	ldr	r2, [pc, #116]	@ (8005084 <prvHeapInit+0xb0>)
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005012:	4b1c      	ldr	r3, [pc, #112]	@ (8005084 <prvHeapInit+0xb0>)
 8005014:	2200      	movs	r2, #0
 8005016:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	68ba      	ldr	r2, [r7, #8]
 800501c:	4413      	add	r3, r2
 800501e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005020:	2208      	movs	r2, #8
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	1a9b      	subs	r3, r3, r2
 8005026:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	f023 0307 	bic.w	r3, r3, #7
 800502e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	4a15      	ldr	r2, [pc, #84]	@ (8005088 <prvHeapInit+0xb4>)
 8005034:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005036:	4b14      	ldr	r3, [pc, #80]	@ (8005088 <prvHeapInit+0xb4>)
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	2200      	movs	r2, #0
 800503c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800503e:	4b12      	ldr	r3, [pc, #72]	@ (8005088 <prvHeapInit+0xb4>)
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	2200      	movs	r2, #0
 8005044:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800504a:	683b      	ldr	r3, [r7, #0]
 800504c:	68fa      	ldr	r2, [r7, #12]
 800504e:	1ad2      	subs	r2, r2, r3
 8005050:	683b      	ldr	r3, [r7, #0]
 8005052:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005054:	4b0c      	ldr	r3, [pc, #48]	@ (8005088 <prvHeapInit+0xb4>)
 8005056:	681a      	ldr	r2, [r3, #0]
 8005058:	683b      	ldr	r3, [r7, #0]
 800505a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800505c:	683b      	ldr	r3, [r7, #0]
 800505e:	685b      	ldr	r3, [r3, #4]
 8005060:	4a0a      	ldr	r2, [pc, #40]	@ (800508c <prvHeapInit+0xb8>)
 8005062:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005064:	683b      	ldr	r3, [r7, #0]
 8005066:	685b      	ldr	r3, [r3, #4]
 8005068:	4a09      	ldr	r2, [pc, #36]	@ (8005090 <prvHeapInit+0xbc>)
 800506a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800506c:	4b09      	ldr	r3, [pc, #36]	@ (8005094 <prvHeapInit+0xc0>)
 800506e:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8005072:	601a      	str	r2, [r3, #0]
}
 8005074:	bf00      	nop
 8005076:	3714      	adds	r7, #20
 8005078:	46bd      	mov	sp, r7
 800507a:	bc80      	pop	{r7}
 800507c:	4770      	bx	lr
 800507e:	bf00      	nop
 8005080:	20000df4 	.word	0x20000df4
 8005084:	200019f4 	.word	0x200019f4
 8005088:	200019fc 	.word	0x200019fc
 800508c:	20001a04 	.word	0x20001a04
 8005090:	20001a00 	.word	0x20001a00
 8005094:	20001a10 	.word	0x20001a10

08005098 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005098:	b480      	push	{r7}
 800509a:	b085      	sub	sp, #20
 800509c:	af00      	add	r7, sp, #0
 800509e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80050a0:	4b27      	ldr	r3, [pc, #156]	@ (8005140 <prvInsertBlockIntoFreeList+0xa8>)
 80050a2:	60fb      	str	r3, [r7, #12]
 80050a4:	e002      	b.n	80050ac <prvInsertBlockIntoFreeList+0x14>
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	60fb      	str	r3, [r7, #12]
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	687a      	ldr	r2, [r7, #4]
 80050b2:	429a      	cmp	r2, r3
 80050b4:	d8f7      	bhi.n	80050a6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	685b      	ldr	r3, [r3, #4]
 80050be:	68ba      	ldr	r2, [r7, #8]
 80050c0:	4413      	add	r3, r2
 80050c2:	687a      	ldr	r2, [r7, #4]
 80050c4:	429a      	cmp	r2, r3
 80050c6:	d108      	bne.n	80050da <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	685a      	ldr	r2, [r3, #4]
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	685b      	ldr	r3, [r3, #4]
 80050d0:	441a      	add	r2, r3
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	685b      	ldr	r3, [r3, #4]
 80050e2:	68ba      	ldr	r2, [r7, #8]
 80050e4:	441a      	add	r2, r3
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	429a      	cmp	r2, r3
 80050ec:	d118      	bne.n	8005120 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	681a      	ldr	r2, [r3, #0]
 80050f2:	4b14      	ldr	r3, [pc, #80]	@ (8005144 <prvInsertBlockIntoFreeList+0xac>)
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	429a      	cmp	r2, r3
 80050f8:	d00d      	beq.n	8005116 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	685a      	ldr	r2, [r3, #4]
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	685b      	ldr	r3, [r3, #4]
 8005104:	441a      	add	r2, r3
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	681a      	ldr	r2, [r3, #0]
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	601a      	str	r2, [r3, #0]
 8005114:	e008      	b.n	8005128 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005116:	4b0b      	ldr	r3, [pc, #44]	@ (8005144 <prvInsertBlockIntoFreeList+0xac>)
 8005118:	681a      	ldr	r2, [r3, #0]
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	601a      	str	r2, [r3, #0]
 800511e:	e003      	b.n	8005128 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	681a      	ldr	r2, [r3, #0]
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005128:	68fa      	ldr	r2, [r7, #12]
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	429a      	cmp	r2, r3
 800512e:	d002      	beq.n	8005136 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	687a      	ldr	r2, [r7, #4]
 8005134:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005136:	bf00      	nop
 8005138:	3714      	adds	r7, #20
 800513a:	46bd      	mov	sp, r7
 800513c:	bc80      	pop	{r7}
 800513e:	4770      	bx	lr
 8005140:	200019f4 	.word	0x200019f4
 8005144:	200019fc 	.word	0x200019fc

08005148 <memset>:
 8005148:	4603      	mov	r3, r0
 800514a:	4402      	add	r2, r0
 800514c:	4293      	cmp	r3, r2
 800514e:	d100      	bne.n	8005152 <memset+0xa>
 8005150:	4770      	bx	lr
 8005152:	f803 1b01 	strb.w	r1, [r3], #1
 8005156:	e7f9      	b.n	800514c <memset+0x4>

08005158 <__libc_init_array>:
 8005158:	b570      	push	{r4, r5, r6, lr}
 800515a:	2600      	movs	r6, #0
 800515c:	4d0c      	ldr	r5, [pc, #48]	@ (8005190 <__libc_init_array+0x38>)
 800515e:	4c0d      	ldr	r4, [pc, #52]	@ (8005194 <__libc_init_array+0x3c>)
 8005160:	1b64      	subs	r4, r4, r5
 8005162:	10a4      	asrs	r4, r4, #2
 8005164:	42a6      	cmp	r6, r4
 8005166:	d109      	bne.n	800517c <__libc_init_array+0x24>
 8005168:	f000 f828 	bl	80051bc <_init>
 800516c:	2600      	movs	r6, #0
 800516e:	4d0a      	ldr	r5, [pc, #40]	@ (8005198 <__libc_init_array+0x40>)
 8005170:	4c0a      	ldr	r4, [pc, #40]	@ (800519c <__libc_init_array+0x44>)
 8005172:	1b64      	subs	r4, r4, r5
 8005174:	10a4      	asrs	r4, r4, #2
 8005176:	42a6      	cmp	r6, r4
 8005178:	d105      	bne.n	8005186 <__libc_init_array+0x2e>
 800517a:	bd70      	pop	{r4, r5, r6, pc}
 800517c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005180:	4798      	blx	r3
 8005182:	3601      	adds	r6, #1
 8005184:	e7ee      	b.n	8005164 <__libc_init_array+0xc>
 8005186:	f855 3b04 	ldr.w	r3, [r5], #4
 800518a:	4798      	blx	r3
 800518c:	3601      	adds	r6, #1
 800518e:	e7f2      	b.n	8005176 <__libc_init_array+0x1e>
 8005190:	08005248 	.word	0x08005248
 8005194:	08005248 	.word	0x08005248
 8005198:	08005248 	.word	0x08005248
 800519c:	0800524c 	.word	0x0800524c

080051a0 <memcpy>:
 80051a0:	440a      	add	r2, r1
 80051a2:	4291      	cmp	r1, r2
 80051a4:	f100 33ff 	add.w	r3, r0, #4294967295
 80051a8:	d100      	bne.n	80051ac <memcpy+0xc>
 80051aa:	4770      	bx	lr
 80051ac:	b510      	push	{r4, lr}
 80051ae:	f811 4b01 	ldrb.w	r4, [r1], #1
 80051b2:	4291      	cmp	r1, r2
 80051b4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80051b8:	d1f9      	bne.n	80051ae <memcpy+0xe>
 80051ba:	bd10      	pop	{r4, pc}

080051bc <_init>:
 80051bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80051be:	bf00      	nop
 80051c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80051c2:	bc08      	pop	{r3}
 80051c4:	469e      	mov	lr, r3
 80051c6:	4770      	bx	lr

080051c8 <_fini>:
 80051c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80051ca:	bf00      	nop
 80051cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80051ce:	bc08      	pop	{r3}
 80051d0:	469e      	mov	lr, r3
 80051d2:	4770      	bx	lr

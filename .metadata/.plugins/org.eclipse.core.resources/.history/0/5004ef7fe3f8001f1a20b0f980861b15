#include "ec11.h"



// 按键子状态
typedef enum
{
	KEY_STEP_PRESS, // 按下
	KEY_STEP_PRESS_DEBOUNCING, // 按下去抖（可以和按下合并）
	KEY_STEP_RELEASE_DEBOUNCING, // 释放去抖
	KEY_STEP_RELEASE, // 释放（可以和释放去抖合并）
} KeyStep;

// 按键主状态
typedef enum {
	EC11_KEY_INVALID,
	EC11_KEY_PRESS, // 按下
	EC11_KEY_CLICK,	 // 单击（按下后释放触发）
	EC11_KEY_DOUBLE_CLICK, // 双击
	EC11_KEY_LONG_CLICK, // 长按
	EC11_KEY_LEFT_ROTATE, // 向左旋转一下
	EC11_KEY_RIGHT_ROTATE, // 向右旋转一下
	EC11_KEY_PRESS_LEFT_ROTATE, // 按住向左旋转一下
	EC11_KEY_PRESS_RIGHT_ROTATE, // 按住向右旋转一下
} Ec11KeyState;

const char *keyIndexNameArray[] = {
	"key0",
	"ec11_key"
};

const char *keyStateNameArray[] = {
	"invalid", "press", "click", "double_click", "long_click",
	"left_rotate", "right_rotate", "hold_left_rotate", "hold_right_rotate"
};

typedef void (*ItemCallback)();

typedef struct
{
	Ec11KeyState currentState; // 当前主状态
	KeyStep currentStep; // 当前子状态
	ItemCallback callback;
} Ec11KeyStateMachineItem;

void ProcessClickPress();
void ProcessClickPressDebouncing();
void ProcessClickReleaseDebouncing();
void ProcessClickRelease();

void ProcessDoubleClickPress();
void ProcessDoubleClickDebouncing();
void ProcessDoubleClickReleaseDebouncing();
void ProcessDoubleClickRelease();

static Ec11KeyStateMachineItem ec11StateMachineTable[] = {
	{EC11_KEY_CLICK, KEY_STEP_PRESS, ProcessClickPress},
	{EC11_KEY_CLICK, KEY_STEP_PRESS_DEBOUNCING, ProcessClickPressDebouncing},
	{EC11_KEY_CLICK, KEY_STEP_RELEASE_DEBOUNCING, ProcessClickReleaseDebouncing},
	{EC11_KEY_CLICK, KEY_STEP_RELEASE, ProcessClickRelease},

	{EC11_KEY_DOUBLE_CLICK, KEY_STEP_PRESS, ProcessDoubleClickPress},
	{EC11_KEY_DOUBLE_CLICK, KEY_STEP_PRESS_DEBOUNCING, ProcessDoubleClickDebouncing},
	{EC11_KEY_DOUBLE_CLICK, KEY_STEP_RELEASE_DEBOUNCING, ProcessDoubleClickReleaseDebouncing},
	{EC11_KEY_DOUBLE_CLICK, KEY_STEP_RELEASE, ProcessDoubleClickRelease},
};

typedef enum {
	EC11_DIRECTION_INVALID = 0,
	EC11_DIRECTION_SEQUENCE_HALF = 1,
	EC11_DIRECTION_REVERSE_HALF,
} Ec11DirectionState;



typedef struct {
	Ec11KeyCircleBuf keyCircleBuf;
	Ec11KeyStateMachineItem ec11StateMachine;
	GPIO_PinState lastKeyLevel;
	uint32_t lastPressTick; // 长按判断
	uint32_t debouncingTick; // 去抖
	uint32_t lastClickTick; // 识别到单击的tick，判断双击用
	bool hasRotate; // ec11是否旋转
} Ec11Encoder;

static Ec11Encoder ec11Encoder;


void Ec11ResetStateMachineAnd()
{
	ec11Encoder.ec11StateMachine.currentState = EC11_KEY_CLICK;
	ec11Encoder.ec11StateMachine.currentStep = KEY_STEP_PRESS;
	ec11Encoder.lastKeyLevel = GPIO_PIN_SET;
	ec11Encoder.lastPressTick = 0;
	ec11Encoder.debouncingTick = 0;
	ec11Encoder.lastClickTick = 0;
	ec11Encoder.hasRotate = false;
}

void Ec11EncoderInit() {
	ec11Encoder.keyCircleBuf.readIndex = 0;
	ec11Encoder.keyCircleBuf.writeIndex = 0;
	ec11Encoder.keyCircleBuf.count = 0;
	ec11Encoder.keyCircleBuf.bufLock = 0;
	memset(ec11Encoder.keyCircleBuf.keyInfoBuf, 0, sizeof(KeyInfo) * KEY_BUF_SIZE);

	Ec11ResetStateMachineAnd();
}

#include "circle_buffer.h"

bool ReadKeyInfo(KeyInfo *out, uint8_t *count)
{
	bool ret = false;
	Ec11KeyCircleBuf *cbuf = &ec11Encoder.keyCircleBuf;
	accquire_spinlock(&cbuf->bufLock, 0);
	if (cbuf->count > 0) {
		*out = cbuf->keyInfoBuf[cbuf->readIndex];
		cbuf->count--;
		*count = cbuf->count;
		cbuf->readIndex = (cbuf->readIndex + 1) % KEY_BUF_SIZE;
		ret = true;
	}
	release_spinlock(&cbuf->bufLock);
	return ret;
}

bool PeekKeyInfo(KeyInfo *out)
{
	bool ret = false;
	Ec11KeyCircleBuf *cbuf = &ec11Encoder.keyCircleBuf;
	accquire_spinlock(&cbuf->bufLock, 0);
	do {
		if (cbuf->count > 0) {
			*out = cbuf->keyInfoBuf[cbuf->readIndex];
			ret = true;
			break;
		}
	} while (0);
	release_spinlock(&cbuf->bufLock);
	return ret;
}

void WriteKeyInfo(const KeyInfo *keyInfo)
{
	Ec11KeyCircleBuf *cbuf = &ec11Encoder.keyCircleBuf;
	accquire_spinlock(&cbuf->bufLock, 0);
	if (cbuf->count >= KEY_BUF_SIZE && cbuf->writeIndex == cbuf->readIndex) { // circlebuf满的时候写数据的时候需要更新读索引
		cbuf->readIndex = (cbuf->readIndex + 1) % KEY_BUF_SIZE;
	}
	cbuf->keyInfoBuf[cbuf->writeIndex] = *keyInfo;
	cbuf->writeIndex = (cbuf->writeIndex + 1) % KEY_BUF_SIZE;
	cbuf->count++;
	if (cbuf->count > KEY_BUF_SIZE) {
		cbuf->count = KEY_BUF_SIZE;
	}
	release_spinlock(&cbuf->bufLock);
}


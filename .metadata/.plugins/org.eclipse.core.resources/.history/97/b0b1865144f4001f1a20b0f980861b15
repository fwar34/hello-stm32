/* USER CODE BEGIN Header */
/**
 ******************************************************************************
 * @file           : main.c
 * @brief          : Main program body
 ******************************************************************************
 * @attention
 *
 * Copyright (c) 2025 STMicroelectronics.
 * All rights reserved.
 *
 * This software is licensed under terms that can be found in the LICENSE file
 * in the root directory of this software component.
 * If no LICENSE file comes with this software, it is provided AS-IS.
 *
 ******************************************************************************
 */
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include "main.h"

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */
#include "string.h"
#include "stdio.h"
#include "key.h"
/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */

/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */

/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/
TIM_HandleTypeDef htim4;

UART_HandleTypeDef huart2;

/* USER CODE BEGIN PV */

/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_TIM4_Init(void);
static void MX_USART2_UART_Init(void);
/* USER CODE BEGIN PFP */

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
uint32_t g_interruptCount = 0;
static int32_t encoderCounter = 0;

static void DumpEncoder(const char *msg) {
	HAL_UART_Transmit_IT(&huart2, (uint8_t*) msg, strlen(msg));
}

static void Ec11TickProcess()
{
	static GPIO_PinState lastAState = 1;
	static GPIO_PinState lastBState = 1;
	static GPIO_PinState currAState = 1;
	static GPIO_PinState currBState = 1;
	static uint32_t switchACounter = 0;
	static uint32_t switchBCounter = 0;

	currAState = HAL_GPIO_ReadPin(ec11_A_GPIO_Port, ec11_A_Pin);
	currBState = HAL_GPIO_ReadPin(ec11_B_GPIO_Port, ec11_B_Pin);
	if (currAState != lastAState) {
		if (currAState == GPIO_PIN_RESET) {
			switchACounter++;
		} else {
			switchACounter++;
			if (currBState == GPIO_PIN_SET && switchACounter == 2) {
				encoderCounter++;
				char message[100];
				memset(message, 0, sizeof(message));
				sprintf(message, "--encoderCount = %ld\n", encoderCounter);
				DumpEncoder(message);
				HAL_GPIO_TogglePin(Led0_GPIO_Port, Led0_Pin);

				switchACounter = 0;
				switchBCounter = 0;
			}
		}
		lastAState = currAState;
	}

	if (currBState != lastBState) {
		if (currBState == GPIO_PIN_RESET) {
			switchBCounter++;
		} else {
			switchBCounter++;
			if (currAState == GPIO_PIN_SET && switchACounter == 2) {
				encoderCounter++;
				char message[100];
				memset(message, 0, sizeof(message));
				sprintf(message, "++encoderCount = %ld\n", encoderCounter);
				DumpEncoder(message);
				HAL_GPIO_TogglePin(Led0_GPIO_Port, Led0_Pin);

				switchACounter = 0;
				switchBCounter = 0;
			}
		}
		lastBState = currBState;
	}
}

typedef struct
{
	uint8_t ec11StateBuf[4];
	uint8_t readIndex;
	uint8_t writeIndex;
	uint8_t count;
} Ec11StateBuf;

typedef enum
{
	EC11_KEY_SEQUENCE,
	EC11_KEY_REVERSE,
	EC11_KEY_PRESS,
	EC11_KEY_HOLD,
	EC11_KEY_RELEASE,
	EC11_KEY_CLICK,
	EC11_KEY_DOUBLE_CLICK,
	EC11_KEY_HOLD_SEQUENCE,
	EC11_KEY_HOLD_REVERSE21`3
} Ec11KeyState;


static void Ec11TickProcess4()
{
	static Ec11State ec11CurrentState = EC11_INVALID;
	static GPIO_PinState lastAState = 1;
	static GPIO_PinState lastBState = 1;
	static GPIO_PinState currAState = 1;
	static GPIO_PinState currBState = 1;
	static uint32_t switchACounter = 0;
	static uint32_t switchBCounter = 0;

	currAState = HAL_GPIO_ReadPin(ec11_A_GPIO_Port, ec11_A_Pin);
	currBState = HAL_GPIO_ReadPin(ec11_B_GPIO_Port, ec11_B_Pin);
	if (currAState != lastAState) {
//		switchACounter++;
		switchACounter = (switchACounter + 1) > 2 ? 1 : (switchACounter + 1);
		if (currAState == GPIO_PIN_RESET) { // A相下降沿
			if (currBState == GPIO_PIN_SET) {
				ec11CurrentState = EC11_SEQUENCE_HALF;
			} else {
				ec11CurrentState = EC11_REVERSE_HALF;
			}
		} else { // A相上升沿
			if (ec11CurrentState == EC11_SEQUENCE_HALF) {
				if (switchBCounter == 2) {
					ec11CurrentState = EC11_INVALID;
				} else if (switchBCounter == 1) {
					encoderCounter++;
					char message[200];
					sprintf(message, "--encoderCount = %ld\n", encoderCounter);
					DumpEncoder(message);
					HAL_GPIO_TogglePin(Led0_GPIO_Port, Led0_Pin);
				}
			} else if (ec11CurrentState == EC11_REVERSE_HALF) {
				if (switchBCounter == 1) {
					ec11CurrentState = EC11_INVALID;
				} else if (switchBCounter == 2) {
					encoderCounter--;
					char message[200];
					sprintf(message, "++encoderCount = %ld\n", encoderCounter);
					DumpEncoder(message);
					HAL_GPIO_TogglePin(Led0_GPIO_Port, Led0_Pin);
				}
			}
		}
		lastAState = currAState;
	}

	if (currBState != lastBState) {
//		switchBCounter++;
		switchBCounter = (switchBCounter + 1) > 2 ? 1 : (switchBCounter + 1);
		if (currBState == GPIO_PIN_SET) { // B 相上升沿
			if (ec11CurrentState == EC11_SEQUENCE_HALF) {
				if (switchACounter == 1) {
					ec11CurrentState = EC11_INVALID;
				}
			} else if (ec11CurrentState == EC11_REVERSE_HALF) {
				if (switchACounter == 2) {
					ec11CurrentState = EC11_INVALID;
				}
			}
		}
		lastBState = currBState;
	}
}

//static void Ec11TickProcess2()
//{
//	static GPIO_PinState lastAState = 1;
//	static GPIO_PinState lastBState = 1;
//	static GPIO_PinState currAState = 1;
//	static GPIO_PinState currBState = 1;
//	static uint32_t rasingATick = 0;
//	static uint32_t rasingBTick = 0;
//	static uint32_t fallingATick = 0;
//	static uint32_t fallingBTick = 0;
//
//	currAState = HAL_GPIO_ReadPin(ec11_A_GPIO_Port, ec11_A_Pin);
//	currBState = HAL_GPIO_ReadPin(ec11_B_GPIO_Port, ec11_B_Pin);
//	if (currAState != lastAState) {
//		if (currAState == GPIO_PIN_RESET) {
//			fallingATick = HAL_GetTick();
//		} else {
//			rasingATick = HAL_GetTick();
//		}
//		lastAState = currAState;
//	}
//
//	if (currBState != lastBState) {
//		if (currBState == GPIO_PIN_RESET) {
//			fallingBTick = HAL_GetTick();
//		} else {
//			rasingBTick = HAL_GetTick();
//		}
//		lastBState = currBState;
//	}
//
//	if (fallingATick < fallingBTick && rasingATick < rasingBTick) {
//		encoderCounter++;
//		char message[200];
//		sprintf(message, "++fallingA=%d,rasingA=%ld,fallingB=%ld,rasingB=%ld\n",
//						fallingATick, rasingATick, fallingBTick, rasingBTick);
//		DumpEncoder(message);
//		HAL_GPIO_TogglePin(Led0_GPIO_Port, Led0_Pin);
//
//		fallingATick = 0;
//		fallingBTick = 0;
//		rasingATick = 0;
//		rasingBTick = 0;
//	}
//
//	if (fallingATick < fallingBTick && rasingATick > rasingBTick) {
//		encoderCounter--;
//		char message[200];
//		sprintf(message, "--fallingA = %d, rasingA = %ld,\n fallingB = %ld, rasingB = %ld\n",
//				fallingATick, rasingATick, fallingBTick, rasingBTick);
//		DumpEncoder(message);
//		HAL_GPIO_TogglePin(Led0_GPIO_Port, Led0_Pin);
//		fallingATick = 0;
//		fallingBTick = 0;
//		rasingATick = 0;
//		rasingBTick = 0;
//	}
//}

//static void Ec11TickProcess() {
//	static uint8_t lastALevel = 1;
////	static uint8_t lastBLevel = 1;
//	static uint8_t currALevel;
//	currALevel = HAL_GPIO_ReadPin(ec11_A_GPIO_Port, ec11_A_Pin);
//	if (currALevel != lastALevel) {
//		if (currALevel == GPIO_PIN_RESET) {
//			if (HAL_GPIO_ReadPin(ec11_B_GPIO_Port, ec11_B_Pin)
//					== GPIO_PIN_SET) {
//				encoderCounter++;
//				char message[100];
//				sprintf(message, "increase counter = %ld\n", encoderCounter);
//				DumpEncoder(message);
//				HAL_GPIO_TogglePin(Led0_GPIO_Port, Led0_Pin);
//			} else {
//				// 反转
//				encoderCounter--;
//				char message[100];
//				sprintf(message, "decrease counter = %ld\n", encoderCounter);
//				DumpEncoder(message);
//				HAL_GPIO_TogglePin(Led0_GPIO_Port, Led0_Pin);
//			}
//		}
//		lastALevel = currALevel;
//	}
//}

static uint32_t tickCounter = 0;
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
//	static char msg[100];
//	if (tickCounter % 50 == 0) {
//		tickCounter = 0;
//		sprintf(msg, "interrupt counter = %lu", htim4.Instance->CNT);
//		HAL_UART_Transmit_IT(&huart2, (uint8_t*)msg, strlen(msg));
//		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
//	}
	tickCounter++;
	Ec11TickProcess4();
	if (tickCounter % 10 == 0) {
		KeyTickProcess();
	}
}
/* USER CODE END 0 */

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{

  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();

  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();

  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  MX_TIM4_Init();
  MX_USART2_UART_Init();
  /* USER CODE BEGIN 2 */
	HAL_TIM_Base_Start_IT(&htim4);
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
		int8_t keyNum = GetKeyNum();
		switch (keyNum) {
		case KEY_0:
			HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
			break;
		default:
		}
//	  static char message[100];
//	  sprintf(message, "GetKeyNum = %d", keyNum);
//	  HAL_UART_Transmit_IT(&huart2, (uint8_t*)message, strlen(message));
//	  HAL_Delay(100 - 1);
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	}
  /* USER CODE END 3 */
}

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
  {
    Error_Handler();
  }
}

/**
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
	static void MX_TIM4_Init(void)
{

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
  TIM_MasterConfigTypeDef sMasterConfig = {0};

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
  htim4.Init.Prescaler = 7200 - 1;
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim4.Init.Period = 10 - 1;
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
  {
    Error_Handler();
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}

/**
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{

  /* USER CODE BEGIN USART2_Init 0 */

  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
  huart2.Init.BaudRate = 115200;
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
  huart2.Init.StopBits = UART_STOPBITS_1;
  huart2.Init.Parity = UART_PARITY_NONE;
  huart2.Init.Mode = UART_MODE_TX_RX;
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
  if (HAL_UART_Init(&huart2) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}

/**
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
  __HAL_RCC_GPIOD_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Led0_GPIO_Port, Led0_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : Led0_Pin */
  GPIO_InitStruct.Pin = Led0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(Led0_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pin : Key0_Pin */
  GPIO_InitStruct.Pin = Key0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
  HAL_GPIO_Init(Key0_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pins : ec11_A_Pin ec11_B_Pin ec11_Key_Pin */
  GPIO_InitStruct.Pin = ec11_A_Pin|ec11_B_Pin|ec11_Key_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}

/* USER CODE BEGIN 4 */

/* USER CODE END 4 */

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
	}
  /* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */

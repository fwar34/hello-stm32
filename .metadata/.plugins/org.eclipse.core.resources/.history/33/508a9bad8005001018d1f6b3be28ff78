/* USER CODE BEGIN Header */
/**
 ******************************************************************************
 * @file           : main.c
 * @brief          : ec11按键识别，使用stm32 TIM4，1ms间隔
 ******************************************************************************
 * @attention
 *
 * Copyright (c) 2025 STMicroelectronics.
 * All rights reserved.
 *
 * This software is licensed under terms that can be found in the LICENSE file
 * in the root directory of this software component.
 * If no LICENSE file comes with this software, it is provided AS-IS.
 *
 ******************************************************************************
 */
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include "main.h"

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */
#include "stdio.h"
#include "key.h"
#include "ec11.h"
#include "dht11.h"
#include "timer.h"
#include "st7735s.h"
#include "image.h"
#include <string.h>
/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */

/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */


/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/
SPI_HandleTypeDef hspi2;

TIM_HandleTypeDef htim4;

UART_HandleTypeDef huart2;

/* USER CODE BEGIN PV */
static volatile uint8_t uart_tx_complete = 1; // 初始化为发送完成状态

// 串口发送完成回调函数
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
    if (huart == &huart2) {
        uart_tx_complete = 1; // 标记发送完成
    }
}

// 安全的发送函数
void send_data_safely(char *data, uint16_t size) {
    while (!uart_tx_complete); // 等待上一次发送完成
    uart_tx_complete = 0; // 标记开始新的发送
    HAL_UART_Transmit_IT(&huart2, (uint8_t*)data, size);
}
/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_TIM4_Init(void);
static void MX_USART2_UART_Init(void);
static void MX_SPI2_Init(void);
/* USER CODE BEGIN PFP */

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

static uint32_t timerCounter = 0;
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
	timerCounter++;
	Ec11StateMachineProcess();
	Dht11Process();
}

void ProcessKey()
{
	static uint32_t lastTick = 0;
	uint32_t currentTick = HAL_GetTick();
	if (currentTick - lastTick < 1) {
		return;
	}
	lastTick = currentTick;

	KeyInfo keyInfo;
	uint8_t remainCount = 0;
	uint8_t ret = 0;
	do {
		GetKeyState(&keyInfo, &remainCount, &ret);
		if (ret != 0) {
			static char message[300];
			sprintf(message,
					"read %s keyState(%s,%d) encodeCounter(%ld) remain count(%d) currentTick(%ld)"
					" lastTick(%ld) timer count(%ld)\n",
					GetKeyName(keyInfo.keyIndex),
					GetKeyEventName(keyInfo.keyState), keyInfo.keyState,
					keyInfo.encodeCounter, remainCount, currentTick, lastTick,
					timerCounter);

			send_data_safely(message, strlen(message));

			if (keyInfo.keyIndex == EC11_KEY) {
				if (keyInfo.keyState == EC11_KEY_PRESS) {

				} else if (keyInfo.keyState == EC11_KEY_CLICK) {
					HAL_GPIO_TogglePin(Led0_GPIO_Port, Led0_Pin);
				} else if (keyInfo.keyState == EC11_KEY_DOUBLE_CLICK) {
					HAL_GPIO_TogglePin(testIO_GPIO_Port, testIO_Pin);
					delay_us(20);
					HAL_GPIO_TogglePin(testIO_GPIO_Port, testIO_Pin);
					static char msg[100];
					sprintf(msg, "%s\n", "testxxxx");
					send_data_safely(msg, strlen(msg));
				}
			}
		}

	} while (remainCount != 0);
}

void ProcessDth11()
{
	static uint32_t lastTick = 0;
	uint32_t currentTick = HAL_GetTick();
	if (currentTick - lastTick < 1000) {
		return;
	}
	lastTick = currentTick;

	Dht11Result result;
	GetDht11Result(&result);
	static char message[100];
	sprintf(message, "humidity: %.2f, temperature: %.2f\n",
			result.humidity, result.temperature);
	send_data_safely(message, strlen(message));
}

void ProcessLcd()
{
	static uint32_t lastTick = 0;
	uint32_t currentTick = HAL_GetTick();
	if (currentTick - lastTick < 300) {
		return;
	}
	lastTick = currentTick;

	uint16_t color = 0x7564;
	LcdClear(color);
	LcdDrawPoint(10, 70, WHITE_RGB565);
	const Rect rect = {{50, 10}, 30, 40};
	LcdDrawRect(&rect, BLACK_RGB565);
	LcdDrawBlock(100, 28, 30, 30, 0xF983);
	LcdDrawLine(0, 0, 3, WHITE_RGB565, LINE_DIR_VERTICAL);
//	LcdDrawLine(10, 30, 25, WHITE_RGB565, LINE_DIR_HORIZONTAL);
	if (color % 2 == 0) {
		color += 33;
	} else {
		color += 55;
	}

	const Rect rect2 = {{10, 10}, 20, 20};
	LcdDrawRect(&rect2, BLACK_RGB565);

	TFT_ShowChar(0, 0, 'A', 0x7564, YELLOW, 16);
	TFT_ShowChar(0, 16, 'B', BLUE, YELLOW, 16);
	TFT_ShowChar(0, 32, 'C', BLUE, YELLOW, 16);
	TFT_ShowChar(0, 48, 'D', BLUE, YELLOW, 16);
	TFT_ShowChar(0, 64, 'E', BLUE, YELLOW, 16);
	TFT_ShowChar(0, 80, 'F', BLUE, YELLOW, 16);
	TFT_ShowChar(0, 96, 'G', BLUE, YELLOW, 16);
	TFT_ShowChar(0, 112, 'H', BLUE, YELLOW, 16);
	TFT_ShowChar(0, 128, 'I', BLUE, YELLOW, 16);
	TFT_ShowChar(0, 144, 'J', BLUE, YELLOW, 16);

	LCD_ShowCharStr(40, 32, 80, "HELLO", YELLOW, BLACK, 16);
	LCD_ShowCharNumber(48,64,128,20,YELLOW,BLACK,12);
	LCD_ShowCharNumber(60,64,128,22,YELLOW,BLACK,12);

	TFT_ShowChar(64, 84, 'Y', BLUE, OLIVE, 32);

	for(uint8_t i=32;i<80;i++)
	{
	  LcdDrawPoint(i, 128, PURPLE);
	}

	// 图像rgb565数组使用utils目录下"image2rgb565scale.py 图片文件 宽 高"命令生成，
	// 可以不指定宽或者高，脚本自动按照图片原始的宽高比计算新的值
	LcdDrawData(IMG_DATA, 0, 0, IMG_WIDTH, IMG_HEIGHT);
//	LcdDrawRgb565(IMG_DATA, 60, 0, IMG_WIDTH, IMG_HEIGHT);

//	HAL_Delay(17);
}
/* USER CODE END 0 */

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{

  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();

  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();

  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  MX_TIM4_Init();
  MX_USART2_UART_Init();
  MX_SPI2_Init();
  /* USER CODE BEGIN 2 */
	HAL_TIM_Base_Start_IT(&htim4);
	Ec11EncoderInit();
	TIM3_Init();
	LcdInit();
//	LcdClear(0x7564);
	//	ProcessLcd();
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
		ProcessKey();
		ProcessDth11();
		ProcessLcd();
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	}
  /* USER CODE END 3 */
}

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
  {
    Error_Handler();
  }
}

/**
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{

  /* USER CODE BEGIN SPI2_Init 0 */

  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
  hspi2.Init.Mode = SPI_MODE_MASTER;
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
  hspi2.Init.DataSize = SPI_DATASIZE_16BIT;
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
  hspi2.Init.NSS = SPI_NSS_SOFT;
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
  hspi2.Init.CRCPolynomial = 10;
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}

/**
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
  TIM_MasterConfigTypeDef sMasterConfig = {0};

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
  htim4.Init.Prescaler = 7200 - 1;
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim4.Init.Period = 10 - 1;
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
  {
    Error_Handler();
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}

/**
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{

  /* USER CODE BEGIN USART2_Init 0 */

  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
  huart2.Init.BaudRate = 115200;
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
  huart2.Init.StopBits = UART_STOPBITS_1;
  huart2.Init.Parity = UART_PARITY_NONE;
  huart2.Init.Mode = UART_MODE_TX_RX;
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
  if (HAL_UART_Init(&huart2) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}

/**
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
  __HAL_RCC_GPIOD_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Led0_GPIO_Port, Led0_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_SET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(testIO_GPIO_Port, testIO_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, spi_blk_Pin|spi_dc_Pin|spi_res_Pin|spi_cs_Pin, GPIO_PIN_SET);

  /*Configure GPIO pin : Led0_Pin */
  GPIO_InitStruct.Pin = Led0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(Led0_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pin : Key0_Pin */
  GPIO_InitStruct.Pin = Key0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
  HAL_GPIO_Init(Key0_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pins : PA5 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

  /*Configure GPIO pins : testIO_Pin spi_blk_Pin */
  GPIO_InitStruct.Pin = testIO_Pin|spi_blk_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);

  /*Configure GPIO pins : ec11_A_Pin ec11_B_Pin ec11_Key_Pin */
  GPIO_InitStruct.Pin = ec11_A_Pin|ec11_B_Pin|ec11_Key_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

  /*Configure GPIO pin : dht11_Pin */
  GPIO_InitStruct.Pin = dht11_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(dht11_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pins : spi_dc_Pin spi_res_Pin spi_cs_Pin */
  GPIO_InitStruct.Pin = spi_dc_Pin|spi_res_Pin|spi_cs_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}

/* USER CODE BEGIN 4 */

/* USER CODE END 4 */

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
	}
  /* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */

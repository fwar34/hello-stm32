/* USER CODE BEGIN Header */
/**
 ******************************************************************************
 * @file           : main.c
 * @brief          : Main program body
 ******************************************************************************
 * @attention
 *
 * Copyright (c) 2025 STMicroelectronics.
 * All rights reserved.
 *
 * This software is licensed under terms that can be found in the LICENSE file
 * in the root directory of this software component.
 * If no LICENSE file comes with this software, it is provided AS-IS.
 *
 ******************************************************************************
 */
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include "main.h"

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */
#include "string.h"
#include "stdio.h"
#include "key.h"
/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */

/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */
#define KEY_BUF_SIZE 4
#define KEY_LONG_CLICK_TIME_MS 500
#define KEY_DOUBLE_TIME_MS 200
#define KEY_DEBOUNCING_TIME_MS 10
#define KEY_HOLD_TIME_MS 100
/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/
TIM_HandleTypeDef htim4;

UART_HandleTypeDef huart2;

/* USER CODE BEGIN PV */

/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_TIM4_Init(void);
static void MX_USART2_UART_Init(void);
/* USER CODE BEGIN PFP */

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
static int32_t encoderCounter = 0;

// 按键子状态
typedef enum
{
	KEY_STEP_PRESS, // 按下
	KEY_STEP_RELEASE, // 释放
//	KEY_STEP_HOLD, // 按住
	KEY_STEP_DEBOUNCING, // 去抖
} KeyStep;

// 按键主状态
typedef enum {
	EC11_KEY_CLICK,	 // 单击
	EC11_KEY_DOUBLE_CLICK, // 双击
	EC11_KEY_HOLD, // 按住
	EC11_KEY_LONG_CLICK, // 长按
	EC11_KEY_LEFT_ROTATE, // 向左旋转一下
	EC11_KEY_RIGHT_ROTATE, // 向右旋转一下
	EC11_KEY_HOLD_LEFT_ROTATE, // 按住向左旋转一下
	EC11_KEY_HOLD_RIGHT_ROTATE, // 按住向右旋转一下
} Ec11KeyState;

typedef void (*ItemCallback)();

typedef struct
{
	Ec11KeyState currentState; // 当前主状态
	KeyStep currentStep; // 当前子状态
	Ec11KeyState nextState; // 下一主状态
	ItemCallback callback;
} Ec11KeyStateMachineItem;

void ProcessClickFirst();
void ProcessClickDebouncing();
void ProcessClickPress();
void ProcessClickEnd();

void ProcessDoubleClick();

static Ec11KeyStateMachineItem ec11StateMachineTable[] = {
	{EC11_KEY_CLICK, KEY_STEP_RELEASE, EC11_KEY_CLICK, ProcessClickFirst},
	{EC11_KEY_CLICK, KEY_STEP_DEBOUNCING, EC11_KEY_CLICK, ProcessClickDebouncing},
	{EC11_KEY_CLICK, KEY_STEP_PRESS, EC11_KEY_CLICK, ProcessClickPress},
	{EC11_KEY_CLICK, KEY_STEP_RELEASE, EC11_KEY_DOUBLE_CLICK, ProcessClickEnd},

	{EC11_KEY_DOUBLE_CLICK, KEY_STEP_RELEASE, EC11_KEY_DOUBLE_CLICK, ProcessDoubleClick},
	{EC11_KEY_DOUBLE_CLICK, KEY_STEP_DEBOUNCING, EC11_KEY_DOUBLE_CLICK, ProcessDoubleClick},
	{EC11_KEY_DOUBLE_CLICK, KEY_STEP_PRESS, EC11_KEY_DOUBLE_CLICK, JudgeDoubleClickRotate},
	{EC11_KEY_DOUBLE_CLICK, KEY_STEP_RELEASE, EC11_KEY_LONG_CLICK, ProcessDoubleClick},

	{EC11_KEY_LONG_CLICK, KEY_STEP_RELEASE, EC11_KEY_DOUBLE_CLICK, ProcessDoubleClick},
	{EC11_KEY_LONG_CLICK, KEY_STEP_DEBOUNCING, EC11_KEY_DOUBLE_CLICK, ProcessDoubleClick},
	{EC11_KEY_LONG_CLICK, KEY_STEP_PRESS, EC11_KEY_DOUBLE_CLICK, JudgeDoubleClickRotate},
	{EC11_KEY_LONG_CLICK, KEY_STEP_RELEASE, EC11_KEY_LONG_CLICK, ProcessDoubleClick},
};

typedef struct {
	uint8_t keyState;
//	uint8_t isValid;
} KeyInfo;

typedef enum {
	EC11_DIRECTION_INVALID = 0,
	EC11_DIRECTION_SEQUENCE_HALF = 1,
	EC11_DIRECTION_REVERSE_HALF,
} Ec11DirectionState;


typedef enum
{
	BUF_LOCK_ERROR_OK = 0,
	BUF_LOCK_ERROR_TIMEOUT,
} BufLockError;

typedef struct {
	KeyInfo keyInfoBuf[KEY_BUF_SIZE];
	uint8_t readIndex;
	uint8_t writeIndex;
	uint8_t count;
	volatile uint8_t bufLock;
} Ec11KeyCircleBuf;

typedef struct {
	Ec11KeyCircleBuf keyCircleBuf;
	Ec11KeyStateMachineItem ec11StateMachine;
	GPIO_PinState lastKeyLevel;
	uint32_t lastTickCount;
} Ec11Encoder;

static Ec11Encoder ec11Encoder;

int32_t LockBuf(uint32_t ms = 0)
{
	uint32_t currentTick = HAL_GetTick();
	while (cbuf->bufLock) {
		if (ms && HAL_GetTick() - currentTick >= ms * 1000) {
			return BUF_LOCK_ERROR_TIMEOUT;
		}
	}
	cbuf->bufLock = 1;
	return BUF_LOCK_ERROR_OK;
}

void ReleaseBuf()
{
	cbuf->bufLock = 0;
}

bool ReadKeyInfo(KeyInfo *out)
{
	bool ret = false;
	LockBuf();
	do {
		Ec11KeyCircleBuf *cbuf = &ec11Encoder.keyCircleBuf;
		if (cbuf->count > 0) {
			cbuf->readIndex = (cbuf->readIndex + 1) % KEY_BUF_SIZE;
			cbuf->count--;
			*out = cbuf->keyInfoBuf[cbuf->readIndex];
			ret = true;
			break;
		}
	} while (0);
	ReleaseBuf();
	return ret;
}

bool PeekKeyInfo(KeyInfo *out)
{
	bool ret = false;
	LockBuf();
	do {
		Ec11KeyCircleBuf *cbuf = &ec11Encoder.keyCircleBuf;
		if (cbuf->count > 0) {
			*out = &cbuf->keyInfoBuf[cbuf->readIndex];
			ret = true;
			break;
		}
	} while (0);
	ReleaseBuf();
	return ret;
}

void WriteKeyInfo(const KeyInfo *keyInfo)
{
	LockBuf();
	Ec11KeyCircleBuf *cbuf = &ec11Encoder.keyCircleBuf;
	if (cbuf->count >= KEY_BUF_SIZE && cbuf->writeIndex == cbuf->readIndex) { // circlebuf满的时候写数据的时候需要更新读索引
		cbuf->readIndex = (cbuf->readIndex + 1) % KEY_BUF_SIZE;
	}
	cbuf->keyInfoBuf[cbuf->writeIndex] = *keyInfo;
	cbuf->writeIndex = (cbuf->writeIndex + 1) % KEY_BUF_SIZE;
	cbuf->count++;
	if (cbuf->count > KEY_BUF_SIZE) {
		cbuf->count = KEY_BUF_SIZE;
	}
	ReleaseBuf();
}

void Ec11EncoderInit() {
	ec11Encoder.keyCircleBuf.readIndex = 0;
	ec11Encoder.keyCircleBuf.writeIndex = 0;
	ec11Encoder.keyCircleBuf.count = 0;
	memset(ec11Encoder.keyCircleBuf.keyInfoBuf, 0, sizeof(KeyInfo) * KEY_BUF_SIZE);

	ec11Encoder.ec11StateMachine.currentState = EC11_KEY_CLICK;
	ec11Encoder.ec11StateMachine.currentStep = KEY_STEP_RELEASE;
	ec11Encoder.ec11StateMachine.nextState = EC11_KEY_CLICK;
	ec11Encoder.lastKeyLevel = GPIO_PIN_SET;
	ec11Encoder.lastTickCount = 0;
}

void ProcessClickFirst()
{
	Ec11KeyStateMachineItem *stateMachine = ec11Encoder.ec11StateMachine;
	GPIO_PinState currentKeyLevel = HAL_GPIO_ReadPin(ec11_Key_GPIO_Port, ec11_Key_Pin);
	if (currentKeyLevel == GPIO_PIN_RESET && currentKeyLevel != ec11Encoder.lastKeyLevel) {
		stateMachine->currentStep = KEY_STEP_DEBOUNCING;
		ec11Encoder.lastTickCount = HAL_GetTick();
		ec11Encoder.lastKeyLevel = currentKeyLevel;
	}
}

void ProcessClickDebouncing()
{
	uint32_t currTickCount = HAL_GetTick();
	GPIO_PinState currentKeyLevel = HAL_GPIO_ReadPin(ec11_Key_GPIO_Port, ec11_Key_Pin);
	if (currentKeyLevel == GPIO_PIN_RESET && currTickCount - ec11Encoder.lastTickCount > KEY_DEBOUNCING_TIME_MS) {
		ec11Encoder.ec11StateMachine.currentStep = KEY_STEP_PRESS;
		ec11Encoder.lastTickCount = currTickCount;
	}
}

void ProcessClickPress()
{
	if (last)
}

static void Ec11TickProcess() {
	static char message[100];
	static Ec11DirectionState ec11CurrentState = EC11_DIRECTION_INVALID;
	static GPIO_PinState lastALevel = GPIO_PIN_SET;
	static GPIO_PinState lastBLevel = GPIO_PIN_SET;
	static GPIO_PinState currALevel = GPIO_PIN_SET;
	static GPIO_PinState currBLevel = GPIO_PIN_SET;
	static uint8_t switchACounter = 0;
	static uint8_t switchBCounter = 0;

	currALevel = HAL_GPIO_ReadPin(ec11_A_GPIO_Port, ec11_A_Pin);
	currBLevel = HAL_GPIO_ReadPin(ec11_B_GPIO_Port, ec11_B_Pin);
	if (currALevel != lastALevel) {
		switchACounter = (switchACounter + 1) > 2 ? 1 : (switchACounter + 1);
		if (currALevel == GPIO_PIN_RESET) { // A相下降沿
			if (currBLevel == GPIO_PIN_SET) {
				ec11CurrentState = EC11_DIRECTION_SEQUENCE_HALF;
			} else {
				ec11CurrentState = EC11_DIRECTION_REVERSE_HALF;
			}
		} else { // A相上升沿
			if (ec11CurrentState == EC11_DIRECTION_SEQUENCE_HALF) {
				if (switchBCounter == 2) {
					ec11CurrentState = EC11_DIRECTION_INVALID;
				} else if (switchBCounter == 1) {
					encoderCounter--;
					sprintf(message, "--encoderCount = %ld\n", encoderCounter);
					HAL_UART_Transmit_IT(&huart2, (uint8_t*) message,
							strlen(message));
					HAL_GPIO_TogglePin(Led0_GPIO_Port, Led0_Pin);

					KeyInfo keyInfo = { EC11_KEY_LEFT_ROTATE };
					if (ec11Encoder.ec11StateMachine.currentStep == KEY_STEP_PRESS) {
						keyInfo.keyState = EC11_KEY_HOLD_LEFT_ROTATE;
					}
					WriteKeyInfo(&keyInfo);
				}
			} else if (ec11CurrentState == EC11_DIRECTION_REVERSE_HALF) {
				if (switchBCounter == 1) {
					ec11CurrentState = EC11_DIRECTION_INVALID;
				} else if (switchBCounter == 2) {
					encoderCounter++;
					sprintf(message, "++encoderCount = %ld\n", encoderCounter);
					HAL_UART_Transmit_IT(&huart2, (uint8_t*) message,
							strlen(message));
					HAL_GPIO_TogglePin(Led0_GPIO_Port, Led0_Pin);

					KeyInfo keyInfo = { EC11_KEY_RIGHT_ROTATE };
					if (ec11Encoder.ec11StateMachine.currentStep == KEY_STEP_PRESS) {
						keyInfo.keyState = EC11_KEY_HOLD_RIGHT_ROTATE;
					}
					WriteKeyInfo(&keyInfo);
				}
			}
		}
		lastALevel = currALevel;
	}

	if (currBLevel != lastBLevel) {
		switchBCounter = (switchBCounter + 1) > 2 ? 1 : (switchBCounter + 1);
		if (currBLevel == GPIO_PIN_SET) { // B 相上升沿
			if (ec11CurrentState == EC11_DIRECTION_SEQUENCE_HALF) {
				if (switchACounter == 1) {
					ec11CurrentState = EC11_DIRECTION_INVALID;
				}
			} else if (ec11CurrentState == EC11_DIRECTION_REVERSE_HALF) {
				if (switchACounter == 2) {
					ec11CurrentState = EC11_DIRECTION_INVALID;
				}
			}
		}
		lastBLevel = currBLevel;
	}
}

void Ec11StateMachineProcess()
{
	for (int i = 0; i < sizeof(ec11StateMachineTable) / sizeof(ec11StateMachineTable[0]); ++i) {
		if (ec11StateMachineTable[i].currentState == ec11Encoder.ec11StateMachine.currentState &&
			ec11StateMachineTable[i].currentState == ec11Encoder.ec11StateMachine.currentState &&
			ec11StateMachineTable[i].nextState == ec11Encoder.ec11StateMachine.nextState) {
			ec11StateMachineTable[i].callback();
		}
	}
}

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
	static uint32_t tickCounter = 0;
	tickCounter++;
	Ec11StateMachineProcess();
	Ec11TickProcess();
	if (tickCounter % 10 == 0) {
		KeyTickProcess();
	}
//	static char message[30];
//	sprintf(message, "system tick count = %ld\n", HAL_GetTick());
//	HAL_UART_Transmit_IT(&huart2, (uint8_t*)message, strlen(message));
}

void ProcessKey()
{
	KeyInfo keyInfo;
	if (ReadKeyInfo(&keyInfo)) {
		static char message[30];
		sprintf(message, "read keyState(%d) isvaild(%d) sysTickCount(%ld)\n",
				keyInfo->keyState, keyInfo->isValid, HAL_GetTick());
		HAL_UART_Transmit_IT(&huart2, message, strlen(message));
	}
}
/* USER CODE END 0 */

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {

	/* USER CODE BEGIN 1 */

	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();

	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();

	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
	MX_TIM4_Init();
	MX_USART2_UART_Init();
	/* USER CODE BEGIN 2 */
	HAL_TIM_Base_Start_IT(&htim4);
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
		int8_t keyNum = GetKeyNum();
		switch (keyNum) {
		case KEY_0:
			HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
			break;
		default:
		}

		ProcessKey();
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */
	}
	/* USER CODE END 3 */
}

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
	RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
		Error_Handler();
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
		Error_Handler();
	}
}

/**
 * @brief TIM4 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM4_Init(void) {

	/* USER CODE BEGIN TIM4_Init 0 */

	/* USER CODE END TIM4_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };

	/* USER CODE BEGIN TIM4_Init 1 */

	/* USER CODE END TIM4_Init 1 */
	htim4.Instance = TIM4;
	htim4.Init.Prescaler = 7200 - 1;
	htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
	htim4.Init.Period = 10 - 1;
	htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
	htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
	if (HAL_TIM_Base_Init(&htim4) != HAL_OK) {
		Error_Handler();
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
	if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK) {
		Error_Handler();
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
	if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig)
			!= HAL_OK) {
		Error_Handler();
	}
	/* USER CODE BEGIN TIM4_Init 2 */

	/* USER CODE END TIM4_Init 2 */

}

/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void) {

	/* USER CODE BEGIN USART2_Init 0 */

	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
	huart2.Init.BaudRate = 115200;
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
	huart2.Init.StopBits = UART_STOPBITS_1;
	huart2.Init.Parity = UART_PARITY_NONE;
	huart2.Init.Mode = UART_MODE_TX_RX;
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
	if (HAL_UART_Init(&huart2) != HAL_OK) {
		Error_Handler();
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}

/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
	__HAL_RCC_GPIOD_CLK_ENABLE();
	__HAL_RCC_GPIOA_CLK_ENABLE();

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(Led0_GPIO_Port, Led0_Pin, GPIO_PIN_RESET);

	/*Configure GPIO pin : Led0_Pin */
	GPIO_InitStruct.Pin = Led0_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
	HAL_GPIO_Init(Led0_GPIO_Port, &GPIO_InitStruct);

	/*Configure GPIO pin : Key0_Pin */
	GPIO_InitStruct.Pin = Key0_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
	HAL_GPIO_Init(Key0_GPIO_Port, &GPIO_InitStruct);

	/*Configure GPIO pins : ec11_A_Pin ec11_B_Pin ec11_Key_Pin */
	GPIO_InitStruct.Pin = ec11_A_Pin | ec11_B_Pin | ec11_Key_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
	GPIO_InitStruct.Pull = GPIO_PULLUP;
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}

/* USER CODE BEGIN 4 */

/* USER CODE END 4 */

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
	}
	/* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */

#ifndef __CIRCLE_BUFFER_H_
#define __CIRCLE_BUFFER_H_

#include "stdint.h"
#include "spinlock.h"

#define DefineCircleBuffer(structType, itemType, bufSize)\
typedef struct {\
	itemType dataBuf[bufSize];\
	uint8_t readIndex;\
	uint8_t writeIndex;\
	uint8_t count;\
	uint8_t capacity;\
	volatile SpinLock bufLock;\
} structType;

#define InitBuf(buffer, dataBuf)\
(buffer)->readIndex = 0;\
(buffer)->writeIndex = 0;\
(buffer)->count = 0;\
(buffer)->bufLock = 0;\
memset((buffer)->dataBuf, 0, sizeof(dataBuf) * (buffer)->capacity);


#define ReadBuf(buffer, out, remain) \
{\
	accquire_spinlock(&(buffer)->bufLock, 0);\
	if ((buffer)->count > 0) {\
		*out = (buffer)->dataBuf[(buffer)->readIndex];\
		(buffer)->count--;\
		*remain = (buffer)->count;\
		buffer->readIndex = ((buffer)->readIndex + 1) % (buffer)->capacity;\
	}\
	release_spinlock(&(buffer)->bufLock);\
}

#define WriteBuf(buffer, data)\
{\
	accquire_spinlock(&(buffer)->bufLock, 0);\
	if ((buffer)->count >= (buffer)->capacity && (buffer)->writeIndex == (buffer)->readIndex) {\
		(buffer)->readIndex = ((buffer)->readIndex + 1) % (buffer)->capacity;\
	}\
	(buffer)->dataBuf[(buffer)->writeIndex] = *data;\
	(buffer)->writeIndex = ((buffer)->writeIndex + 1) % (buffer)->capacity;\
	(buffer)->count++;\
	if ((buffer)->count > (buffer)->capacity) {\
		(buffer)->count = (buffer)->capacity;\
	}\
	release_spinlock(&cbuf->bufLock);\
}

#define BufCount(buffer)\
{\
	uint8_t count = 0;\
	accquire_spinlock(&(buffer)->bufLock, 0);\
	count = (buffer)->count;\
	release_spinlock(&cbuf->bufLock);\
	count;\
}

#endif

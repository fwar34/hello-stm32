
hello.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003e44  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000174  08003f50  08003f50  00004f50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080040c4  080040c4  000060d0  2**0
                  CONTENTS
  4 .ARM          00000008  080040c4  080040c4  000050c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080040cc  080040cc  000060d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080040cc  080040cc  000050cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080040d0  080040d0  000050d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000d0  20000000  080040d4  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000037c  200000d0  080041a4  000060d0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000044c  080041a4  0000644c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000060d0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c746  00000000  00000000  000060f9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001f86  00000000  00000000  0001283f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000cd8  00000000  00000000  000147c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a08  00000000  00000000  000154a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017f40  00000000  00000000  00015ea8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000eeef  00000000  00000000  0002dde8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008b15b  00000000  00000000  0003ccd7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c7e32  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003a6c  00000000  00000000  000c7e78  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004e  00000000  00000000  000cb8e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200000d0 	.word	0x200000d0
 8000128:	00000000 	.word	0x00000000
 800012c:	08003f38 	.word	0x08003f38

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200000d4 	.word	0x200000d4
 8000148:	08003f38 	.word	0x08003f38

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <GetKeyName>:
} Ec11Encoder;

static Ec11Encoder ec11Encoder;

const char *GetKeyName(uint8_t keyIndex)
{
 800015c:	b480      	push	{r7}
 800015e:	b085      	sub	sp, #20
 8000160:	af00      	add	r7, sp, #0
 8000162:	4603      	mov	r3, r0
 8000164:	71fb      	strb	r3, [r7, #7]
	static const char *keyIndexNameArray[] = {
		"key0",
		"ec11_key"
	};

	uint8_t size = sizeof(keyIndexNameArray) / sizeof(keyIndexNameArray[0]);
 8000166:	2302      	movs	r3, #2
 8000168:	73fb      	strb	r3, [r7, #15]
	if (keyIndex >= size) {
 800016a:	79fa      	ldrb	r2, [r7, #7]
 800016c:	7bfb      	ldrb	r3, [r7, #15]
 800016e:	429a      	cmp	r2, r3
 8000170:	d301      	bcc.n	8000176 <GetKeyName+0x1a>
		return NULL;
 8000172:	2300      	movs	r3, #0
 8000174:	e003      	b.n	800017e <GetKeyName+0x22>
	}
	return keyIndexNameArray[keyIndex];
 8000176:	79fb      	ldrb	r3, [r7, #7]
 8000178:	4a03      	ldr	r2, [pc, #12]	@ (8000188 <GetKeyName+0x2c>)
 800017a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 800017e:	4618      	mov	r0, r3
 8000180:	3714      	adds	r7, #20
 8000182:	46bd      	mov	sp, r7
 8000184:	bc80      	pop	{r7}
 8000186:	4770      	bx	lr
 8000188:	20000040 	.word	0x20000040

0800018c <GetKeyEventName>:

const char *GetKeyEventName(uint8_t keyEvent)
{
 800018c:	b480      	push	{r7}
 800018e:	b085      	sub	sp, #20
 8000190:	af00      	add	r7, sp, #0
 8000192:	4603      	mov	r3, r0
 8000194:	71fb      	strb	r3, [r7, #7]
	static const char *keyStateNameArray[] = {
		"invalid", "press", "click", "double_click", "long_click",
		"left_rotate", "right_rotate", "hold_left_rotate", "hold_right_rotate"
	};

	uint8_t size = sizeof(keyStateNameArray) / sizeof(keyStateNameArray[0]);
 8000196:	2309      	movs	r3, #9
 8000198:	73fb      	strb	r3, [r7, #15]
	if (keyEvent >= size) {
 800019a:	79fa      	ldrb	r2, [r7, #7]
 800019c:	7bfb      	ldrb	r3, [r7, #15]
 800019e:	429a      	cmp	r2, r3
 80001a0:	d301      	bcc.n	80001a6 <GetKeyEventName+0x1a>
		return NULL;
 80001a2:	2300      	movs	r3, #0
 80001a4:	e003      	b.n	80001ae <GetKeyEventName+0x22>
	}
	return keyStateNameArray[keyEvent];
 80001a6:	79fb      	ldrb	r3, [r7, #7]
 80001a8:	4a03      	ldr	r2, [pc, #12]	@ (80001b8 <GetKeyEventName+0x2c>)
 80001aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 80001ae:	4618      	mov	r0, r3
 80001b0:	3714      	adds	r7, #20
 80001b2:	46bd      	mov	sp, r7
 80001b4:	bc80      	pop	{r7}
 80001b6:	4770      	bx	lr
 80001b8:	20000048 	.word	0x20000048

080001bc <Ec11ResetStateMachine>:

void Ec11ResetStateMachine()
{
 80001bc:	b480      	push	{r7}
 80001be:	af00      	add	r7, sp, #0
	ec11Encoder.ec11StateMachine.currentState = EC11_KEY_CLICK;
 80001c0:	4b0e      	ldr	r3, [pc, #56]	@ (80001fc <Ec11ResetStateMachine+0x40>)
 80001c2:	2202      	movs	r2, #2
 80001c4:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
	ec11Encoder.ec11StateMachine.currentStep = KEY_STEP_PRESS;
 80001c8:	4b0c      	ldr	r3, [pc, #48]	@ (80001fc <Ec11ResetStateMachine+0x40>)
 80001ca:	2200      	movs	r2, #0
 80001cc:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
	ec11Encoder.lastKeyLevel = GPIO_PIN_SET;
 80001d0:	4b0a      	ldr	r3, [pc, #40]	@ (80001fc <Ec11ResetStateMachine+0x40>)
 80001d2:	2201      	movs	r2, #1
 80001d4:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
	ec11Encoder.lastPressTick = 0;
 80001d8:	4b08      	ldr	r3, [pc, #32]	@ (80001fc <Ec11ResetStateMachine+0x40>)
 80001da:	2200      	movs	r2, #0
 80001dc:	635a      	str	r2, [r3, #52]	@ 0x34
	ec11Encoder.debouncingTick = 0;
 80001de:	4b07      	ldr	r3, [pc, #28]	@ (80001fc <Ec11ResetStateMachine+0x40>)
 80001e0:	2200      	movs	r2, #0
 80001e2:	639a      	str	r2, [r3, #56]	@ 0x38
	ec11Encoder.lastClickTick = 0;
 80001e4:	4b05      	ldr	r3, [pc, #20]	@ (80001fc <Ec11ResetStateMachine+0x40>)
 80001e6:	2200      	movs	r2, #0
 80001e8:	63da      	str	r2, [r3, #60]	@ 0x3c
	ec11Encoder.hasRotate = false;
 80001ea:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <Ec11ResetStateMachine+0x40>)
 80001ec:	2200      	movs	r2, #0
 80001ee:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
}
 80001f2:	bf00      	nop
 80001f4:	46bd      	mov	sp, r7
 80001f6:	bc80      	pop	{r7}
 80001f8:	4770      	bx	lr
 80001fa:	bf00      	nop
 80001fc:	200000f0 	.word	0x200000f0

08000200 <Ec11EncoderInit>:

void Ec11EncoderInit()
{
 8000200:	b580      	push	{r7, lr}
 8000202:	af00      	add	r7, sp, #0
	InitBuf(&ec11Encoder.keyCircleBuf, KeyInfo, KEY_BUF_SIZE);
 8000204:	4b0f      	ldr	r3, [pc, #60]	@ (8000244 <Ec11EncoderInit+0x44>)
 8000206:	2200      	movs	r2, #0
 8000208:	f883 2020 	strb.w	r2, [r3, #32]
 800020c:	4b0d      	ldr	r3, [pc, #52]	@ (8000244 <Ec11EncoderInit+0x44>)
 800020e:	2200      	movs	r2, #0
 8000210:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
 8000214:	4b0b      	ldr	r3, [pc, #44]	@ (8000244 <Ec11EncoderInit+0x44>)
 8000216:	2200      	movs	r2, #0
 8000218:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
 800021c:	4b09      	ldr	r3, [pc, #36]	@ (8000244 <Ec11EncoderInit+0x44>)
 800021e:	2204      	movs	r2, #4
 8000220:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23
 8000224:	4b07      	ldr	r3, [pc, #28]	@ (8000244 <Ec11EncoderInit+0x44>)
 8000226:	2200      	movs	r2, #0
 8000228:	625a      	str	r2, [r3, #36]	@ 0x24
 800022a:	4b06      	ldr	r3, [pc, #24]	@ (8000244 <Ec11EncoderInit+0x44>)
 800022c:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 8000230:	00db      	lsls	r3, r3, #3
 8000232:	461a      	mov	r2, r3
 8000234:	2100      	movs	r1, #0
 8000236:	4803      	ldr	r0, [pc, #12]	@ (8000244 <Ec11EncoderInit+0x44>)
 8000238:	f003 f9ee 	bl	8003618 <memset>
	Ec11ResetStateMachine();
 800023c:	f7ff ffbe 	bl	80001bc <Ec11ResetStateMachine>
}
 8000240:	bf00      	nop
 8000242:	bd80      	pop	{r7, pc}
 8000244:	200000f0 	.word	0x200000f0

08000248 <ProcessClickPress>:

void ProcessClickPress()
{
 8000248:	b580      	push	{r7, lr}
 800024a:	b082      	sub	sp, #8
 800024c:	af00      	add	r7, sp, #0
	GPIO_PinState currentKeyLevel = HAL_GPIO_ReadPin(ec11_Key_GPIO_Port, ec11_Key_Pin);
 800024e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000252:	480a      	ldr	r0, [pc, #40]	@ (800027c <ProcessClickPress+0x34>)
 8000254:	f001 fc18 	bl	8001a88 <HAL_GPIO_ReadPin>
 8000258:	4603      	mov	r3, r0
 800025a:	71fb      	strb	r3, [r7, #7]
	if (currentKeyLevel == GPIO_PIN_RESET) {
 800025c:	79fb      	ldrb	r3, [r7, #7]
 800025e:	2b00      	cmp	r3, #0
 8000260:	d108      	bne.n	8000274 <ProcessClickPress+0x2c>
		ec11Encoder.ec11StateMachine.currentStep = KEY_STEP_PRESS_DEBOUNCING;
 8000262:	4b07      	ldr	r3, [pc, #28]	@ (8000280 <ProcessClickPress+0x38>)
 8000264:	2201      	movs	r2, #1
 8000266:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
		ec11Encoder.debouncingTick = HAL_GetTick();
 800026a:	f001 f8bf 	bl	80013ec <HAL_GetTick>
 800026e:	4603      	mov	r3, r0
 8000270:	4a03      	ldr	r2, [pc, #12]	@ (8000280 <ProcessClickPress+0x38>)
 8000272:	6393      	str	r3, [r2, #56]	@ 0x38
	}
}
 8000274:	bf00      	nop
 8000276:	3708      	adds	r7, #8
 8000278:	46bd      	mov	sp, r7
 800027a:	bd80      	pop	{r7, pc}
 800027c:	40010800 	.word	0x40010800
 8000280:	200000f0 	.word	0x200000f0

08000284 <ProcessClickPressDebouncing>:

void ProcessClickPressDebouncing()
{
 8000284:	b580      	push	{r7, lr}
 8000286:	b084      	sub	sp, #16
 8000288:	af00      	add	r7, sp, #0
	uint32_t currTick = HAL_GetTick();
 800028a:	f001 f8af 	bl	80013ec <HAL_GetTick>
 800028e:	60f8      	str	r0, [r7, #12]
	GPIO_PinState currentKeyLevel = HAL_GPIO_ReadPin(ec11_Key_GPIO_Port, ec11_Key_Pin);
 8000290:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000294:	483e      	ldr	r0, [pc, #248]	@ (8000390 <ProcessClickPressDebouncing+0x10c>)
 8000296:	f001 fbf7 	bl	8001a88 <HAL_GPIO_ReadPin>
 800029a:	4603      	mov	r3, r0
 800029c:	72fb      	strb	r3, [r7, #11]
	if (currTick - ec11Encoder.debouncingTick > KEY_DEBOUNCING_TIME_10MS) {
 800029e:	4b3d      	ldr	r3, [pc, #244]	@ (8000394 <ProcessClickPressDebouncing+0x110>)
 80002a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80002a2:	68fa      	ldr	r2, [r7, #12]
 80002a4:	1ad3      	subs	r3, r2, r3
 80002a6:	2b0a      	cmp	r3, #10
 80002a8:	d96d      	bls.n	8000386 <ProcessClickPressDebouncing+0x102>
		if (currentKeyLevel == GPIO_PIN_RESET) { // 去抖成功
 80002aa:	7afb      	ldrb	r3, [r7, #11]
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d168      	bne.n	8000382 <ProcessClickPressDebouncing+0xfe>
			ec11Encoder.ec11StateMachine.currentStep = KEY_STEP_RELEASE_DEBOUNCING;
 80002b0:	4b38      	ldr	r3, [pc, #224]	@ (8000394 <ProcessClickPressDebouncing+0x110>)
 80002b2:	2202      	movs	r2, #2
 80002b4:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
			ec11Encoder.lastPressTick = currTick; // 保存识别按下的tick
 80002b8:	4a36      	ldr	r2, [pc, #216]	@ (8000394 <ProcessClickPressDebouncing+0x110>)
 80002ba:	68fb      	ldr	r3, [r7, #12]
 80002bc:	6353      	str	r3, [r2, #52]	@ 0x34
			ec11Encoder.debouncingTick = 0; // 重置去抖tick，为释放去抖准备
 80002be:	4b35      	ldr	r3, [pc, #212]	@ (8000394 <ProcessClickPressDebouncing+0x110>)
 80002c0:	2200      	movs	r2, #0
 80002c2:	639a      	str	r2, [r3, #56]	@ 0x38

			KeyInfo keyInfo = { EC11_KEY, EC11_KEY_PRESS, 0 };
 80002c4:	4a34      	ldr	r2, [pc, #208]	@ (8000398 <ProcessClickPressDebouncing+0x114>)
 80002c6:	463b      	mov	r3, r7
 80002c8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80002cc:	e883 0003 	stmia.w	r3, {r0, r1}
			WriteBuf(&ec11Encoder.keyCircleBuf, &keyInfo);
 80002d0:	2100      	movs	r1, #0
 80002d2:	4832      	ldr	r0, [pc, #200]	@ (800039c <ProcessClickPressDebouncing+0x118>)
 80002d4:	f000 feb1 	bl	800103a <accquire_spinlock>
 80002d8:	4b2e      	ldr	r3, [pc, #184]	@ (8000394 <ProcessClickPressDebouncing+0x110>)
 80002da:	f893 2022 	ldrb.w	r2, [r3, #34]	@ 0x22
 80002de:	4b2d      	ldr	r3, [pc, #180]	@ (8000394 <ProcessClickPressDebouncing+0x110>)
 80002e0:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 80002e4:	429a      	cmp	r2, r3
 80002e6:	d317      	bcc.n	8000318 <ProcessClickPressDebouncing+0x94>
 80002e8:	4b2a      	ldr	r3, [pc, #168]	@ (8000394 <ProcessClickPressDebouncing+0x110>)
 80002ea:	f893 2021 	ldrb.w	r2, [r3, #33]	@ 0x21
 80002ee:	4b29      	ldr	r3, [pc, #164]	@ (8000394 <ProcessClickPressDebouncing+0x110>)
 80002f0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80002f4:	429a      	cmp	r2, r3
 80002f6:	d10f      	bne.n	8000318 <ProcessClickPressDebouncing+0x94>
 80002f8:	4b26      	ldr	r3, [pc, #152]	@ (8000394 <ProcessClickPressDebouncing+0x110>)
 80002fa:	f893 3020 	ldrb.w	r3, [r3, #32]
 80002fe:	3301      	adds	r3, #1
 8000300:	4a24      	ldr	r2, [pc, #144]	@ (8000394 <ProcessClickPressDebouncing+0x110>)
 8000302:	f892 2023 	ldrb.w	r2, [r2, #35]	@ 0x23
 8000306:	fb93 f1f2 	sdiv	r1, r3, r2
 800030a:	fb01 f202 	mul.w	r2, r1, r2
 800030e:	1a9b      	subs	r3, r3, r2
 8000310:	b2da      	uxtb	r2, r3
 8000312:	4b20      	ldr	r3, [pc, #128]	@ (8000394 <ProcessClickPressDebouncing+0x110>)
 8000314:	f883 2020 	strb.w	r2, [r3, #32]
 8000318:	4b1e      	ldr	r3, [pc, #120]	@ (8000394 <ProcessClickPressDebouncing+0x110>)
 800031a:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800031e:	4a1d      	ldr	r2, [pc, #116]	@ (8000394 <ProcessClickPressDebouncing+0x110>)
 8000320:	00db      	lsls	r3, r3, #3
 8000322:	4413      	add	r3, r2
 8000324:	463a      	mov	r2, r7
 8000326:	e892 0003 	ldmia.w	r2, {r0, r1}
 800032a:	e883 0003 	stmia.w	r3, {r0, r1}
 800032e:	4b19      	ldr	r3, [pc, #100]	@ (8000394 <ProcessClickPressDebouncing+0x110>)
 8000330:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8000334:	3301      	adds	r3, #1
 8000336:	4a17      	ldr	r2, [pc, #92]	@ (8000394 <ProcessClickPressDebouncing+0x110>)
 8000338:	f892 2023 	ldrb.w	r2, [r2, #35]	@ 0x23
 800033c:	fb93 f1f2 	sdiv	r1, r3, r2
 8000340:	fb01 f202 	mul.w	r2, r1, r2
 8000344:	1a9b      	subs	r3, r3, r2
 8000346:	b2da      	uxtb	r2, r3
 8000348:	4b12      	ldr	r3, [pc, #72]	@ (8000394 <ProcessClickPressDebouncing+0x110>)
 800034a:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
 800034e:	4b11      	ldr	r3, [pc, #68]	@ (8000394 <ProcessClickPressDebouncing+0x110>)
 8000350:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 8000354:	3301      	adds	r3, #1
 8000356:	b2da      	uxtb	r2, r3
 8000358:	4b0e      	ldr	r3, [pc, #56]	@ (8000394 <ProcessClickPressDebouncing+0x110>)
 800035a:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
 800035e:	4b0d      	ldr	r3, [pc, #52]	@ (8000394 <ProcessClickPressDebouncing+0x110>)
 8000360:	f893 2022 	ldrb.w	r2, [r3, #34]	@ 0x22
 8000364:	4b0b      	ldr	r3, [pc, #44]	@ (8000394 <ProcessClickPressDebouncing+0x110>)
 8000366:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 800036a:	429a      	cmp	r2, r3
 800036c:	d905      	bls.n	800037a <ProcessClickPressDebouncing+0xf6>
 800036e:	4b09      	ldr	r3, [pc, #36]	@ (8000394 <ProcessClickPressDebouncing+0x110>)
 8000370:	f893 2023 	ldrb.w	r2, [r3, #35]	@ 0x23
 8000374:	4b07      	ldr	r3, [pc, #28]	@ (8000394 <ProcessClickPressDebouncing+0x110>)
 8000376:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
 800037a:	4808      	ldr	r0, [pc, #32]	@ (800039c <ProcessClickPressDebouncing+0x118>)
 800037c:	f000 fe85 	bl	800108a <release_spinlock>
		} else {
			Ec11ResetStateMachine();
		}
	}
}
 8000380:	e001      	b.n	8000386 <ProcessClickPressDebouncing+0x102>
			Ec11ResetStateMachine();
 8000382:	f7ff ff1b 	bl	80001bc <Ec11ResetStateMachine>
}
 8000386:	bf00      	nop
 8000388:	3710      	adds	r7, #16
 800038a:	46bd      	mov	sp, r7
 800038c:	bd80      	pop	{r7, pc}
 800038e:	bf00      	nop
 8000390:	40010800 	.word	0x40010800
 8000394:	200000f0 	.word	0x200000f0
 8000398:	08003f50 	.word	0x08003f50
 800039c:	20000114 	.word	0x20000114

080003a0 <ProcessClickReleaseDebouncing>:

void ProcessClickReleaseDebouncing()
{
 80003a0:	b580      	push	{r7, lr}
 80003a2:	af00      	add	r7, sp, #0
	if (HAL_GPIO_ReadPin(ec11_Key_GPIO_Port, ec11_Key_Pin) == GPIO_PIN_SET) {
 80003a4:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80003a8:	480f      	ldr	r0, [pc, #60]	@ (80003e8 <ProcessClickReleaseDebouncing+0x48>)
 80003aa:	f001 fb6d 	bl	8001a88 <HAL_GPIO_ReadPin>
 80003ae:	4603      	mov	r3, r0
 80003b0:	2b01      	cmp	r3, #1
 80003b2:	d117      	bne.n	80003e4 <ProcessClickReleaseDebouncing+0x44>
		if (ec11Encoder.debouncingTick == 0) {
 80003b4:	4b0d      	ldr	r3, [pc, #52]	@ (80003ec <ProcessClickReleaseDebouncing+0x4c>)
 80003b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80003b8:	2b00      	cmp	r3, #0
 80003ba:	d104      	bne.n	80003c6 <ProcessClickReleaseDebouncing+0x26>
			ec11Encoder.debouncingTick = HAL_GetTick();
 80003bc:	f001 f816 	bl	80013ec <HAL_GetTick>
 80003c0:	4603      	mov	r3, r0
 80003c2:	4a0a      	ldr	r2, [pc, #40]	@ (80003ec <ProcessClickReleaseDebouncing+0x4c>)
 80003c4:	6393      	str	r3, [r2, #56]	@ 0x38
		}

		if (HAL_GetTick() - ec11Encoder.debouncingTick > KEY_DEBOUNCING_TIME_10MS) {
 80003c6:	f001 f811 	bl	80013ec <HAL_GetTick>
 80003ca:	4602      	mov	r2, r0
 80003cc:	4b07      	ldr	r3, [pc, #28]	@ (80003ec <ProcessClickReleaseDebouncing+0x4c>)
 80003ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80003d0:	1ad3      	subs	r3, r2, r3
 80003d2:	2b0a      	cmp	r3, #10
 80003d4:	d906      	bls.n	80003e4 <ProcessClickReleaseDebouncing+0x44>
			ec11Encoder.ec11StateMachine.currentStep = KEY_STEP_RELEASE;
 80003d6:	4b05      	ldr	r3, [pc, #20]	@ (80003ec <ProcessClickReleaseDebouncing+0x4c>)
 80003d8:	2203      	movs	r2, #3
 80003da:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
			ec11Encoder.debouncingTick = 0;
 80003de:	4b03      	ldr	r3, [pc, #12]	@ (80003ec <ProcessClickReleaseDebouncing+0x4c>)
 80003e0:	2200      	movs	r2, #0
 80003e2:	639a      	str	r2, [r3, #56]	@ 0x38
		}
	}
}
 80003e4:	bf00      	nop
 80003e6:	bd80      	pop	{r7, pc}
 80003e8:	40010800 	.word	0x40010800
 80003ec:	200000f0 	.word	0x200000f0

080003f0 <ProcessClickRelease>:

void ProcessClickRelease()
{
 80003f0:	b580      	push	{r7, lr}
 80003f2:	b084      	sub	sp, #16
 80003f4:	af00      	add	r7, sp, #0
	if (ec11Encoder.hasRotate) { // 旋转后放开
 80003f6:	4b46      	ldr	r3, [pc, #280]	@ (8000510 <ProcessClickRelease+0x120>)
 80003f8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80003fc:	2b00      	cmp	r3, #0
 80003fe:	d002      	beq.n	8000406 <ProcessClickRelease+0x16>
		Ec11ResetStateMachine();
 8000400:	f7ff fedc 	bl	80001bc <Ec11ResetStateMachine>
 8000404:	e081      	b.n	800050a <ProcessClickRelease+0x11a>
		return;
	}

	KeyInfo keyInfo = { EC11_KEY, EC11_KEY_INVALID, 0 };
 8000406:	2301      	movs	r3, #1
 8000408:	713b      	strb	r3, [r7, #4]
 800040a:	2300      	movs	r3, #0
 800040c:	717b      	strb	r3, [r7, #5]
 800040e:	2300      	movs	r3, #0
 8000410:	60bb      	str	r3, [r7, #8]
	uint32_t resetLevelTick = HAL_GetTick() - ec11Encoder.lastPressTick;
 8000412:	f000 ffeb 	bl	80013ec <HAL_GetTick>
 8000416:	4602      	mov	r2, r0
 8000418:	4b3d      	ldr	r3, [pc, #244]	@ (8000510 <ProcessClickRelease+0x120>)
 800041a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800041c:	1ad3      	subs	r3, r2, r3
 800041e:	60fb      	str	r3, [r7, #12]
	if (resetLevelTick <= KEY_LONG_CLICK_TIME_700MS) { // 单击
 8000420:	68fb      	ldr	r3, [r7, #12]
 8000422:	f5b3 7f2f 	cmp.w	r3, #700	@ 0x2bc
 8000426:	d810      	bhi.n	800044a <ProcessClickRelease+0x5a>
		ec11Encoder.lastClickTick = HAL_GetTick(); // 更新单击tick，判断双击的时候使用
 8000428:	f000 ffe0 	bl	80013ec <HAL_GetTick>
 800042c:	4603      	mov	r3, r0
 800042e:	4a38      	ldr	r2, [pc, #224]	@ (8000510 <ProcessClickRelease+0x120>)
 8000430:	63d3      	str	r3, [r2, #60]	@ 0x3c
//			keyInfo.keyState = EC11_KEY_CLICK;

		ec11Encoder.ec11StateMachine.currentState = EC11_KEY_DOUBLE_CLICK;
 8000432:	4b37      	ldr	r3, [pc, #220]	@ (8000510 <ProcessClickRelease+0x120>)
 8000434:	2203      	movs	r2, #3
 8000436:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		ec11Encoder.ec11StateMachine.currentStep = KEY_STEP_PRESS;
 800043a:	4b35      	ldr	r3, [pc, #212]	@ (8000510 <ProcessClickRelease+0x120>)
 800043c:	2200      	movs	r2, #0
 800043e:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
		ec11Encoder.lastPressTick = 0;
 8000442:	4b33      	ldr	r3, [pc, #204]	@ (8000510 <ProcessClickRelease+0x120>)
 8000444:	2200      	movs	r2, #0
 8000446:	635a      	str	r2, [r3, #52]	@ 0x34
 8000448:	e05f      	b.n	800050a <ProcessClickRelease+0x11a>
	} else if (resetLevelTick > KEY_LONG_CLICK_TIME_700MS) { // 长按
 800044a:	68fb      	ldr	r3, [r7, #12]
 800044c:	f5b3 7f2f 	cmp.w	r3, #700	@ 0x2bc
 8000450:	d95b      	bls.n	800050a <ProcessClickRelease+0x11a>
		keyInfo.keyState = EC11_KEY_LONG_CLICK;
 8000452:	2304      	movs	r3, #4
 8000454:	717b      	strb	r3, [r7, #5]
		WriteBuf(&ec11Encoder.keyCircleBuf, &keyInfo);
 8000456:	2100      	movs	r1, #0
 8000458:	482e      	ldr	r0, [pc, #184]	@ (8000514 <ProcessClickRelease+0x124>)
 800045a:	f000 fdee 	bl	800103a <accquire_spinlock>
 800045e:	4b2c      	ldr	r3, [pc, #176]	@ (8000510 <ProcessClickRelease+0x120>)
 8000460:	f893 2022 	ldrb.w	r2, [r3, #34]	@ 0x22
 8000464:	4b2a      	ldr	r3, [pc, #168]	@ (8000510 <ProcessClickRelease+0x120>)
 8000466:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 800046a:	429a      	cmp	r2, r3
 800046c:	d317      	bcc.n	800049e <ProcessClickRelease+0xae>
 800046e:	4b28      	ldr	r3, [pc, #160]	@ (8000510 <ProcessClickRelease+0x120>)
 8000470:	f893 2021 	ldrb.w	r2, [r3, #33]	@ 0x21
 8000474:	4b26      	ldr	r3, [pc, #152]	@ (8000510 <ProcessClickRelease+0x120>)
 8000476:	f893 3020 	ldrb.w	r3, [r3, #32]
 800047a:	429a      	cmp	r2, r3
 800047c:	d10f      	bne.n	800049e <ProcessClickRelease+0xae>
 800047e:	4b24      	ldr	r3, [pc, #144]	@ (8000510 <ProcessClickRelease+0x120>)
 8000480:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000484:	3301      	adds	r3, #1
 8000486:	4a22      	ldr	r2, [pc, #136]	@ (8000510 <ProcessClickRelease+0x120>)
 8000488:	f892 2023 	ldrb.w	r2, [r2, #35]	@ 0x23
 800048c:	fb93 f1f2 	sdiv	r1, r3, r2
 8000490:	fb01 f202 	mul.w	r2, r1, r2
 8000494:	1a9b      	subs	r3, r3, r2
 8000496:	b2da      	uxtb	r2, r3
 8000498:	4b1d      	ldr	r3, [pc, #116]	@ (8000510 <ProcessClickRelease+0x120>)
 800049a:	f883 2020 	strb.w	r2, [r3, #32]
 800049e:	4b1c      	ldr	r3, [pc, #112]	@ (8000510 <ProcessClickRelease+0x120>)
 80004a0:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80004a4:	4a1a      	ldr	r2, [pc, #104]	@ (8000510 <ProcessClickRelease+0x120>)
 80004a6:	00db      	lsls	r3, r3, #3
 80004a8:	4413      	add	r3, r2
 80004aa:	1d3a      	adds	r2, r7, #4
 80004ac:	e892 0003 	ldmia.w	r2, {r0, r1}
 80004b0:	e883 0003 	stmia.w	r3, {r0, r1}
 80004b4:	4b16      	ldr	r3, [pc, #88]	@ (8000510 <ProcessClickRelease+0x120>)
 80004b6:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80004ba:	3301      	adds	r3, #1
 80004bc:	4a14      	ldr	r2, [pc, #80]	@ (8000510 <ProcessClickRelease+0x120>)
 80004be:	f892 2023 	ldrb.w	r2, [r2, #35]	@ 0x23
 80004c2:	fb93 f1f2 	sdiv	r1, r3, r2
 80004c6:	fb01 f202 	mul.w	r2, r1, r2
 80004ca:	1a9b      	subs	r3, r3, r2
 80004cc:	b2da      	uxtb	r2, r3
 80004ce:	4b10      	ldr	r3, [pc, #64]	@ (8000510 <ProcessClickRelease+0x120>)
 80004d0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
 80004d4:	4b0e      	ldr	r3, [pc, #56]	@ (8000510 <ProcessClickRelease+0x120>)
 80004d6:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 80004da:	3301      	adds	r3, #1
 80004dc:	b2da      	uxtb	r2, r3
 80004de:	4b0c      	ldr	r3, [pc, #48]	@ (8000510 <ProcessClickRelease+0x120>)
 80004e0:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
 80004e4:	4b0a      	ldr	r3, [pc, #40]	@ (8000510 <ProcessClickRelease+0x120>)
 80004e6:	f893 2022 	ldrb.w	r2, [r3, #34]	@ 0x22
 80004ea:	4b09      	ldr	r3, [pc, #36]	@ (8000510 <ProcessClickRelease+0x120>)
 80004ec:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 80004f0:	429a      	cmp	r2, r3
 80004f2:	d905      	bls.n	8000500 <ProcessClickRelease+0x110>
 80004f4:	4b06      	ldr	r3, [pc, #24]	@ (8000510 <ProcessClickRelease+0x120>)
 80004f6:	f893 2023 	ldrb.w	r2, [r3, #35]	@ 0x23
 80004fa:	4b05      	ldr	r3, [pc, #20]	@ (8000510 <ProcessClickRelease+0x120>)
 80004fc:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
 8000500:	4804      	ldr	r0, [pc, #16]	@ (8000514 <ProcessClickRelease+0x124>)
 8000502:	f000 fdc2 	bl	800108a <release_spinlock>
		Ec11ResetStateMachine();
 8000506:	f7ff fe59 	bl	80001bc <Ec11ResetStateMachine>
	}
}
 800050a:	3710      	adds	r7, #16
 800050c:	46bd      	mov	sp, r7
 800050e:	bd80      	pop	{r7, pc}
 8000510:	200000f0 	.word	0x200000f0
 8000514:	20000114 	.word	0x20000114

08000518 <ProcessDoubleClickPress>:

void ProcessDoubleClickPress()
{
 8000518:	b580      	push	{r7, lr}
 800051a:	b086      	sub	sp, #24
 800051c:	af00      	add	r7, sp, #0
	uint32_t currTick = HAL_GetTick();
 800051e:	f000 ff65 	bl	80013ec <HAL_GetTick>
 8000522:	6178      	str	r0, [r7, #20]
	uint32_t resetLevelTick = currTick - ec11Encoder.lastClickTick;
 8000524:	4b49      	ldr	r3, [pc, #292]	@ (800064c <ProcessDoubleClickPress+0x134>)
 8000526:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000528:	697a      	ldr	r2, [r7, #20]
 800052a:	1ad3      	subs	r3, r2, r3
 800052c:	613b      	str	r3, [r7, #16]
	GPIO_PinState currKeyLevel = HAL_GPIO_ReadPin(ec11_Key_GPIO_Port, ec11_Key_Pin);
 800052e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000532:	4847      	ldr	r0, [pc, #284]	@ (8000650 <ProcessDoubleClickPress+0x138>)
 8000534:	f001 faa8 	bl	8001a88 <HAL_GPIO_ReadPin>
 8000538:	4603      	mov	r3, r0
 800053a:	73fb      	strb	r3, [r7, #15]

	if (currKeyLevel == GPIO_PIN_SET && resetLevelTick >= KEY_DOUBLE_TIME_200MS) {
 800053c:	7bfb      	ldrb	r3, [r7, #15]
 800053e:	2b01      	cmp	r3, #1
 8000540:	d16f      	bne.n	8000622 <ProcessDoubleClickPress+0x10a>
 8000542:	693b      	ldr	r3, [r7, #16]
 8000544:	2bc7      	cmp	r3, #199	@ 0xc7
 8000546:	d96c      	bls.n	8000622 <ProcessDoubleClickPress+0x10a>
		if (ec11Encoder.lastClickTick != 0) { // 双击阈值内没有双击，则发送上次的单击事件
 8000548:	4b40      	ldr	r3, [pc, #256]	@ (800064c <ProcessDoubleClickPress+0x134>)
 800054a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800054c:	2b00      	cmp	r3, #0
 800054e:	d05d      	beq.n	800060c <ProcessDoubleClickPress+0xf4>
			KeyInfo keyInfo = { EC11_KEY, EC11_KEY_CLICK, 0 };
 8000550:	4a40      	ldr	r2, [pc, #256]	@ (8000654 <ProcessDoubleClickPress+0x13c>)
 8000552:	1d3b      	adds	r3, r7, #4
 8000554:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000558:	e883 0003 	stmia.w	r3, {r0, r1}
			WriteBuf(&ec11Encoder.keyCircleBuf, &keyInfo);
 800055c:	2100      	movs	r1, #0
 800055e:	483e      	ldr	r0, [pc, #248]	@ (8000658 <ProcessDoubleClickPress+0x140>)
 8000560:	f000 fd6b 	bl	800103a <accquire_spinlock>
 8000564:	4b39      	ldr	r3, [pc, #228]	@ (800064c <ProcessDoubleClickPress+0x134>)
 8000566:	f893 2022 	ldrb.w	r2, [r3, #34]	@ 0x22
 800056a:	4b38      	ldr	r3, [pc, #224]	@ (800064c <ProcessDoubleClickPress+0x134>)
 800056c:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 8000570:	429a      	cmp	r2, r3
 8000572:	d317      	bcc.n	80005a4 <ProcessDoubleClickPress+0x8c>
 8000574:	4b35      	ldr	r3, [pc, #212]	@ (800064c <ProcessDoubleClickPress+0x134>)
 8000576:	f893 2021 	ldrb.w	r2, [r3, #33]	@ 0x21
 800057a:	4b34      	ldr	r3, [pc, #208]	@ (800064c <ProcessDoubleClickPress+0x134>)
 800057c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000580:	429a      	cmp	r2, r3
 8000582:	d10f      	bne.n	80005a4 <ProcessDoubleClickPress+0x8c>
 8000584:	4b31      	ldr	r3, [pc, #196]	@ (800064c <ProcessDoubleClickPress+0x134>)
 8000586:	f893 3020 	ldrb.w	r3, [r3, #32]
 800058a:	3301      	adds	r3, #1
 800058c:	4a2f      	ldr	r2, [pc, #188]	@ (800064c <ProcessDoubleClickPress+0x134>)
 800058e:	f892 2023 	ldrb.w	r2, [r2, #35]	@ 0x23
 8000592:	fb93 f1f2 	sdiv	r1, r3, r2
 8000596:	fb01 f202 	mul.w	r2, r1, r2
 800059a:	1a9b      	subs	r3, r3, r2
 800059c:	b2da      	uxtb	r2, r3
 800059e:	4b2b      	ldr	r3, [pc, #172]	@ (800064c <ProcessDoubleClickPress+0x134>)
 80005a0:	f883 2020 	strb.w	r2, [r3, #32]
 80005a4:	4b29      	ldr	r3, [pc, #164]	@ (800064c <ProcessDoubleClickPress+0x134>)
 80005a6:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80005aa:	4a28      	ldr	r2, [pc, #160]	@ (800064c <ProcessDoubleClickPress+0x134>)
 80005ac:	00db      	lsls	r3, r3, #3
 80005ae:	4413      	add	r3, r2
 80005b0:	1d3a      	adds	r2, r7, #4
 80005b2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80005b6:	e883 0003 	stmia.w	r3, {r0, r1}
 80005ba:	4b24      	ldr	r3, [pc, #144]	@ (800064c <ProcessDoubleClickPress+0x134>)
 80005bc:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80005c0:	3301      	adds	r3, #1
 80005c2:	4a22      	ldr	r2, [pc, #136]	@ (800064c <ProcessDoubleClickPress+0x134>)
 80005c4:	f892 2023 	ldrb.w	r2, [r2, #35]	@ 0x23
 80005c8:	fb93 f1f2 	sdiv	r1, r3, r2
 80005cc:	fb01 f202 	mul.w	r2, r1, r2
 80005d0:	1a9b      	subs	r3, r3, r2
 80005d2:	b2da      	uxtb	r2, r3
 80005d4:	4b1d      	ldr	r3, [pc, #116]	@ (800064c <ProcessDoubleClickPress+0x134>)
 80005d6:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
 80005da:	4b1c      	ldr	r3, [pc, #112]	@ (800064c <ProcessDoubleClickPress+0x134>)
 80005dc:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 80005e0:	3301      	adds	r3, #1
 80005e2:	b2da      	uxtb	r2, r3
 80005e4:	4b19      	ldr	r3, [pc, #100]	@ (800064c <ProcessDoubleClickPress+0x134>)
 80005e6:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
 80005ea:	4b18      	ldr	r3, [pc, #96]	@ (800064c <ProcessDoubleClickPress+0x134>)
 80005ec:	f893 2022 	ldrb.w	r2, [r3, #34]	@ 0x22
 80005f0:	4b16      	ldr	r3, [pc, #88]	@ (800064c <ProcessDoubleClickPress+0x134>)
 80005f2:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 80005f6:	429a      	cmp	r2, r3
 80005f8:	d905      	bls.n	8000606 <ProcessDoubleClickPress+0xee>
 80005fa:	4b14      	ldr	r3, [pc, #80]	@ (800064c <ProcessDoubleClickPress+0x134>)
 80005fc:	f893 2023 	ldrb.w	r2, [r3, #35]	@ 0x23
 8000600:	4b12      	ldr	r3, [pc, #72]	@ (800064c <ProcessDoubleClickPress+0x134>)
 8000602:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
 8000606:	4814      	ldr	r0, [pc, #80]	@ (8000658 <ProcessDoubleClickPress+0x140>)
 8000608:	f000 fd3f 	bl	800108a <release_spinlock>
		}
		ec11Encoder.ec11StateMachine.currentState = EC11_KEY_CLICK;
 800060c:	4b0f      	ldr	r3, [pc, #60]	@ (800064c <ProcessDoubleClickPress+0x134>)
 800060e:	2202      	movs	r2, #2
 8000610:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		ec11Encoder.ec11StateMachine.currentStep = KEY_STEP_PRESS;
 8000614:	4b0d      	ldr	r3, [pc, #52]	@ (800064c <ProcessDoubleClickPress+0x134>)
 8000616:	2200      	movs	r2, #0
 8000618:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
		ec11Encoder.lastClickTick = 0;
 800061c:	4b0b      	ldr	r3, [pc, #44]	@ (800064c <ProcessDoubleClickPress+0x134>)
 800061e:	2200      	movs	r2, #0
 8000620:	63da      	str	r2, [r3, #60]	@ 0x3c
	}

	if (currKeyLevel == GPIO_PIN_RESET && resetLevelTick < KEY_DOUBLE_TIME_200MS) {
 8000622:	7bfb      	ldrb	r3, [r7, #15]
 8000624:	2b00      	cmp	r3, #0
 8000626:	d10d      	bne.n	8000644 <ProcessDoubleClickPress+0x12c>
 8000628:	693b      	ldr	r3, [r7, #16]
 800062a:	2bc7      	cmp	r3, #199	@ 0xc7
 800062c:	d80a      	bhi.n	8000644 <ProcessDoubleClickPress+0x12c>
		ec11Encoder.debouncingTick = currTick;
 800062e:	4a07      	ldr	r2, [pc, #28]	@ (800064c <ProcessDoubleClickPress+0x134>)
 8000630:	697b      	ldr	r3, [r7, #20]
 8000632:	6393      	str	r3, [r2, #56]	@ 0x38
		ec11Encoder.ec11StateMachine.currentState = EC11_KEY_DOUBLE_CLICK;
 8000634:	4b05      	ldr	r3, [pc, #20]	@ (800064c <ProcessDoubleClickPress+0x134>)
 8000636:	2203      	movs	r2, #3
 8000638:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		ec11Encoder.ec11StateMachine.currentStep = KEY_STEP_PRESS_DEBOUNCING;
 800063c:	4b03      	ldr	r3, [pc, #12]	@ (800064c <ProcessDoubleClickPress+0x134>)
 800063e:	2201      	movs	r2, #1
 8000640:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
	}
}
 8000644:	bf00      	nop
 8000646:	3718      	adds	r7, #24
 8000648:	46bd      	mov	sp, r7
 800064a:	bd80      	pop	{r7, pc}
 800064c:	200000f0 	.word	0x200000f0
 8000650:	40010800 	.word	0x40010800
 8000654:	08003f58 	.word	0x08003f58
 8000658:	20000114 	.word	0x20000114

0800065c <ProcessDoubleClickDebouncing>:

void ProcessDoubleClickDebouncing()
{
 800065c:	b580      	push	{r7, lr}
 800065e:	b082      	sub	sp, #8
 8000660:	af00      	add	r7, sp, #0
	uint32_t currTick = HAL_GetTick();
 8000662:	f000 fec3 	bl	80013ec <HAL_GetTick>
 8000666:	6078      	str	r0, [r7, #4]
	if (HAL_GPIO_ReadPin(ec11_Key_GPIO_Port, ec11_Key_Pin) == GPIO_PIN_RESET) {
 8000668:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800066c:	480e      	ldr	r0, [pc, #56]	@ (80006a8 <ProcessDoubleClickDebouncing+0x4c>)
 800066e:	f001 fa0b 	bl	8001a88 <HAL_GPIO_ReadPin>
 8000672:	4603      	mov	r3, r0
 8000674:	2b00      	cmp	r3, #0
 8000676:	d113      	bne.n	80006a0 <ProcessDoubleClickDebouncing+0x44>
		if (currTick - ec11Encoder.debouncingTick > KEY_DEBOUNCING_TIME_10MS) {
 8000678:	4b0c      	ldr	r3, [pc, #48]	@ (80006ac <ProcessDoubleClickDebouncing+0x50>)
 800067a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800067c:	687a      	ldr	r2, [r7, #4]
 800067e:	1ad3      	subs	r3, r2, r3
 8000680:	2b0a      	cmp	r3, #10
 8000682:	d90d      	bls.n	80006a0 <ProcessDoubleClickDebouncing+0x44>
			ec11Encoder.ec11StateMachine.currentState = EC11_KEY_DOUBLE_CLICK;
 8000684:	4b09      	ldr	r3, [pc, #36]	@ (80006ac <ProcessDoubleClickDebouncing+0x50>)
 8000686:	2203      	movs	r2, #3
 8000688:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
			ec11Encoder.ec11StateMachine.currentStep = KEY_STEP_RELEASE_DEBOUNCING;
 800068c:	4b07      	ldr	r3, [pc, #28]	@ (80006ac <ProcessDoubleClickDebouncing+0x50>)
 800068e:	2202      	movs	r2, #2
 8000690:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
			ec11Encoder.lastPressTick = currTick;
 8000694:	4a05      	ldr	r2, [pc, #20]	@ (80006ac <ProcessDoubleClickDebouncing+0x50>)
 8000696:	687b      	ldr	r3, [r7, #4]
 8000698:	6353      	str	r3, [r2, #52]	@ 0x34
			ec11Encoder.debouncingTick = 0;
 800069a:	4b04      	ldr	r3, [pc, #16]	@ (80006ac <ProcessDoubleClickDebouncing+0x50>)
 800069c:	2200      	movs	r2, #0
 800069e:	639a      	str	r2, [r3, #56]	@ 0x38
		}
	}
}
 80006a0:	bf00      	nop
 80006a2:	3708      	adds	r7, #8
 80006a4:	46bd      	mov	sp, r7
 80006a6:	bd80      	pop	{r7, pc}
 80006a8:	40010800 	.word	0x40010800
 80006ac:	200000f0 	.word	0x200000f0

080006b0 <ProcessDoubleClickReleaseDebouncing>:

void ProcessDoubleClickReleaseDebouncing()
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	b082      	sub	sp, #8
 80006b4:	af00      	add	r7, sp, #0
	uint32_t currTick = HAL_GetTick();
 80006b6:	f000 fe99 	bl	80013ec <HAL_GetTick>
 80006ba:	6078      	str	r0, [r7, #4]
	GPIO_PinState currKeyLevel = HAL_GPIO_ReadPin(ec11_Key_GPIO_Port, ec11_Key_Pin);
 80006bc:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80006c0:	4811      	ldr	r0, [pc, #68]	@ (8000708 <ProcessDoubleClickReleaseDebouncing+0x58>)
 80006c2:	f001 f9e1 	bl	8001a88 <HAL_GPIO_ReadPin>
 80006c6:	4603      	mov	r3, r0
 80006c8:	70fb      	strb	r3, [r7, #3]
	if (currKeyLevel == GPIO_PIN_SET) {
 80006ca:	78fb      	ldrb	r3, [r7, #3]
 80006cc:	2b01      	cmp	r3, #1
 80006ce:	d117      	bne.n	8000700 <ProcessDoubleClickReleaseDebouncing+0x50>
		if (ec11Encoder.debouncingTick == 0) {
 80006d0:	4b0e      	ldr	r3, [pc, #56]	@ (800070c <ProcessDoubleClickReleaseDebouncing+0x5c>)
 80006d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80006d4:	2b00      	cmp	r3, #0
 80006d6:	d102      	bne.n	80006de <ProcessDoubleClickReleaseDebouncing+0x2e>
			ec11Encoder.debouncingTick = currTick;
 80006d8:	4a0c      	ldr	r2, [pc, #48]	@ (800070c <ProcessDoubleClickReleaseDebouncing+0x5c>)
 80006da:	687b      	ldr	r3, [r7, #4]
 80006dc:	6393      	str	r3, [r2, #56]	@ 0x38
		}

		if (currTick - ec11Encoder.debouncingTick > KEY_DEBOUNCING_TIME_10MS) { // 去抖时间到达
 80006de:	4b0b      	ldr	r3, [pc, #44]	@ (800070c <ProcessDoubleClickReleaseDebouncing+0x5c>)
 80006e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80006e2:	687a      	ldr	r2, [r7, #4]
 80006e4:	1ad3      	subs	r3, r2, r3
 80006e6:	2b0a      	cmp	r3, #10
 80006e8:	d90a      	bls.n	8000700 <ProcessDoubleClickReleaseDebouncing+0x50>
			ec11Encoder.ec11StateMachine.currentState = EC11_KEY_DOUBLE_CLICK;
 80006ea:	4b08      	ldr	r3, [pc, #32]	@ (800070c <ProcessDoubleClickReleaseDebouncing+0x5c>)
 80006ec:	2203      	movs	r2, #3
 80006ee:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
			ec11Encoder.ec11StateMachine.currentStep = KEY_STEP_RELEASE;
 80006f2:	4b06      	ldr	r3, [pc, #24]	@ (800070c <ProcessDoubleClickReleaseDebouncing+0x5c>)
 80006f4:	2203      	movs	r2, #3
 80006f6:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
			ec11Encoder.debouncingTick = 0;
 80006fa:	4b04      	ldr	r3, [pc, #16]	@ (800070c <ProcessDoubleClickReleaseDebouncing+0x5c>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	639a      	str	r2, [r3, #56]	@ 0x38
		}
	}
}
 8000700:	bf00      	nop
 8000702:	3708      	adds	r7, #8
 8000704:	46bd      	mov	sp, r7
 8000706:	bd80      	pop	{r7, pc}
 8000708:	40010800 	.word	0x40010800
 800070c:	200000f0 	.word	0x200000f0

08000710 <ProcessDoubleClickRelease>:

void ProcessDoubleClickRelease()
{
 8000710:	b580      	push	{r7, lr}
 8000712:	b082      	sub	sp, #8
 8000714:	af00      	add	r7, sp, #0
	if (ec11Encoder.hasRotate) {
 8000716:	4b35      	ldr	r3, [pc, #212]	@ (80007ec <ProcessDoubleClickRelease+0xdc>)
 8000718:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800071c:	2b00      	cmp	r3, #0
 800071e:	d002      	beq.n	8000726 <ProcessDoubleClickRelease+0x16>
		Ec11ResetStateMachine();
 8000720:	f7ff fd4c 	bl	80001bc <Ec11ResetStateMachine>
 8000724:	e05f      	b.n	80007e6 <ProcessDoubleClickRelease+0xd6>
		return;
	}

	KeyInfo keyInfo = { EC11_KEY, EC11_KEY_DOUBLE_CLICK, 0 };
 8000726:	4a32      	ldr	r2, [pc, #200]	@ (80007f0 <ProcessDoubleClickRelease+0xe0>)
 8000728:	463b      	mov	r3, r7
 800072a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800072e:	e883 0003 	stmia.w	r3, {r0, r1}
//	uint32_t currTick = HAL_GetTick();
//	if (currTick - ec11Encoder.lastPressTick > KEY_LONG_CLICK_TIME_700MS) {
//		keyInfo.keyState = EC11_KEY_LONG_CLICK;  // 单击+双击阈值内长按识别为长按
//	}
	WriteBuf(&ec11Encoder.keyCircleBuf, &keyInfo);
 8000732:	2100      	movs	r1, #0
 8000734:	482f      	ldr	r0, [pc, #188]	@ (80007f4 <ProcessDoubleClickRelease+0xe4>)
 8000736:	f000 fc80 	bl	800103a <accquire_spinlock>
 800073a:	4b2c      	ldr	r3, [pc, #176]	@ (80007ec <ProcessDoubleClickRelease+0xdc>)
 800073c:	f893 2022 	ldrb.w	r2, [r3, #34]	@ 0x22
 8000740:	4b2a      	ldr	r3, [pc, #168]	@ (80007ec <ProcessDoubleClickRelease+0xdc>)
 8000742:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 8000746:	429a      	cmp	r2, r3
 8000748:	d317      	bcc.n	800077a <ProcessDoubleClickRelease+0x6a>
 800074a:	4b28      	ldr	r3, [pc, #160]	@ (80007ec <ProcessDoubleClickRelease+0xdc>)
 800074c:	f893 2021 	ldrb.w	r2, [r3, #33]	@ 0x21
 8000750:	4b26      	ldr	r3, [pc, #152]	@ (80007ec <ProcessDoubleClickRelease+0xdc>)
 8000752:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000756:	429a      	cmp	r2, r3
 8000758:	d10f      	bne.n	800077a <ProcessDoubleClickRelease+0x6a>
 800075a:	4b24      	ldr	r3, [pc, #144]	@ (80007ec <ProcessDoubleClickRelease+0xdc>)
 800075c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000760:	3301      	adds	r3, #1
 8000762:	4a22      	ldr	r2, [pc, #136]	@ (80007ec <ProcessDoubleClickRelease+0xdc>)
 8000764:	f892 2023 	ldrb.w	r2, [r2, #35]	@ 0x23
 8000768:	fb93 f1f2 	sdiv	r1, r3, r2
 800076c:	fb01 f202 	mul.w	r2, r1, r2
 8000770:	1a9b      	subs	r3, r3, r2
 8000772:	b2da      	uxtb	r2, r3
 8000774:	4b1d      	ldr	r3, [pc, #116]	@ (80007ec <ProcessDoubleClickRelease+0xdc>)
 8000776:	f883 2020 	strb.w	r2, [r3, #32]
 800077a:	4b1c      	ldr	r3, [pc, #112]	@ (80007ec <ProcessDoubleClickRelease+0xdc>)
 800077c:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8000780:	4a1a      	ldr	r2, [pc, #104]	@ (80007ec <ProcessDoubleClickRelease+0xdc>)
 8000782:	00db      	lsls	r3, r3, #3
 8000784:	4413      	add	r3, r2
 8000786:	463a      	mov	r2, r7
 8000788:	e892 0003 	ldmia.w	r2, {r0, r1}
 800078c:	e883 0003 	stmia.w	r3, {r0, r1}
 8000790:	4b16      	ldr	r3, [pc, #88]	@ (80007ec <ProcessDoubleClickRelease+0xdc>)
 8000792:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8000796:	3301      	adds	r3, #1
 8000798:	4a14      	ldr	r2, [pc, #80]	@ (80007ec <ProcessDoubleClickRelease+0xdc>)
 800079a:	f892 2023 	ldrb.w	r2, [r2, #35]	@ 0x23
 800079e:	fb93 f1f2 	sdiv	r1, r3, r2
 80007a2:	fb01 f202 	mul.w	r2, r1, r2
 80007a6:	1a9b      	subs	r3, r3, r2
 80007a8:	b2da      	uxtb	r2, r3
 80007aa:	4b10      	ldr	r3, [pc, #64]	@ (80007ec <ProcessDoubleClickRelease+0xdc>)
 80007ac:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
 80007b0:	4b0e      	ldr	r3, [pc, #56]	@ (80007ec <ProcessDoubleClickRelease+0xdc>)
 80007b2:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 80007b6:	3301      	adds	r3, #1
 80007b8:	b2da      	uxtb	r2, r3
 80007ba:	4b0c      	ldr	r3, [pc, #48]	@ (80007ec <ProcessDoubleClickRelease+0xdc>)
 80007bc:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
 80007c0:	4b0a      	ldr	r3, [pc, #40]	@ (80007ec <ProcessDoubleClickRelease+0xdc>)
 80007c2:	f893 2022 	ldrb.w	r2, [r3, #34]	@ 0x22
 80007c6:	4b09      	ldr	r3, [pc, #36]	@ (80007ec <ProcessDoubleClickRelease+0xdc>)
 80007c8:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 80007cc:	429a      	cmp	r2, r3
 80007ce:	d905      	bls.n	80007dc <ProcessDoubleClickRelease+0xcc>
 80007d0:	4b06      	ldr	r3, [pc, #24]	@ (80007ec <ProcessDoubleClickRelease+0xdc>)
 80007d2:	f893 2023 	ldrb.w	r2, [r3, #35]	@ 0x23
 80007d6:	4b05      	ldr	r3, [pc, #20]	@ (80007ec <ProcessDoubleClickRelease+0xdc>)
 80007d8:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
 80007dc:	4805      	ldr	r0, [pc, #20]	@ (80007f4 <ProcessDoubleClickRelease+0xe4>)
 80007de:	f000 fc54 	bl	800108a <release_spinlock>
	Ec11ResetStateMachine();
 80007e2:	f7ff fceb 	bl	80001bc <Ec11ResetStateMachine>
}
 80007e6:	3708      	adds	r7, #8
 80007e8:	46bd      	mov	sp, r7
 80007ea:	bd80      	pop	{r7, pc}
 80007ec:	200000f0 	.word	0x200000f0
 80007f0:	08003f60 	.word	0x08003f60
 80007f4:	20000114 	.word	0x20000114

080007f8 <Ec11TickProcess>:

static void Ec11TickProcess() {
 80007f8:	b580      	push	{r7, lr}
 80007fa:	b084      	sub	sp, #16
 80007fc:	af00      	add	r7, sp, #0
	static GPIO_PinState currALevel = GPIO_PIN_SET;
	static GPIO_PinState currBLevel = GPIO_PIN_SET;
	static uint8_t switchACounter = 0;
	static uint8_t switchBCounter = 0;

	currALevel = HAL_GPIO_ReadPin(ec11_A_GPIO_Port, ec11_A_Pin);
 80007fe:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000802:	48a3      	ldr	r0, [pc, #652]	@ (8000a90 <Ec11TickProcess+0x298>)
 8000804:	f001 f940 	bl	8001a88 <HAL_GPIO_ReadPin>
 8000808:	4603      	mov	r3, r0
 800080a:	461a      	mov	r2, r3
 800080c:	4ba1      	ldr	r3, [pc, #644]	@ (8000a94 <Ec11TickProcess+0x29c>)
 800080e:	701a      	strb	r2, [r3, #0]
	currBLevel = HAL_GPIO_ReadPin(ec11_B_GPIO_Port, ec11_B_Pin);
 8000810:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000814:	489e      	ldr	r0, [pc, #632]	@ (8000a90 <Ec11TickProcess+0x298>)
 8000816:	f001 f937 	bl	8001a88 <HAL_GPIO_ReadPin>
 800081a:	4603      	mov	r3, r0
 800081c:	461a      	mov	r2, r3
 800081e:	4b9e      	ldr	r3, [pc, #632]	@ (8000a98 <Ec11TickProcess+0x2a0>)
 8000820:	701a      	strb	r2, [r3, #0]
	if (currALevel != lastALevel) {
 8000822:	4b9c      	ldr	r3, [pc, #624]	@ (8000a94 <Ec11TickProcess+0x29c>)
 8000824:	781a      	ldrb	r2, [r3, #0]
 8000826:	4b9d      	ldr	r3, [pc, #628]	@ (8000a9c <Ec11TickProcess+0x2a4>)
 8000828:	781b      	ldrb	r3, [r3, #0]
 800082a:	429a      	cmp	r2, r3
 800082c:	f000 8121 	beq.w	8000a72 <Ec11TickProcess+0x27a>
		switchACounter = (switchACounter + 1) > 2 ? 1 : (switchACounter + 1);
 8000830:	4b9b      	ldr	r3, [pc, #620]	@ (8000aa0 <Ec11TickProcess+0x2a8>)
 8000832:	781b      	ldrb	r3, [r3, #0]
 8000834:	2b01      	cmp	r3, #1
 8000836:	d804      	bhi.n	8000842 <Ec11TickProcess+0x4a>
 8000838:	4b99      	ldr	r3, [pc, #612]	@ (8000aa0 <Ec11TickProcess+0x2a8>)
 800083a:	781b      	ldrb	r3, [r3, #0]
 800083c:	3301      	adds	r3, #1
 800083e:	b2db      	uxtb	r3, r3
 8000840:	e000      	b.n	8000844 <Ec11TickProcess+0x4c>
 8000842:	2301      	movs	r3, #1
 8000844:	4a96      	ldr	r2, [pc, #600]	@ (8000aa0 <Ec11TickProcess+0x2a8>)
 8000846:	7013      	strb	r3, [r2, #0]
		if (currALevel == GPIO_PIN_RESET) { // A相下降沿
 8000848:	4b92      	ldr	r3, [pc, #584]	@ (8000a94 <Ec11TickProcess+0x29c>)
 800084a:	781b      	ldrb	r3, [r3, #0]
 800084c:	2b00      	cmp	r3, #0
 800084e:	d10b      	bne.n	8000868 <Ec11TickProcess+0x70>
			if (currBLevel == GPIO_PIN_SET) {
 8000850:	4b91      	ldr	r3, [pc, #580]	@ (8000a98 <Ec11TickProcess+0x2a0>)
 8000852:	781b      	ldrb	r3, [r3, #0]
 8000854:	2b01      	cmp	r3, #1
 8000856:	d103      	bne.n	8000860 <Ec11TickProcess+0x68>
				ec11CurrentState = EC11_DIRECTION_SEQUENCE_HALF;
 8000858:	4b92      	ldr	r3, [pc, #584]	@ (8000aa4 <Ec11TickProcess+0x2ac>)
 800085a:	2201      	movs	r2, #1
 800085c:	701a      	strb	r2, [r3, #0]
 800085e:	e104      	b.n	8000a6a <Ec11TickProcess+0x272>
			} else {
				ec11CurrentState = EC11_DIRECTION_REVERSE_HALF;
 8000860:	4b90      	ldr	r3, [pc, #576]	@ (8000aa4 <Ec11TickProcess+0x2ac>)
 8000862:	2202      	movs	r2, #2
 8000864:	701a      	strb	r2, [r3, #0]
 8000866:	e100      	b.n	8000a6a <Ec11TickProcess+0x272>
			}
		} else { // A相上升沿
			if (ec11CurrentState == EC11_DIRECTION_SEQUENCE_HALF) {
 8000868:	4b8e      	ldr	r3, [pc, #568]	@ (8000aa4 <Ec11TickProcess+0x2ac>)
 800086a:	781b      	ldrb	r3, [r3, #0]
 800086c:	2b01      	cmp	r3, #1
 800086e:	d17d      	bne.n	800096c <Ec11TickProcess+0x174>
				if (switchBCounter == 2) {
 8000870:	4b8d      	ldr	r3, [pc, #564]	@ (8000aa8 <Ec11TickProcess+0x2b0>)
 8000872:	781b      	ldrb	r3, [r3, #0]
 8000874:	2b02      	cmp	r3, #2
 8000876:	d103      	bne.n	8000880 <Ec11TickProcess+0x88>
					ec11CurrentState = EC11_DIRECTION_INVALID;
 8000878:	4b8a      	ldr	r3, [pc, #552]	@ (8000aa4 <Ec11TickProcess+0x2ac>)
 800087a:	2200      	movs	r2, #0
 800087c:	701a      	strb	r2, [r3, #0]
 800087e:	e0f4      	b.n	8000a6a <Ec11TickProcess+0x272>
				} else if (switchBCounter == 1) {
 8000880:	4b89      	ldr	r3, [pc, #548]	@ (8000aa8 <Ec11TickProcess+0x2b0>)
 8000882:	781b      	ldrb	r3, [r3, #0]
 8000884:	2b01      	cmp	r3, #1
 8000886:	f040 80f0 	bne.w	8000a6a <Ec11TickProcess+0x272>
					encodeCounter--;
 800088a:	4b88      	ldr	r3, [pc, #544]	@ (8000aac <Ec11TickProcess+0x2b4>)
 800088c:	681b      	ldr	r3, [r3, #0]
 800088e:	3b01      	subs	r3, #1
 8000890:	4a86      	ldr	r2, [pc, #536]	@ (8000aac <Ec11TickProcess+0x2b4>)
 8000892:	6013      	str	r3, [r2, #0]
					KeyInfo keyInfo = { EC11_KEY, EC11_KEY_LEFT_ROTATE, encodeCounter };
 8000894:	2301      	movs	r3, #1
 8000896:	723b      	strb	r3, [r7, #8]
 8000898:	2305      	movs	r3, #5
 800089a:	727b      	strb	r3, [r7, #9]
 800089c:	4b83      	ldr	r3, [pc, #524]	@ (8000aac <Ec11TickProcess+0x2b4>)
 800089e:	681b      	ldr	r3, [r3, #0]
 80008a0:	60fb      	str	r3, [r7, #12]
					if (ec11Encoder.ec11StateMachine.currentStep == KEY_STEP_RELEASE_DEBOUNCING) {
 80008a2:	4b83      	ldr	r3, [pc, #524]	@ (8000ab0 <Ec11TickProcess+0x2b8>)
 80008a4:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 80008a8:	2b02      	cmp	r3, #2
 80008aa:	d105      	bne.n	80008b8 <Ec11TickProcess+0xc0>
						ec11Encoder.hasRotate = true;
 80008ac:	4b80      	ldr	r3, [pc, #512]	@ (8000ab0 <Ec11TickProcess+0x2b8>)
 80008ae:	2201      	movs	r2, #1
 80008b0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
						keyInfo.keyState = EC11_KEY_PRESS_LEFT_ROTATE;
 80008b4:	2307      	movs	r3, #7
 80008b6:	727b      	strb	r3, [r7, #9]
					}
					WriteBuf(&ec11Encoder.keyCircleBuf, &keyInfo);
 80008b8:	2100      	movs	r1, #0
 80008ba:	487e      	ldr	r0, [pc, #504]	@ (8000ab4 <Ec11TickProcess+0x2bc>)
 80008bc:	f000 fbbd 	bl	800103a <accquire_spinlock>
 80008c0:	4b7b      	ldr	r3, [pc, #492]	@ (8000ab0 <Ec11TickProcess+0x2b8>)
 80008c2:	f893 2022 	ldrb.w	r2, [r3, #34]	@ 0x22
 80008c6:	4b7a      	ldr	r3, [pc, #488]	@ (8000ab0 <Ec11TickProcess+0x2b8>)
 80008c8:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 80008cc:	429a      	cmp	r2, r3
 80008ce:	d317      	bcc.n	8000900 <Ec11TickProcess+0x108>
 80008d0:	4b77      	ldr	r3, [pc, #476]	@ (8000ab0 <Ec11TickProcess+0x2b8>)
 80008d2:	f893 2021 	ldrb.w	r2, [r3, #33]	@ 0x21
 80008d6:	4b76      	ldr	r3, [pc, #472]	@ (8000ab0 <Ec11TickProcess+0x2b8>)
 80008d8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80008dc:	429a      	cmp	r2, r3
 80008de:	d10f      	bne.n	8000900 <Ec11TickProcess+0x108>
 80008e0:	4b73      	ldr	r3, [pc, #460]	@ (8000ab0 <Ec11TickProcess+0x2b8>)
 80008e2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80008e6:	3301      	adds	r3, #1
 80008e8:	4a71      	ldr	r2, [pc, #452]	@ (8000ab0 <Ec11TickProcess+0x2b8>)
 80008ea:	f892 2023 	ldrb.w	r2, [r2, #35]	@ 0x23
 80008ee:	fb93 f1f2 	sdiv	r1, r3, r2
 80008f2:	fb01 f202 	mul.w	r2, r1, r2
 80008f6:	1a9b      	subs	r3, r3, r2
 80008f8:	b2da      	uxtb	r2, r3
 80008fa:	4b6d      	ldr	r3, [pc, #436]	@ (8000ab0 <Ec11TickProcess+0x2b8>)
 80008fc:	f883 2020 	strb.w	r2, [r3, #32]
 8000900:	4b6b      	ldr	r3, [pc, #428]	@ (8000ab0 <Ec11TickProcess+0x2b8>)
 8000902:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8000906:	4a6a      	ldr	r2, [pc, #424]	@ (8000ab0 <Ec11TickProcess+0x2b8>)
 8000908:	00db      	lsls	r3, r3, #3
 800090a:	4413      	add	r3, r2
 800090c:	f107 0208 	add.w	r2, r7, #8
 8000910:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000914:	e883 0003 	stmia.w	r3, {r0, r1}
 8000918:	4b65      	ldr	r3, [pc, #404]	@ (8000ab0 <Ec11TickProcess+0x2b8>)
 800091a:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800091e:	3301      	adds	r3, #1
 8000920:	4a63      	ldr	r2, [pc, #396]	@ (8000ab0 <Ec11TickProcess+0x2b8>)
 8000922:	f892 2023 	ldrb.w	r2, [r2, #35]	@ 0x23
 8000926:	fb93 f1f2 	sdiv	r1, r3, r2
 800092a:	fb01 f202 	mul.w	r2, r1, r2
 800092e:	1a9b      	subs	r3, r3, r2
 8000930:	b2da      	uxtb	r2, r3
 8000932:	4b5f      	ldr	r3, [pc, #380]	@ (8000ab0 <Ec11TickProcess+0x2b8>)
 8000934:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
 8000938:	4b5d      	ldr	r3, [pc, #372]	@ (8000ab0 <Ec11TickProcess+0x2b8>)
 800093a:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 800093e:	3301      	adds	r3, #1
 8000940:	b2da      	uxtb	r2, r3
 8000942:	4b5b      	ldr	r3, [pc, #364]	@ (8000ab0 <Ec11TickProcess+0x2b8>)
 8000944:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
 8000948:	4b59      	ldr	r3, [pc, #356]	@ (8000ab0 <Ec11TickProcess+0x2b8>)
 800094a:	f893 2022 	ldrb.w	r2, [r3, #34]	@ 0x22
 800094e:	4b58      	ldr	r3, [pc, #352]	@ (8000ab0 <Ec11TickProcess+0x2b8>)
 8000950:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 8000954:	429a      	cmp	r2, r3
 8000956:	d905      	bls.n	8000964 <Ec11TickProcess+0x16c>
 8000958:	4b55      	ldr	r3, [pc, #340]	@ (8000ab0 <Ec11TickProcess+0x2b8>)
 800095a:	f893 2023 	ldrb.w	r2, [r3, #35]	@ 0x23
 800095e:	4b54      	ldr	r3, [pc, #336]	@ (8000ab0 <Ec11TickProcess+0x2b8>)
 8000960:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
 8000964:	4853      	ldr	r0, [pc, #332]	@ (8000ab4 <Ec11TickProcess+0x2bc>)
 8000966:	f000 fb90 	bl	800108a <release_spinlock>
 800096a:	e07e      	b.n	8000a6a <Ec11TickProcess+0x272>
				}
			} else if (ec11CurrentState == EC11_DIRECTION_REVERSE_HALF) {
 800096c:	4b4d      	ldr	r3, [pc, #308]	@ (8000aa4 <Ec11TickProcess+0x2ac>)
 800096e:	781b      	ldrb	r3, [r3, #0]
 8000970:	2b02      	cmp	r3, #2
 8000972:	d17a      	bne.n	8000a6a <Ec11TickProcess+0x272>
				if (switchBCounter == 1) {
 8000974:	4b4c      	ldr	r3, [pc, #304]	@ (8000aa8 <Ec11TickProcess+0x2b0>)
 8000976:	781b      	ldrb	r3, [r3, #0]
 8000978:	2b01      	cmp	r3, #1
 800097a:	d103      	bne.n	8000984 <Ec11TickProcess+0x18c>
					ec11CurrentState = EC11_DIRECTION_INVALID;
 800097c:	4b49      	ldr	r3, [pc, #292]	@ (8000aa4 <Ec11TickProcess+0x2ac>)
 800097e:	2200      	movs	r2, #0
 8000980:	701a      	strb	r2, [r3, #0]
 8000982:	e072      	b.n	8000a6a <Ec11TickProcess+0x272>
				} else if (switchBCounter == 2) {
 8000984:	4b48      	ldr	r3, [pc, #288]	@ (8000aa8 <Ec11TickProcess+0x2b0>)
 8000986:	781b      	ldrb	r3, [r3, #0]
 8000988:	2b02      	cmp	r3, #2
 800098a:	d16e      	bne.n	8000a6a <Ec11TickProcess+0x272>
					encodeCounter++;
 800098c:	4b47      	ldr	r3, [pc, #284]	@ (8000aac <Ec11TickProcess+0x2b4>)
 800098e:	681b      	ldr	r3, [r3, #0]
 8000990:	3301      	adds	r3, #1
 8000992:	4a46      	ldr	r2, [pc, #280]	@ (8000aac <Ec11TickProcess+0x2b4>)
 8000994:	6013      	str	r3, [r2, #0]
					KeyInfo keyInfo = { EC11_KEY, EC11_KEY_RIGHT_ROTATE, encodeCounter };
 8000996:	2301      	movs	r3, #1
 8000998:	703b      	strb	r3, [r7, #0]
 800099a:	2306      	movs	r3, #6
 800099c:	707b      	strb	r3, [r7, #1]
 800099e:	4b43      	ldr	r3, [pc, #268]	@ (8000aac <Ec11TickProcess+0x2b4>)
 80009a0:	681b      	ldr	r3, [r3, #0]
 80009a2:	607b      	str	r3, [r7, #4]
					if (ec11Encoder.ec11StateMachine.currentStep == KEY_STEP_RELEASE_DEBOUNCING) {
 80009a4:	4b42      	ldr	r3, [pc, #264]	@ (8000ab0 <Ec11TickProcess+0x2b8>)
 80009a6:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 80009aa:	2b02      	cmp	r3, #2
 80009ac:	d105      	bne.n	80009ba <Ec11TickProcess+0x1c2>
						ec11Encoder.hasRotate = true;
 80009ae:	4b40      	ldr	r3, [pc, #256]	@ (8000ab0 <Ec11TickProcess+0x2b8>)
 80009b0:	2201      	movs	r2, #1
 80009b2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
						keyInfo.keyState = EC11_KEY_PRESS_RIGHT_ROTATE;
 80009b6:	2308      	movs	r3, #8
 80009b8:	707b      	strb	r3, [r7, #1]
					}
					WriteBuf(&ec11Encoder.keyCircleBuf, &keyInfo);
 80009ba:	2100      	movs	r1, #0
 80009bc:	483d      	ldr	r0, [pc, #244]	@ (8000ab4 <Ec11TickProcess+0x2bc>)
 80009be:	f000 fb3c 	bl	800103a <accquire_spinlock>
 80009c2:	4b3b      	ldr	r3, [pc, #236]	@ (8000ab0 <Ec11TickProcess+0x2b8>)
 80009c4:	f893 2022 	ldrb.w	r2, [r3, #34]	@ 0x22
 80009c8:	4b39      	ldr	r3, [pc, #228]	@ (8000ab0 <Ec11TickProcess+0x2b8>)
 80009ca:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 80009ce:	429a      	cmp	r2, r3
 80009d0:	d317      	bcc.n	8000a02 <Ec11TickProcess+0x20a>
 80009d2:	4b37      	ldr	r3, [pc, #220]	@ (8000ab0 <Ec11TickProcess+0x2b8>)
 80009d4:	f893 2021 	ldrb.w	r2, [r3, #33]	@ 0x21
 80009d8:	4b35      	ldr	r3, [pc, #212]	@ (8000ab0 <Ec11TickProcess+0x2b8>)
 80009da:	f893 3020 	ldrb.w	r3, [r3, #32]
 80009de:	429a      	cmp	r2, r3
 80009e0:	d10f      	bne.n	8000a02 <Ec11TickProcess+0x20a>
 80009e2:	4b33      	ldr	r3, [pc, #204]	@ (8000ab0 <Ec11TickProcess+0x2b8>)
 80009e4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80009e8:	3301      	adds	r3, #1
 80009ea:	4a31      	ldr	r2, [pc, #196]	@ (8000ab0 <Ec11TickProcess+0x2b8>)
 80009ec:	f892 2023 	ldrb.w	r2, [r2, #35]	@ 0x23
 80009f0:	fb93 f1f2 	sdiv	r1, r3, r2
 80009f4:	fb01 f202 	mul.w	r2, r1, r2
 80009f8:	1a9b      	subs	r3, r3, r2
 80009fa:	b2da      	uxtb	r2, r3
 80009fc:	4b2c      	ldr	r3, [pc, #176]	@ (8000ab0 <Ec11TickProcess+0x2b8>)
 80009fe:	f883 2020 	strb.w	r2, [r3, #32]
 8000a02:	4b2b      	ldr	r3, [pc, #172]	@ (8000ab0 <Ec11TickProcess+0x2b8>)
 8000a04:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8000a08:	4a29      	ldr	r2, [pc, #164]	@ (8000ab0 <Ec11TickProcess+0x2b8>)
 8000a0a:	00db      	lsls	r3, r3, #3
 8000a0c:	4413      	add	r3, r2
 8000a0e:	463a      	mov	r2, r7
 8000a10:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000a14:	e883 0003 	stmia.w	r3, {r0, r1}
 8000a18:	4b25      	ldr	r3, [pc, #148]	@ (8000ab0 <Ec11TickProcess+0x2b8>)
 8000a1a:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8000a1e:	3301      	adds	r3, #1
 8000a20:	4a23      	ldr	r2, [pc, #140]	@ (8000ab0 <Ec11TickProcess+0x2b8>)
 8000a22:	f892 2023 	ldrb.w	r2, [r2, #35]	@ 0x23
 8000a26:	fb93 f1f2 	sdiv	r1, r3, r2
 8000a2a:	fb01 f202 	mul.w	r2, r1, r2
 8000a2e:	1a9b      	subs	r3, r3, r2
 8000a30:	b2da      	uxtb	r2, r3
 8000a32:	4b1f      	ldr	r3, [pc, #124]	@ (8000ab0 <Ec11TickProcess+0x2b8>)
 8000a34:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
 8000a38:	4b1d      	ldr	r3, [pc, #116]	@ (8000ab0 <Ec11TickProcess+0x2b8>)
 8000a3a:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 8000a3e:	3301      	adds	r3, #1
 8000a40:	b2da      	uxtb	r2, r3
 8000a42:	4b1b      	ldr	r3, [pc, #108]	@ (8000ab0 <Ec11TickProcess+0x2b8>)
 8000a44:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
 8000a48:	4b19      	ldr	r3, [pc, #100]	@ (8000ab0 <Ec11TickProcess+0x2b8>)
 8000a4a:	f893 2022 	ldrb.w	r2, [r3, #34]	@ 0x22
 8000a4e:	4b18      	ldr	r3, [pc, #96]	@ (8000ab0 <Ec11TickProcess+0x2b8>)
 8000a50:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 8000a54:	429a      	cmp	r2, r3
 8000a56:	d905      	bls.n	8000a64 <Ec11TickProcess+0x26c>
 8000a58:	4b15      	ldr	r3, [pc, #84]	@ (8000ab0 <Ec11TickProcess+0x2b8>)
 8000a5a:	f893 2023 	ldrb.w	r2, [r3, #35]	@ 0x23
 8000a5e:	4b14      	ldr	r3, [pc, #80]	@ (8000ab0 <Ec11TickProcess+0x2b8>)
 8000a60:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
 8000a64:	4813      	ldr	r0, [pc, #76]	@ (8000ab4 <Ec11TickProcess+0x2bc>)
 8000a66:	f000 fb10 	bl	800108a <release_spinlock>
				}
			}
		}
		lastALevel = currALevel;
 8000a6a:	4b0a      	ldr	r3, [pc, #40]	@ (8000a94 <Ec11TickProcess+0x29c>)
 8000a6c:	781a      	ldrb	r2, [r3, #0]
 8000a6e:	4b0b      	ldr	r3, [pc, #44]	@ (8000a9c <Ec11TickProcess+0x2a4>)
 8000a70:	701a      	strb	r2, [r3, #0]
	}

	if (currBLevel != lastBLevel) {
 8000a72:	4b09      	ldr	r3, [pc, #36]	@ (8000a98 <Ec11TickProcess+0x2a0>)
 8000a74:	781a      	ldrb	r2, [r3, #0]
 8000a76:	4b10      	ldr	r3, [pc, #64]	@ (8000ab8 <Ec11TickProcess+0x2c0>)
 8000a78:	781b      	ldrb	r3, [r3, #0]
 8000a7a:	429a      	cmp	r2, r3
 8000a7c:	d040      	beq.n	8000b00 <Ec11TickProcess+0x308>
		switchBCounter = (switchBCounter + 1) > 2 ? 1 : (switchBCounter + 1);
 8000a7e:	4b0a      	ldr	r3, [pc, #40]	@ (8000aa8 <Ec11TickProcess+0x2b0>)
 8000a80:	781b      	ldrb	r3, [r3, #0]
 8000a82:	2b01      	cmp	r3, #1
 8000a84:	d81a      	bhi.n	8000abc <Ec11TickProcess+0x2c4>
 8000a86:	4b08      	ldr	r3, [pc, #32]	@ (8000aa8 <Ec11TickProcess+0x2b0>)
 8000a88:	781b      	ldrb	r3, [r3, #0]
 8000a8a:	3301      	adds	r3, #1
 8000a8c:	b2db      	uxtb	r3, r3
 8000a8e:	e016      	b.n	8000abe <Ec11TickProcess+0x2c6>
 8000a90:	40010800 	.word	0x40010800
 8000a94:	2000006c 	.word	0x2000006c
 8000a98:	2000006d 	.word	0x2000006d
 8000a9c:	2000006e 	.word	0x2000006e
 8000aa0:	20000134 	.word	0x20000134
 8000aa4:	20000135 	.word	0x20000135
 8000aa8:	20000136 	.word	0x20000136
 8000aac:	200000ec 	.word	0x200000ec
 8000ab0:	200000f0 	.word	0x200000f0
 8000ab4:	20000114 	.word	0x20000114
 8000ab8:	2000006f 	.word	0x2000006f
 8000abc:	2301      	movs	r3, #1
 8000abe:	4a12      	ldr	r2, [pc, #72]	@ (8000b08 <Ec11TickProcess+0x310>)
 8000ac0:	7013      	strb	r3, [r2, #0]
		if (currBLevel == GPIO_PIN_SET) { // B 相上升沿
 8000ac2:	4b12      	ldr	r3, [pc, #72]	@ (8000b0c <Ec11TickProcess+0x314>)
 8000ac4:	781b      	ldrb	r3, [r3, #0]
 8000ac6:	2b01      	cmp	r3, #1
 8000ac8:	d116      	bne.n	8000af8 <Ec11TickProcess+0x300>
			if (ec11CurrentState == EC11_DIRECTION_SEQUENCE_HALF) {
 8000aca:	4b11      	ldr	r3, [pc, #68]	@ (8000b10 <Ec11TickProcess+0x318>)
 8000acc:	781b      	ldrb	r3, [r3, #0]
 8000ace:	2b01      	cmp	r3, #1
 8000ad0:	d107      	bne.n	8000ae2 <Ec11TickProcess+0x2ea>
				if (switchACounter == 1) {
 8000ad2:	4b10      	ldr	r3, [pc, #64]	@ (8000b14 <Ec11TickProcess+0x31c>)
 8000ad4:	781b      	ldrb	r3, [r3, #0]
 8000ad6:	2b01      	cmp	r3, #1
 8000ad8:	d10e      	bne.n	8000af8 <Ec11TickProcess+0x300>
					ec11CurrentState = EC11_DIRECTION_INVALID;
 8000ada:	4b0d      	ldr	r3, [pc, #52]	@ (8000b10 <Ec11TickProcess+0x318>)
 8000adc:	2200      	movs	r2, #0
 8000ade:	701a      	strb	r2, [r3, #0]
 8000ae0:	e00a      	b.n	8000af8 <Ec11TickProcess+0x300>
				}
			} else if (ec11CurrentState == EC11_DIRECTION_REVERSE_HALF) {
 8000ae2:	4b0b      	ldr	r3, [pc, #44]	@ (8000b10 <Ec11TickProcess+0x318>)
 8000ae4:	781b      	ldrb	r3, [r3, #0]
 8000ae6:	2b02      	cmp	r3, #2
 8000ae8:	d106      	bne.n	8000af8 <Ec11TickProcess+0x300>
				if (switchACounter == 2) {
 8000aea:	4b0a      	ldr	r3, [pc, #40]	@ (8000b14 <Ec11TickProcess+0x31c>)
 8000aec:	781b      	ldrb	r3, [r3, #0]
 8000aee:	2b02      	cmp	r3, #2
 8000af0:	d102      	bne.n	8000af8 <Ec11TickProcess+0x300>
					ec11CurrentState = EC11_DIRECTION_INVALID;
 8000af2:	4b07      	ldr	r3, [pc, #28]	@ (8000b10 <Ec11TickProcess+0x318>)
 8000af4:	2200      	movs	r2, #0
 8000af6:	701a      	strb	r2, [r3, #0]
				}
			}
		}
		lastBLevel = currBLevel;
 8000af8:	4b04      	ldr	r3, [pc, #16]	@ (8000b0c <Ec11TickProcess+0x314>)
 8000afa:	781a      	ldrb	r2, [r3, #0]
 8000afc:	4b06      	ldr	r3, [pc, #24]	@ (8000b18 <Ec11TickProcess+0x320>)
 8000afe:	701a      	strb	r2, [r3, #0]
	}
}
 8000b00:	bf00      	nop
 8000b02:	3710      	adds	r7, #16
 8000b04:	46bd      	mov	sp, r7
 8000b06:	bd80      	pop	{r7, pc}
 8000b08:	20000136 	.word	0x20000136
 8000b0c:	2000006d 	.word	0x2000006d
 8000b10:	20000135 	.word	0x20000135
 8000b14:	20000134 	.word	0x20000134
 8000b18:	2000006f 	.word	0x2000006f

08000b1c <Ec11StateMachineProcess>:

void Ec11StateMachineProcess()
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	b082      	sub	sp, #8
 8000b20:	af00      	add	r7, sp, #0
	for (int i = 0; i < sizeof(ec11StateMachineTable) / sizeof(ec11StateMachineTable[0]); ++i) {
 8000b22:	2300      	movs	r3, #0
 8000b24:	607b      	str	r3, [r7, #4]
 8000b26:	e01b      	b.n	8000b60 <Ec11StateMachineProcess+0x44>
		if (ec11StateMachineTable[i].currentState == ec11Encoder.ec11StateMachine.currentState &&
 8000b28:	4a12      	ldr	r2, [pc, #72]	@ (8000b74 <Ec11StateMachineProcess+0x58>)
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	f812 2033 	ldrb.w	r2, [r2, r3, lsl #3]
 8000b30:	4b11      	ldr	r3, [pc, #68]	@ (8000b78 <Ec11StateMachineProcess+0x5c>)
 8000b32:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8000b36:	429a      	cmp	r2, r3
 8000b38:	d10f      	bne.n	8000b5a <Ec11StateMachineProcess+0x3e>
			ec11StateMachineTable[i].currentStep == ec11Encoder.ec11StateMachine.currentStep) {
 8000b3a:	4a0e      	ldr	r2, [pc, #56]	@ (8000b74 <Ec11StateMachineProcess+0x58>)
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	00db      	lsls	r3, r3, #3
 8000b40:	4413      	add	r3, r2
 8000b42:	785a      	ldrb	r2, [r3, #1]
 8000b44:	4b0c      	ldr	r3, [pc, #48]	@ (8000b78 <Ec11StateMachineProcess+0x5c>)
 8000b46:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
		if (ec11StateMachineTable[i].currentState == ec11Encoder.ec11StateMachine.currentState &&
 8000b4a:	429a      	cmp	r2, r3
 8000b4c:	d105      	bne.n	8000b5a <Ec11StateMachineProcess+0x3e>
			ec11StateMachineTable[i].callback();
 8000b4e:	4a09      	ldr	r2, [pc, #36]	@ (8000b74 <Ec11StateMachineProcess+0x58>)
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	00db      	lsls	r3, r3, #3
 8000b54:	4413      	add	r3, r2
 8000b56:	685b      	ldr	r3, [r3, #4]
 8000b58:	4798      	blx	r3
	for (int i = 0; i < sizeof(ec11StateMachineTable) / sizeof(ec11StateMachineTable[0]); ++i) {
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	3301      	adds	r3, #1
 8000b5e:	607b      	str	r3, [r7, #4]
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	2b07      	cmp	r3, #7
 8000b64:	d9e0      	bls.n	8000b28 <Ec11StateMachineProcess+0xc>
		}
	}

	Ec11TickProcess();
 8000b66:	f7ff fe47 	bl	80007f8 <Ec11TickProcess>
}
 8000b6a:	bf00      	nop
 8000b6c:	3708      	adds	r7, #8
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	bd80      	pop	{r7, pc}
 8000b72:	bf00      	nop
 8000b74:	20000000 	.word	0x20000000
 8000b78:	200000f0 	.word	0x200000f0

08000b7c <GetKeyState>:

void GetKeyState(KeyInfo *out, uint8_t *remain, uint8_t *ret)
{
 8000b7c:	b590      	push	{r4, r7, lr}
 8000b7e:	b085      	sub	sp, #20
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	60f8      	str	r0, [r7, #12]
 8000b84:	60b9      	str	r1, [r7, #8]
 8000b86:	607a      	str	r2, [r7, #4]
	ReadBuf(&ec11Encoder.keyCircleBuf, out, remain, ret);
 8000b88:	2100      	movs	r1, #0
 8000b8a:	481f      	ldr	r0, [pc, #124]	@ (8000c08 <GetKeyState+0x8c>)
 8000b8c:	f000 fa55 	bl	800103a <accquire_spinlock>
 8000b90:	4b1e      	ldr	r3, [pc, #120]	@ (8000c0c <GetKeyState+0x90>)
 8000b92:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	d02c      	beq.n	8000bf4 <GetKeyState+0x78>
 8000b9a:	4b1c      	ldr	r3, [pc, #112]	@ (8000c0c <GetKeyState+0x90>)
 8000b9c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000ba0:	68f9      	ldr	r1, [r7, #12]
 8000ba2:	4a1a      	ldr	r2, [pc, #104]	@ (8000c0c <GetKeyState+0x90>)
 8000ba4:	460c      	mov	r4, r1
 8000ba6:	00db      	lsls	r3, r3, #3
 8000ba8:	4413      	add	r3, r2
 8000baa:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000bae:	e884 0003 	stmia.w	r4, {r0, r1}
 8000bb2:	4b16      	ldr	r3, [pc, #88]	@ (8000c0c <GetKeyState+0x90>)
 8000bb4:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 8000bb8:	3b01      	subs	r3, #1
 8000bba:	b2da      	uxtb	r2, r3
 8000bbc:	4b13      	ldr	r3, [pc, #76]	@ (8000c0c <GetKeyState+0x90>)
 8000bbe:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
 8000bc2:	4b12      	ldr	r3, [pc, #72]	@ (8000c0c <GetKeyState+0x90>)
 8000bc4:	f893 2022 	ldrb.w	r2, [r3, #34]	@ 0x22
 8000bc8:	68bb      	ldr	r3, [r7, #8]
 8000bca:	701a      	strb	r2, [r3, #0]
 8000bcc:	4b0f      	ldr	r3, [pc, #60]	@ (8000c0c <GetKeyState+0x90>)
 8000bce:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000bd2:	3301      	adds	r3, #1
 8000bd4:	4a0d      	ldr	r2, [pc, #52]	@ (8000c0c <GetKeyState+0x90>)
 8000bd6:	f892 2023 	ldrb.w	r2, [r2, #35]	@ 0x23
 8000bda:	fb93 f1f2 	sdiv	r1, r3, r2
 8000bde:	fb01 f202 	mul.w	r2, r1, r2
 8000be2:	1a9b      	subs	r3, r3, r2
 8000be4:	b2da      	uxtb	r2, r3
 8000be6:	4b09      	ldr	r3, [pc, #36]	@ (8000c0c <GetKeyState+0x90>)
 8000be8:	f883 2020 	strb.w	r2, [r3, #32]
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	2201      	movs	r2, #1
 8000bf0:	701a      	strb	r2, [r3, #0]
 8000bf2:	e002      	b.n	8000bfa <GetKeyState+0x7e>
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	701a      	strb	r2, [r3, #0]
 8000bfa:	4803      	ldr	r0, [pc, #12]	@ (8000c08 <GetKeyState+0x8c>)
 8000bfc:	f000 fa45 	bl	800108a <release_spinlock>
}
 8000c00:	bf00      	nop
 8000c02:	3714      	adds	r7, #20
 8000c04:	46bd      	mov	sp, r7
 8000c06:	bd90      	pop	{r4, r7, pc}
 8000c08:	20000114 	.word	0x20000114
 8000c0c:	200000f0 	.word	0x200000f0

08000c10 <HAL_UART_TxCpltCallback>:

/* USER CODE BEGIN PV */
static volatile uint8_t uart_tx_complete = 1; // 初始化为发送完成状态

// 串口发送完成回调函数
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 8000c10:	b480      	push	{r7}
 8000c12:	b083      	sub	sp, #12
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	6078      	str	r0, [r7, #4]
    if (huart == &huart2) {
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	4a05      	ldr	r2, [pc, #20]	@ (8000c30 <HAL_UART_TxCpltCallback+0x20>)
 8000c1c:	4293      	cmp	r3, r2
 8000c1e:	d102      	bne.n	8000c26 <HAL_UART_TxCpltCallback+0x16>
        uart_tx_complete = 1; // 标记发送完成
 8000c20:	4b04      	ldr	r3, [pc, #16]	@ (8000c34 <HAL_UART_TxCpltCallback+0x24>)
 8000c22:	2201      	movs	r2, #1
 8000c24:	701a      	strb	r2, [r3, #0]
    }
}
 8000c26:	bf00      	nop
 8000c28:	370c      	adds	r7, #12
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	bc80      	pop	{r7}
 8000c2e:	4770      	bx	lr
 8000c30:	20000180 	.word	0x20000180
 8000c34:	20000070 	.word	0x20000070

08000c38 <send_data_safely>:

// 安全的发送函数
void send_data_safely(uint8_t *data, uint16_t size) {
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b082      	sub	sp, #8
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	6078      	str	r0, [r7, #4]
 8000c40:	460b      	mov	r3, r1
 8000c42:	807b      	strh	r3, [r7, #2]
    while (!uart_tx_complete); // 等待上一次发送完成
 8000c44:	bf00      	nop
 8000c46:	4b09      	ldr	r3, [pc, #36]	@ (8000c6c <send_data_safely+0x34>)
 8000c48:	781b      	ldrb	r3, [r3, #0]
 8000c4a:	b2db      	uxtb	r3, r3
 8000c4c:	2b00      	cmp	r3, #0
 8000c4e:	d0fa      	beq.n	8000c46 <send_data_safely+0xe>
    uart_tx_complete = 0; // 标记开始新的发送
 8000c50:	4b06      	ldr	r3, [pc, #24]	@ (8000c6c <send_data_safely+0x34>)
 8000c52:	2200      	movs	r2, #0
 8000c54:	701a      	strb	r2, [r3, #0]
    HAL_UART_Transmit_IT(&huart2, data, size);
 8000c56:	887b      	ldrh	r3, [r7, #2]
 8000c58:	461a      	mov	r2, r3
 8000c5a:	6879      	ldr	r1, [r7, #4]
 8000c5c:	4804      	ldr	r0, [pc, #16]	@ (8000c70 <send_data_safely+0x38>)
 8000c5e:	f001 ffad 	bl	8002bbc <HAL_UART_Transmit_IT>
}
 8000c62:	bf00      	nop
 8000c64:	3708      	adds	r7, #8
 8000c66:	46bd      	mov	sp, r7
 8000c68:	bd80      	pop	{r7, pc}
 8000c6a:	bf00      	nop
 8000c6c:	20000070 	.word	0x20000070
 8000c70:	20000180 	.word	0x20000180

08000c74 <HAL_TIM_PeriodElapsedCallback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

static uint32_t timerCounter = 0;
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000c74:	b580      	push	{r7, lr}
 8000c76:	b082      	sub	sp, #8
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	6078      	str	r0, [r7, #4]
	timerCounter++;
 8000c7c:	4b05      	ldr	r3, [pc, #20]	@ (8000c94 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	3301      	adds	r3, #1
 8000c82:	4a04      	ldr	r2, [pc, #16]	@ (8000c94 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000c84:	6013      	str	r3, [r2, #0]
	Ec11StateMachineProcess();
 8000c86:	f7ff ff49 	bl	8000b1c <Ec11StateMachineProcess>
}
 8000c8a:	bf00      	nop
 8000c8c:	3708      	adds	r7, #8
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	bd80      	pop	{r7, pc}
 8000c92:	bf00      	nop
 8000c94:	200001c8 	.word	0x200001c8

08000c98 <ProcessKey>:

void ProcessKey()
{
 8000c98:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000c9a:	b08b      	sub	sp, #44	@ 0x2c
 8000c9c:	af06      	add	r7, sp, #24
	static uint32_t lastTick = 0;
	uint32_t currentTick = HAL_GetTick();
 8000c9e:	f000 fba5 	bl	80013ec <HAL_GetTick>
 8000ca2:	60f8      	str	r0, [r7, #12]
	if (currentTick - lastTick < 1) {
 8000ca4:	4b29      	ldr	r3, [pc, #164]	@ (8000d4c <ProcessKey+0xb4>)
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	68fa      	ldr	r2, [r7, #12]
 8000caa:	429a      	cmp	r2, r3
 8000cac:	d049      	beq.n	8000d42 <ProcessKey+0xaa>
		return;
	}

	KeyInfo keyInfo;
	uint8_t remainCount = 0;
 8000cae:	2300      	movs	r3, #0
 8000cb0:	70fb      	strb	r3, [r7, #3]
	uint8_t ret = 0;
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	70bb      	strb	r3, [r7, #2]
	do {
		GetKeyState(&keyInfo, &remainCount, &ret);
 8000cb6:	1cba      	adds	r2, r7, #2
 8000cb8:	1cf9      	adds	r1, r7, #3
 8000cba:	1d3b      	adds	r3, r7, #4
 8000cbc:	4618      	mov	r0, r3
 8000cbe:	f7ff ff5d 	bl	8000b7c <GetKeyState>
		if (ret != 0) {
 8000cc2:	78bb      	ldrb	r3, [r7, #2]
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	d035      	beq.n	8000d34 <ProcessKey+0x9c>
			static char message[300];
			sprintf(message,
 8000cc8:	793b      	ldrb	r3, [r7, #4]
 8000cca:	4618      	mov	r0, r3
 8000ccc:	f7ff fa46 	bl	800015c <GetKeyName>
 8000cd0:	4604      	mov	r4, r0
 8000cd2:	797b      	ldrb	r3, [r7, #5]
 8000cd4:	4618      	mov	r0, r3
 8000cd6:	f7ff fa59 	bl	800018c <GetKeyEventName>
					"read %s keyState(%s,%d) encodeCounter(%ld) remain count(%d) currentTick(%ld)"
					" lastTick(%ld) timer count(%ld)\n",
					GetKeyName(keyInfo.keyIndex),
					GetKeyEventName(keyInfo.keyState), keyInfo.keyState,
 8000cda:	797b      	ldrb	r3, [r7, #5]
			sprintf(message,
 8000cdc:	461d      	mov	r5, r3
 8000cde:	68bb      	ldr	r3, [r7, #8]
 8000ce0:	78fa      	ldrb	r2, [r7, #3]
 8000ce2:	4616      	mov	r6, r2
 8000ce4:	4a19      	ldr	r2, [pc, #100]	@ (8000d4c <ProcessKey+0xb4>)
 8000ce6:	6812      	ldr	r2, [r2, #0]
 8000ce8:	4919      	ldr	r1, [pc, #100]	@ (8000d50 <ProcessKey+0xb8>)
 8000cea:	6809      	ldr	r1, [r1, #0]
 8000cec:	9105      	str	r1, [sp, #20]
 8000cee:	9204      	str	r2, [sp, #16]
 8000cf0:	68fa      	ldr	r2, [r7, #12]
 8000cf2:	9203      	str	r2, [sp, #12]
 8000cf4:	9602      	str	r6, [sp, #8]
 8000cf6:	9301      	str	r3, [sp, #4]
 8000cf8:	9500      	str	r5, [sp, #0]
 8000cfa:	4603      	mov	r3, r0
 8000cfc:	4622      	mov	r2, r4
 8000cfe:	4915      	ldr	r1, [pc, #84]	@ (8000d54 <ProcessKey+0xbc>)
 8000d00:	4815      	ldr	r0, [pc, #84]	@ (8000d58 <ProcessKey+0xc0>)
 8000d02:	f002 fc69 	bl	80035d8 <siprintf>
					keyInfo.encodeCounter, remainCount, currentTick, lastTick,
					timerCounter);

			send_data_safely((uint8_t*) message, strlen(message));
 8000d06:	4814      	ldr	r0, [pc, #80]	@ (8000d58 <ProcessKey+0xc0>)
 8000d08:	f7ff fa20 	bl	800014c <strlen>
 8000d0c:	4603      	mov	r3, r0
 8000d0e:	b29b      	uxth	r3, r3
 8000d10:	4619      	mov	r1, r3
 8000d12:	4811      	ldr	r0, [pc, #68]	@ (8000d58 <ProcessKey+0xc0>)
 8000d14:	f7ff ff90 	bl	8000c38 <send_data_safely>

			if (keyInfo.keyIndex == EC11_KEY) {
 8000d18:	793b      	ldrb	r3, [r7, #4]
 8000d1a:	2b01      	cmp	r3, #1
 8000d1c:	d10a      	bne.n	8000d34 <ProcessKey+0x9c>
				if (keyInfo.keyState == EC11_KEY_PRESS) {
 8000d1e:	797b      	ldrb	r3, [r7, #5]
 8000d20:	2b01      	cmp	r3, #1
 8000d22:	d007      	beq.n	8000d34 <ProcessKey+0x9c>

				} else if (keyInfo.keyState == EC11_KEY_CLICK) {
 8000d24:	797b      	ldrb	r3, [r7, #5]
 8000d26:	2b02      	cmp	r3, #2
 8000d28:	d104      	bne.n	8000d34 <ProcessKey+0x9c>
					HAL_GPIO_TogglePin(Led0_GPIO_Port, Led0_Pin);
 8000d2a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000d2e:	480b      	ldr	r0, [pc, #44]	@ (8000d5c <ProcessKey+0xc4>)
 8000d30:	f000 fed9 	bl	8001ae6 <HAL_GPIO_TogglePin>
				}
			}
		}

	} while (remainCount != 0);
 8000d34:	78fb      	ldrb	r3, [r7, #3]
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d1bd      	bne.n	8000cb6 <ProcessKey+0x1e>

	lastTick = currentTick;
 8000d3a:	4a04      	ldr	r2, [pc, #16]	@ (8000d4c <ProcessKey+0xb4>)
 8000d3c:	68fb      	ldr	r3, [r7, #12]
 8000d3e:	6013      	str	r3, [r2, #0]
 8000d40:	e000      	b.n	8000d44 <ProcessKey+0xac>
		return;
 8000d42:	bf00      	nop
}
 8000d44:	3714      	adds	r7, #20
 8000d46:	46bd      	mov	sp, r7
 8000d48:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000d4a:	bf00      	nop
 8000d4c:	200001cc 	.word	0x200001cc
 8000d50:	200001c8 	.word	0x200001c8
 8000d54:	08003ff4 	.word	0x08003ff4
 8000d58:	200001d0 	.word	0x200001d0
 8000d5c:	40011000 	.word	0x40011000

08000d60 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d64:	f000 faea 	bl	800133c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d68:	f000 f810 	bl	8000d8c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d6c:	f000 f8cc 	bl	8000f08 <MX_GPIO_Init>
  MX_TIM4_Init();
 8000d70:	f000 f852 	bl	8000e18 <MX_TIM4_Init>
  MX_USART2_UART_Init();
 8000d74:	f000 f89e 	bl	8000eb4 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
	HAL_TIM_Base_Start_IT(&htim4);
 8000d78:	4803      	ldr	r0, [pc, #12]	@ (8000d88 <main+0x28>)
 8000d7a:	f001 fb2d 	bl	80023d8 <HAL_TIM_Base_Start_IT>
	Ec11EncoderInit();
 8000d7e:	f7ff fa3f 	bl	8000200 <Ec11EncoderInit>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
		ProcessKey();
 8000d82:	f7ff ff89 	bl	8000c98 <ProcessKey>
 8000d86:	e7fc      	b.n	8000d82 <main+0x22>
 8000d88:	20000138 	.word	0x20000138

08000d8c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b090      	sub	sp, #64	@ 0x40
 8000d90:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d92:	f107 0318 	add.w	r3, r7, #24
 8000d96:	2228      	movs	r2, #40	@ 0x28
 8000d98:	2100      	movs	r1, #0
 8000d9a:	4618      	mov	r0, r3
 8000d9c:	f002 fc3c 	bl	8003618 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000da0:	1d3b      	adds	r3, r7, #4
 8000da2:	2200      	movs	r2, #0
 8000da4:	601a      	str	r2, [r3, #0]
 8000da6:	605a      	str	r2, [r3, #4]
 8000da8:	609a      	str	r2, [r3, #8]
 8000daa:	60da      	str	r2, [r3, #12]
 8000dac:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000dae:	2301      	movs	r3, #1
 8000db0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000db2:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000db6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000db8:	2300      	movs	r3, #0
 8000dba:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000dbc:	2301      	movs	r3, #1
 8000dbe:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000dc0:	2302      	movs	r3, #2
 8000dc2:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000dc4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000dc8:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000dca:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8000dce:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000dd0:	f107 0318 	add.w	r3, r7, #24
 8000dd4:	4618      	mov	r0, r3
 8000dd6:	f000 fe9f 	bl	8001b18 <HAL_RCC_OscConfig>
 8000dda:	4603      	mov	r3, r0
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	d001      	beq.n	8000de4 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000de0:	f000 f8f8 	bl	8000fd4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000de4:	230f      	movs	r3, #15
 8000de6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000de8:	2302      	movs	r3, #2
 8000dea:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000dec:	2300      	movs	r3, #0
 8000dee:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000df0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000df4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000df6:	2300      	movs	r3, #0
 8000df8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000dfa:	1d3b      	adds	r3, r7, #4
 8000dfc:	2102      	movs	r1, #2
 8000dfe:	4618      	mov	r0, r3
 8000e00:	f001 f90c 	bl	800201c <HAL_RCC_ClockConfig>
 8000e04:	4603      	mov	r3, r0
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d001      	beq.n	8000e0e <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000e0a:	f000 f8e3 	bl	8000fd4 <Error_Handler>
  }
}
 8000e0e:	bf00      	nop
 8000e10:	3740      	adds	r7, #64	@ 0x40
 8000e12:	46bd      	mov	sp, r7
 8000e14:	bd80      	pop	{r7, pc}
	...

08000e18 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b086      	sub	sp, #24
 8000e1c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e1e:	f107 0308 	add.w	r3, r7, #8
 8000e22:	2200      	movs	r2, #0
 8000e24:	601a      	str	r2, [r3, #0]
 8000e26:	605a      	str	r2, [r3, #4]
 8000e28:	609a      	str	r2, [r3, #8]
 8000e2a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e2c:	463b      	mov	r3, r7
 8000e2e:	2200      	movs	r2, #0
 8000e30:	601a      	str	r2, [r3, #0]
 8000e32:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000e34:	4b1d      	ldr	r3, [pc, #116]	@ (8000eac <MX_TIM4_Init+0x94>)
 8000e36:	4a1e      	ldr	r2, [pc, #120]	@ (8000eb0 <MX_TIM4_Init+0x98>)
 8000e38:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 7200 - 1;
 8000e3a:	4b1c      	ldr	r3, [pc, #112]	@ (8000eac <MX_TIM4_Init+0x94>)
 8000e3c:	f641 421f 	movw	r2, #7199	@ 0x1c1f
 8000e40:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e42:	4b1a      	ldr	r3, [pc, #104]	@ (8000eac <MX_TIM4_Init+0x94>)
 8000e44:	2200      	movs	r2, #0
 8000e46:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 10 - 1;
 8000e48:	4b18      	ldr	r3, [pc, #96]	@ (8000eac <MX_TIM4_Init+0x94>)
 8000e4a:	2209      	movs	r2, #9
 8000e4c:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e4e:	4b17      	ldr	r3, [pc, #92]	@ (8000eac <MX_TIM4_Init+0x94>)
 8000e50:	2200      	movs	r2, #0
 8000e52:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000e54:	4b15      	ldr	r3, [pc, #84]	@ (8000eac <MX_TIM4_Init+0x94>)
 8000e56:	2280      	movs	r2, #128	@ 0x80
 8000e58:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000e5a:	4814      	ldr	r0, [pc, #80]	@ (8000eac <MX_TIM4_Init+0x94>)
 8000e5c:	f001 fa6c 	bl	8002338 <HAL_TIM_Base_Init>
 8000e60:	4603      	mov	r3, r0
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d001      	beq.n	8000e6a <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 8000e66:	f000 f8b5 	bl	8000fd4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e6a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000e6e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000e70:	f107 0308 	add.w	r3, r7, #8
 8000e74:	4619      	mov	r1, r3
 8000e76:	480d      	ldr	r0, [pc, #52]	@ (8000eac <MX_TIM4_Init+0x94>)
 8000e78:	f001 fbf0 	bl	800265c <HAL_TIM_ConfigClockSource>
 8000e7c:	4603      	mov	r3, r0
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d001      	beq.n	8000e86 <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 8000e82:	f000 f8a7 	bl	8000fd4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e86:	2300      	movs	r3, #0
 8000e88:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000e8e:	463b      	mov	r3, r7
 8000e90:	4619      	mov	r1, r3
 8000e92:	4806      	ldr	r0, [pc, #24]	@ (8000eac <MX_TIM4_Init+0x94>)
 8000e94:	f001 fdd2 	bl	8002a3c <HAL_TIMEx_MasterConfigSynchronization>
 8000e98:	4603      	mov	r3, r0
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	d001      	beq.n	8000ea2 <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 8000e9e:	f000 f899 	bl	8000fd4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8000ea2:	bf00      	nop
 8000ea4:	3718      	adds	r7, #24
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	bd80      	pop	{r7, pc}
 8000eaa:	bf00      	nop
 8000eac:	20000138 	.word	0x20000138
 8000eb0:	40000800 	.word	0x40000800

08000eb4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000eb8:	4b11      	ldr	r3, [pc, #68]	@ (8000f00 <MX_USART2_UART_Init+0x4c>)
 8000eba:	4a12      	ldr	r2, [pc, #72]	@ (8000f04 <MX_USART2_UART_Init+0x50>)
 8000ebc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000ebe:	4b10      	ldr	r3, [pc, #64]	@ (8000f00 <MX_USART2_UART_Init+0x4c>)
 8000ec0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000ec4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000ec6:	4b0e      	ldr	r3, [pc, #56]	@ (8000f00 <MX_USART2_UART_Init+0x4c>)
 8000ec8:	2200      	movs	r2, #0
 8000eca:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000ecc:	4b0c      	ldr	r3, [pc, #48]	@ (8000f00 <MX_USART2_UART_Init+0x4c>)
 8000ece:	2200      	movs	r2, #0
 8000ed0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000ed2:	4b0b      	ldr	r3, [pc, #44]	@ (8000f00 <MX_USART2_UART_Init+0x4c>)
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000ed8:	4b09      	ldr	r3, [pc, #36]	@ (8000f00 <MX_USART2_UART_Init+0x4c>)
 8000eda:	220c      	movs	r2, #12
 8000edc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ede:	4b08      	ldr	r3, [pc, #32]	@ (8000f00 <MX_USART2_UART_Init+0x4c>)
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ee4:	4b06      	ldr	r3, [pc, #24]	@ (8000f00 <MX_USART2_UART_Init+0x4c>)
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000eea:	4805      	ldr	r0, [pc, #20]	@ (8000f00 <MX_USART2_UART_Init+0x4c>)
 8000eec:	f001 fe16 	bl	8002b1c <HAL_UART_Init>
 8000ef0:	4603      	mov	r3, r0
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d001      	beq.n	8000efa <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000ef6:	f000 f86d 	bl	8000fd4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000efa:	bf00      	nop
 8000efc:	bd80      	pop	{r7, pc}
 8000efe:	bf00      	nop
 8000f00:	20000180 	.word	0x20000180
 8000f04:	40004400 	.word	0x40004400

08000f08 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b088      	sub	sp, #32
 8000f0c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f0e:	f107 0310 	add.w	r3, r7, #16
 8000f12:	2200      	movs	r2, #0
 8000f14:	601a      	str	r2, [r3, #0]
 8000f16:	605a      	str	r2, [r3, #4]
 8000f18:	609a      	str	r2, [r3, #8]
 8000f1a:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f1c:	4b2a      	ldr	r3, [pc, #168]	@ (8000fc8 <MX_GPIO_Init+0xc0>)
 8000f1e:	699b      	ldr	r3, [r3, #24]
 8000f20:	4a29      	ldr	r2, [pc, #164]	@ (8000fc8 <MX_GPIO_Init+0xc0>)
 8000f22:	f043 0310 	orr.w	r3, r3, #16
 8000f26:	6193      	str	r3, [r2, #24]
 8000f28:	4b27      	ldr	r3, [pc, #156]	@ (8000fc8 <MX_GPIO_Init+0xc0>)
 8000f2a:	699b      	ldr	r3, [r3, #24]
 8000f2c:	f003 0310 	and.w	r3, r3, #16
 8000f30:	60fb      	str	r3, [r7, #12]
 8000f32:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f34:	4b24      	ldr	r3, [pc, #144]	@ (8000fc8 <MX_GPIO_Init+0xc0>)
 8000f36:	699b      	ldr	r3, [r3, #24]
 8000f38:	4a23      	ldr	r2, [pc, #140]	@ (8000fc8 <MX_GPIO_Init+0xc0>)
 8000f3a:	f043 0320 	orr.w	r3, r3, #32
 8000f3e:	6193      	str	r3, [r2, #24]
 8000f40:	4b21      	ldr	r3, [pc, #132]	@ (8000fc8 <MX_GPIO_Init+0xc0>)
 8000f42:	699b      	ldr	r3, [r3, #24]
 8000f44:	f003 0320 	and.w	r3, r3, #32
 8000f48:	60bb      	str	r3, [r7, #8]
 8000f4a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f4c:	4b1e      	ldr	r3, [pc, #120]	@ (8000fc8 <MX_GPIO_Init+0xc0>)
 8000f4e:	699b      	ldr	r3, [r3, #24]
 8000f50:	4a1d      	ldr	r2, [pc, #116]	@ (8000fc8 <MX_GPIO_Init+0xc0>)
 8000f52:	f043 0304 	orr.w	r3, r3, #4
 8000f56:	6193      	str	r3, [r2, #24]
 8000f58:	4b1b      	ldr	r3, [pc, #108]	@ (8000fc8 <MX_GPIO_Init+0xc0>)
 8000f5a:	699b      	ldr	r3, [r3, #24]
 8000f5c:	f003 0304 	and.w	r3, r3, #4
 8000f60:	607b      	str	r3, [r7, #4]
 8000f62:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Led0_GPIO_Port, Led0_Pin, GPIO_PIN_RESET);
 8000f64:	2200      	movs	r2, #0
 8000f66:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000f6a:	4818      	ldr	r0, [pc, #96]	@ (8000fcc <MX_GPIO_Init+0xc4>)
 8000f6c:	f000 fda3 	bl	8001ab6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : Led0_Pin */
  GPIO_InitStruct.Pin = Led0_Pin;
 8000f70:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000f74:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f76:	2301      	movs	r3, #1
 8000f78:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f7e:	2302      	movs	r3, #2
 8000f80:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Led0_GPIO_Port, &GPIO_InitStruct);
 8000f82:	f107 0310 	add.w	r3, r7, #16
 8000f86:	4619      	mov	r1, r3
 8000f88:	4810      	ldr	r0, [pc, #64]	@ (8000fcc <MX_GPIO_Init+0xc4>)
 8000f8a:	f000 fbf9 	bl	8001780 <HAL_GPIO_Init>

  /*Configure GPIO pin : Key0_Pin */
  GPIO_InitStruct.Pin = Key0_Pin;
 8000f8e:	2301      	movs	r3, #1
 8000f90:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f92:	2300      	movs	r3, #0
 8000f94:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000f96:	2302      	movs	r3, #2
 8000f98:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(Key0_GPIO_Port, &GPIO_InitStruct);
 8000f9a:	f107 0310 	add.w	r3, r7, #16
 8000f9e:	4619      	mov	r1, r3
 8000fa0:	480b      	ldr	r0, [pc, #44]	@ (8000fd0 <MX_GPIO_Init+0xc8>)
 8000fa2:	f000 fbed 	bl	8001780 <HAL_GPIO_Init>

  /*Configure GPIO pins : ec11_A_Pin ec11_B_Pin ec11_Key_Pin */
  GPIO_InitStruct.Pin = ec11_A_Pin|ec11_B_Pin|ec11_Key_Pin;
 8000fa6:	f44f 63e0 	mov.w	r3, #1792	@ 0x700
 8000faa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000fac:	2300      	movs	r3, #0
 8000fae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000fb0:	2301      	movs	r3, #1
 8000fb2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fb4:	f107 0310 	add.w	r3, r7, #16
 8000fb8:	4619      	mov	r1, r3
 8000fba:	4805      	ldr	r0, [pc, #20]	@ (8000fd0 <MX_GPIO_Init+0xc8>)
 8000fbc:	f000 fbe0 	bl	8001780 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000fc0:	bf00      	nop
 8000fc2:	3720      	adds	r7, #32
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	bd80      	pop	{r7, pc}
 8000fc8:	40021000 	.word	0x40021000
 8000fcc:	40011000 	.word	0x40011000
 8000fd0:	40010800 	.word	0x40010800

08000fd4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000fd4:	b480      	push	{r7}
 8000fd6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000fd8:	b672      	cpsid	i
}
 8000fda:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000fdc:	bf00      	nop
 8000fde:	e7fd      	b.n	8000fdc <Error_Handler+0x8>

08000fe0 <cas>:
 * ptr：指向需要进行CAS操作的变量的指针。
 * old：期望的旧值。
 * new：如果ptr指向的值等于old，则将ptr指向的值更新为new。
 * 返回值：如果CAS操作成功（即ptr指向的值等于old并被更新为new），返回1；否则返回0。
 */
static int cas(volatile int32_t *ptr, int32_t old, int32_t new) {
 8000fe0:	b480      	push	{r7}
 8000fe2:	b087      	sub	sp, #28
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	60f8      	str	r0, [r7, #12]
 8000fe8:	60b9      	str	r1, [r7, #8]
 8000fea:	607a      	str	r2, [r7, #4]
    int temp;
    __asm__ __volatile__ (
 8000fec:	68fa      	ldr	r2, [r7, #12]
 8000fee:	68b9      	ldr	r1, [r7, #8]
 8000ff0:	6878      	ldr	r0, [r7, #4]
 8000ff2:	e852 3f00 	ldrex	r3, [r2]
 8000ff6:	428b      	cmp	r3, r1
 8000ff8:	d105      	bne.n	8001006 <end>
 8000ffa:	e842 0300 	strex	r3, r0, [r2]
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d101      	bne.n	8001006 <end>
 8001002:	f04f 0301 	mov.w	r3, #1

08001006 <end>:
 8001006:	617b      	str	r3, [r7, #20]
        "end:"
        : "=&r" (temp)        // 输出操作数，表示返回值
        : "r" (ptr), "r" (old), "r" (new) // 输入操作数
        : "cc"                // 被修改的寄存器
    );
    return temp;
 8001008:	697b      	ldr	r3, [r7, #20]
}
 800100a:	4618      	mov	r0, r3
 800100c:	371c      	adds	r7, #28
 800100e:	46bd      	mov	sp, r7
 8001010:	bc80      	pop	{r7}
 8001012:	4770      	bx	lr

08001014 <try_accquire_lock>:

bool try_accquire_lock(volatile int32_t *lock)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	b082      	sub	sp, #8
 8001018:	af00      	add	r7, sp, #0
 800101a:	6078      	str	r0, [r7, #4]
	return cas(lock, 0, 1);
 800101c:	2201      	movs	r2, #1
 800101e:	2100      	movs	r1, #0
 8001020:	6878      	ldr	r0, [r7, #4]
 8001022:	f7ff ffdd 	bl	8000fe0 <cas>
 8001026:	4603      	mov	r3, r0
 8001028:	2b00      	cmp	r3, #0
 800102a:	bf14      	ite	ne
 800102c:	2301      	movne	r3, #1
 800102e:	2300      	moveq	r3, #0
 8001030:	b2db      	uxtb	r3, r3
}
 8001032:	4618      	mov	r0, r3
 8001034:	3708      	adds	r7, #8
 8001036:	46bd      	mov	sp, r7
 8001038:	bd80      	pop	{r7, pc}

0800103a <accquire_spinlock>:
bool accquire_spinlock(volatile int32_t *lock, uint32_t ms)
{
 800103a:	b580      	push	{r7, lr}
 800103c:	b084      	sub	sp, #16
 800103e:	af00      	add	r7, sp, #0
 8001040:	6078      	str	r0, [r7, #4]
 8001042:	6039      	str	r1, [r7, #0]
	uint32_t beginTick = HAL_GetTick();
 8001044:	f000 f9d2 	bl	80013ec <HAL_GetTick>
 8001048:	60f8      	str	r0, [r7, #12]
	while (!try_accquire_lock(lock)) {
 800104a:	e010      	b.n	800106e <accquire_spinlock+0x34>
//		HAL_Delay(1);
		if (ms != 0 && HAL_GetTick() - beginTick >= ms * 1000) {
 800104c:	683b      	ldr	r3, [r7, #0]
 800104e:	2b00      	cmp	r3, #0
 8001050:	d00d      	beq.n	800106e <accquire_spinlock+0x34>
 8001052:	f000 f9cb 	bl	80013ec <HAL_GetTick>
 8001056:	4602      	mov	r2, r0
 8001058:	68fb      	ldr	r3, [r7, #12]
 800105a:	1ad2      	subs	r2, r2, r3
 800105c:	683b      	ldr	r3, [r7, #0]
 800105e:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001062:	fb01 f303 	mul.w	r3, r1, r3
 8001066:	429a      	cmp	r2, r3
 8001068:	d301      	bcc.n	800106e <accquire_spinlock+0x34>
			return false;
 800106a:	2300      	movs	r3, #0
 800106c:	e009      	b.n	8001082 <accquire_spinlock+0x48>
	while (!try_accquire_lock(lock)) {
 800106e:	6878      	ldr	r0, [r7, #4]
 8001070:	f7ff ffd0 	bl	8001014 <try_accquire_lock>
 8001074:	4603      	mov	r3, r0
 8001076:	f083 0301 	eor.w	r3, r3, #1
 800107a:	b2db      	uxtb	r3, r3
 800107c:	2b00      	cmp	r3, #0
 800107e:	d1e5      	bne.n	800104c <accquire_spinlock+0x12>
		}
	}
	return true;
 8001080:	2301      	movs	r3, #1
}
 8001082:	4618      	mov	r0, r3
 8001084:	3710      	adds	r7, #16
 8001086:	46bd      	mov	sp, r7
 8001088:	bd80      	pop	{r7, pc}

0800108a <release_spinlock>:
void release_spinlock(volatile int32_t *lock)
{
 800108a:	b580      	push	{r7, lr}
 800108c:	b082      	sub	sp, #8
 800108e:	af00      	add	r7, sp, #0
 8001090:	6078      	str	r0, [r7, #4]
	cas(lock, 1, 0);
 8001092:	2200      	movs	r2, #0
 8001094:	2101      	movs	r1, #1
 8001096:	6878      	ldr	r0, [r7, #4]
 8001098:	f7ff ffa2 	bl	8000fe0 <cas>
}
 800109c:	bf00      	nop
 800109e:	3708      	adds	r7, #8
 80010a0:	46bd      	mov	sp, r7
 80010a2:	bd80      	pop	{r7, pc}

080010a4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80010a4:	b480      	push	{r7}
 80010a6:	b085      	sub	sp, #20
 80010a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80010aa:	4b15      	ldr	r3, [pc, #84]	@ (8001100 <HAL_MspInit+0x5c>)
 80010ac:	699b      	ldr	r3, [r3, #24]
 80010ae:	4a14      	ldr	r2, [pc, #80]	@ (8001100 <HAL_MspInit+0x5c>)
 80010b0:	f043 0301 	orr.w	r3, r3, #1
 80010b4:	6193      	str	r3, [r2, #24]
 80010b6:	4b12      	ldr	r3, [pc, #72]	@ (8001100 <HAL_MspInit+0x5c>)
 80010b8:	699b      	ldr	r3, [r3, #24]
 80010ba:	f003 0301 	and.w	r3, r3, #1
 80010be:	60bb      	str	r3, [r7, #8]
 80010c0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80010c2:	4b0f      	ldr	r3, [pc, #60]	@ (8001100 <HAL_MspInit+0x5c>)
 80010c4:	69db      	ldr	r3, [r3, #28]
 80010c6:	4a0e      	ldr	r2, [pc, #56]	@ (8001100 <HAL_MspInit+0x5c>)
 80010c8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80010cc:	61d3      	str	r3, [r2, #28]
 80010ce:	4b0c      	ldr	r3, [pc, #48]	@ (8001100 <HAL_MspInit+0x5c>)
 80010d0:	69db      	ldr	r3, [r3, #28]
 80010d2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80010d6:	607b      	str	r3, [r7, #4]
 80010d8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80010da:	4b0a      	ldr	r3, [pc, #40]	@ (8001104 <HAL_MspInit+0x60>)
 80010dc:	685b      	ldr	r3, [r3, #4]
 80010de:	60fb      	str	r3, [r7, #12]
 80010e0:	68fb      	ldr	r3, [r7, #12]
 80010e2:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80010e6:	60fb      	str	r3, [r7, #12]
 80010e8:	68fb      	ldr	r3, [r7, #12]
 80010ea:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80010ee:	60fb      	str	r3, [r7, #12]
 80010f0:	4a04      	ldr	r2, [pc, #16]	@ (8001104 <HAL_MspInit+0x60>)
 80010f2:	68fb      	ldr	r3, [r7, #12]
 80010f4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80010f6:	bf00      	nop
 80010f8:	3714      	adds	r7, #20
 80010fa:	46bd      	mov	sp, r7
 80010fc:	bc80      	pop	{r7}
 80010fe:	4770      	bx	lr
 8001100:	40021000 	.word	0x40021000
 8001104:	40010000 	.word	0x40010000

08001108 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	b084      	sub	sp, #16
 800110c:	af00      	add	r7, sp, #0
 800110e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	4a0d      	ldr	r2, [pc, #52]	@ (800114c <HAL_TIM_Base_MspInit+0x44>)
 8001116:	4293      	cmp	r3, r2
 8001118:	d113      	bne.n	8001142 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 800111a:	4b0d      	ldr	r3, [pc, #52]	@ (8001150 <HAL_TIM_Base_MspInit+0x48>)
 800111c:	69db      	ldr	r3, [r3, #28]
 800111e:	4a0c      	ldr	r2, [pc, #48]	@ (8001150 <HAL_TIM_Base_MspInit+0x48>)
 8001120:	f043 0304 	orr.w	r3, r3, #4
 8001124:	61d3      	str	r3, [r2, #28]
 8001126:	4b0a      	ldr	r3, [pc, #40]	@ (8001150 <HAL_TIM_Base_MspInit+0x48>)
 8001128:	69db      	ldr	r3, [r3, #28]
 800112a:	f003 0304 	and.w	r3, r3, #4
 800112e:	60fb      	str	r3, [r7, #12]
 8001130:	68fb      	ldr	r3, [r7, #12]
    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8001132:	2200      	movs	r2, #0
 8001134:	2100      	movs	r1, #0
 8001136:	201e      	movs	r0, #30
 8001138:	f000 fa39 	bl	80015ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 800113c:	201e      	movs	r0, #30
 800113e:	f000 fa52 	bl	80015e6 <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM4_MspInit 1 */

  }

}
 8001142:	bf00      	nop
 8001144:	3710      	adds	r7, #16
 8001146:	46bd      	mov	sp, r7
 8001148:	bd80      	pop	{r7, pc}
 800114a:	bf00      	nop
 800114c:	40000800 	.word	0x40000800
 8001150:	40021000 	.word	0x40021000

08001154 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	b088      	sub	sp, #32
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800115c:	f107 0310 	add.w	r3, r7, #16
 8001160:	2200      	movs	r2, #0
 8001162:	601a      	str	r2, [r3, #0]
 8001164:	605a      	str	r2, [r3, #4]
 8001166:	609a      	str	r2, [r3, #8]
 8001168:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	4a1f      	ldr	r2, [pc, #124]	@ (80011ec <HAL_UART_MspInit+0x98>)
 8001170:	4293      	cmp	r3, r2
 8001172:	d137      	bne.n	80011e4 <HAL_UART_MspInit+0x90>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001174:	4b1e      	ldr	r3, [pc, #120]	@ (80011f0 <HAL_UART_MspInit+0x9c>)
 8001176:	69db      	ldr	r3, [r3, #28]
 8001178:	4a1d      	ldr	r2, [pc, #116]	@ (80011f0 <HAL_UART_MspInit+0x9c>)
 800117a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800117e:	61d3      	str	r3, [r2, #28]
 8001180:	4b1b      	ldr	r3, [pc, #108]	@ (80011f0 <HAL_UART_MspInit+0x9c>)
 8001182:	69db      	ldr	r3, [r3, #28]
 8001184:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001188:	60fb      	str	r3, [r7, #12]
 800118a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800118c:	4b18      	ldr	r3, [pc, #96]	@ (80011f0 <HAL_UART_MspInit+0x9c>)
 800118e:	699b      	ldr	r3, [r3, #24]
 8001190:	4a17      	ldr	r2, [pc, #92]	@ (80011f0 <HAL_UART_MspInit+0x9c>)
 8001192:	f043 0304 	orr.w	r3, r3, #4
 8001196:	6193      	str	r3, [r2, #24]
 8001198:	4b15      	ldr	r3, [pc, #84]	@ (80011f0 <HAL_UART_MspInit+0x9c>)
 800119a:	699b      	ldr	r3, [r3, #24]
 800119c:	f003 0304 	and.w	r3, r3, #4
 80011a0:	60bb      	str	r3, [r7, #8]
 80011a2:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80011a4:	2304      	movs	r3, #4
 80011a6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011a8:	2302      	movs	r3, #2
 80011aa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80011ac:	2303      	movs	r3, #3
 80011ae:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011b0:	f107 0310 	add.w	r3, r7, #16
 80011b4:	4619      	mov	r1, r3
 80011b6:	480f      	ldr	r0, [pc, #60]	@ (80011f4 <HAL_UART_MspInit+0xa0>)
 80011b8:	f000 fae2 	bl	8001780 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80011bc:	2308      	movs	r3, #8
 80011be:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011c0:	2300      	movs	r3, #0
 80011c2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011c4:	2300      	movs	r3, #0
 80011c6:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011c8:	f107 0310 	add.w	r3, r7, #16
 80011cc:	4619      	mov	r1, r3
 80011ce:	4809      	ldr	r0, [pc, #36]	@ (80011f4 <HAL_UART_MspInit+0xa0>)
 80011d0:	f000 fad6 	bl	8001780 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80011d4:	2200      	movs	r2, #0
 80011d6:	2100      	movs	r1, #0
 80011d8:	2026      	movs	r0, #38	@ 0x26
 80011da:	f000 f9e8 	bl	80015ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80011de:	2026      	movs	r0, #38	@ 0x26
 80011e0:	f000 fa01 	bl	80015e6 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 80011e4:	bf00      	nop
 80011e6:	3720      	adds	r7, #32
 80011e8:	46bd      	mov	sp, r7
 80011ea:	bd80      	pop	{r7, pc}
 80011ec:	40004400 	.word	0x40004400
 80011f0:	40021000 	.word	0x40021000
 80011f4:	40010800 	.word	0x40010800

080011f8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80011f8:	b480      	push	{r7}
 80011fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80011fc:	bf00      	nop
 80011fe:	e7fd      	b.n	80011fc <NMI_Handler+0x4>

08001200 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001200:	b480      	push	{r7}
 8001202:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001204:	bf00      	nop
 8001206:	e7fd      	b.n	8001204 <HardFault_Handler+0x4>

08001208 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001208:	b480      	push	{r7}
 800120a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800120c:	bf00      	nop
 800120e:	e7fd      	b.n	800120c <MemManage_Handler+0x4>

08001210 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001210:	b480      	push	{r7}
 8001212:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001214:	bf00      	nop
 8001216:	e7fd      	b.n	8001214 <BusFault_Handler+0x4>

08001218 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001218:	b480      	push	{r7}
 800121a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800121c:	bf00      	nop
 800121e:	e7fd      	b.n	800121c <UsageFault_Handler+0x4>

08001220 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001220:	b480      	push	{r7}
 8001222:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001224:	bf00      	nop
 8001226:	46bd      	mov	sp, r7
 8001228:	bc80      	pop	{r7}
 800122a:	4770      	bx	lr

0800122c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800122c:	b480      	push	{r7}
 800122e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001230:	bf00      	nop
 8001232:	46bd      	mov	sp, r7
 8001234:	bc80      	pop	{r7}
 8001236:	4770      	bx	lr

08001238 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001238:	b480      	push	{r7}
 800123a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800123c:	bf00      	nop
 800123e:	46bd      	mov	sp, r7
 8001240:	bc80      	pop	{r7}
 8001242:	4770      	bx	lr

08001244 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001248:	f000 f8be 	bl	80013c8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800124c:	bf00      	nop
 800124e:	bd80      	pop	{r7, pc}

08001250 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001254:	4802      	ldr	r0, [pc, #8]	@ (8001260 <TIM4_IRQHandler+0x10>)
 8001256:	f001 f911 	bl	800247c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800125a:	bf00      	nop
 800125c:	bd80      	pop	{r7, pc}
 800125e:	bf00      	nop
 8001260:	20000138 	.word	0x20000138

08001264 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001268:	4802      	ldr	r0, [pc, #8]	@ (8001274 <USART2_IRQHandler+0x10>)
 800126a:	f001 fcdd 	bl	8002c28 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800126e:	bf00      	nop
 8001270:	bd80      	pop	{r7, pc}
 8001272:	bf00      	nop
 8001274:	20000180 	.word	0x20000180

08001278 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	b086      	sub	sp, #24
 800127c:	af00      	add	r7, sp, #0
 800127e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001280:	4a14      	ldr	r2, [pc, #80]	@ (80012d4 <_sbrk+0x5c>)
 8001282:	4b15      	ldr	r3, [pc, #84]	@ (80012d8 <_sbrk+0x60>)
 8001284:	1ad3      	subs	r3, r2, r3
 8001286:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001288:	697b      	ldr	r3, [r7, #20]
 800128a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800128c:	4b13      	ldr	r3, [pc, #76]	@ (80012dc <_sbrk+0x64>)
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	2b00      	cmp	r3, #0
 8001292:	d102      	bne.n	800129a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001294:	4b11      	ldr	r3, [pc, #68]	@ (80012dc <_sbrk+0x64>)
 8001296:	4a12      	ldr	r2, [pc, #72]	@ (80012e0 <_sbrk+0x68>)
 8001298:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800129a:	4b10      	ldr	r3, [pc, #64]	@ (80012dc <_sbrk+0x64>)
 800129c:	681a      	ldr	r2, [r3, #0]
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	4413      	add	r3, r2
 80012a2:	693a      	ldr	r2, [r7, #16]
 80012a4:	429a      	cmp	r2, r3
 80012a6:	d207      	bcs.n	80012b8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80012a8:	f002 f9be 	bl	8003628 <__errno>
 80012ac:	4603      	mov	r3, r0
 80012ae:	220c      	movs	r2, #12
 80012b0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80012b2:	f04f 33ff 	mov.w	r3, #4294967295
 80012b6:	e009      	b.n	80012cc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80012b8:	4b08      	ldr	r3, [pc, #32]	@ (80012dc <_sbrk+0x64>)
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80012be:	4b07      	ldr	r3, [pc, #28]	@ (80012dc <_sbrk+0x64>)
 80012c0:	681a      	ldr	r2, [r3, #0]
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	4413      	add	r3, r2
 80012c6:	4a05      	ldr	r2, [pc, #20]	@ (80012dc <_sbrk+0x64>)
 80012c8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80012ca:	68fb      	ldr	r3, [r7, #12]
}
 80012cc:	4618      	mov	r0, r3
 80012ce:	3718      	adds	r7, #24
 80012d0:	46bd      	mov	sp, r7
 80012d2:	bd80      	pop	{r7, pc}
 80012d4:	20005000 	.word	0x20005000
 80012d8:	00000400 	.word	0x00000400
 80012dc:	200002fc 	.word	0x200002fc
 80012e0:	20000450 	.word	0x20000450

080012e4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80012e4:	b480      	push	{r7}
 80012e6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80012e8:	bf00      	nop
 80012ea:	46bd      	mov	sp, r7
 80012ec:	bc80      	pop	{r7}
 80012ee:	4770      	bx	lr

080012f0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80012f0:	f7ff fff8 	bl	80012e4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80012f4:	480b      	ldr	r0, [pc, #44]	@ (8001324 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80012f6:	490c      	ldr	r1, [pc, #48]	@ (8001328 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80012f8:	4a0c      	ldr	r2, [pc, #48]	@ (800132c <LoopFillZerobss+0x16>)
  movs r3, #0
 80012fa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80012fc:	e002      	b.n	8001304 <LoopCopyDataInit>

080012fe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80012fe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001300:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001302:	3304      	adds	r3, #4

08001304 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001304:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001306:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001308:	d3f9      	bcc.n	80012fe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800130a:	4a09      	ldr	r2, [pc, #36]	@ (8001330 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 800130c:	4c09      	ldr	r4, [pc, #36]	@ (8001334 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800130e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001310:	e001      	b.n	8001316 <LoopFillZerobss>

08001312 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001312:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001314:	3204      	adds	r2, #4

08001316 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001316:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001318:	d3fb      	bcc.n	8001312 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800131a:	f002 f98b 	bl	8003634 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800131e:	f7ff fd1f 	bl	8000d60 <main>
  bx lr
 8001322:	4770      	bx	lr
  ldr r0, =_sdata
 8001324:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001328:	200000d0 	.word	0x200000d0
  ldr r2, =_sidata
 800132c:	080040d4 	.word	0x080040d4
  ldr r2, =_sbss
 8001330:	200000d0 	.word	0x200000d0
  ldr r4, =_ebss
 8001334:	2000044c 	.word	0x2000044c

08001338 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001338:	e7fe      	b.n	8001338 <ADC1_2_IRQHandler>
	...

0800133c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001340:	4b08      	ldr	r3, [pc, #32]	@ (8001364 <HAL_Init+0x28>)
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	4a07      	ldr	r2, [pc, #28]	@ (8001364 <HAL_Init+0x28>)
 8001346:	f043 0310 	orr.w	r3, r3, #16
 800134a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800134c:	2003      	movs	r0, #3
 800134e:	f000 f923 	bl	8001598 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001352:	200f      	movs	r0, #15
 8001354:	f000 f808 	bl	8001368 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001358:	f7ff fea4 	bl	80010a4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800135c:	2300      	movs	r3, #0
}
 800135e:	4618      	mov	r0, r3
 8001360:	bd80      	pop	{r7, pc}
 8001362:	bf00      	nop
 8001364:	40022000 	.word	0x40022000

08001368 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	b082      	sub	sp, #8
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001370:	4b12      	ldr	r3, [pc, #72]	@ (80013bc <HAL_InitTick+0x54>)
 8001372:	681a      	ldr	r2, [r3, #0]
 8001374:	4b12      	ldr	r3, [pc, #72]	@ (80013c0 <HAL_InitTick+0x58>)
 8001376:	781b      	ldrb	r3, [r3, #0]
 8001378:	4619      	mov	r1, r3
 800137a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800137e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001382:	fbb2 f3f3 	udiv	r3, r2, r3
 8001386:	4618      	mov	r0, r3
 8001388:	f000 f93b 	bl	8001602 <HAL_SYSTICK_Config>
 800138c:	4603      	mov	r3, r0
 800138e:	2b00      	cmp	r3, #0
 8001390:	d001      	beq.n	8001396 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001392:	2301      	movs	r3, #1
 8001394:	e00e      	b.n	80013b4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	2b0f      	cmp	r3, #15
 800139a:	d80a      	bhi.n	80013b2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800139c:	2200      	movs	r2, #0
 800139e:	6879      	ldr	r1, [r7, #4]
 80013a0:	f04f 30ff 	mov.w	r0, #4294967295
 80013a4:	f000 f903 	bl	80015ae <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80013a8:	4a06      	ldr	r2, [pc, #24]	@ (80013c4 <HAL_InitTick+0x5c>)
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80013ae:	2300      	movs	r3, #0
 80013b0:	e000      	b.n	80013b4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80013b2:	2301      	movs	r3, #1
}
 80013b4:	4618      	mov	r0, r3
 80013b6:	3708      	adds	r7, #8
 80013b8:	46bd      	mov	sp, r7
 80013ba:	bd80      	pop	{r7, pc}
 80013bc:	20000074 	.word	0x20000074
 80013c0:	2000007c 	.word	0x2000007c
 80013c4:	20000078 	.word	0x20000078

080013c8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80013c8:	b480      	push	{r7}
 80013ca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80013cc:	4b05      	ldr	r3, [pc, #20]	@ (80013e4 <HAL_IncTick+0x1c>)
 80013ce:	781b      	ldrb	r3, [r3, #0]
 80013d0:	461a      	mov	r2, r3
 80013d2:	4b05      	ldr	r3, [pc, #20]	@ (80013e8 <HAL_IncTick+0x20>)
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	4413      	add	r3, r2
 80013d8:	4a03      	ldr	r2, [pc, #12]	@ (80013e8 <HAL_IncTick+0x20>)
 80013da:	6013      	str	r3, [r2, #0]
}
 80013dc:	bf00      	nop
 80013de:	46bd      	mov	sp, r7
 80013e0:	bc80      	pop	{r7}
 80013e2:	4770      	bx	lr
 80013e4:	2000007c 	.word	0x2000007c
 80013e8:	20000300 	.word	0x20000300

080013ec <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80013ec:	b480      	push	{r7}
 80013ee:	af00      	add	r7, sp, #0
  return uwTick;
 80013f0:	4b02      	ldr	r3, [pc, #8]	@ (80013fc <HAL_GetTick+0x10>)
 80013f2:	681b      	ldr	r3, [r3, #0]
}
 80013f4:	4618      	mov	r0, r3
 80013f6:	46bd      	mov	sp, r7
 80013f8:	bc80      	pop	{r7}
 80013fa:	4770      	bx	lr
 80013fc:	20000300 	.word	0x20000300

08001400 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001400:	b480      	push	{r7}
 8001402:	b085      	sub	sp, #20
 8001404:	af00      	add	r7, sp, #0
 8001406:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	f003 0307 	and.w	r3, r3, #7
 800140e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001410:	4b0c      	ldr	r3, [pc, #48]	@ (8001444 <__NVIC_SetPriorityGrouping+0x44>)
 8001412:	68db      	ldr	r3, [r3, #12]
 8001414:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001416:	68ba      	ldr	r2, [r7, #8]
 8001418:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800141c:	4013      	ands	r3, r2
 800141e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001420:	68fb      	ldr	r3, [r7, #12]
 8001422:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001424:	68bb      	ldr	r3, [r7, #8]
 8001426:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001428:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800142c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001430:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001432:	4a04      	ldr	r2, [pc, #16]	@ (8001444 <__NVIC_SetPriorityGrouping+0x44>)
 8001434:	68bb      	ldr	r3, [r7, #8]
 8001436:	60d3      	str	r3, [r2, #12]
}
 8001438:	bf00      	nop
 800143a:	3714      	adds	r7, #20
 800143c:	46bd      	mov	sp, r7
 800143e:	bc80      	pop	{r7}
 8001440:	4770      	bx	lr
 8001442:	bf00      	nop
 8001444:	e000ed00 	.word	0xe000ed00

08001448 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001448:	b480      	push	{r7}
 800144a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800144c:	4b04      	ldr	r3, [pc, #16]	@ (8001460 <__NVIC_GetPriorityGrouping+0x18>)
 800144e:	68db      	ldr	r3, [r3, #12]
 8001450:	0a1b      	lsrs	r3, r3, #8
 8001452:	f003 0307 	and.w	r3, r3, #7
}
 8001456:	4618      	mov	r0, r3
 8001458:	46bd      	mov	sp, r7
 800145a:	bc80      	pop	{r7}
 800145c:	4770      	bx	lr
 800145e:	bf00      	nop
 8001460:	e000ed00 	.word	0xe000ed00

08001464 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001464:	b480      	push	{r7}
 8001466:	b083      	sub	sp, #12
 8001468:	af00      	add	r7, sp, #0
 800146a:	4603      	mov	r3, r0
 800146c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800146e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001472:	2b00      	cmp	r3, #0
 8001474:	db0b      	blt.n	800148e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001476:	79fb      	ldrb	r3, [r7, #7]
 8001478:	f003 021f 	and.w	r2, r3, #31
 800147c:	4906      	ldr	r1, [pc, #24]	@ (8001498 <__NVIC_EnableIRQ+0x34>)
 800147e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001482:	095b      	lsrs	r3, r3, #5
 8001484:	2001      	movs	r0, #1
 8001486:	fa00 f202 	lsl.w	r2, r0, r2
 800148a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800148e:	bf00      	nop
 8001490:	370c      	adds	r7, #12
 8001492:	46bd      	mov	sp, r7
 8001494:	bc80      	pop	{r7}
 8001496:	4770      	bx	lr
 8001498:	e000e100 	.word	0xe000e100

0800149c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800149c:	b480      	push	{r7}
 800149e:	b083      	sub	sp, #12
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	4603      	mov	r3, r0
 80014a4:	6039      	str	r1, [r7, #0]
 80014a6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	db0a      	blt.n	80014c6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014b0:	683b      	ldr	r3, [r7, #0]
 80014b2:	b2da      	uxtb	r2, r3
 80014b4:	490c      	ldr	r1, [pc, #48]	@ (80014e8 <__NVIC_SetPriority+0x4c>)
 80014b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014ba:	0112      	lsls	r2, r2, #4
 80014bc:	b2d2      	uxtb	r2, r2
 80014be:	440b      	add	r3, r1
 80014c0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80014c4:	e00a      	b.n	80014dc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014c6:	683b      	ldr	r3, [r7, #0]
 80014c8:	b2da      	uxtb	r2, r3
 80014ca:	4908      	ldr	r1, [pc, #32]	@ (80014ec <__NVIC_SetPriority+0x50>)
 80014cc:	79fb      	ldrb	r3, [r7, #7]
 80014ce:	f003 030f 	and.w	r3, r3, #15
 80014d2:	3b04      	subs	r3, #4
 80014d4:	0112      	lsls	r2, r2, #4
 80014d6:	b2d2      	uxtb	r2, r2
 80014d8:	440b      	add	r3, r1
 80014da:	761a      	strb	r2, [r3, #24]
}
 80014dc:	bf00      	nop
 80014de:	370c      	adds	r7, #12
 80014e0:	46bd      	mov	sp, r7
 80014e2:	bc80      	pop	{r7}
 80014e4:	4770      	bx	lr
 80014e6:	bf00      	nop
 80014e8:	e000e100 	.word	0xe000e100
 80014ec:	e000ed00 	.word	0xe000ed00

080014f0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80014f0:	b480      	push	{r7}
 80014f2:	b089      	sub	sp, #36	@ 0x24
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	60f8      	str	r0, [r7, #12]
 80014f8:	60b9      	str	r1, [r7, #8]
 80014fa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80014fc:	68fb      	ldr	r3, [r7, #12]
 80014fe:	f003 0307 	and.w	r3, r3, #7
 8001502:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001504:	69fb      	ldr	r3, [r7, #28]
 8001506:	f1c3 0307 	rsb	r3, r3, #7
 800150a:	2b04      	cmp	r3, #4
 800150c:	bf28      	it	cs
 800150e:	2304      	movcs	r3, #4
 8001510:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001512:	69fb      	ldr	r3, [r7, #28]
 8001514:	3304      	adds	r3, #4
 8001516:	2b06      	cmp	r3, #6
 8001518:	d902      	bls.n	8001520 <NVIC_EncodePriority+0x30>
 800151a:	69fb      	ldr	r3, [r7, #28]
 800151c:	3b03      	subs	r3, #3
 800151e:	e000      	b.n	8001522 <NVIC_EncodePriority+0x32>
 8001520:	2300      	movs	r3, #0
 8001522:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001524:	f04f 32ff 	mov.w	r2, #4294967295
 8001528:	69bb      	ldr	r3, [r7, #24]
 800152a:	fa02 f303 	lsl.w	r3, r2, r3
 800152e:	43da      	mvns	r2, r3
 8001530:	68bb      	ldr	r3, [r7, #8]
 8001532:	401a      	ands	r2, r3
 8001534:	697b      	ldr	r3, [r7, #20]
 8001536:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001538:	f04f 31ff 	mov.w	r1, #4294967295
 800153c:	697b      	ldr	r3, [r7, #20]
 800153e:	fa01 f303 	lsl.w	r3, r1, r3
 8001542:	43d9      	mvns	r1, r3
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001548:	4313      	orrs	r3, r2
         );
}
 800154a:	4618      	mov	r0, r3
 800154c:	3724      	adds	r7, #36	@ 0x24
 800154e:	46bd      	mov	sp, r7
 8001550:	bc80      	pop	{r7}
 8001552:	4770      	bx	lr

08001554 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	b082      	sub	sp, #8
 8001558:	af00      	add	r7, sp, #0
 800155a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	3b01      	subs	r3, #1
 8001560:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001564:	d301      	bcc.n	800156a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001566:	2301      	movs	r3, #1
 8001568:	e00f      	b.n	800158a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800156a:	4a0a      	ldr	r2, [pc, #40]	@ (8001594 <SysTick_Config+0x40>)
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	3b01      	subs	r3, #1
 8001570:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001572:	210f      	movs	r1, #15
 8001574:	f04f 30ff 	mov.w	r0, #4294967295
 8001578:	f7ff ff90 	bl	800149c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800157c:	4b05      	ldr	r3, [pc, #20]	@ (8001594 <SysTick_Config+0x40>)
 800157e:	2200      	movs	r2, #0
 8001580:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001582:	4b04      	ldr	r3, [pc, #16]	@ (8001594 <SysTick_Config+0x40>)
 8001584:	2207      	movs	r2, #7
 8001586:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001588:	2300      	movs	r3, #0
}
 800158a:	4618      	mov	r0, r3
 800158c:	3708      	adds	r7, #8
 800158e:	46bd      	mov	sp, r7
 8001590:	bd80      	pop	{r7, pc}
 8001592:	bf00      	nop
 8001594:	e000e010 	.word	0xe000e010

08001598 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	b082      	sub	sp, #8
 800159c:	af00      	add	r7, sp, #0
 800159e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80015a0:	6878      	ldr	r0, [r7, #4]
 80015a2:	f7ff ff2d 	bl	8001400 <__NVIC_SetPriorityGrouping>
}
 80015a6:	bf00      	nop
 80015a8:	3708      	adds	r7, #8
 80015aa:	46bd      	mov	sp, r7
 80015ac:	bd80      	pop	{r7, pc}

080015ae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80015ae:	b580      	push	{r7, lr}
 80015b0:	b086      	sub	sp, #24
 80015b2:	af00      	add	r7, sp, #0
 80015b4:	4603      	mov	r3, r0
 80015b6:	60b9      	str	r1, [r7, #8]
 80015b8:	607a      	str	r2, [r7, #4]
 80015ba:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80015bc:	2300      	movs	r3, #0
 80015be:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80015c0:	f7ff ff42 	bl	8001448 <__NVIC_GetPriorityGrouping>
 80015c4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80015c6:	687a      	ldr	r2, [r7, #4]
 80015c8:	68b9      	ldr	r1, [r7, #8]
 80015ca:	6978      	ldr	r0, [r7, #20]
 80015cc:	f7ff ff90 	bl	80014f0 <NVIC_EncodePriority>
 80015d0:	4602      	mov	r2, r0
 80015d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80015d6:	4611      	mov	r1, r2
 80015d8:	4618      	mov	r0, r3
 80015da:	f7ff ff5f 	bl	800149c <__NVIC_SetPriority>
}
 80015de:	bf00      	nop
 80015e0:	3718      	adds	r7, #24
 80015e2:	46bd      	mov	sp, r7
 80015e4:	bd80      	pop	{r7, pc}

080015e6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015e6:	b580      	push	{r7, lr}
 80015e8:	b082      	sub	sp, #8
 80015ea:	af00      	add	r7, sp, #0
 80015ec:	4603      	mov	r3, r0
 80015ee:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80015f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015f4:	4618      	mov	r0, r3
 80015f6:	f7ff ff35 	bl	8001464 <__NVIC_EnableIRQ>
}
 80015fa:	bf00      	nop
 80015fc:	3708      	adds	r7, #8
 80015fe:	46bd      	mov	sp, r7
 8001600:	bd80      	pop	{r7, pc}

08001602 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001602:	b580      	push	{r7, lr}
 8001604:	b082      	sub	sp, #8
 8001606:	af00      	add	r7, sp, #0
 8001608:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800160a:	6878      	ldr	r0, [r7, #4]
 800160c:	f7ff ffa2 	bl	8001554 <SysTick_Config>
 8001610:	4603      	mov	r3, r0
}
 8001612:	4618      	mov	r0, r3
 8001614:	3708      	adds	r7, #8
 8001616:	46bd      	mov	sp, r7
 8001618:	bd80      	pop	{r7, pc}

0800161a <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800161a:	b480      	push	{r7}
 800161c:	b085      	sub	sp, #20
 800161e:	af00      	add	r7, sp, #0
 8001620:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001622:	2300      	movs	r3, #0
 8001624:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800162c:	b2db      	uxtb	r3, r3
 800162e:	2b02      	cmp	r3, #2
 8001630:	d008      	beq.n	8001644 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	2204      	movs	r2, #4
 8001636:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	2200      	movs	r2, #0
 800163c:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001640:	2301      	movs	r3, #1
 8001642:	e020      	b.n	8001686 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	681a      	ldr	r2, [r3, #0]
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	f022 020e 	bic.w	r2, r2, #14
 8001652:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	681a      	ldr	r2, [r3, #0]
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	f022 0201 	bic.w	r2, r2, #1
 8001662:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800166c:	2101      	movs	r1, #1
 800166e:	fa01 f202 	lsl.w	r2, r1, r2
 8001672:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	2201      	movs	r2, #1
 8001678:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	2200      	movs	r2, #0
 8001680:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8001684:	7bfb      	ldrb	r3, [r7, #15]
}
 8001686:	4618      	mov	r0, r3
 8001688:	3714      	adds	r7, #20
 800168a:	46bd      	mov	sp, r7
 800168c:	bc80      	pop	{r7}
 800168e:	4770      	bx	lr

08001690 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001690:	b580      	push	{r7, lr}
 8001692:	b084      	sub	sp, #16
 8001694:	af00      	add	r7, sp, #0
 8001696:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001698:	2300      	movs	r3, #0
 800169a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80016a2:	b2db      	uxtb	r3, r3
 80016a4:	2b02      	cmp	r3, #2
 80016a6:	d005      	beq.n	80016b4 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	2204      	movs	r2, #4
 80016ac:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 80016ae:	2301      	movs	r3, #1
 80016b0:	73fb      	strb	r3, [r7, #15]
 80016b2:	e051      	b.n	8001758 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	681a      	ldr	r2, [r3, #0]
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	f022 020e 	bic.w	r2, r2, #14
 80016c2:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	681a      	ldr	r2, [r3, #0]
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	f022 0201 	bic.w	r2, r2, #1
 80016d2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	4a22      	ldr	r2, [pc, #136]	@ (8001764 <HAL_DMA_Abort_IT+0xd4>)
 80016da:	4293      	cmp	r3, r2
 80016dc:	d029      	beq.n	8001732 <HAL_DMA_Abort_IT+0xa2>
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	4a21      	ldr	r2, [pc, #132]	@ (8001768 <HAL_DMA_Abort_IT+0xd8>)
 80016e4:	4293      	cmp	r3, r2
 80016e6:	d022      	beq.n	800172e <HAL_DMA_Abort_IT+0x9e>
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	4a1f      	ldr	r2, [pc, #124]	@ (800176c <HAL_DMA_Abort_IT+0xdc>)
 80016ee:	4293      	cmp	r3, r2
 80016f0:	d01a      	beq.n	8001728 <HAL_DMA_Abort_IT+0x98>
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	4a1e      	ldr	r2, [pc, #120]	@ (8001770 <HAL_DMA_Abort_IT+0xe0>)
 80016f8:	4293      	cmp	r3, r2
 80016fa:	d012      	beq.n	8001722 <HAL_DMA_Abort_IT+0x92>
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	4a1c      	ldr	r2, [pc, #112]	@ (8001774 <HAL_DMA_Abort_IT+0xe4>)
 8001702:	4293      	cmp	r3, r2
 8001704:	d00a      	beq.n	800171c <HAL_DMA_Abort_IT+0x8c>
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	4a1b      	ldr	r2, [pc, #108]	@ (8001778 <HAL_DMA_Abort_IT+0xe8>)
 800170c:	4293      	cmp	r3, r2
 800170e:	d102      	bne.n	8001716 <HAL_DMA_Abort_IT+0x86>
 8001710:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8001714:	e00e      	b.n	8001734 <HAL_DMA_Abort_IT+0xa4>
 8001716:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800171a:	e00b      	b.n	8001734 <HAL_DMA_Abort_IT+0xa4>
 800171c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001720:	e008      	b.n	8001734 <HAL_DMA_Abort_IT+0xa4>
 8001722:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001726:	e005      	b.n	8001734 <HAL_DMA_Abort_IT+0xa4>
 8001728:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800172c:	e002      	b.n	8001734 <HAL_DMA_Abort_IT+0xa4>
 800172e:	2310      	movs	r3, #16
 8001730:	e000      	b.n	8001734 <HAL_DMA_Abort_IT+0xa4>
 8001732:	2301      	movs	r3, #1
 8001734:	4a11      	ldr	r2, [pc, #68]	@ (800177c <HAL_DMA_Abort_IT+0xec>)
 8001736:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	2201      	movs	r2, #1
 800173c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	2200      	movs	r2, #0
 8001744:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800174c:	2b00      	cmp	r3, #0
 800174e:	d003      	beq.n	8001758 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001754:	6878      	ldr	r0, [r7, #4]
 8001756:	4798      	blx	r3
    } 
  }
  return status;
 8001758:	7bfb      	ldrb	r3, [r7, #15]
}
 800175a:	4618      	mov	r0, r3
 800175c:	3710      	adds	r7, #16
 800175e:	46bd      	mov	sp, r7
 8001760:	bd80      	pop	{r7, pc}
 8001762:	bf00      	nop
 8001764:	40020008 	.word	0x40020008
 8001768:	4002001c 	.word	0x4002001c
 800176c:	40020030 	.word	0x40020030
 8001770:	40020044 	.word	0x40020044
 8001774:	40020058 	.word	0x40020058
 8001778:	4002006c 	.word	0x4002006c
 800177c:	40020000 	.word	0x40020000

08001780 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001780:	b480      	push	{r7}
 8001782:	b08b      	sub	sp, #44	@ 0x2c
 8001784:	af00      	add	r7, sp, #0
 8001786:	6078      	str	r0, [r7, #4]
 8001788:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800178a:	2300      	movs	r3, #0
 800178c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800178e:	2300      	movs	r3, #0
 8001790:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001792:	e169      	b.n	8001a68 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001794:	2201      	movs	r2, #1
 8001796:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001798:	fa02 f303 	lsl.w	r3, r2, r3
 800179c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800179e:	683b      	ldr	r3, [r7, #0]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	69fa      	ldr	r2, [r7, #28]
 80017a4:	4013      	ands	r3, r2
 80017a6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80017a8:	69ba      	ldr	r2, [r7, #24]
 80017aa:	69fb      	ldr	r3, [r7, #28]
 80017ac:	429a      	cmp	r2, r3
 80017ae:	f040 8158 	bne.w	8001a62 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80017b2:	683b      	ldr	r3, [r7, #0]
 80017b4:	685b      	ldr	r3, [r3, #4]
 80017b6:	4a9a      	ldr	r2, [pc, #616]	@ (8001a20 <HAL_GPIO_Init+0x2a0>)
 80017b8:	4293      	cmp	r3, r2
 80017ba:	d05e      	beq.n	800187a <HAL_GPIO_Init+0xfa>
 80017bc:	4a98      	ldr	r2, [pc, #608]	@ (8001a20 <HAL_GPIO_Init+0x2a0>)
 80017be:	4293      	cmp	r3, r2
 80017c0:	d875      	bhi.n	80018ae <HAL_GPIO_Init+0x12e>
 80017c2:	4a98      	ldr	r2, [pc, #608]	@ (8001a24 <HAL_GPIO_Init+0x2a4>)
 80017c4:	4293      	cmp	r3, r2
 80017c6:	d058      	beq.n	800187a <HAL_GPIO_Init+0xfa>
 80017c8:	4a96      	ldr	r2, [pc, #600]	@ (8001a24 <HAL_GPIO_Init+0x2a4>)
 80017ca:	4293      	cmp	r3, r2
 80017cc:	d86f      	bhi.n	80018ae <HAL_GPIO_Init+0x12e>
 80017ce:	4a96      	ldr	r2, [pc, #600]	@ (8001a28 <HAL_GPIO_Init+0x2a8>)
 80017d0:	4293      	cmp	r3, r2
 80017d2:	d052      	beq.n	800187a <HAL_GPIO_Init+0xfa>
 80017d4:	4a94      	ldr	r2, [pc, #592]	@ (8001a28 <HAL_GPIO_Init+0x2a8>)
 80017d6:	4293      	cmp	r3, r2
 80017d8:	d869      	bhi.n	80018ae <HAL_GPIO_Init+0x12e>
 80017da:	4a94      	ldr	r2, [pc, #592]	@ (8001a2c <HAL_GPIO_Init+0x2ac>)
 80017dc:	4293      	cmp	r3, r2
 80017de:	d04c      	beq.n	800187a <HAL_GPIO_Init+0xfa>
 80017e0:	4a92      	ldr	r2, [pc, #584]	@ (8001a2c <HAL_GPIO_Init+0x2ac>)
 80017e2:	4293      	cmp	r3, r2
 80017e4:	d863      	bhi.n	80018ae <HAL_GPIO_Init+0x12e>
 80017e6:	4a92      	ldr	r2, [pc, #584]	@ (8001a30 <HAL_GPIO_Init+0x2b0>)
 80017e8:	4293      	cmp	r3, r2
 80017ea:	d046      	beq.n	800187a <HAL_GPIO_Init+0xfa>
 80017ec:	4a90      	ldr	r2, [pc, #576]	@ (8001a30 <HAL_GPIO_Init+0x2b0>)
 80017ee:	4293      	cmp	r3, r2
 80017f0:	d85d      	bhi.n	80018ae <HAL_GPIO_Init+0x12e>
 80017f2:	2b12      	cmp	r3, #18
 80017f4:	d82a      	bhi.n	800184c <HAL_GPIO_Init+0xcc>
 80017f6:	2b12      	cmp	r3, #18
 80017f8:	d859      	bhi.n	80018ae <HAL_GPIO_Init+0x12e>
 80017fa:	a201      	add	r2, pc, #4	@ (adr r2, 8001800 <HAL_GPIO_Init+0x80>)
 80017fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001800:	0800187b 	.word	0x0800187b
 8001804:	08001855 	.word	0x08001855
 8001808:	08001867 	.word	0x08001867
 800180c:	080018a9 	.word	0x080018a9
 8001810:	080018af 	.word	0x080018af
 8001814:	080018af 	.word	0x080018af
 8001818:	080018af 	.word	0x080018af
 800181c:	080018af 	.word	0x080018af
 8001820:	080018af 	.word	0x080018af
 8001824:	080018af 	.word	0x080018af
 8001828:	080018af 	.word	0x080018af
 800182c:	080018af 	.word	0x080018af
 8001830:	080018af 	.word	0x080018af
 8001834:	080018af 	.word	0x080018af
 8001838:	080018af 	.word	0x080018af
 800183c:	080018af 	.word	0x080018af
 8001840:	080018af 	.word	0x080018af
 8001844:	0800185d 	.word	0x0800185d
 8001848:	08001871 	.word	0x08001871
 800184c:	4a79      	ldr	r2, [pc, #484]	@ (8001a34 <HAL_GPIO_Init+0x2b4>)
 800184e:	4293      	cmp	r3, r2
 8001850:	d013      	beq.n	800187a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001852:	e02c      	b.n	80018ae <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001854:	683b      	ldr	r3, [r7, #0]
 8001856:	68db      	ldr	r3, [r3, #12]
 8001858:	623b      	str	r3, [r7, #32]
          break;
 800185a:	e029      	b.n	80018b0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800185c:	683b      	ldr	r3, [r7, #0]
 800185e:	68db      	ldr	r3, [r3, #12]
 8001860:	3304      	adds	r3, #4
 8001862:	623b      	str	r3, [r7, #32]
          break;
 8001864:	e024      	b.n	80018b0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001866:	683b      	ldr	r3, [r7, #0]
 8001868:	68db      	ldr	r3, [r3, #12]
 800186a:	3308      	adds	r3, #8
 800186c:	623b      	str	r3, [r7, #32]
          break;
 800186e:	e01f      	b.n	80018b0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001870:	683b      	ldr	r3, [r7, #0]
 8001872:	68db      	ldr	r3, [r3, #12]
 8001874:	330c      	adds	r3, #12
 8001876:	623b      	str	r3, [r7, #32]
          break;
 8001878:	e01a      	b.n	80018b0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800187a:	683b      	ldr	r3, [r7, #0]
 800187c:	689b      	ldr	r3, [r3, #8]
 800187e:	2b00      	cmp	r3, #0
 8001880:	d102      	bne.n	8001888 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001882:	2304      	movs	r3, #4
 8001884:	623b      	str	r3, [r7, #32]
          break;
 8001886:	e013      	b.n	80018b0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001888:	683b      	ldr	r3, [r7, #0]
 800188a:	689b      	ldr	r3, [r3, #8]
 800188c:	2b01      	cmp	r3, #1
 800188e:	d105      	bne.n	800189c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001890:	2308      	movs	r3, #8
 8001892:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	69fa      	ldr	r2, [r7, #28]
 8001898:	611a      	str	r2, [r3, #16]
          break;
 800189a:	e009      	b.n	80018b0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800189c:	2308      	movs	r3, #8
 800189e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	69fa      	ldr	r2, [r7, #28]
 80018a4:	615a      	str	r2, [r3, #20]
          break;
 80018a6:	e003      	b.n	80018b0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80018a8:	2300      	movs	r3, #0
 80018aa:	623b      	str	r3, [r7, #32]
          break;
 80018ac:	e000      	b.n	80018b0 <HAL_GPIO_Init+0x130>
          break;
 80018ae:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80018b0:	69bb      	ldr	r3, [r7, #24]
 80018b2:	2bff      	cmp	r3, #255	@ 0xff
 80018b4:	d801      	bhi.n	80018ba <HAL_GPIO_Init+0x13a>
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	e001      	b.n	80018be <HAL_GPIO_Init+0x13e>
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	3304      	adds	r3, #4
 80018be:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80018c0:	69bb      	ldr	r3, [r7, #24]
 80018c2:	2bff      	cmp	r3, #255	@ 0xff
 80018c4:	d802      	bhi.n	80018cc <HAL_GPIO_Init+0x14c>
 80018c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018c8:	009b      	lsls	r3, r3, #2
 80018ca:	e002      	b.n	80018d2 <HAL_GPIO_Init+0x152>
 80018cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018ce:	3b08      	subs	r3, #8
 80018d0:	009b      	lsls	r3, r3, #2
 80018d2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80018d4:	697b      	ldr	r3, [r7, #20]
 80018d6:	681a      	ldr	r2, [r3, #0]
 80018d8:	210f      	movs	r1, #15
 80018da:	693b      	ldr	r3, [r7, #16]
 80018dc:	fa01 f303 	lsl.w	r3, r1, r3
 80018e0:	43db      	mvns	r3, r3
 80018e2:	401a      	ands	r2, r3
 80018e4:	6a39      	ldr	r1, [r7, #32]
 80018e6:	693b      	ldr	r3, [r7, #16]
 80018e8:	fa01 f303 	lsl.w	r3, r1, r3
 80018ec:	431a      	orrs	r2, r3
 80018ee:	697b      	ldr	r3, [r7, #20]
 80018f0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80018f2:	683b      	ldr	r3, [r7, #0]
 80018f4:	685b      	ldr	r3, [r3, #4]
 80018f6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	f000 80b1 	beq.w	8001a62 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001900:	4b4d      	ldr	r3, [pc, #308]	@ (8001a38 <HAL_GPIO_Init+0x2b8>)
 8001902:	699b      	ldr	r3, [r3, #24]
 8001904:	4a4c      	ldr	r2, [pc, #304]	@ (8001a38 <HAL_GPIO_Init+0x2b8>)
 8001906:	f043 0301 	orr.w	r3, r3, #1
 800190a:	6193      	str	r3, [r2, #24]
 800190c:	4b4a      	ldr	r3, [pc, #296]	@ (8001a38 <HAL_GPIO_Init+0x2b8>)
 800190e:	699b      	ldr	r3, [r3, #24]
 8001910:	f003 0301 	and.w	r3, r3, #1
 8001914:	60bb      	str	r3, [r7, #8]
 8001916:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001918:	4a48      	ldr	r2, [pc, #288]	@ (8001a3c <HAL_GPIO_Init+0x2bc>)
 800191a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800191c:	089b      	lsrs	r3, r3, #2
 800191e:	3302      	adds	r3, #2
 8001920:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001924:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001926:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001928:	f003 0303 	and.w	r3, r3, #3
 800192c:	009b      	lsls	r3, r3, #2
 800192e:	220f      	movs	r2, #15
 8001930:	fa02 f303 	lsl.w	r3, r2, r3
 8001934:	43db      	mvns	r3, r3
 8001936:	68fa      	ldr	r2, [r7, #12]
 8001938:	4013      	ands	r3, r2
 800193a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	4a40      	ldr	r2, [pc, #256]	@ (8001a40 <HAL_GPIO_Init+0x2c0>)
 8001940:	4293      	cmp	r3, r2
 8001942:	d013      	beq.n	800196c <HAL_GPIO_Init+0x1ec>
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	4a3f      	ldr	r2, [pc, #252]	@ (8001a44 <HAL_GPIO_Init+0x2c4>)
 8001948:	4293      	cmp	r3, r2
 800194a:	d00d      	beq.n	8001968 <HAL_GPIO_Init+0x1e8>
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	4a3e      	ldr	r2, [pc, #248]	@ (8001a48 <HAL_GPIO_Init+0x2c8>)
 8001950:	4293      	cmp	r3, r2
 8001952:	d007      	beq.n	8001964 <HAL_GPIO_Init+0x1e4>
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	4a3d      	ldr	r2, [pc, #244]	@ (8001a4c <HAL_GPIO_Init+0x2cc>)
 8001958:	4293      	cmp	r3, r2
 800195a:	d101      	bne.n	8001960 <HAL_GPIO_Init+0x1e0>
 800195c:	2303      	movs	r3, #3
 800195e:	e006      	b.n	800196e <HAL_GPIO_Init+0x1ee>
 8001960:	2304      	movs	r3, #4
 8001962:	e004      	b.n	800196e <HAL_GPIO_Init+0x1ee>
 8001964:	2302      	movs	r3, #2
 8001966:	e002      	b.n	800196e <HAL_GPIO_Init+0x1ee>
 8001968:	2301      	movs	r3, #1
 800196a:	e000      	b.n	800196e <HAL_GPIO_Init+0x1ee>
 800196c:	2300      	movs	r3, #0
 800196e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001970:	f002 0203 	and.w	r2, r2, #3
 8001974:	0092      	lsls	r2, r2, #2
 8001976:	4093      	lsls	r3, r2
 8001978:	68fa      	ldr	r2, [r7, #12]
 800197a:	4313      	orrs	r3, r2
 800197c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800197e:	492f      	ldr	r1, [pc, #188]	@ (8001a3c <HAL_GPIO_Init+0x2bc>)
 8001980:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001982:	089b      	lsrs	r3, r3, #2
 8001984:	3302      	adds	r3, #2
 8001986:	68fa      	ldr	r2, [r7, #12]
 8001988:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800198c:	683b      	ldr	r3, [r7, #0]
 800198e:	685b      	ldr	r3, [r3, #4]
 8001990:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001994:	2b00      	cmp	r3, #0
 8001996:	d006      	beq.n	80019a6 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001998:	4b2d      	ldr	r3, [pc, #180]	@ (8001a50 <HAL_GPIO_Init+0x2d0>)
 800199a:	689a      	ldr	r2, [r3, #8]
 800199c:	492c      	ldr	r1, [pc, #176]	@ (8001a50 <HAL_GPIO_Init+0x2d0>)
 800199e:	69bb      	ldr	r3, [r7, #24]
 80019a0:	4313      	orrs	r3, r2
 80019a2:	608b      	str	r3, [r1, #8]
 80019a4:	e006      	b.n	80019b4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80019a6:	4b2a      	ldr	r3, [pc, #168]	@ (8001a50 <HAL_GPIO_Init+0x2d0>)
 80019a8:	689a      	ldr	r2, [r3, #8]
 80019aa:	69bb      	ldr	r3, [r7, #24]
 80019ac:	43db      	mvns	r3, r3
 80019ae:	4928      	ldr	r1, [pc, #160]	@ (8001a50 <HAL_GPIO_Init+0x2d0>)
 80019b0:	4013      	ands	r3, r2
 80019b2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80019b4:	683b      	ldr	r3, [r7, #0]
 80019b6:	685b      	ldr	r3, [r3, #4]
 80019b8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d006      	beq.n	80019ce <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80019c0:	4b23      	ldr	r3, [pc, #140]	@ (8001a50 <HAL_GPIO_Init+0x2d0>)
 80019c2:	68da      	ldr	r2, [r3, #12]
 80019c4:	4922      	ldr	r1, [pc, #136]	@ (8001a50 <HAL_GPIO_Init+0x2d0>)
 80019c6:	69bb      	ldr	r3, [r7, #24]
 80019c8:	4313      	orrs	r3, r2
 80019ca:	60cb      	str	r3, [r1, #12]
 80019cc:	e006      	b.n	80019dc <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80019ce:	4b20      	ldr	r3, [pc, #128]	@ (8001a50 <HAL_GPIO_Init+0x2d0>)
 80019d0:	68da      	ldr	r2, [r3, #12]
 80019d2:	69bb      	ldr	r3, [r7, #24]
 80019d4:	43db      	mvns	r3, r3
 80019d6:	491e      	ldr	r1, [pc, #120]	@ (8001a50 <HAL_GPIO_Init+0x2d0>)
 80019d8:	4013      	ands	r3, r2
 80019da:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80019dc:	683b      	ldr	r3, [r7, #0]
 80019de:	685b      	ldr	r3, [r3, #4]
 80019e0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d006      	beq.n	80019f6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80019e8:	4b19      	ldr	r3, [pc, #100]	@ (8001a50 <HAL_GPIO_Init+0x2d0>)
 80019ea:	685a      	ldr	r2, [r3, #4]
 80019ec:	4918      	ldr	r1, [pc, #96]	@ (8001a50 <HAL_GPIO_Init+0x2d0>)
 80019ee:	69bb      	ldr	r3, [r7, #24]
 80019f0:	4313      	orrs	r3, r2
 80019f2:	604b      	str	r3, [r1, #4]
 80019f4:	e006      	b.n	8001a04 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80019f6:	4b16      	ldr	r3, [pc, #88]	@ (8001a50 <HAL_GPIO_Init+0x2d0>)
 80019f8:	685a      	ldr	r2, [r3, #4]
 80019fa:	69bb      	ldr	r3, [r7, #24]
 80019fc:	43db      	mvns	r3, r3
 80019fe:	4914      	ldr	r1, [pc, #80]	@ (8001a50 <HAL_GPIO_Init+0x2d0>)
 8001a00:	4013      	ands	r3, r2
 8001a02:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001a04:	683b      	ldr	r3, [r7, #0]
 8001a06:	685b      	ldr	r3, [r3, #4]
 8001a08:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d021      	beq.n	8001a54 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001a10:	4b0f      	ldr	r3, [pc, #60]	@ (8001a50 <HAL_GPIO_Init+0x2d0>)
 8001a12:	681a      	ldr	r2, [r3, #0]
 8001a14:	490e      	ldr	r1, [pc, #56]	@ (8001a50 <HAL_GPIO_Init+0x2d0>)
 8001a16:	69bb      	ldr	r3, [r7, #24]
 8001a18:	4313      	orrs	r3, r2
 8001a1a:	600b      	str	r3, [r1, #0]
 8001a1c:	e021      	b.n	8001a62 <HAL_GPIO_Init+0x2e2>
 8001a1e:	bf00      	nop
 8001a20:	10320000 	.word	0x10320000
 8001a24:	10310000 	.word	0x10310000
 8001a28:	10220000 	.word	0x10220000
 8001a2c:	10210000 	.word	0x10210000
 8001a30:	10120000 	.word	0x10120000
 8001a34:	10110000 	.word	0x10110000
 8001a38:	40021000 	.word	0x40021000
 8001a3c:	40010000 	.word	0x40010000
 8001a40:	40010800 	.word	0x40010800
 8001a44:	40010c00 	.word	0x40010c00
 8001a48:	40011000 	.word	0x40011000
 8001a4c:	40011400 	.word	0x40011400
 8001a50:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001a54:	4b0b      	ldr	r3, [pc, #44]	@ (8001a84 <HAL_GPIO_Init+0x304>)
 8001a56:	681a      	ldr	r2, [r3, #0]
 8001a58:	69bb      	ldr	r3, [r7, #24]
 8001a5a:	43db      	mvns	r3, r3
 8001a5c:	4909      	ldr	r1, [pc, #36]	@ (8001a84 <HAL_GPIO_Init+0x304>)
 8001a5e:	4013      	ands	r3, r2
 8001a60:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001a62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a64:	3301      	adds	r3, #1
 8001a66:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a68:	683b      	ldr	r3, [r7, #0]
 8001a6a:	681a      	ldr	r2, [r3, #0]
 8001a6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a6e:	fa22 f303 	lsr.w	r3, r2, r3
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	f47f ae8e 	bne.w	8001794 <HAL_GPIO_Init+0x14>
  }
}
 8001a78:	bf00      	nop
 8001a7a:	bf00      	nop
 8001a7c:	372c      	adds	r7, #44	@ 0x2c
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	bc80      	pop	{r7}
 8001a82:	4770      	bx	lr
 8001a84:	40010400 	.word	0x40010400

08001a88 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001a88:	b480      	push	{r7}
 8001a8a:	b085      	sub	sp, #20
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]
 8001a90:	460b      	mov	r3, r1
 8001a92:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	689a      	ldr	r2, [r3, #8]
 8001a98:	887b      	ldrh	r3, [r7, #2]
 8001a9a:	4013      	ands	r3, r2
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d002      	beq.n	8001aa6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001aa0:	2301      	movs	r3, #1
 8001aa2:	73fb      	strb	r3, [r7, #15]
 8001aa4:	e001      	b.n	8001aaa <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001aaa:	7bfb      	ldrb	r3, [r7, #15]
}
 8001aac:	4618      	mov	r0, r3
 8001aae:	3714      	adds	r7, #20
 8001ab0:	46bd      	mov	sp, r7
 8001ab2:	bc80      	pop	{r7}
 8001ab4:	4770      	bx	lr

08001ab6 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001ab6:	b480      	push	{r7}
 8001ab8:	b083      	sub	sp, #12
 8001aba:	af00      	add	r7, sp, #0
 8001abc:	6078      	str	r0, [r7, #4]
 8001abe:	460b      	mov	r3, r1
 8001ac0:	807b      	strh	r3, [r7, #2]
 8001ac2:	4613      	mov	r3, r2
 8001ac4:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001ac6:	787b      	ldrb	r3, [r7, #1]
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d003      	beq.n	8001ad4 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001acc:	887a      	ldrh	r2, [r7, #2]
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001ad2:	e003      	b.n	8001adc <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001ad4:	887b      	ldrh	r3, [r7, #2]
 8001ad6:	041a      	lsls	r2, r3, #16
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	611a      	str	r2, [r3, #16]
}
 8001adc:	bf00      	nop
 8001ade:	370c      	adds	r7, #12
 8001ae0:	46bd      	mov	sp, r7
 8001ae2:	bc80      	pop	{r7}
 8001ae4:	4770      	bx	lr

08001ae6 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001ae6:	b480      	push	{r7}
 8001ae8:	b085      	sub	sp, #20
 8001aea:	af00      	add	r7, sp, #0
 8001aec:	6078      	str	r0, [r7, #4]
 8001aee:	460b      	mov	r3, r1
 8001af0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	68db      	ldr	r3, [r3, #12]
 8001af6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001af8:	887a      	ldrh	r2, [r7, #2]
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	4013      	ands	r3, r2
 8001afe:	041a      	lsls	r2, r3, #16
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	43d9      	mvns	r1, r3
 8001b04:	887b      	ldrh	r3, [r7, #2]
 8001b06:	400b      	ands	r3, r1
 8001b08:	431a      	orrs	r2, r3
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	611a      	str	r2, [r3, #16]
}
 8001b0e:	bf00      	nop
 8001b10:	3714      	adds	r7, #20
 8001b12:	46bd      	mov	sp, r7
 8001b14:	bc80      	pop	{r7}
 8001b16:	4770      	bx	lr

08001b18 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	b086      	sub	sp, #24
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d101      	bne.n	8001b2a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001b26:	2301      	movs	r3, #1
 8001b28:	e272      	b.n	8002010 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	f003 0301 	and.w	r3, r3, #1
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	f000 8087 	beq.w	8001c46 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001b38:	4b92      	ldr	r3, [pc, #584]	@ (8001d84 <HAL_RCC_OscConfig+0x26c>)
 8001b3a:	685b      	ldr	r3, [r3, #4]
 8001b3c:	f003 030c 	and.w	r3, r3, #12
 8001b40:	2b04      	cmp	r3, #4
 8001b42:	d00c      	beq.n	8001b5e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001b44:	4b8f      	ldr	r3, [pc, #572]	@ (8001d84 <HAL_RCC_OscConfig+0x26c>)
 8001b46:	685b      	ldr	r3, [r3, #4]
 8001b48:	f003 030c 	and.w	r3, r3, #12
 8001b4c:	2b08      	cmp	r3, #8
 8001b4e:	d112      	bne.n	8001b76 <HAL_RCC_OscConfig+0x5e>
 8001b50:	4b8c      	ldr	r3, [pc, #560]	@ (8001d84 <HAL_RCC_OscConfig+0x26c>)
 8001b52:	685b      	ldr	r3, [r3, #4]
 8001b54:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001b58:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001b5c:	d10b      	bne.n	8001b76 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b5e:	4b89      	ldr	r3, [pc, #548]	@ (8001d84 <HAL_RCC_OscConfig+0x26c>)
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d06c      	beq.n	8001c44 <HAL_RCC_OscConfig+0x12c>
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	685b      	ldr	r3, [r3, #4]
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d168      	bne.n	8001c44 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001b72:	2301      	movs	r3, #1
 8001b74:	e24c      	b.n	8002010 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	685b      	ldr	r3, [r3, #4]
 8001b7a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001b7e:	d106      	bne.n	8001b8e <HAL_RCC_OscConfig+0x76>
 8001b80:	4b80      	ldr	r3, [pc, #512]	@ (8001d84 <HAL_RCC_OscConfig+0x26c>)
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	4a7f      	ldr	r2, [pc, #508]	@ (8001d84 <HAL_RCC_OscConfig+0x26c>)
 8001b86:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001b8a:	6013      	str	r3, [r2, #0]
 8001b8c:	e02e      	b.n	8001bec <HAL_RCC_OscConfig+0xd4>
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	685b      	ldr	r3, [r3, #4]
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d10c      	bne.n	8001bb0 <HAL_RCC_OscConfig+0x98>
 8001b96:	4b7b      	ldr	r3, [pc, #492]	@ (8001d84 <HAL_RCC_OscConfig+0x26c>)
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	4a7a      	ldr	r2, [pc, #488]	@ (8001d84 <HAL_RCC_OscConfig+0x26c>)
 8001b9c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001ba0:	6013      	str	r3, [r2, #0]
 8001ba2:	4b78      	ldr	r3, [pc, #480]	@ (8001d84 <HAL_RCC_OscConfig+0x26c>)
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	4a77      	ldr	r2, [pc, #476]	@ (8001d84 <HAL_RCC_OscConfig+0x26c>)
 8001ba8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001bac:	6013      	str	r3, [r2, #0]
 8001bae:	e01d      	b.n	8001bec <HAL_RCC_OscConfig+0xd4>
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	685b      	ldr	r3, [r3, #4]
 8001bb4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001bb8:	d10c      	bne.n	8001bd4 <HAL_RCC_OscConfig+0xbc>
 8001bba:	4b72      	ldr	r3, [pc, #456]	@ (8001d84 <HAL_RCC_OscConfig+0x26c>)
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	4a71      	ldr	r2, [pc, #452]	@ (8001d84 <HAL_RCC_OscConfig+0x26c>)
 8001bc0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001bc4:	6013      	str	r3, [r2, #0]
 8001bc6:	4b6f      	ldr	r3, [pc, #444]	@ (8001d84 <HAL_RCC_OscConfig+0x26c>)
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	4a6e      	ldr	r2, [pc, #440]	@ (8001d84 <HAL_RCC_OscConfig+0x26c>)
 8001bcc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001bd0:	6013      	str	r3, [r2, #0]
 8001bd2:	e00b      	b.n	8001bec <HAL_RCC_OscConfig+0xd4>
 8001bd4:	4b6b      	ldr	r3, [pc, #428]	@ (8001d84 <HAL_RCC_OscConfig+0x26c>)
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	4a6a      	ldr	r2, [pc, #424]	@ (8001d84 <HAL_RCC_OscConfig+0x26c>)
 8001bda:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001bde:	6013      	str	r3, [r2, #0]
 8001be0:	4b68      	ldr	r3, [pc, #416]	@ (8001d84 <HAL_RCC_OscConfig+0x26c>)
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	4a67      	ldr	r2, [pc, #412]	@ (8001d84 <HAL_RCC_OscConfig+0x26c>)
 8001be6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001bea:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	685b      	ldr	r3, [r3, #4]
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d013      	beq.n	8001c1c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bf4:	f7ff fbfa 	bl	80013ec <HAL_GetTick>
 8001bf8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001bfa:	e008      	b.n	8001c0e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001bfc:	f7ff fbf6 	bl	80013ec <HAL_GetTick>
 8001c00:	4602      	mov	r2, r0
 8001c02:	693b      	ldr	r3, [r7, #16]
 8001c04:	1ad3      	subs	r3, r2, r3
 8001c06:	2b64      	cmp	r3, #100	@ 0x64
 8001c08:	d901      	bls.n	8001c0e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001c0a:	2303      	movs	r3, #3
 8001c0c:	e200      	b.n	8002010 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c0e:	4b5d      	ldr	r3, [pc, #372]	@ (8001d84 <HAL_RCC_OscConfig+0x26c>)
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d0f0      	beq.n	8001bfc <HAL_RCC_OscConfig+0xe4>
 8001c1a:	e014      	b.n	8001c46 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c1c:	f7ff fbe6 	bl	80013ec <HAL_GetTick>
 8001c20:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c22:	e008      	b.n	8001c36 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c24:	f7ff fbe2 	bl	80013ec <HAL_GetTick>
 8001c28:	4602      	mov	r2, r0
 8001c2a:	693b      	ldr	r3, [r7, #16]
 8001c2c:	1ad3      	subs	r3, r2, r3
 8001c2e:	2b64      	cmp	r3, #100	@ 0x64
 8001c30:	d901      	bls.n	8001c36 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001c32:	2303      	movs	r3, #3
 8001c34:	e1ec      	b.n	8002010 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c36:	4b53      	ldr	r3, [pc, #332]	@ (8001d84 <HAL_RCC_OscConfig+0x26c>)
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d1f0      	bne.n	8001c24 <HAL_RCC_OscConfig+0x10c>
 8001c42:	e000      	b.n	8001c46 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c44:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	f003 0302 	and.w	r3, r3, #2
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d063      	beq.n	8001d1a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001c52:	4b4c      	ldr	r3, [pc, #304]	@ (8001d84 <HAL_RCC_OscConfig+0x26c>)
 8001c54:	685b      	ldr	r3, [r3, #4]
 8001c56:	f003 030c 	and.w	r3, r3, #12
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d00b      	beq.n	8001c76 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001c5e:	4b49      	ldr	r3, [pc, #292]	@ (8001d84 <HAL_RCC_OscConfig+0x26c>)
 8001c60:	685b      	ldr	r3, [r3, #4]
 8001c62:	f003 030c 	and.w	r3, r3, #12
 8001c66:	2b08      	cmp	r3, #8
 8001c68:	d11c      	bne.n	8001ca4 <HAL_RCC_OscConfig+0x18c>
 8001c6a:	4b46      	ldr	r3, [pc, #280]	@ (8001d84 <HAL_RCC_OscConfig+0x26c>)
 8001c6c:	685b      	ldr	r3, [r3, #4]
 8001c6e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d116      	bne.n	8001ca4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c76:	4b43      	ldr	r3, [pc, #268]	@ (8001d84 <HAL_RCC_OscConfig+0x26c>)
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	f003 0302 	and.w	r3, r3, #2
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d005      	beq.n	8001c8e <HAL_RCC_OscConfig+0x176>
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	691b      	ldr	r3, [r3, #16]
 8001c86:	2b01      	cmp	r3, #1
 8001c88:	d001      	beq.n	8001c8e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001c8a:	2301      	movs	r3, #1
 8001c8c:	e1c0      	b.n	8002010 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c8e:	4b3d      	ldr	r3, [pc, #244]	@ (8001d84 <HAL_RCC_OscConfig+0x26c>)
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	695b      	ldr	r3, [r3, #20]
 8001c9a:	00db      	lsls	r3, r3, #3
 8001c9c:	4939      	ldr	r1, [pc, #228]	@ (8001d84 <HAL_RCC_OscConfig+0x26c>)
 8001c9e:	4313      	orrs	r3, r2
 8001ca0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ca2:	e03a      	b.n	8001d1a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	691b      	ldr	r3, [r3, #16]
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d020      	beq.n	8001cee <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001cac:	4b36      	ldr	r3, [pc, #216]	@ (8001d88 <HAL_RCC_OscConfig+0x270>)
 8001cae:	2201      	movs	r2, #1
 8001cb0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cb2:	f7ff fb9b 	bl	80013ec <HAL_GetTick>
 8001cb6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001cb8:	e008      	b.n	8001ccc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001cba:	f7ff fb97 	bl	80013ec <HAL_GetTick>
 8001cbe:	4602      	mov	r2, r0
 8001cc0:	693b      	ldr	r3, [r7, #16]
 8001cc2:	1ad3      	subs	r3, r2, r3
 8001cc4:	2b02      	cmp	r3, #2
 8001cc6:	d901      	bls.n	8001ccc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001cc8:	2303      	movs	r3, #3
 8001cca:	e1a1      	b.n	8002010 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ccc:	4b2d      	ldr	r3, [pc, #180]	@ (8001d84 <HAL_RCC_OscConfig+0x26c>)
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	f003 0302 	and.w	r3, r3, #2
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d0f0      	beq.n	8001cba <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001cd8:	4b2a      	ldr	r3, [pc, #168]	@ (8001d84 <HAL_RCC_OscConfig+0x26c>)
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	695b      	ldr	r3, [r3, #20]
 8001ce4:	00db      	lsls	r3, r3, #3
 8001ce6:	4927      	ldr	r1, [pc, #156]	@ (8001d84 <HAL_RCC_OscConfig+0x26c>)
 8001ce8:	4313      	orrs	r3, r2
 8001cea:	600b      	str	r3, [r1, #0]
 8001cec:	e015      	b.n	8001d1a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001cee:	4b26      	ldr	r3, [pc, #152]	@ (8001d88 <HAL_RCC_OscConfig+0x270>)
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cf4:	f7ff fb7a 	bl	80013ec <HAL_GetTick>
 8001cf8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001cfa:	e008      	b.n	8001d0e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001cfc:	f7ff fb76 	bl	80013ec <HAL_GetTick>
 8001d00:	4602      	mov	r2, r0
 8001d02:	693b      	ldr	r3, [r7, #16]
 8001d04:	1ad3      	subs	r3, r2, r3
 8001d06:	2b02      	cmp	r3, #2
 8001d08:	d901      	bls.n	8001d0e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001d0a:	2303      	movs	r3, #3
 8001d0c:	e180      	b.n	8002010 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d0e:	4b1d      	ldr	r3, [pc, #116]	@ (8001d84 <HAL_RCC_OscConfig+0x26c>)
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	f003 0302 	and.w	r3, r3, #2
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d1f0      	bne.n	8001cfc <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	f003 0308 	and.w	r3, r3, #8
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d03a      	beq.n	8001d9c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	699b      	ldr	r3, [r3, #24]
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d019      	beq.n	8001d62 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001d2e:	4b17      	ldr	r3, [pc, #92]	@ (8001d8c <HAL_RCC_OscConfig+0x274>)
 8001d30:	2201      	movs	r2, #1
 8001d32:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d34:	f7ff fb5a 	bl	80013ec <HAL_GetTick>
 8001d38:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d3a:	e008      	b.n	8001d4e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d3c:	f7ff fb56 	bl	80013ec <HAL_GetTick>
 8001d40:	4602      	mov	r2, r0
 8001d42:	693b      	ldr	r3, [r7, #16]
 8001d44:	1ad3      	subs	r3, r2, r3
 8001d46:	2b02      	cmp	r3, #2
 8001d48:	d901      	bls.n	8001d4e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001d4a:	2303      	movs	r3, #3
 8001d4c:	e160      	b.n	8002010 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d4e:	4b0d      	ldr	r3, [pc, #52]	@ (8001d84 <HAL_RCC_OscConfig+0x26c>)
 8001d50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d52:	f003 0302 	and.w	r3, r3, #2
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d0f0      	beq.n	8001d3c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001d5a:	2001      	movs	r0, #1
 8001d5c:	f000 face 	bl	80022fc <RCC_Delay>
 8001d60:	e01c      	b.n	8001d9c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001d62:	4b0a      	ldr	r3, [pc, #40]	@ (8001d8c <HAL_RCC_OscConfig+0x274>)
 8001d64:	2200      	movs	r2, #0
 8001d66:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d68:	f7ff fb40 	bl	80013ec <HAL_GetTick>
 8001d6c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d6e:	e00f      	b.n	8001d90 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d70:	f7ff fb3c 	bl	80013ec <HAL_GetTick>
 8001d74:	4602      	mov	r2, r0
 8001d76:	693b      	ldr	r3, [r7, #16]
 8001d78:	1ad3      	subs	r3, r2, r3
 8001d7a:	2b02      	cmp	r3, #2
 8001d7c:	d908      	bls.n	8001d90 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001d7e:	2303      	movs	r3, #3
 8001d80:	e146      	b.n	8002010 <HAL_RCC_OscConfig+0x4f8>
 8001d82:	bf00      	nop
 8001d84:	40021000 	.word	0x40021000
 8001d88:	42420000 	.word	0x42420000
 8001d8c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d90:	4b92      	ldr	r3, [pc, #584]	@ (8001fdc <HAL_RCC_OscConfig+0x4c4>)
 8001d92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d94:	f003 0302 	and.w	r3, r3, #2
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d1e9      	bne.n	8001d70 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	f003 0304 	and.w	r3, r3, #4
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	f000 80a6 	beq.w	8001ef6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001daa:	2300      	movs	r3, #0
 8001dac:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001dae:	4b8b      	ldr	r3, [pc, #556]	@ (8001fdc <HAL_RCC_OscConfig+0x4c4>)
 8001db0:	69db      	ldr	r3, [r3, #28]
 8001db2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d10d      	bne.n	8001dd6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001dba:	4b88      	ldr	r3, [pc, #544]	@ (8001fdc <HAL_RCC_OscConfig+0x4c4>)
 8001dbc:	69db      	ldr	r3, [r3, #28]
 8001dbe:	4a87      	ldr	r2, [pc, #540]	@ (8001fdc <HAL_RCC_OscConfig+0x4c4>)
 8001dc0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001dc4:	61d3      	str	r3, [r2, #28]
 8001dc6:	4b85      	ldr	r3, [pc, #532]	@ (8001fdc <HAL_RCC_OscConfig+0x4c4>)
 8001dc8:	69db      	ldr	r3, [r3, #28]
 8001dca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001dce:	60bb      	str	r3, [r7, #8]
 8001dd0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001dd2:	2301      	movs	r3, #1
 8001dd4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001dd6:	4b82      	ldr	r3, [pc, #520]	@ (8001fe0 <HAL_RCC_OscConfig+0x4c8>)
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d118      	bne.n	8001e14 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001de2:	4b7f      	ldr	r3, [pc, #508]	@ (8001fe0 <HAL_RCC_OscConfig+0x4c8>)
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	4a7e      	ldr	r2, [pc, #504]	@ (8001fe0 <HAL_RCC_OscConfig+0x4c8>)
 8001de8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001dec:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001dee:	f7ff fafd 	bl	80013ec <HAL_GetTick>
 8001df2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001df4:	e008      	b.n	8001e08 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001df6:	f7ff faf9 	bl	80013ec <HAL_GetTick>
 8001dfa:	4602      	mov	r2, r0
 8001dfc:	693b      	ldr	r3, [r7, #16]
 8001dfe:	1ad3      	subs	r3, r2, r3
 8001e00:	2b64      	cmp	r3, #100	@ 0x64
 8001e02:	d901      	bls.n	8001e08 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001e04:	2303      	movs	r3, #3
 8001e06:	e103      	b.n	8002010 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e08:	4b75      	ldr	r3, [pc, #468]	@ (8001fe0 <HAL_RCC_OscConfig+0x4c8>)
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d0f0      	beq.n	8001df6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	68db      	ldr	r3, [r3, #12]
 8001e18:	2b01      	cmp	r3, #1
 8001e1a:	d106      	bne.n	8001e2a <HAL_RCC_OscConfig+0x312>
 8001e1c:	4b6f      	ldr	r3, [pc, #444]	@ (8001fdc <HAL_RCC_OscConfig+0x4c4>)
 8001e1e:	6a1b      	ldr	r3, [r3, #32]
 8001e20:	4a6e      	ldr	r2, [pc, #440]	@ (8001fdc <HAL_RCC_OscConfig+0x4c4>)
 8001e22:	f043 0301 	orr.w	r3, r3, #1
 8001e26:	6213      	str	r3, [r2, #32]
 8001e28:	e02d      	b.n	8001e86 <HAL_RCC_OscConfig+0x36e>
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	68db      	ldr	r3, [r3, #12]
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d10c      	bne.n	8001e4c <HAL_RCC_OscConfig+0x334>
 8001e32:	4b6a      	ldr	r3, [pc, #424]	@ (8001fdc <HAL_RCC_OscConfig+0x4c4>)
 8001e34:	6a1b      	ldr	r3, [r3, #32]
 8001e36:	4a69      	ldr	r2, [pc, #420]	@ (8001fdc <HAL_RCC_OscConfig+0x4c4>)
 8001e38:	f023 0301 	bic.w	r3, r3, #1
 8001e3c:	6213      	str	r3, [r2, #32]
 8001e3e:	4b67      	ldr	r3, [pc, #412]	@ (8001fdc <HAL_RCC_OscConfig+0x4c4>)
 8001e40:	6a1b      	ldr	r3, [r3, #32]
 8001e42:	4a66      	ldr	r2, [pc, #408]	@ (8001fdc <HAL_RCC_OscConfig+0x4c4>)
 8001e44:	f023 0304 	bic.w	r3, r3, #4
 8001e48:	6213      	str	r3, [r2, #32]
 8001e4a:	e01c      	b.n	8001e86 <HAL_RCC_OscConfig+0x36e>
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	68db      	ldr	r3, [r3, #12]
 8001e50:	2b05      	cmp	r3, #5
 8001e52:	d10c      	bne.n	8001e6e <HAL_RCC_OscConfig+0x356>
 8001e54:	4b61      	ldr	r3, [pc, #388]	@ (8001fdc <HAL_RCC_OscConfig+0x4c4>)
 8001e56:	6a1b      	ldr	r3, [r3, #32]
 8001e58:	4a60      	ldr	r2, [pc, #384]	@ (8001fdc <HAL_RCC_OscConfig+0x4c4>)
 8001e5a:	f043 0304 	orr.w	r3, r3, #4
 8001e5e:	6213      	str	r3, [r2, #32]
 8001e60:	4b5e      	ldr	r3, [pc, #376]	@ (8001fdc <HAL_RCC_OscConfig+0x4c4>)
 8001e62:	6a1b      	ldr	r3, [r3, #32]
 8001e64:	4a5d      	ldr	r2, [pc, #372]	@ (8001fdc <HAL_RCC_OscConfig+0x4c4>)
 8001e66:	f043 0301 	orr.w	r3, r3, #1
 8001e6a:	6213      	str	r3, [r2, #32]
 8001e6c:	e00b      	b.n	8001e86 <HAL_RCC_OscConfig+0x36e>
 8001e6e:	4b5b      	ldr	r3, [pc, #364]	@ (8001fdc <HAL_RCC_OscConfig+0x4c4>)
 8001e70:	6a1b      	ldr	r3, [r3, #32]
 8001e72:	4a5a      	ldr	r2, [pc, #360]	@ (8001fdc <HAL_RCC_OscConfig+0x4c4>)
 8001e74:	f023 0301 	bic.w	r3, r3, #1
 8001e78:	6213      	str	r3, [r2, #32]
 8001e7a:	4b58      	ldr	r3, [pc, #352]	@ (8001fdc <HAL_RCC_OscConfig+0x4c4>)
 8001e7c:	6a1b      	ldr	r3, [r3, #32]
 8001e7e:	4a57      	ldr	r2, [pc, #348]	@ (8001fdc <HAL_RCC_OscConfig+0x4c4>)
 8001e80:	f023 0304 	bic.w	r3, r3, #4
 8001e84:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	68db      	ldr	r3, [r3, #12]
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d015      	beq.n	8001eba <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e8e:	f7ff faad 	bl	80013ec <HAL_GetTick>
 8001e92:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e94:	e00a      	b.n	8001eac <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e96:	f7ff faa9 	bl	80013ec <HAL_GetTick>
 8001e9a:	4602      	mov	r2, r0
 8001e9c:	693b      	ldr	r3, [r7, #16]
 8001e9e:	1ad3      	subs	r3, r2, r3
 8001ea0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001ea4:	4293      	cmp	r3, r2
 8001ea6:	d901      	bls.n	8001eac <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001ea8:	2303      	movs	r3, #3
 8001eaa:	e0b1      	b.n	8002010 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001eac:	4b4b      	ldr	r3, [pc, #300]	@ (8001fdc <HAL_RCC_OscConfig+0x4c4>)
 8001eae:	6a1b      	ldr	r3, [r3, #32]
 8001eb0:	f003 0302 	and.w	r3, r3, #2
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d0ee      	beq.n	8001e96 <HAL_RCC_OscConfig+0x37e>
 8001eb8:	e014      	b.n	8001ee4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001eba:	f7ff fa97 	bl	80013ec <HAL_GetTick>
 8001ebe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ec0:	e00a      	b.n	8001ed8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ec2:	f7ff fa93 	bl	80013ec <HAL_GetTick>
 8001ec6:	4602      	mov	r2, r0
 8001ec8:	693b      	ldr	r3, [r7, #16]
 8001eca:	1ad3      	subs	r3, r2, r3
 8001ecc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001ed0:	4293      	cmp	r3, r2
 8001ed2:	d901      	bls.n	8001ed8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001ed4:	2303      	movs	r3, #3
 8001ed6:	e09b      	b.n	8002010 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ed8:	4b40      	ldr	r3, [pc, #256]	@ (8001fdc <HAL_RCC_OscConfig+0x4c4>)
 8001eda:	6a1b      	ldr	r3, [r3, #32]
 8001edc:	f003 0302 	and.w	r3, r3, #2
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d1ee      	bne.n	8001ec2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001ee4:	7dfb      	ldrb	r3, [r7, #23]
 8001ee6:	2b01      	cmp	r3, #1
 8001ee8:	d105      	bne.n	8001ef6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001eea:	4b3c      	ldr	r3, [pc, #240]	@ (8001fdc <HAL_RCC_OscConfig+0x4c4>)
 8001eec:	69db      	ldr	r3, [r3, #28]
 8001eee:	4a3b      	ldr	r2, [pc, #236]	@ (8001fdc <HAL_RCC_OscConfig+0x4c4>)
 8001ef0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001ef4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	69db      	ldr	r3, [r3, #28]
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	f000 8087 	beq.w	800200e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001f00:	4b36      	ldr	r3, [pc, #216]	@ (8001fdc <HAL_RCC_OscConfig+0x4c4>)
 8001f02:	685b      	ldr	r3, [r3, #4]
 8001f04:	f003 030c 	and.w	r3, r3, #12
 8001f08:	2b08      	cmp	r3, #8
 8001f0a:	d061      	beq.n	8001fd0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	69db      	ldr	r3, [r3, #28]
 8001f10:	2b02      	cmp	r3, #2
 8001f12:	d146      	bne.n	8001fa2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f14:	4b33      	ldr	r3, [pc, #204]	@ (8001fe4 <HAL_RCC_OscConfig+0x4cc>)
 8001f16:	2200      	movs	r2, #0
 8001f18:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f1a:	f7ff fa67 	bl	80013ec <HAL_GetTick>
 8001f1e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f20:	e008      	b.n	8001f34 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f22:	f7ff fa63 	bl	80013ec <HAL_GetTick>
 8001f26:	4602      	mov	r2, r0
 8001f28:	693b      	ldr	r3, [r7, #16]
 8001f2a:	1ad3      	subs	r3, r2, r3
 8001f2c:	2b02      	cmp	r3, #2
 8001f2e:	d901      	bls.n	8001f34 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001f30:	2303      	movs	r3, #3
 8001f32:	e06d      	b.n	8002010 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f34:	4b29      	ldr	r3, [pc, #164]	@ (8001fdc <HAL_RCC_OscConfig+0x4c4>)
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d1f0      	bne.n	8001f22 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	6a1b      	ldr	r3, [r3, #32]
 8001f44:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001f48:	d108      	bne.n	8001f5c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001f4a:	4b24      	ldr	r3, [pc, #144]	@ (8001fdc <HAL_RCC_OscConfig+0x4c4>)
 8001f4c:	685b      	ldr	r3, [r3, #4]
 8001f4e:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	689b      	ldr	r3, [r3, #8]
 8001f56:	4921      	ldr	r1, [pc, #132]	@ (8001fdc <HAL_RCC_OscConfig+0x4c4>)
 8001f58:	4313      	orrs	r3, r2
 8001f5a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001f5c:	4b1f      	ldr	r3, [pc, #124]	@ (8001fdc <HAL_RCC_OscConfig+0x4c4>)
 8001f5e:	685b      	ldr	r3, [r3, #4]
 8001f60:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	6a19      	ldr	r1, [r3, #32]
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f6c:	430b      	orrs	r3, r1
 8001f6e:	491b      	ldr	r1, [pc, #108]	@ (8001fdc <HAL_RCC_OscConfig+0x4c4>)
 8001f70:	4313      	orrs	r3, r2
 8001f72:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001f74:	4b1b      	ldr	r3, [pc, #108]	@ (8001fe4 <HAL_RCC_OscConfig+0x4cc>)
 8001f76:	2201      	movs	r2, #1
 8001f78:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f7a:	f7ff fa37 	bl	80013ec <HAL_GetTick>
 8001f7e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001f80:	e008      	b.n	8001f94 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f82:	f7ff fa33 	bl	80013ec <HAL_GetTick>
 8001f86:	4602      	mov	r2, r0
 8001f88:	693b      	ldr	r3, [r7, #16]
 8001f8a:	1ad3      	subs	r3, r2, r3
 8001f8c:	2b02      	cmp	r3, #2
 8001f8e:	d901      	bls.n	8001f94 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001f90:	2303      	movs	r3, #3
 8001f92:	e03d      	b.n	8002010 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001f94:	4b11      	ldr	r3, [pc, #68]	@ (8001fdc <HAL_RCC_OscConfig+0x4c4>)
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d0f0      	beq.n	8001f82 <HAL_RCC_OscConfig+0x46a>
 8001fa0:	e035      	b.n	800200e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001fa2:	4b10      	ldr	r3, [pc, #64]	@ (8001fe4 <HAL_RCC_OscConfig+0x4cc>)
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fa8:	f7ff fa20 	bl	80013ec <HAL_GetTick>
 8001fac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001fae:	e008      	b.n	8001fc2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001fb0:	f7ff fa1c 	bl	80013ec <HAL_GetTick>
 8001fb4:	4602      	mov	r2, r0
 8001fb6:	693b      	ldr	r3, [r7, #16]
 8001fb8:	1ad3      	subs	r3, r2, r3
 8001fba:	2b02      	cmp	r3, #2
 8001fbc:	d901      	bls.n	8001fc2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001fbe:	2303      	movs	r3, #3
 8001fc0:	e026      	b.n	8002010 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001fc2:	4b06      	ldr	r3, [pc, #24]	@ (8001fdc <HAL_RCC_OscConfig+0x4c4>)
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d1f0      	bne.n	8001fb0 <HAL_RCC_OscConfig+0x498>
 8001fce:	e01e      	b.n	800200e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	69db      	ldr	r3, [r3, #28]
 8001fd4:	2b01      	cmp	r3, #1
 8001fd6:	d107      	bne.n	8001fe8 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001fd8:	2301      	movs	r3, #1
 8001fda:	e019      	b.n	8002010 <HAL_RCC_OscConfig+0x4f8>
 8001fdc:	40021000 	.word	0x40021000
 8001fe0:	40007000 	.word	0x40007000
 8001fe4:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001fe8:	4b0b      	ldr	r3, [pc, #44]	@ (8002018 <HAL_RCC_OscConfig+0x500>)
 8001fea:	685b      	ldr	r3, [r3, #4]
 8001fec:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	6a1b      	ldr	r3, [r3, #32]
 8001ff8:	429a      	cmp	r2, r3
 8001ffa:	d106      	bne.n	800200a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002006:	429a      	cmp	r2, r3
 8002008:	d001      	beq.n	800200e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800200a:	2301      	movs	r3, #1
 800200c:	e000      	b.n	8002010 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800200e:	2300      	movs	r3, #0
}
 8002010:	4618      	mov	r0, r3
 8002012:	3718      	adds	r7, #24
 8002014:	46bd      	mov	sp, r7
 8002016:	bd80      	pop	{r7, pc}
 8002018:	40021000 	.word	0x40021000

0800201c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800201c:	b580      	push	{r7, lr}
 800201e:	b084      	sub	sp, #16
 8002020:	af00      	add	r7, sp, #0
 8002022:	6078      	str	r0, [r7, #4]
 8002024:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	2b00      	cmp	r3, #0
 800202a:	d101      	bne.n	8002030 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800202c:	2301      	movs	r3, #1
 800202e:	e0d0      	b.n	80021d2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002030:	4b6a      	ldr	r3, [pc, #424]	@ (80021dc <HAL_RCC_ClockConfig+0x1c0>)
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	f003 0307 	and.w	r3, r3, #7
 8002038:	683a      	ldr	r2, [r7, #0]
 800203a:	429a      	cmp	r2, r3
 800203c:	d910      	bls.n	8002060 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800203e:	4b67      	ldr	r3, [pc, #412]	@ (80021dc <HAL_RCC_ClockConfig+0x1c0>)
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	f023 0207 	bic.w	r2, r3, #7
 8002046:	4965      	ldr	r1, [pc, #404]	@ (80021dc <HAL_RCC_ClockConfig+0x1c0>)
 8002048:	683b      	ldr	r3, [r7, #0]
 800204a:	4313      	orrs	r3, r2
 800204c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800204e:	4b63      	ldr	r3, [pc, #396]	@ (80021dc <HAL_RCC_ClockConfig+0x1c0>)
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	f003 0307 	and.w	r3, r3, #7
 8002056:	683a      	ldr	r2, [r7, #0]
 8002058:	429a      	cmp	r2, r3
 800205a:	d001      	beq.n	8002060 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800205c:	2301      	movs	r3, #1
 800205e:	e0b8      	b.n	80021d2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	f003 0302 	and.w	r3, r3, #2
 8002068:	2b00      	cmp	r3, #0
 800206a:	d020      	beq.n	80020ae <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	f003 0304 	and.w	r3, r3, #4
 8002074:	2b00      	cmp	r3, #0
 8002076:	d005      	beq.n	8002084 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002078:	4b59      	ldr	r3, [pc, #356]	@ (80021e0 <HAL_RCC_ClockConfig+0x1c4>)
 800207a:	685b      	ldr	r3, [r3, #4]
 800207c:	4a58      	ldr	r2, [pc, #352]	@ (80021e0 <HAL_RCC_ClockConfig+0x1c4>)
 800207e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002082:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	f003 0308 	and.w	r3, r3, #8
 800208c:	2b00      	cmp	r3, #0
 800208e:	d005      	beq.n	800209c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002090:	4b53      	ldr	r3, [pc, #332]	@ (80021e0 <HAL_RCC_ClockConfig+0x1c4>)
 8002092:	685b      	ldr	r3, [r3, #4]
 8002094:	4a52      	ldr	r2, [pc, #328]	@ (80021e0 <HAL_RCC_ClockConfig+0x1c4>)
 8002096:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 800209a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800209c:	4b50      	ldr	r3, [pc, #320]	@ (80021e0 <HAL_RCC_ClockConfig+0x1c4>)
 800209e:	685b      	ldr	r3, [r3, #4]
 80020a0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	689b      	ldr	r3, [r3, #8]
 80020a8:	494d      	ldr	r1, [pc, #308]	@ (80021e0 <HAL_RCC_ClockConfig+0x1c4>)
 80020aa:	4313      	orrs	r3, r2
 80020ac:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	f003 0301 	and.w	r3, r3, #1
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d040      	beq.n	800213c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	685b      	ldr	r3, [r3, #4]
 80020be:	2b01      	cmp	r3, #1
 80020c0:	d107      	bne.n	80020d2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020c2:	4b47      	ldr	r3, [pc, #284]	@ (80021e0 <HAL_RCC_ClockConfig+0x1c4>)
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d115      	bne.n	80020fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80020ce:	2301      	movs	r3, #1
 80020d0:	e07f      	b.n	80021d2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	685b      	ldr	r3, [r3, #4]
 80020d6:	2b02      	cmp	r3, #2
 80020d8:	d107      	bne.n	80020ea <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80020da:	4b41      	ldr	r3, [pc, #260]	@ (80021e0 <HAL_RCC_ClockConfig+0x1c4>)
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d109      	bne.n	80020fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80020e6:	2301      	movs	r3, #1
 80020e8:	e073      	b.n	80021d2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020ea:	4b3d      	ldr	r3, [pc, #244]	@ (80021e0 <HAL_RCC_ClockConfig+0x1c4>)
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	f003 0302 	and.w	r3, r3, #2
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d101      	bne.n	80020fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80020f6:	2301      	movs	r3, #1
 80020f8:	e06b      	b.n	80021d2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80020fa:	4b39      	ldr	r3, [pc, #228]	@ (80021e0 <HAL_RCC_ClockConfig+0x1c4>)
 80020fc:	685b      	ldr	r3, [r3, #4]
 80020fe:	f023 0203 	bic.w	r2, r3, #3
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	685b      	ldr	r3, [r3, #4]
 8002106:	4936      	ldr	r1, [pc, #216]	@ (80021e0 <HAL_RCC_ClockConfig+0x1c4>)
 8002108:	4313      	orrs	r3, r2
 800210a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800210c:	f7ff f96e 	bl	80013ec <HAL_GetTick>
 8002110:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002112:	e00a      	b.n	800212a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002114:	f7ff f96a 	bl	80013ec <HAL_GetTick>
 8002118:	4602      	mov	r2, r0
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	1ad3      	subs	r3, r2, r3
 800211e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002122:	4293      	cmp	r3, r2
 8002124:	d901      	bls.n	800212a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002126:	2303      	movs	r3, #3
 8002128:	e053      	b.n	80021d2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800212a:	4b2d      	ldr	r3, [pc, #180]	@ (80021e0 <HAL_RCC_ClockConfig+0x1c4>)
 800212c:	685b      	ldr	r3, [r3, #4]
 800212e:	f003 020c 	and.w	r2, r3, #12
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	685b      	ldr	r3, [r3, #4]
 8002136:	009b      	lsls	r3, r3, #2
 8002138:	429a      	cmp	r2, r3
 800213a:	d1eb      	bne.n	8002114 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800213c:	4b27      	ldr	r3, [pc, #156]	@ (80021dc <HAL_RCC_ClockConfig+0x1c0>)
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	f003 0307 	and.w	r3, r3, #7
 8002144:	683a      	ldr	r2, [r7, #0]
 8002146:	429a      	cmp	r2, r3
 8002148:	d210      	bcs.n	800216c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800214a:	4b24      	ldr	r3, [pc, #144]	@ (80021dc <HAL_RCC_ClockConfig+0x1c0>)
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	f023 0207 	bic.w	r2, r3, #7
 8002152:	4922      	ldr	r1, [pc, #136]	@ (80021dc <HAL_RCC_ClockConfig+0x1c0>)
 8002154:	683b      	ldr	r3, [r7, #0]
 8002156:	4313      	orrs	r3, r2
 8002158:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800215a:	4b20      	ldr	r3, [pc, #128]	@ (80021dc <HAL_RCC_ClockConfig+0x1c0>)
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	f003 0307 	and.w	r3, r3, #7
 8002162:	683a      	ldr	r2, [r7, #0]
 8002164:	429a      	cmp	r2, r3
 8002166:	d001      	beq.n	800216c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002168:	2301      	movs	r3, #1
 800216a:	e032      	b.n	80021d2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	f003 0304 	and.w	r3, r3, #4
 8002174:	2b00      	cmp	r3, #0
 8002176:	d008      	beq.n	800218a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002178:	4b19      	ldr	r3, [pc, #100]	@ (80021e0 <HAL_RCC_ClockConfig+0x1c4>)
 800217a:	685b      	ldr	r3, [r3, #4]
 800217c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	68db      	ldr	r3, [r3, #12]
 8002184:	4916      	ldr	r1, [pc, #88]	@ (80021e0 <HAL_RCC_ClockConfig+0x1c4>)
 8002186:	4313      	orrs	r3, r2
 8002188:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	f003 0308 	and.w	r3, r3, #8
 8002192:	2b00      	cmp	r3, #0
 8002194:	d009      	beq.n	80021aa <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002196:	4b12      	ldr	r3, [pc, #72]	@ (80021e0 <HAL_RCC_ClockConfig+0x1c4>)
 8002198:	685b      	ldr	r3, [r3, #4]
 800219a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	691b      	ldr	r3, [r3, #16]
 80021a2:	00db      	lsls	r3, r3, #3
 80021a4:	490e      	ldr	r1, [pc, #56]	@ (80021e0 <HAL_RCC_ClockConfig+0x1c4>)
 80021a6:	4313      	orrs	r3, r2
 80021a8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80021aa:	f000 f821 	bl	80021f0 <HAL_RCC_GetSysClockFreq>
 80021ae:	4602      	mov	r2, r0
 80021b0:	4b0b      	ldr	r3, [pc, #44]	@ (80021e0 <HAL_RCC_ClockConfig+0x1c4>)
 80021b2:	685b      	ldr	r3, [r3, #4]
 80021b4:	091b      	lsrs	r3, r3, #4
 80021b6:	f003 030f 	and.w	r3, r3, #15
 80021ba:	490a      	ldr	r1, [pc, #40]	@ (80021e4 <HAL_RCC_ClockConfig+0x1c8>)
 80021bc:	5ccb      	ldrb	r3, [r1, r3]
 80021be:	fa22 f303 	lsr.w	r3, r2, r3
 80021c2:	4a09      	ldr	r2, [pc, #36]	@ (80021e8 <HAL_RCC_ClockConfig+0x1cc>)
 80021c4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80021c6:	4b09      	ldr	r3, [pc, #36]	@ (80021ec <HAL_RCC_ClockConfig+0x1d0>)
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	4618      	mov	r0, r3
 80021cc:	f7ff f8cc 	bl	8001368 <HAL_InitTick>

  return HAL_OK;
 80021d0:	2300      	movs	r3, #0
}
 80021d2:	4618      	mov	r0, r3
 80021d4:	3710      	adds	r7, #16
 80021d6:	46bd      	mov	sp, r7
 80021d8:	bd80      	pop	{r7, pc}
 80021da:	bf00      	nop
 80021dc:	40022000 	.word	0x40022000
 80021e0:	40021000 	.word	0x40021000
 80021e4:	08004064 	.word	0x08004064
 80021e8:	20000074 	.word	0x20000074
 80021ec:	20000078 	.word	0x20000078

080021f0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80021f0:	b480      	push	{r7}
 80021f2:	b087      	sub	sp, #28
 80021f4:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80021f6:	2300      	movs	r3, #0
 80021f8:	60fb      	str	r3, [r7, #12]
 80021fa:	2300      	movs	r3, #0
 80021fc:	60bb      	str	r3, [r7, #8]
 80021fe:	2300      	movs	r3, #0
 8002200:	617b      	str	r3, [r7, #20]
 8002202:	2300      	movs	r3, #0
 8002204:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002206:	2300      	movs	r3, #0
 8002208:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800220a:	4b1e      	ldr	r3, [pc, #120]	@ (8002284 <HAL_RCC_GetSysClockFreq+0x94>)
 800220c:	685b      	ldr	r3, [r3, #4]
 800220e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	f003 030c 	and.w	r3, r3, #12
 8002216:	2b04      	cmp	r3, #4
 8002218:	d002      	beq.n	8002220 <HAL_RCC_GetSysClockFreq+0x30>
 800221a:	2b08      	cmp	r3, #8
 800221c:	d003      	beq.n	8002226 <HAL_RCC_GetSysClockFreq+0x36>
 800221e:	e027      	b.n	8002270 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002220:	4b19      	ldr	r3, [pc, #100]	@ (8002288 <HAL_RCC_GetSysClockFreq+0x98>)
 8002222:	613b      	str	r3, [r7, #16]
      break;
 8002224:	e027      	b.n	8002276 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	0c9b      	lsrs	r3, r3, #18
 800222a:	f003 030f 	and.w	r3, r3, #15
 800222e:	4a17      	ldr	r2, [pc, #92]	@ (800228c <HAL_RCC_GetSysClockFreq+0x9c>)
 8002230:	5cd3      	ldrb	r3, [r2, r3]
 8002232:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800223a:	2b00      	cmp	r3, #0
 800223c:	d010      	beq.n	8002260 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800223e:	4b11      	ldr	r3, [pc, #68]	@ (8002284 <HAL_RCC_GetSysClockFreq+0x94>)
 8002240:	685b      	ldr	r3, [r3, #4]
 8002242:	0c5b      	lsrs	r3, r3, #17
 8002244:	f003 0301 	and.w	r3, r3, #1
 8002248:	4a11      	ldr	r2, [pc, #68]	@ (8002290 <HAL_RCC_GetSysClockFreq+0xa0>)
 800224a:	5cd3      	ldrb	r3, [r2, r3]
 800224c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	4a0d      	ldr	r2, [pc, #52]	@ (8002288 <HAL_RCC_GetSysClockFreq+0x98>)
 8002252:	fb03 f202 	mul.w	r2, r3, r2
 8002256:	68bb      	ldr	r3, [r7, #8]
 8002258:	fbb2 f3f3 	udiv	r3, r2, r3
 800225c:	617b      	str	r3, [r7, #20]
 800225e:	e004      	b.n	800226a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	4a0c      	ldr	r2, [pc, #48]	@ (8002294 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002264:	fb02 f303 	mul.w	r3, r2, r3
 8002268:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800226a:	697b      	ldr	r3, [r7, #20]
 800226c:	613b      	str	r3, [r7, #16]
      break;
 800226e:	e002      	b.n	8002276 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002270:	4b05      	ldr	r3, [pc, #20]	@ (8002288 <HAL_RCC_GetSysClockFreq+0x98>)
 8002272:	613b      	str	r3, [r7, #16]
      break;
 8002274:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002276:	693b      	ldr	r3, [r7, #16]
}
 8002278:	4618      	mov	r0, r3
 800227a:	371c      	adds	r7, #28
 800227c:	46bd      	mov	sp, r7
 800227e:	bc80      	pop	{r7}
 8002280:	4770      	bx	lr
 8002282:	bf00      	nop
 8002284:	40021000 	.word	0x40021000
 8002288:	007a1200 	.word	0x007a1200
 800228c:	0800407c 	.word	0x0800407c
 8002290:	0800408c 	.word	0x0800408c
 8002294:	003d0900 	.word	0x003d0900

08002298 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002298:	b480      	push	{r7}
 800229a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800229c:	4b02      	ldr	r3, [pc, #8]	@ (80022a8 <HAL_RCC_GetHCLKFreq+0x10>)
 800229e:	681b      	ldr	r3, [r3, #0]
}
 80022a0:	4618      	mov	r0, r3
 80022a2:	46bd      	mov	sp, r7
 80022a4:	bc80      	pop	{r7}
 80022a6:	4770      	bx	lr
 80022a8:	20000074 	.word	0x20000074

080022ac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80022ac:	b580      	push	{r7, lr}
 80022ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80022b0:	f7ff fff2 	bl	8002298 <HAL_RCC_GetHCLKFreq>
 80022b4:	4602      	mov	r2, r0
 80022b6:	4b05      	ldr	r3, [pc, #20]	@ (80022cc <HAL_RCC_GetPCLK1Freq+0x20>)
 80022b8:	685b      	ldr	r3, [r3, #4]
 80022ba:	0a1b      	lsrs	r3, r3, #8
 80022bc:	f003 0307 	and.w	r3, r3, #7
 80022c0:	4903      	ldr	r1, [pc, #12]	@ (80022d0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80022c2:	5ccb      	ldrb	r3, [r1, r3]
 80022c4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80022c8:	4618      	mov	r0, r3
 80022ca:	bd80      	pop	{r7, pc}
 80022cc:	40021000 	.word	0x40021000
 80022d0:	08004074 	.word	0x08004074

080022d4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80022d4:	b580      	push	{r7, lr}
 80022d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80022d8:	f7ff ffde 	bl	8002298 <HAL_RCC_GetHCLKFreq>
 80022dc:	4602      	mov	r2, r0
 80022de:	4b05      	ldr	r3, [pc, #20]	@ (80022f4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80022e0:	685b      	ldr	r3, [r3, #4]
 80022e2:	0adb      	lsrs	r3, r3, #11
 80022e4:	f003 0307 	and.w	r3, r3, #7
 80022e8:	4903      	ldr	r1, [pc, #12]	@ (80022f8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80022ea:	5ccb      	ldrb	r3, [r1, r3]
 80022ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 80022f0:	4618      	mov	r0, r3
 80022f2:	bd80      	pop	{r7, pc}
 80022f4:	40021000 	.word	0x40021000
 80022f8:	08004074 	.word	0x08004074

080022fc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80022fc:	b480      	push	{r7}
 80022fe:	b085      	sub	sp, #20
 8002300:	af00      	add	r7, sp, #0
 8002302:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002304:	4b0a      	ldr	r3, [pc, #40]	@ (8002330 <RCC_Delay+0x34>)
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	4a0a      	ldr	r2, [pc, #40]	@ (8002334 <RCC_Delay+0x38>)
 800230a:	fba2 2303 	umull	r2, r3, r2, r3
 800230e:	0a5b      	lsrs	r3, r3, #9
 8002310:	687a      	ldr	r2, [r7, #4]
 8002312:	fb02 f303 	mul.w	r3, r2, r3
 8002316:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002318:	bf00      	nop
  }
  while (Delay --);
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	1e5a      	subs	r2, r3, #1
 800231e:	60fa      	str	r2, [r7, #12]
 8002320:	2b00      	cmp	r3, #0
 8002322:	d1f9      	bne.n	8002318 <RCC_Delay+0x1c>
}
 8002324:	bf00      	nop
 8002326:	bf00      	nop
 8002328:	3714      	adds	r7, #20
 800232a:	46bd      	mov	sp, r7
 800232c:	bc80      	pop	{r7}
 800232e:	4770      	bx	lr
 8002330:	20000074 	.word	0x20000074
 8002334:	10624dd3 	.word	0x10624dd3

08002338 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002338:	b580      	push	{r7, lr}
 800233a:	b082      	sub	sp, #8
 800233c:	af00      	add	r7, sp, #0
 800233e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	2b00      	cmp	r3, #0
 8002344:	d101      	bne.n	800234a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002346:	2301      	movs	r3, #1
 8002348:	e041      	b.n	80023ce <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002350:	b2db      	uxtb	r3, r3
 8002352:	2b00      	cmp	r3, #0
 8002354:	d106      	bne.n	8002364 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	2200      	movs	r2, #0
 800235a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800235e:	6878      	ldr	r0, [r7, #4]
 8002360:	f7fe fed2 	bl	8001108 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	2202      	movs	r2, #2
 8002368:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681a      	ldr	r2, [r3, #0]
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	3304      	adds	r3, #4
 8002374:	4619      	mov	r1, r3
 8002376:	4610      	mov	r0, r2
 8002378:	f000 fa5c 	bl	8002834 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	2201      	movs	r2, #1
 8002380:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	2201      	movs	r2, #1
 8002388:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	2201      	movs	r2, #1
 8002390:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	2201      	movs	r2, #1
 8002398:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	2201      	movs	r2, #1
 80023a0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	2201      	movs	r2, #1
 80023a8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	2201      	movs	r2, #1
 80023b0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	2201      	movs	r2, #1
 80023b8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	2201      	movs	r2, #1
 80023c0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	2201      	movs	r2, #1
 80023c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80023cc:	2300      	movs	r3, #0
}
 80023ce:	4618      	mov	r0, r3
 80023d0:	3708      	adds	r7, #8
 80023d2:	46bd      	mov	sp, r7
 80023d4:	bd80      	pop	{r7, pc}
	...

080023d8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80023d8:	b480      	push	{r7}
 80023da:	b085      	sub	sp, #20
 80023dc:	af00      	add	r7, sp, #0
 80023de:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80023e6:	b2db      	uxtb	r3, r3
 80023e8:	2b01      	cmp	r3, #1
 80023ea:	d001      	beq.n	80023f0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80023ec:	2301      	movs	r3, #1
 80023ee:	e03a      	b.n	8002466 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	2202      	movs	r2, #2
 80023f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	68da      	ldr	r2, [r3, #12]
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	f042 0201 	orr.w	r2, r2, #1
 8002406:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	4a18      	ldr	r2, [pc, #96]	@ (8002470 <HAL_TIM_Base_Start_IT+0x98>)
 800240e:	4293      	cmp	r3, r2
 8002410:	d00e      	beq.n	8002430 <HAL_TIM_Base_Start_IT+0x58>
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800241a:	d009      	beq.n	8002430 <HAL_TIM_Base_Start_IT+0x58>
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	4a14      	ldr	r2, [pc, #80]	@ (8002474 <HAL_TIM_Base_Start_IT+0x9c>)
 8002422:	4293      	cmp	r3, r2
 8002424:	d004      	beq.n	8002430 <HAL_TIM_Base_Start_IT+0x58>
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	4a13      	ldr	r2, [pc, #76]	@ (8002478 <HAL_TIM_Base_Start_IT+0xa0>)
 800242c:	4293      	cmp	r3, r2
 800242e:	d111      	bne.n	8002454 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	689b      	ldr	r3, [r3, #8]
 8002436:	f003 0307 	and.w	r3, r3, #7
 800243a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	2b06      	cmp	r3, #6
 8002440:	d010      	beq.n	8002464 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	681a      	ldr	r2, [r3, #0]
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	f042 0201 	orr.w	r2, r2, #1
 8002450:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002452:	e007      	b.n	8002464 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	681a      	ldr	r2, [r3, #0]
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	f042 0201 	orr.w	r2, r2, #1
 8002462:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002464:	2300      	movs	r3, #0
}
 8002466:	4618      	mov	r0, r3
 8002468:	3714      	adds	r7, #20
 800246a:	46bd      	mov	sp, r7
 800246c:	bc80      	pop	{r7}
 800246e:	4770      	bx	lr
 8002470:	40012c00 	.word	0x40012c00
 8002474:	40000400 	.word	0x40000400
 8002478:	40000800 	.word	0x40000800

0800247c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800247c:	b580      	push	{r7, lr}
 800247e:	b084      	sub	sp, #16
 8002480:	af00      	add	r7, sp, #0
 8002482:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	68db      	ldr	r3, [r3, #12]
 800248a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	691b      	ldr	r3, [r3, #16]
 8002492:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002494:	68bb      	ldr	r3, [r7, #8]
 8002496:	f003 0302 	and.w	r3, r3, #2
 800249a:	2b00      	cmp	r3, #0
 800249c:	d020      	beq.n	80024e0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	f003 0302 	and.w	r3, r3, #2
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d01b      	beq.n	80024e0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	f06f 0202 	mvn.w	r2, #2
 80024b0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	2201      	movs	r2, #1
 80024b6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	699b      	ldr	r3, [r3, #24]
 80024be:	f003 0303 	and.w	r3, r3, #3
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d003      	beq.n	80024ce <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80024c6:	6878      	ldr	r0, [r7, #4]
 80024c8:	f000 f998 	bl	80027fc <HAL_TIM_IC_CaptureCallback>
 80024cc:	e005      	b.n	80024da <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80024ce:	6878      	ldr	r0, [r7, #4]
 80024d0:	f000 f98b 	bl	80027ea <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80024d4:	6878      	ldr	r0, [r7, #4]
 80024d6:	f000 f99a 	bl	800280e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	2200      	movs	r2, #0
 80024de:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80024e0:	68bb      	ldr	r3, [r7, #8]
 80024e2:	f003 0304 	and.w	r3, r3, #4
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d020      	beq.n	800252c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	f003 0304 	and.w	r3, r3, #4
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d01b      	beq.n	800252c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	f06f 0204 	mvn.w	r2, #4
 80024fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	2202      	movs	r2, #2
 8002502:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	699b      	ldr	r3, [r3, #24]
 800250a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800250e:	2b00      	cmp	r3, #0
 8002510:	d003      	beq.n	800251a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002512:	6878      	ldr	r0, [r7, #4]
 8002514:	f000 f972 	bl	80027fc <HAL_TIM_IC_CaptureCallback>
 8002518:	e005      	b.n	8002526 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800251a:	6878      	ldr	r0, [r7, #4]
 800251c:	f000 f965 	bl	80027ea <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002520:	6878      	ldr	r0, [r7, #4]
 8002522:	f000 f974 	bl	800280e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	2200      	movs	r2, #0
 800252a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800252c:	68bb      	ldr	r3, [r7, #8]
 800252e:	f003 0308 	and.w	r3, r3, #8
 8002532:	2b00      	cmp	r3, #0
 8002534:	d020      	beq.n	8002578 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	f003 0308 	and.w	r3, r3, #8
 800253c:	2b00      	cmp	r3, #0
 800253e:	d01b      	beq.n	8002578 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	f06f 0208 	mvn.w	r2, #8
 8002548:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	2204      	movs	r2, #4
 800254e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	69db      	ldr	r3, [r3, #28]
 8002556:	f003 0303 	and.w	r3, r3, #3
 800255a:	2b00      	cmp	r3, #0
 800255c:	d003      	beq.n	8002566 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800255e:	6878      	ldr	r0, [r7, #4]
 8002560:	f000 f94c 	bl	80027fc <HAL_TIM_IC_CaptureCallback>
 8002564:	e005      	b.n	8002572 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002566:	6878      	ldr	r0, [r7, #4]
 8002568:	f000 f93f 	bl	80027ea <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800256c:	6878      	ldr	r0, [r7, #4]
 800256e:	f000 f94e 	bl	800280e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	2200      	movs	r2, #0
 8002576:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002578:	68bb      	ldr	r3, [r7, #8]
 800257a:	f003 0310 	and.w	r3, r3, #16
 800257e:	2b00      	cmp	r3, #0
 8002580:	d020      	beq.n	80025c4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	f003 0310 	and.w	r3, r3, #16
 8002588:	2b00      	cmp	r3, #0
 800258a:	d01b      	beq.n	80025c4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	f06f 0210 	mvn.w	r2, #16
 8002594:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	2208      	movs	r2, #8
 800259a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	69db      	ldr	r3, [r3, #28]
 80025a2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d003      	beq.n	80025b2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80025aa:	6878      	ldr	r0, [r7, #4]
 80025ac:	f000 f926 	bl	80027fc <HAL_TIM_IC_CaptureCallback>
 80025b0:	e005      	b.n	80025be <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80025b2:	6878      	ldr	r0, [r7, #4]
 80025b4:	f000 f919 	bl	80027ea <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80025b8:	6878      	ldr	r0, [r7, #4]
 80025ba:	f000 f928 	bl	800280e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	2200      	movs	r2, #0
 80025c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80025c4:	68bb      	ldr	r3, [r7, #8]
 80025c6:	f003 0301 	and.w	r3, r3, #1
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d00c      	beq.n	80025e8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	f003 0301 	and.w	r3, r3, #1
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d007      	beq.n	80025e8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	f06f 0201 	mvn.w	r2, #1
 80025e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80025e2:	6878      	ldr	r0, [r7, #4]
 80025e4:	f7fe fb46 	bl	8000c74 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80025e8:	68bb      	ldr	r3, [r7, #8]
 80025ea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d00c      	beq.n	800260c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d007      	beq.n	800260c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8002604:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002606:	6878      	ldr	r0, [r7, #4]
 8002608:	f000 fa7f 	bl	8002b0a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800260c:	68bb      	ldr	r3, [r7, #8]
 800260e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002612:	2b00      	cmp	r3, #0
 8002614:	d00c      	beq.n	8002630 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800261c:	2b00      	cmp	r3, #0
 800261e:	d007      	beq.n	8002630 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8002628:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800262a:	6878      	ldr	r0, [r7, #4]
 800262c:	f000 f8f8 	bl	8002820 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002630:	68bb      	ldr	r3, [r7, #8]
 8002632:	f003 0320 	and.w	r3, r3, #32
 8002636:	2b00      	cmp	r3, #0
 8002638:	d00c      	beq.n	8002654 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	f003 0320 	and.w	r3, r3, #32
 8002640:	2b00      	cmp	r3, #0
 8002642:	d007      	beq.n	8002654 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	f06f 0220 	mvn.w	r2, #32
 800264c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800264e:	6878      	ldr	r0, [r7, #4]
 8002650:	f000 fa52 	bl	8002af8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002654:	bf00      	nop
 8002656:	3710      	adds	r7, #16
 8002658:	46bd      	mov	sp, r7
 800265a:	bd80      	pop	{r7, pc}

0800265c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800265c:	b580      	push	{r7, lr}
 800265e:	b084      	sub	sp, #16
 8002660:	af00      	add	r7, sp, #0
 8002662:	6078      	str	r0, [r7, #4]
 8002664:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002666:	2300      	movs	r3, #0
 8002668:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002670:	2b01      	cmp	r3, #1
 8002672:	d101      	bne.n	8002678 <HAL_TIM_ConfigClockSource+0x1c>
 8002674:	2302      	movs	r3, #2
 8002676:	e0b4      	b.n	80027e2 <HAL_TIM_ConfigClockSource+0x186>
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	2201      	movs	r2, #1
 800267c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	2202      	movs	r2, #2
 8002684:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	689b      	ldr	r3, [r3, #8]
 800268e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002690:	68bb      	ldr	r3, [r7, #8]
 8002692:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8002696:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002698:	68bb      	ldr	r3, [r7, #8]
 800269a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800269e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	68ba      	ldr	r2, [r7, #8]
 80026a6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80026a8:	683b      	ldr	r3, [r7, #0]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80026b0:	d03e      	beq.n	8002730 <HAL_TIM_ConfigClockSource+0xd4>
 80026b2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80026b6:	f200 8087 	bhi.w	80027c8 <HAL_TIM_ConfigClockSource+0x16c>
 80026ba:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80026be:	f000 8086 	beq.w	80027ce <HAL_TIM_ConfigClockSource+0x172>
 80026c2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80026c6:	d87f      	bhi.n	80027c8 <HAL_TIM_ConfigClockSource+0x16c>
 80026c8:	2b70      	cmp	r3, #112	@ 0x70
 80026ca:	d01a      	beq.n	8002702 <HAL_TIM_ConfigClockSource+0xa6>
 80026cc:	2b70      	cmp	r3, #112	@ 0x70
 80026ce:	d87b      	bhi.n	80027c8 <HAL_TIM_ConfigClockSource+0x16c>
 80026d0:	2b60      	cmp	r3, #96	@ 0x60
 80026d2:	d050      	beq.n	8002776 <HAL_TIM_ConfigClockSource+0x11a>
 80026d4:	2b60      	cmp	r3, #96	@ 0x60
 80026d6:	d877      	bhi.n	80027c8 <HAL_TIM_ConfigClockSource+0x16c>
 80026d8:	2b50      	cmp	r3, #80	@ 0x50
 80026da:	d03c      	beq.n	8002756 <HAL_TIM_ConfigClockSource+0xfa>
 80026dc:	2b50      	cmp	r3, #80	@ 0x50
 80026de:	d873      	bhi.n	80027c8 <HAL_TIM_ConfigClockSource+0x16c>
 80026e0:	2b40      	cmp	r3, #64	@ 0x40
 80026e2:	d058      	beq.n	8002796 <HAL_TIM_ConfigClockSource+0x13a>
 80026e4:	2b40      	cmp	r3, #64	@ 0x40
 80026e6:	d86f      	bhi.n	80027c8 <HAL_TIM_ConfigClockSource+0x16c>
 80026e8:	2b30      	cmp	r3, #48	@ 0x30
 80026ea:	d064      	beq.n	80027b6 <HAL_TIM_ConfigClockSource+0x15a>
 80026ec:	2b30      	cmp	r3, #48	@ 0x30
 80026ee:	d86b      	bhi.n	80027c8 <HAL_TIM_ConfigClockSource+0x16c>
 80026f0:	2b20      	cmp	r3, #32
 80026f2:	d060      	beq.n	80027b6 <HAL_TIM_ConfigClockSource+0x15a>
 80026f4:	2b20      	cmp	r3, #32
 80026f6:	d867      	bhi.n	80027c8 <HAL_TIM_ConfigClockSource+0x16c>
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d05c      	beq.n	80027b6 <HAL_TIM_ConfigClockSource+0x15a>
 80026fc:	2b10      	cmp	r3, #16
 80026fe:	d05a      	beq.n	80027b6 <HAL_TIM_ConfigClockSource+0x15a>
 8002700:	e062      	b.n	80027c8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002706:	683b      	ldr	r3, [r7, #0]
 8002708:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800270a:	683b      	ldr	r3, [r7, #0]
 800270c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800270e:	683b      	ldr	r3, [r7, #0]
 8002710:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002712:	f000 f974 	bl	80029fe <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	689b      	ldr	r3, [r3, #8]
 800271c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800271e:	68bb      	ldr	r3, [r7, #8]
 8002720:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8002724:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	68ba      	ldr	r2, [r7, #8]
 800272c:	609a      	str	r2, [r3, #8]
      break;
 800272e:	e04f      	b.n	80027d0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002734:	683b      	ldr	r3, [r7, #0]
 8002736:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002738:	683b      	ldr	r3, [r7, #0]
 800273a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800273c:	683b      	ldr	r3, [r7, #0]
 800273e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002740:	f000 f95d 	bl	80029fe <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	689a      	ldr	r2, [r3, #8]
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002752:	609a      	str	r2, [r3, #8]
      break;
 8002754:	e03c      	b.n	80027d0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800275a:	683b      	ldr	r3, [r7, #0]
 800275c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800275e:	683b      	ldr	r3, [r7, #0]
 8002760:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002762:	461a      	mov	r2, r3
 8002764:	f000 f8d4 	bl	8002910 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	2150      	movs	r1, #80	@ 0x50
 800276e:	4618      	mov	r0, r3
 8002770:	f000 f92b 	bl	80029ca <TIM_ITRx_SetConfig>
      break;
 8002774:	e02c      	b.n	80027d0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800277a:	683b      	ldr	r3, [r7, #0]
 800277c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800277e:	683b      	ldr	r3, [r7, #0]
 8002780:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002782:	461a      	mov	r2, r3
 8002784:	f000 f8f2 	bl	800296c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	2160      	movs	r1, #96	@ 0x60
 800278e:	4618      	mov	r0, r3
 8002790:	f000 f91b 	bl	80029ca <TIM_ITRx_SetConfig>
      break;
 8002794:	e01c      	b.n	80027d0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800279a:	683b      	ldr	r3, [r7, #0]
 800279c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800279e:	683b      	ldr	r3, [r7, #0]
 80027a0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80027a2:	461a      	mov	r2, r3
 80027a4:	f000 f8b4 	bl	8002910 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	2140      	movs	r1, #64	@ 0x40
 80027ae:	4618      	mov	r0, r3
 80027b0:	f000 f90b 	bl	80029ca <TIM_ITRx_SetConfig>
      break;
 80027b4:	e00c      	b.n	80027d0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681a      	ldr	r2, [r3, #0]
 80027ba:	683b      	ldr	r3, [r7, #0]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	4619      	mov	r1, r3
 80027c0:	4610      	mov	r0, r2
 80027c2:	f000 f902 	bl	80029ca <TIM_ITRx_SetConfig>
      break;
 80027c6:	e003      	b.n	80027d0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80027c8:	2301      	movs	r3, #1
 80027ca:	73fb      	strb	r3, [r7, #15]
      break;
 80027cc:	e000      	b.n	80027d0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80027ce:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	2201      	movs	r2, #1
 80027d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	2200      	movs	r2, #0
 80027dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80027e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80027e2:	4618      	mov	r0, r3
 80027e4:	3710      	adds	r7, #16
 80027e6:	46bd      	mov	sp, r7
 80027e8:	bd80      	pop	{r7, pc}

080027ea <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80027ea:	b480      	push	{r7}
 80027ec:	b083      	sub	sp, #12
 80027ee:	af00      	add	r7, sp, #0
 80027f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80027f2:	bf00      	nop
 80027f4:	370c      	adds	r7, #12
 80027f6:	46bd      	mov	sp, r7
 80027f8:	bc80      	pop	{r7}
 80027fa:	4770      	bx	lr

080027fc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80027fc:	b480      	push	{r7}
 80027fe:	b083      	sub	sp, #12
 8002800:	af00      	add	r7, sp, #0
 8002802:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002804:	bf00      	nop
 8002806:	370c      	adds	r7, #12
 8002808:	46bd      	mov	sp, r7
 800280a:	bc80      	pop	{r7}
 800280c:	4770      	bx	lr

0800280e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800280e:	b480      	push	{r7}
 8002810:	b083      	sub	sp, #12
 8002812:	af00      	add	r7, sp, #0
 8002814:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002816:	bf00      	nop
 8002818:	370c      	adds	r7, #12
 800281a:	46bd      	mov	sp, r7
 800281c:	bc80      	pop	{r7}
 800281e:	4770      	bx	lr

08002820 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002820:	b480      	push	{r7}
 8002822:	b083      	sub	sp, #12
 8002824:	af00      	add	r7, sp, #0
 8002826:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002828:	bf00      	nop
 800282a:	370c      	adds	r7, #12
 800282c:	46bd      	mov	sp, r7
 800282e:	bc80      	pop	{r7}
 8002830:	4770      	bx	lr
	...

08002834 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002834:	b480      	push	{r7}
 8002836:	b085      	sub	sp, #20
 8002838:	af00      	add	r7, sp, #0
 800283a:	6078      	str	r0, [r7, #4]
 800283c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	4a2f      	ldr	r2, [pc, #188]	@ (8002904 <TIM_Base_SetConfig+0xd0>)
 8002848:	4293      	cmp	r3, r2
 800284a:	d00b      	beq.n	8002864 <TIM_Base_SetConfig+0x30>
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002852:	d007      	beq.n	8002864 <TIM_Base_SetConfig+0x30>
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	4a2c      	ldr	r2, [pc, #176]	@ (8002908 <TIM_Base_SetConfig+0xd4>)
 8002858:	4293      	cmp	r3, r2
 800285a:	d003      	beq.n	8002864 <TIM_Base_SetConfig+0x30>
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	4a2b      	ldr	r2, [pc, #172]	@ (800290c <TIM_Base_SetConfig+0xd8>)
 8002860:	4293      	cmp	r3, r2
 8002862:	d108      	bne.n	8002876 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800286a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800286c:	683b      	ldr	r3, [r7, #0]
 800286e:	685b      	ldr	r3, [r3, #4]
 8002870:	68fa      	ldr	r2, [r7, #12]
 8002872:	4313      	orrs	r3, r2
 8002874:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	4a22      	ldr	r2, [pc, #136]	@ (8002904 <TIM_Base_SetConfig+0xd0>)
 800287a:	4293      	cmp	r3, r2
 800287c:	d00b      	beq.n	8002896 <TIM_Base_SetConfig+0x62>
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002884:	d007      	beq.n	8002896 <TIM_Base_SetConfig+0x62>
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	4a1f      	ldr	r2, [pc, #124]	@ (8002908 <TIM_Base_SetConfig+0xd4>)
 800288a:	4293      	cmp	r3, r2
 800288c:	d003      	beq.n	8002896 <TIM_Base_SetConfig+0x62>
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	4a1e      	ldr	r2, [pc, #120]	@ (800290c <TIM_Base_SetConfig+0xd8>)
 8002892:	4293      	cmp	r3, r2
 8002894:	d108      	bne.n	80028a8 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800289c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800289e:	683b      	ldr	r3, [r7, #0]
 80028a0:	68db      	ldr	r3, [r3, #12]
 80028a2:	68fa      	ldr	r2, [r7, #12]
 80028a4:	4313      	orrs	r3, r2
 80028a6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80028ae:	683b      	ldr	r3, [r7, #0]
 80028b0:	695b      	ldr	r3, [r3, #20]
 80028b2:	4313      	orrs	r3, r2
 80028b4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	68fa      	ldr	r2, [r7, #12]
 80028ba:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80028bc:	683b      	ldr	r3, [r7, #0]
 80028be:	689a      	ldr	r2, [r3, #8]
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80028c4:	683b      	ldr	r3, [r7, #0]
 80028c6:	681a      	ldr	r2, [r3, #0]
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	4a0d      	ldr	r2, [pc, #52]	@ (8002904 <TIM_Base_SetConfig+0xd0>)
 80028d0:	4293      	cmp	r3, r2
 80028d2:	d103      	bne.n	80028dc <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80028d4:	683b      	ldr	r3, [r7, #0]
 80028d6:	691a      	ldr	r2, [r3, #16]
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	2201      	movs	r2, #1
 80028e0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	691b      	ldr	r3, [r3, #16]
 80028e6:	f003 0301 	and.w	r3, r3, #1
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d005      	beq.n	80028fa <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	691b      	ldr	r3, [r3, #16]
 80028f2:	f023 0201 	bic.w	r2, r3, #1
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	611a      	str	r2, [r3, #16]
  }
}
 80028fa:	bf00      	nop
 80028fc:	3714      	adds	r7, #20
 80028fe:	46bd      	mov	sp, r7
 8002900:	bc80      	pop	{r7}
 8002902:	4770      	bx	lr
 8002904:	40012c00 	.word	0x40012c00
 8002908:	40000400 	.word	0x40000400
 800290c:	40000800 	.word	0x40000800

08002910 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002910:	b480      	push	{r7}
 8002912:	b087      	sub	sp, #28
 8002914:	af00      	add	r7, sp, #0
 8002916:	60f8      	str	r0, [r7, #12]
 8002918:	60b9      	str	r1, [r7, #8]
 800291a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	6a1b      	ldr	r3, [r3, #32]
 8002920:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	6a1b      	ldr	r3, [r3, #32]
 8002926:	f023 0201 	bic.w	r2, r3, #1
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	699b      	ldr	r3, [r3, #24]
 8002932:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002934:	693b      	ldr	r3, [r7, #16]
 8002936:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800293a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	011b      	lsls	r3, r3, #4
 8002940:	693a      	ldr	r2, [r7, #16]
 8002942:	4313      	orrs	r3, r2
 8002944:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002946:	697b      	ldr	r3, [r7, #20]
 8002948:	f023 030a 	bic.w	r3, r3, #10
 800294c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800294e:	697a      	ldr	r2, [r7, #20]
 8002950:	68bb      	ldr	r3, [r7, #8]
 8002952:	4313      	orrs	r3, r2
 8002954:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	693a      	ldr	r2, [r7, #16]
 800295a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	697a      	ldr	r2, [r7, #20]
 8002960:	621a      	str	r2, [r3, #32]
}
 8002962:	bf00      	nop
 8002964:	371c      	adds	r7, #28
 8002966:	46bd      	mov	sp, r7
 8002968:	bc80      	pop	{r7}
 800296a:	4770      	bx	lr

0800296c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800296c:	b480      	push	{r7}
 800296e:	b087      	sub	sp, #28
 8002970:	af00      	add	r7, sp, #0
 8002972:	60f8      	str	r0, [r7, #12]
 8002974:	60b9      	str	r1, [r7, #8]
 8002976:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	6a1b      	ldr	r3, [r3, #32]
 800297c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	6a1b      	ldr	r3, [r3, #32]
 8002982:	f023 0210 	bic.w	r2, r3, #16
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	699b      	ldr	r3, [r3, #24]
 800298e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002990:	693b      	ldr	r3, [r7, #16]
 8002992:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8002996:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	031b      	lsls	r3, r3, #12
 800299c:	693a      	ldr	r2, [r7, #16]
 800299e:	4313      	orrs	r3, r2
 80029a0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80029a2:	697b      	ldr	r3, [r7, #20]
 80029a4:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80029a8:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80029aa:	68bb      	ldr	r3, [r7, #8]
 80029ac:	011b      	lsls	r3, r3, #4
 80029ae:	697a      	ldr	r2, [r7, #20]
 80029b0:	4313      	orrs	r3, r2
 80029b2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	693a      	ldr	r2, [r7, #16]
 80029b8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	697a      	ldr	r2, [r7, #20]
 80029be:	621a      	str	r2, [r3, #32]
}
 80029c0:	bf00      	nop
 80029c2:	371c      	adds	r7, #28
 80029c4:	46bd      	mov	sp, r7
 80029c6:	bc80      	pop	{r7}
 80029c8:	4770      	bx	lr

080029ca <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80029ca:	b480      	push	{r7}
 80029cc:	b085      	sub	sp, #20
 80029ce:	af00      	add	r7, sp, #0
 80029d0:	6078      	str	r0, [r7, #4]
 80029d2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	689b      	ldr	r3, [r3, #8]
 80029d8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80029e0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80029e2:	683a      	ldr	r2, [r7, #0]
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	4313      	orrs	r3, r2
 80029e8:	f043 0307 	orr.w	r3, r3, #7
 80029ec:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	68fa      	ldr	r2, [r7, #12]
 80029f2:	609a      	str	r2, [r3, #8]
}
 80029f4:	bf00      	nop
 80029f6:	3714      	adds	r7, #20
 80029f8:	46bd      	mov	sp, r7
 80029fa:	bc80      	pop	{r7}
 80029fc:	4770      	bx	lr

080029fe <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80029fe:	b480      	push	{r7}
 8002a00:	b087      	sub	sp, #28
 8002a02:	af00      	add	r7, sp, #0
 8002a04:	60f8      	str	r0, [r7, #12]
 8002a06:	60b9      	str	r1, [r7, #8]
 8002a08:	607a      	str	r2, [r7, #4]
 8002a0a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	689b      	ldr	r3, [r3, #8]
 8002a10:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002a12:	697b      	ldr	r3, [r7, #20]
 8002a14:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002a18:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002a1a:	683b      	ldr	r3, [r7, #0]
 8002a1c:	021a      	lsls	r2, r3, #8
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	431a      	orrs	r2, r3
 8002a22:	68bb      	ldr	r3, [r7, #8]
 8002a24:	4313      	orrs	r3, r2
 8002a26:	697a      	ldr	r2, [r7, #20]
 8002a28:	4313      	orrs	r3, r2
 8002a2a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	697a      	ldr	r2, [r7, #20]
 8002a30:	609a      	str	r2, [r3, #8]
}
 8002a32:	bf00      	nop
 8002a34:	371c      	adds	r7, #28
 8002a36:	46bd      	mov	sp, r7
 8002a38:	bc80      	pop	{r7}
 8002a3a:	4770      	bx	lr

08002a3c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002a3c:	b480      	push	{r7}
 8002a3e:	b085      	sub	sp, #20
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	6078      	str	r0, [r7, #4]
 8002a44:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002a4c:	2b01      	cmp	r3, #1
 8002a4e:	d101      	bne.n	8002a54 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002a50:	2302      	movs	r3, #2
 8002a52:	e046      	b.n	8002ae2 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	2201      	movs	r2, #1
 8002a58:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	2202      	movs	r2, #2
 8002a60:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	685b      	ldr	r3, [r3, #4]
 8002a6a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	689b      	ldr	r3, [r3, #8]
 8002a72:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002a7a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002a7c:	683b      	ldr	r3, [r7, #0]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	68fa      	ldr	r2, [r7, #12]
 8002a82:	4313      	orrs	r3, r2
 8002a84:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	68fa      	ldr	r2, [r7, #12]
 8002a8c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	4a16      	ldr	r2, [pc, #88]	@ (8002aec <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8002a94:	4293      	cmp	r3, r2
 8002a96:	d00e      	beq.n	8002ab6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002aa0:	d009      	beq.n	8002ab6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	4a12      	ldr	r2, [pc, #72]	@ (8002af0 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8002aa8:	4293      	cmp	r3, r2
 8002aaa:	d004      	beq.n	8002ab6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	4a10      	ldr	r2, [pc, #64]	@ (8002af4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8002ab2:	4293      	cmp	r3, r2
 8002ab4:	d10c      	bne.n	8002ad0 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002ab6:	68bb      	ldr	r3, [r7, #8]
 8002ab8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002abc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002abe:	683b      	ldr	r3, [r7, #0]
 8002ac0:	685b      	ldr	r3, [r3, #4]
 8002ac2:	68ba      	ldr	r2, [r7, #8]
 8002ac4:	4313      	orrs	r3, r2
 8002ac6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	68ba      	ldr	r2, [r7, #8]
 8002ace:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	2201      	movs	r2, #1
 8002ad4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	2200      	movs	r2, #0
 8002adc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8002ae0:	2300      	movs	r3, #0
}
 8002ae2:	4618      	mov	r0, r3
 8002ae4:	3714      	adds	r7, #20
 8002ae6:	46bd      	mov	sp, r7
 8002ae8:	bc80      	pop	{r7}
 8002aea:	4770      	bx	lr
 8002aec:	40012c00 	.word	0x40012c00
 8002af0:	40000400 	.word	0x40000400
 8002af4:	40000800 	.word	0x40000800

08002af8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002af8:	b480      	push	{r7}
 8002afa:	b083      	sub	sp, #12
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002b00:	bf00      	nop
 8002b02:	370c      	adds	r7, #12
 8002b04:	46bd      	mov	sp, r7
 8002b06:	bc80      	pop	{r7}
 8002b08:	4770      	bx	lr

08002b0a <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002b0a:	b480      	push	{r7}
 8002b0c:	b083      	sub	sp, #12
 8002b0e:	af00      	add	r7, sp, #0
 8002b10:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002b12:	bf00      	nop
 8002b14:	370c      	adds	r7, #12
 8002b16:	46bd      	mov	sp, r7
 8002b18:	bc80      	pop	{r7}
 8002b1a:	4770      	bx	lr

08002b1c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002b1c:	b580      	push	{r7, lr}
 8002b1e:	b082      	sub	sp, #8
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d101      	bne.n	8002b2e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002b2a:	2301      	movs	r3, #1
 8002b2c:	e042      	b.n	8002bb4 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002b34:	b2db      	uxtb	r3, r3
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d106      	bne.n	8002b48 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	2200      	movs	r2, #0
 8002b3e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002b42:	6878      	ldr	r0, [r7, #4]
 8002b44:	f7fe fb06 	bl	8001154 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	2224      	movs	r2, #36	@ 0x24
 8002b4c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	68da      	ldr	r2, [r3, #12]
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002b5e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002b60:	6878      	ldr	r0, [r7, #4]
 8002b62:	f000 fcab 	bl	80034bc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	691a      	ldr	r2, [r3, #16]
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002b74:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	695a      	ldr	r2, [r3, #20]
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002b84:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	68da      	ldr	r2, [r3, #12]
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002b94:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	2200      	movs	r2, #0
 8002b9a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	2220      	movs	r2, #32
 8002ba0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	2220      	movs	r2, #32
 8002ba8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	2200      	movs	r2, #0
 8002bb0:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002bb2:	2300      	movs	r3, #0
}
 8002bb4:	4618      	mov	r0, r3
 8002bb6:	3708      	adds	r7, #8
 8002bb8:	46bd      	mov	sp, r7
 8002bba:	bd80      	pop	{r7, pc}

08002bbc <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8002bbc:	b480      	push	{r7}
 8002bbe:	b085      	sub	sp, #20
 8002bc0:	af00      	add	r7, sp, #0
 8002bc2:	60f8      	str	r0, [r7, #12]
 8002bc4:	60b9      	str	r1, [r7, #8]
 8002bc6:	4613      	mov	r3, r2
 8002bc8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002bd0:	b2db      	uxtb	r3, r3
 8002bd2:	2b20      	cmp	r3, #32
 8002bd4:	d121      	bne.n	8002c1a <HAL_UART_Transmit_IT+0x5e>
  {
    if ((pData == NULL) || (Size == 0U))
 8002bd6:	68bb      	ldr	r3, [r7, #8]
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d002      	beq.n	8002be2 <HAL_UART_Transmit_IT+0x26>
 8002bdc:	88fb      	ldrh	r3, [r7, #6]
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d101      	bne.n	8002be6 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8002be2:	2301      	movs	r3, #1
 8002be4:	e01a      	b.n	8002c1c <HAL_UART_Transmit_IT+0x60>
    }

    huart->pTxBuffPtr = pData;
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	68ba      	ldr	r2, [r7, #8]
 8002bea:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	88fa      	ldrh	r2, [r7, #6]
 8002bf0:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	88fa      	ldrh	r2, [r7, #6]
 8002bf6:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	2200      	movs	r2, #0
 8002bfc:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	2221      	movs	r2, #33	@ 0x21
 8002c02:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	68da      	ldr	r2, [r3, #12]
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8002c14:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8002c16:	2300      	movs	r3, #0
 8002c18:	e000      	b.n	8002c1c <HAL_UART_Transmit_IT+0x60>
  }
  else
  {
    return HAL_BUSY;
 8002c1a:	2302      	movs	r3, #2
  }
}
 8002c1c:	4618      	mov	r0, r3
 8002c1e:	3714      	adds	r7, #20
 8002c20:	46bd      	mov	sp, r7
 8002c22:	bc80      	pop	{r7}
 8002c24:	4770      	bx	lr
	...

08002c28 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002c28:	b580      	push	{r7, lr}
 8002c2a:	b0ba      	sub	sp, #232	@ 0xe8
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	68db      	ldr	r3, [r3, #12]
 8002c40:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	695b      	ldr	r3, [r3, #20]
 8002c4a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8002c4e:	2300      	movs	r3, #0
 8002c50:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8002c54:	2300      	movs	r3, #0
 8002c56:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002c5a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002c5e:	f003 030f 	and.w	r3, r3, #15
 8002c62:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8002c66:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d10f      	bne.n	8002c8e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002c6e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002c72:	f003 0320 	and.w	r3, r3, #32
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d009      	beq.n	8002c8e <HAL_UART_IRQHandler+0x66>
 8002c7a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002c7e:	f003 0320 	and.w	r3, r3, #32
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d003      	beq.n	8002c8e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8002c86:	6878      	ldr	r0, [r7, #4]
 8002c88:	f000 fb5a 	bl	8003340 <UART_Receive_IT>
      return;
 8002c8c:	e25b      	b.n	8003146 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8002c8e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	f000 80de 	beq.w	8002e54 <HAL_UART_IRQHandler+0x22c>
 8002c98:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002c9c:	f003 0301 	and.w	r3, r3, #1
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d106      	bne.n	8002cb2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002ca4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002ca8:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	f000 80d1 	beq.w	8002e54 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002cb2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002cb6:	f003 0301 	and.w	r3, r3, #1
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d00b      	beq.n	8002cd6 <HAL_UART_IRQHandler+0xae>
 8002cbe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002cc2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d005      	beq.n	8002cd6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002cce:	f043 0201 	orr.w	r2, r3, #1
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002cd6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002cda:	f003 0304 	and.w	r3, r3, #4
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d00b      	beq.n	8002cfa <HAL_UART_IRQHandler+0xd2>
 8002ce2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002ce6:	f003 0301 	and.w	r3, r3, #1
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d005      	beq.n	8002cfa <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002cf2:	f043 0202 	orr.w	r2, r3, #2
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002cfa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002cfe:	f003 0302 	and.w	r3, r3, #2
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d00b      	beq.n	8002d1e <HAL_UART_IRQHandler+0xf6>
 8002d06:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002d0a:	f003 0301 	and.w	r3, r3, #1
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d005      	beq.n	8002d1e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d16:	f043 0204 	orr.w	r2, r3, #4
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8002d1e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002d22:	f003 0308 	and.w	r3, r3, #8
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d011      	beq.n	8002d4e <HAL_UART_IRQHandler+0x126>
 8002d2a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002d2e:	f003 0320 	and.w	r3, r3, #32
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d105      	bne.n	8002d42 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8002d36:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002d3a:	f003 0301 	and.w	r3, r3, #1
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d005      	beq.n	8002d4e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d46:	f043 0208 	orr.w	r2, r3, #8
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	f000 81f2 	beq.w	800313c <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002d58:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002d5c:	f003 0320 	and.w	r3, r3, #32
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d008      	beq.n	8002d76 <HAL_UART_IRQHandler+0x14e>
 8002d64:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002d68:	f003 0320 	and.w	r3, r3, #32
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d002      	beq.n	8002d76 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8002d70:	6878      	ldr	r0, [r7, #4]
 8002d72:	f000 fae5 	bl	8003340 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	695b      	ldr	r3, [r3, #20]
 8002d7c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	bf14      	ite	ne
 8002d84:	2301      	movne	r3, #1
 8002d86:	2300      	moveq	r3, #0
 8002d88:	b2db      	uxtb	r3, r3
 8002d8a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d92:	f003 0308 	and.w	r3, r3, #8
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d103      	bne.n	8002da2 <HAL_UART_IRQHandler+0x17a>
 8002d9a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d04f      	beq.n	8002e42 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002da2:	6878      	ldr	r0, [r7, #4]
 8002da4:	f000 f9ef 	bl	8003186 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	695b      	ldr	r3, [r3, #20]
 8002dae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d041      	beq.n	8002e3a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	3314      	adds	r3, #20
 8002dbc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002dc0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002dc4:	e853 3f00 	ldrex	r3, [r3]
 8002dc8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8002dcc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002dd0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002dd4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	3314      	adds	r3, #20
 8002dde:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8002de2:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8002de6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002dea:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8002dee:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8002df2:	e841 2300 	strex	r3, r2, [r1]
 8002df6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8002dfa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d1d9      	bne.n	8002db6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d013      	beq.n	8002e32 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002e0e:	4a7e      	ldr	r2, [pc, #504]	@ (8003008 <HAL_UART_IRQHandler+0x3e0>)
 8002e10:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002e16:	4618      	mov	r0, r3
 8002e18:	f7fe fc3a 	bl	8001690 <HAL_DMA_Abort_IT>
 8002e1c:	4603      	mov	r3, r0
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d016      	beq.n	8002e50 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002e26:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002e28:	687a      	ldr	r2, [r7, #4]
 8002e2a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002e2c:	4610      	mov	r0, r2
 8002e2e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002e30:	e00e      	b.n	8002e50 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002e32:	6878      	ldr	r0, [r7, #4]
 8002e34:	f000 f993 	bl	800315e <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002e38:	e00a      	b.n	8002e50 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002e3a:	6878      	ldr	r0, [r7, #4]
 8002e3c:	f000 f98f 	bl	800315e <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002e40:	e006      	b.n	8002e50 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002e42:	6878      	ldr	r0, [r7, #4]
 8002e44:	f000 f98b 	bl	800315e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	2200      	movs	r2, #0
 8002e4c:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8002e4e:	e175      	b.n	800313c <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002e50:	bf00      	nop
    return;
 8002e52:	e173      	b.n	800313c <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e58:	2b01      	cmp	r3, #1
 8002e5a:	f040 814f 	bne.w	80030fc <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8002e5e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002e62:	f003 0310 	and.w	r3, r3, #16
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	f000 8148 	beq.w	80030fc <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8002e6c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002e70:	f003 0310 	and.w	r3, r3, #16
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	f000 8141 	beq.w	80030fc <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002e7a:	2300      	movs	r3, #0
 8002e7c:	60bb      	str	r3, [r7, #8]
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	60bb      	str	r3, [r7, #8]
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	685b      	ldr	r3, [r3, #4]
 8002e8c:	60bb      	str	r3, [r7, #8]
 8002e8e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	695b      	ldr	r3, [r3, #20]
 8002e96:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	f000 80b6 	beq.w	800300c <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	685b      	ldr	r3, [r3, #4]
 8002ea8:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002eac:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	f000 8145 	beq.w	8003140 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8002eba:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8002ebe:	429a      	cmp	r2, r3
 8002ec0:	f080 813e 	bcs.w	8003140 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8002eca:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ed0:	699b      	ldr	r3, [r3, #24]
 8002ed2:	2b20      	cmp	r3, #32
 8002ed4:	f000 8088 	beq.w	8002fe8 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	330c      	adds	r3, #12
 8002ede:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ee2:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002ee6:	e853 3f00 	ldrex	r3, [r3]
 8002eea:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8002eee:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002ef2:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002ef6:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	330c      	adds	r3, #12
 8002f00:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8002f04:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8002f08:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f0c:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8002f10:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8002f14:	e841 2300 	strex	r3, r2, [r1]
 8002f18:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8002f1c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d1d9      	bne.n	8002ed8 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	3314      	adds	r3, #20
 8002f2a:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f2c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002f2e:	e853 3f00 	ldrex	r3, [r3]
 8002f32:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8002f34:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002f36:	f023 0301 	bic.w	r3, r3, #1
 8002f3a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	3314      	adds	r3, #20
 8002f44:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8002f48:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8002f4c:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f4e:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8002f50:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8002f54:	e841 2300 	strex	r3, r2, [r1]
 8002f58:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8002f5a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d1e1      	bne.n	8002f24 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	3314      	adds	r3, #20
 8002f66:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f68:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002f6a:	e853 3f00 	ldrex	r3, [r3]
 8002f6e:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8002f70:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002f72:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002f76:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	3314      	adds	r3, #20
 8002f80:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8002f84:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8002f86:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f88:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8002f8a:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8002f8c:	e841 2300 	strex	r3, r2, [r1]
 8002f90:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8002f92:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d1e3      	bne.n	8002f60 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	2220      	movs	r2, #32
 8002f9c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	2200      	movs	r2, #0
 8002fa4:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	330c      	adds	r3, #12
 8002fac:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002fae:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002fb0:	e853 3f00 	ldrex	r3, [r3]
 8002fb4:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8002fb6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002fb8:	f023 0310 	bic.w	r3, r3, #16
 8002fbc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	330c      	adds	r3, #12
 8002fc6:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8002fca:	65ba      	str	r2, [r7, #88]	@ 0x58
 8002fcc:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002fce:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8002fd0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8002fd2:	e841 2300 	strex	r3, r2, [r1]
 8002fd6:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8002fd8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d1e3      	bne.n	8002fa6 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002fe2:	4618      	mov	r0, r3
 8002fe4:	f7fe fb19 	bl	800161a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	2202      	movs	r2, #2
 8002fec:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002ff6:	b29b      	uxth	r3, r3
 8002ff8:	1ad3      	subs	r3, r2, r3
 8002ffa:	b29b      	uxth	r3, r3
 8002ffc:	4619      	mov	r1, r3
 8002ffe:	6878      	ldr	r0, [r7, #4]
 8003000:	f000 f8b6 	bl	8003170 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003004:	e09c      	b.n	8003140 <HAL_UART_IRQHandler+0x518>
 8003006:	bf00      	nop
 8003008:	0800324b 	.word	0x0800324b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003014:	b29b      	uxth	r3, r3
 8003016:	1ad3      	subs	r3, r2, r3
 8003018:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003020:	b29b      	uxth	r3, r3
 8003022:	2b00      	cmp	r3, #0
 8003024:	f000 808e 	beq.w	8003144 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8003028:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800302c:	2b00      	cmp	r3, #0
 800302e:	f000 8089 	beq.w	8003144 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	330c      	adds	r3, #12
 8003038:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800303a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800303c:	e853 3f00 	ldrex	r3, [r3]
 8003040:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003042:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003044:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003048:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	330c      	adds	r3, #12
 8003052:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8003056:	647a      	str	r2, [r7, #68]	@ 0x44
 8003058:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800305a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800305c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800305e:	e841 2300 	strex	r3, r2, [r1]
 8003062:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003064:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003066:	2b00      	cmp	r3, #0
 8003068:	d1e3      	bne.n	8003032 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	3314      	adds	r3, #20
 8003070:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003072:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003074:	e853 3f00 	ldrex	r3, [r3]
 8003078:	623b      	str	r3, [r7, #32]
   return(result);
 800307a:	6a3b      	ldr	r3, [r7, #32]
 800307c:	f023 0301 	bic.w	r3, r3, #1
 8003080:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	3314      	adds	r3, #20
 800308a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800308e:	633a      	str	r2, [r7, #48]	@ 0x30
 8003090:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003092:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003094:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003096:	e841 2300 	strex	r3, r2, [r1]
 800309a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800309c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d1e3      	bne.n	800306a <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	2220      	movs	r2, #32
 80030a6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	2200      	movs	r2, #0
 80030ae:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	330c      	adds	r3, #12
 80030b6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030b8:	693b      	ldr	r3, [r7, #16]
 80030ba:	e853 3f00 	ldrex	r3, [r3]
 80030be:	60fb      	str	r3, [r7, #12]
   return(result);
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	f023 0310 	bic.w	r3, r3, #16
 80030c6:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	330c      	adds	r3, #12
 80030d0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80030d4:	61fa      	str	r2, [r7, #28]
 80030d6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030d8:	69b9      	ldr	r1, [r7, #24]
 80030da:	69fa      	ldr	r2, [r7, #28]
 80030dc:	e841 2300 	strex	r3, r2, [r1]
 80030e0:	617b      	str	r3, [r7, #20]
   return(result);
 80030e2:	697b      	ldr	r3, [r7, #20]
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d1e3      	bne.n	80030b0 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	2202      	movs	r2, #2
 80030ec:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80030ee:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80030f2:	4619      	mov	r1, r3
 80030f4:	6878      	ldr	r0, [r7, #4]
 80030f6:	f000 f83b 	bl	8003170 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80030fa:	e023      	b.n	8003144 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80030fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003100:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003104:	2b00      	cmp	r3, #0
 8003106:	d009      	beq.n	800311c <HAL_UART_IRQHandler+0x4f4>
 8003108:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800310c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003110:	2b00      	cmp	r3, #0
 8003112:	d003      	beq.n	800311c <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8003114:	6878      	ldr	r0, [r7, #4]
 8003116:	f000 f8ac 	bl	8003272 <UART_Transmit_IT>
    return;
 800311a:	e014      	b.n	8003146 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800311c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003120:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003124:	2b00      	cmp	r3, #0
 8003126:	d00e      	beq.n	8003146 <HAL_UART_IRQHandler+0x51e>
 8003128:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800312c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003130:	2b00      	cmp	r3, #0
 8003132:	d008      	beq.n	8003146 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8003134:	6878      	ldr	r0, [r7, #4]
 8003136:	f000 f8eb 	bl	8003310 <UART_EndTransmit_IT>
    return;
 800313a:	e004      	b.n	8003146 <HAL_UART_IRQHandler+0x51e>
    return;
 800313c:	bf00      	nop
 800313e:	e002      	b.n	8003146 <HAL_UART_IRQHandler+0x51e>
      return;
 8003140:	bf00      	nop
 8003142:	e000      	b.n	8003146 <HAL_UART_IRQHandler+0x51e>
      return;
 8003144:	bf00      	nop
  }
}
 8003146:	37e8      	adds	r7, #232	@ 0xe8
 8003148:	46bd      	mov	sp, r7
 800314a:	bd80      	pop	{r7, pc}

0800314c <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800314c:	b480      	push	{r7}
 800314e:	b083      	sub	sp, #12
 8003150:	af00      	add	r7, sp, #0
 8003152:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8003154:	bf00      	nop
 8003156:	370c      	adds	r7, #12
 8003158:	46bd      	mov	sp, r7
 800315a:	bc80      	pop	{r7}
 800315c:	4770      	bx	lr

0800315e <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800315e:	b480      	push	{r7}
 8003160:	b083      	sub	sp, #12
 8003162:	af00      	add	r7, sp, #0
 8003164:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003166:	bf00      	nop
 8003168:	370c      	adds	r7, #12
 800316a:	46bd      	mov	sp, r7
 800316c:	bc80      	pop	{r7}
 800316e:	4770      	bx	lr

08003170 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003170:	b480      	push	{r7}
 8003172:	b083      	sub	sp, #12
 8003174:	af00      	add	r7, sp, #0
 8003176:	6078      	str	r0, [r7, #4]
 8003178:	460b      	mov	r3, r1
 800317a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800317c:	bf00      	nop
 800317e:	370c      	adds	r7, #12
 8003180:	46bd      	mov	sp, r7
 8003182:	bc80      	pop	{r7}
 8003184:	4770      	bx	lr

08003186 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003186:	b480      	push	{r7}
 8003188:	b095      	sub	sp, #84	@ 0x54
 800318a:	af00      	add	r7, sp, #0
 800318c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	330c      	adds	r3, #12
 8003194:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003196:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003198:	e853 3f00 	ldrex	r3, [r3]
 800319c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800319e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80031a0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80031a4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	330c      	adds	r3, #12
 80031ac:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80031ae:	643a      	str	r2, [r7, #64]	@ 0x40
 80031b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031b2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80031b4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80031b6:	e841 2300 	strex	r3, r2, [r1]
 80031ba:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80031bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d1e5      	bne.n	800318e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	3314      	adds	r3, #20
 80031c8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031ca:	6a3b      	ldr	r3, [r7, #32]
 80031cc:	e853 3f00 	ldrex	r3, [r3]
 80031d0:	61fb      	str	r3, [r7, #28]
   return(result);
 80031d2:	69fb      	ldr	r3, [r7, #28]
 80031d4:	f023 0301 	bic.w	r3, r3, #1
 80031d8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	3314      	adds	r3, #20
 80031e0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80031e2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80031e4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031e6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80031e8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80031ea:	e841 2300 	strex	r3, r2, [r1]
 80031ee:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80031f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d1e5      	bne.n	80031c2 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031fa:	2b01      	cmp	r3, #1
 80031fc:	d119      	bne.n	8003232 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	330c      	adds	r3, #12
 8003204:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	e853 3f00 	ldrex	r3, [r3]
 800320c:	60bb      	str	r3, [r7, #8]
   return(result);
 800320e:	68bb      	ldr	r3, [r7, #8]
 8003210:	f023 0310 	bic.w	r3, r3, #16
 8003214:	647b      	str	r3, [r7, #68]	@ 0x44
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	330c      	adds	r3, #12
 800321c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800321e:	61ba      	str	r2, [r7, #24]
 8003220:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003222:	6979      	ldr	r1, [r7, #20]
 8003224:	69ba      	ldr	r2, [r7, #24]
 8003226:	e841 2300 	strex	r3, r2, [r1]
 800322a:	613b      	str	r3, [r7, #16]
   return(result);
 800322c:	693b      	ldr	r3, [r7, #16]
 800322e:	2b00      	cmp	r3, #0
 8003230:	d1e5      	bne.n	80031fe <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	2220      	movs	r2, #32
 8003236:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	2200      	movs	r2, #0
 800323e:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8003240:	bf00      	nop
 8003242:	3754      	adds	r7, #84	@ 0x54
 8003244:	46bd      	mov	sp, r7
 8003246:	bc80      	pop	{r7}
 8003248:	4770      	bx	lr

0800324a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800324a:	b580      	push	{r7, lr}
 800324c:	b084      	sub	sp, #16
 800324e:	af00      	add	r7, sp, #0
 8003250:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003256:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	2200      	movs	r2, #0
 800325c:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	2200      	movs	r2, #0
 8003262:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003264:	68f8      	ldr	r0, [r7, #12]
 8003266:	f7ff ff7a 	bl	800315e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800326a:	bf00      	nop
 800326c:	3710      	adds	r7, #16
 800326e:	46bd      	mov	sp, r7
 8003270:	bd80      	pop	{r7, pc}

08003272 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003272:	b480      	push	{r7}
 8003274:	b085      	sub	sp, #20
 8003276:	af00      	add	r7, sp, #0
 8003278:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003280:	b2db      	uxtb	r3, r3
 8003282:	2b21      	cmp	r3, #33	@ 0x21
 8003284:	d13e      	bne.n	8003304 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	689b      	ldr	r3, [r3, #8]
 800328a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800328e:	d114      	bne.n	80032ba <UART_Transmit_IT+0x48>
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	691b      	ldr	r3, [r3, #16]
 8003294:	2b00      	cmp	r3, #0
 8003296:	d110      	bne.n	80032ba <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	6a1b      	ldr	r3, [r3, #32]
 800329c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	881b      	ldrh	r3, [r3, #0]
 80032a2:	461a      	mov	r2, r3
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80032ac:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	6a1b      	ldr	r3, [r3, #32]
 80032b2:	1c9a      	adds	r2, r3, #2
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	621a      	str	r2, [r3, #32]
 80032b8:	e008      	b.n	80032cc <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	6a1b      	ldr	r3, [r3, #32]
 80032be:	1c59      	adds	r1, r3, #1
 80032c0:	687a      	ldr	r2, [r7, #4]
 80032c2:	6211      	str	r1, [r2, #32]
 80032c4:	781a      	ldrb	r2, [r3, #0]
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80032d0:	b29b      	uxth	r3, r3
 80032d2:	3b01      	subs	r3, #1
 80032d4:	b29b      	uxth	r3, r3
 80032d6:	687a      	ldr	r2, [r7, #4]
 80032d8:	4619      	mov	r1, r3
 80032da:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d10f      	bne.n	8003300 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	68da      	ldr	r2, [r3, #12]
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80032ee:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	68da      	ldr	r2, [r3, #12]
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80032fe:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003300:	2300      	movs	r3, #0
 8003302:	e000      	b.n	8003306 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003304:	2302      	movs	r3, #2
  }
}
 8003306:	4618      	mov	r0, r3
 8003308:	3714      	adds	r7, #20
 800330a:	46bd      	mov	sp, r7
 800330c:	bc80      	pop	{r7}
 800330e:	4770      	bx	lr

08003310 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003310:	b580      	push	{r7, lr}
 8003312:	b082      	sub	sp, #8
 8003314:	af00      	add	r7, sp, #0
 8003316:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	68da      	ldr	r2, [r3, #12]
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003326:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	2220      	movs	r2, #32
 800332c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003330:	6878      	ldr	r0, [r7, #4]
 8003332:	f7fd fc6d 	bl	8000c10 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003336:	2300      	movs	r3, #0
}
 8003338:	4618      	mov	r0, r3
 800333a:	3708      	adds	r7, #8
 800333c:	46bd      	mov	sp, r7
 800333e:	bd80      	pop	{r7, pc}

08003340 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003340:	b580      	push	{r7, lr}
 8003342:	b08c      	sub	sp, #48	@ 0x30
 8003344:	af00      	add	r7, sp, #0
 8003346:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800334e:	b2db      	uxtb	r3, r3
 8003350:	2b22      	cmp	r3, #34	@ 0x22
 8003352:	f040 80ae 	bne.w	80034b2 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	689b      	ldr	r3, [r3, #8]
 800335a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800335e:	d117      	bne.n	8003390 <UART_Receive_IT+0x50>
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	691b      	ldr	r3, [r3, #16]
 8003364:	2b00      	cmp	r3, #0
 8003366:	d113      	bne.n	8003390 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003368:	2300      	movs	r3, #0
 800336a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003370:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	685b      	ldr	r3, [r3, #4]
 8003378:	b29b      	uxth	r3, r3
 800337a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800337e:	b29a      	uxth	r2, r3
 8003380:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003382:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003388:	1c9a      	adds	r2, r3, #2
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	629a      	str	r2, [r3, #40]	@ 0x28
 800338e:	e026      	b.n	80033de <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003394:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8003396:	2300      	movs	r3, #0
 8003398:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	689b      	ldr	r3, [r3, #8]
 800339e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80033a2:	d007      	beq.n	80033b4 <UART_Receive_IT+0x74>
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	689b      	ldr	r3, [r3, #8]
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d10a      	bne.n	80033c2 <UART_Receive_IT+0x82>
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	691b      	ldr	r3, [r3, #16]
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d106      	bne.n	80033c2 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	685b      	ldr	r3, [r3, #4]
 80033ba:	b2da      	uxtb	r2, r3
 80033bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80033be:	701a      	strb	r2, [r3, #0]
 80033c0:	e008      	b.n	80033d4 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	685b      	ldr	r3, [r3, #4]
 80033c8:	b2db      	uxtb	r3, r3
 80033ca:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80033ce:	b2da      	uxtb	r2, r3
 80033d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80033d2:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80033d8:	1c5a      	adds	r2, r3, #1
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80033e2:	b29b      	uxth	r3, r3
 80033e4:	3b01      	subs	r3, #1
 80033e6:	b29b      	uxth	r3, r3
 80033e8:	687a      	ldr	r2, [r7, #4]
 80033ea:	4619      	mov	r1, r3
 80033ec:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d15d      	bne.n	80034ae <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	68da      	ldr	r2, [r3, #12]
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	f022 0220 	bic.w	r2, r2, #32
 8003400:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	68da      	ldr	r2, [r3, #12]
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003410:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	695a      	ldr	r2, [r3, #20]
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	f022 0201 	bic.w	r2, r2, #1
 8003420:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	2220      	movs	r2, #32
 8003426:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	2200      	movs	r2, #0
 800342e:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003434:	2b01      	cmp	r3, #1
 8003436:	d135      	bne.n	80034a4 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	2200      	movs	r2, #0
 800343c:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	330c      	adds	r3, #12
 8003444:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003446:	697b      	ldr	r3, [r7, #20]
 8003448:	e853 3f00 	ldrex	r3, [r3]
 800344c:	613b      	str	r3, [r7, #16]
   return(result);
 800344e:	693b      	ldr	r3, [r7, #16]
 8003450:	f023 0310 	bic.w	r3, r3, #16
 8003454:	627b      	str	r3, [r7, #36]	@ 0x24
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	330c      	adds	r3, #12
 800345c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800345e:	623a      	str	r2, [r7, #32]
 8003460:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003462:	69f9      	ldr	r1, [r7, #28]
 8003464:	6a3a      	ldr	r2, [r7, #32]
 8003466:	e841 2300 	strex	r3, r2, [r1]
 800346a:	61bb      	str	r3, [r7, #24]
   return(result);
 800346c:	69bb      	ldr	r3, [r7, #24]
 800346e:	2b00      	cmp	r3, #0
 8003470:	d1e5      	bne.n	800343e <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	f003 0310 	and.w	r3, r3, #16
 800347c:	2b10      	cmp	r3, #16
 800347e:	d10a      	bne.n	8003496 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003480:	2300      	movs	r3, #0
 8003482:	60fb      	str	r3, [r7, #12]
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	60fb      	str	r3, [r7, #12]
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	685b      	ldr	r3, [r3, #4]
 8003492:	60fb      	str	r3, [r7, #12]
 8003494:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800349a:	4619      	mov	r1, r3
 800349c:	6878      	ldr	r0, [r7, #4]
 800349e:	f7ff fe67 	bl	8003170 <HAL_UARTEx_RxEventCallback>
 80034a2:	e002      	b.n	80034aa <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80034a4:	6878      	ldr	r0, [r7, #4]
 80034a6:	f7ff fe51 	bl	800314c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80034aa:	2300      	movs	r3, #0
 80034ac:	e002      	b.n	80034b4 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80034ae:	2300      	movs	r3, #0
 80034b0:	e000      	b.n	80034b4 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80034b2:	2302      	movs	r3, #2
  }
}
 80034b4:	4618      	mov	r0, r3
 80034b6:	3730      	adds	r7, #48	@ 0x30
 80034b8:	46bd      	mov	sp, r7
 80034ba:	bd80      	pop	{r7, pc}

080034bc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80034bc:	b580      	push	{r7, lr}
 80034be:	b084      	sub	sp, #16
 80034c0:	af00      	add	r7, sp, #0
 80034c2:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	691b      	ldr	r3, [r3, #16]
 80034ca:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	68da      	ldr	r2, [r3, #12]
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	430a      	orrs	r2, r1
 80034d8:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	689a      	ldr	r2, [r3, #8]
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	691b      	ldr	r3, [r3, #16]
 80034e2:	431a      	orrs	r2, r3
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	695b      	ldr	r3, [r3, #20]
 80034e8:	4313      	orrs	r3, r2
 80034ea:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	68db      	ldr	r3, [r3, #12]
 80034f2:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 80034f6:	f023 030c 	bic.w	r3, r3, #12
 80034fa:	687a      	ldr	r2, [r7, #4]
 80034fc:	6812      	ldr	r2, [r2, #0]
 80034fe:	68b9      	ldr	r1, [r7, #8]
 8003500:	430b      	orrs	r3, r1
 8003502:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	695b      	ldr	r3, [r3, #20]
 800350a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	699a      	ldr	r2, [r3, #24]
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	430a      	orrs	r2, r1
 8003518:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	4a2c      	ldr	r2, [pc, #176]	@ (80035d0 <UART_SetConfig+0x114>)
 8003520:	4293      	cmp	r3, r2
 8003522:	d103      	bne.n	800352c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003524:	f7fe fed6 	bl	80022d4 <HAL_RCC_GetPCLK2Freq>
 8003528:	60f8      	str	r0, [r7, #12]
 800352a:	e002      	b.n	8003532 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800352c:	f7fe febe 	bl	80022ac <HAL_RCC_GetPCLK1Freq>
 8003530:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003532:	68fa      	ldr	r2, [r7, #12]
 8003534:	4613      	mov	r3, r2
 8003536:	009b      	lsls	r3, r3, #2
 8003538:	4413      	add	r3, r2
 800353a:	009a      	lsls	r2, r3, #2
 800353c:	441a      	add	r2, r3
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	685b      	ldr	r3, [r3, #4]
 8003542:	009b      	lsls	r3, r3, #2
 8003544:	fbb2 f3f3 	udiv	r3, r2, r3
 8003548:	4a22      	ldr	r2, [pc, #136]	@ (80035d4 <UART_SetConfig+0x118>)
 800354a:	fba2 2303 	umull	r2, r3, r2, r3
 800354e:	095b      	lsrs	r3, r3, #5
 8003550:	0119      	lsls	r1, r3, #4
 8003552:	68fa      	ldr	r2, [r7, #12]
 8003554:	4613      	mov	r3, r2
 8003556:	009b      	lsls	r3, r3, #2
 8003558:	4413      	add	r3, r2
 800355a:	009a      	lsls	r2, r3, #2
 800355c:	441a      	add	r2, r3
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	685b      	ldr	r3, [r3, #4]
 8003562:	009b      	lsls	r3, r3, #2
 8003564:	fbb2 f2f3 	udiv	r2, r2, r3
 8003568:	4b1a      	ldr	r3, [pc, #104]	@ (80035d4 <UART_SetConfig+0x118>)
 800356a:	fba3 0302 	umull	r0, r3, r3, r2
 800356e:	095b      	lsrs	r3, r3, #5
 8003570:	2064      	movs	r0, #100	@ 0x64
 8003572:	fb00 f303 	mul.w	r3, r0, r3
 8003576:	1ad3      	subs	r3, r2, r3
 8003578:	011b      	lsls	r3, r3, #4
 800357a:	3332      	adds	r3, #50	@ 0x32
 800357c:	4a15      	ldr	r2, [pc, #84]	@ (80035d4 <UART_SetConfig+0x118>)
 800357e:	fba2 2303 	umull	r2, r3, r2, r3
 8003582:	095b      	lsrs	r3, r3, #5
 8003584:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003588:	4419      	add	r1, r3
 800358a:	68fa      	ldr	r2, [r7, #12]
 800358c:	4613      	mov	r3, r2
 800358e:	009b      	lsls	r3, r3, #2
 8003590:	4413      	add	r3, r2
 8003592:	009a      	lsls	r2, r3, #2
 8003594:	441a      	add	r2, r3
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	685b      	ldr	r3, [r3, #4]
 800359a:	009b      	lsls	r3, r3, #2
 800359c:	fbb2 f2f3 	udiv	r2, r2, r3
 80035a0:	4b0c      	ldr	r3, [pc, #48]	@ (80035d4 <UART_SetConfig+0x118>)
 80035a2:	fba3 0302 	umull	r0, r3, r3, r2
 80035a6:	095b      	lsrs	r3, r3, #5
 80035a8:	2064      	movs	r0, #100	@ 0x64
 80035aa:	fb00 f303 	mul.w	r3, r0, r3
 80035ae:	1ad3      	subs	r3, r2, r3
 80035b0:	011b      	lsls	r3, r3, #4
 80035b2:	3332      	adds	r3, #50	@ 0x32
 80035b4:	4a07      	ldr	r2, [pc, #28]	@ (80035d4 <UART_SetConfig+0x118>)
 80035b6:	fba2 2303 	umull	r2, r3, r2, r3
 80035ba:	095b      	lsrs	r3, r3, #5
 80035bc:	f003 020f 	and.w	r2, r3, #15
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	440a      	add	r2, r1
 80035c6:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80035c8:	bf00      	nop
 80035ca:	3710      	adds	r7, #16
 80035cc:	46bd      	mov	sp, r7
 80035ce:	bd80      	pop	{r7, pc}
 80035d0:	40013800 	.word	0x40013800
 80035d4:	51eb851f 	.word	0x51eb851f

080035d8 <siprintf>:
 80035d8:	b40e      	push	{r1, r2, r3}
 80035da:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80035de:	b500      	push	{lr}
 80035e0:	b09c      	sub	sp, #112	@ 0x70
 80035e2:	ab1d      	add	r3, sp, #116	@ 0x74
 80035e4:	9002      	str	r0, [sp, #8]
 80035e6:	9006      	str	r0, [sp, #24]
 80035e8:	9107      	str	r1, [sp, #28]
 80035ea:	9104      	str	r1, [sp, #16]
 80035ec:	4808      	ldr	r0, [pc, #32]	@ (8003610 <siprintf+0x38>)
 80035ee:	4909      	ldr	r1, [pc, #36]	@ (8003614 <siprintf+0x3c>)
 80035f0:	f853 2b04 	ldr.w	r2, [r3], #4
 80035f4:	9105      	str	r1, [sp, #20]
 80035f6:	6800      	ldr	r0, [r0, #0]
 80035f8:	a902      	add	r1, sp, #8
 80035fa:	9301      	str	r3, [sp, #4]
 80035fc:	f000 f992 	bl	8003924 <_svfiprintf_r>
 8003600:	2200      	movs	r2, #0
 8003602:	9b02      	ldr	r3, [sp, #8]
 8003604:	701a      	strb	r2, [r3, #0]
 8003606:	b01c      	add	sp, #112	@ 0x70
 8003608:	f85d eb04 	ldr.w	lr, [sp], #4
 800360c:	b003      	add	sp, #12
 800360e:	4770      	bx	lr
 8003610:	20000080 	.word	0x20000080
 8003614:	ffff0208 	.word	0xffff0208

08003618 <memset>:
 8003618:	4603      	mov	r3, r0
 800361a:	4402      	add	r2, r0
 800361c:	4293      	cmp	r3, r2
 800361e:	d100      	bne.n	8003622 <memset+0xa>
 8003620:	4770      	bx	lr
 8003622:	f803 1b01 	strb.w	r1, [r3], #1
 8003626:	e7f9      	b.n	800361c <memset+0x4>

08003628 <__errno>:
 8003628:	4b01      	ldr	r3, [pc, #4]	@ (8003630 <__errno+0x8>)
 800362a:	6818      	ldr	r0, [r3, #0]
 800362c:	4770      	bx	lr
 800362e:	bf00      	nop
 8003630:	20000080 	.word	0x20000080

08003634 <__libc_init_array>:
 8003634:	b570      	push	{r4, r5, r6, lr}
 8003636:	2600      	movs	r6, #0
 8003638:	4d0c      	ldr	r5, [pc, #48]	@ (800366c <__libc_init_array+0x38>)
 800363a:	4c0d      	ldr	r4, [pc, #52]	@ (8003670 <__libc_init_array+0x3c>)
 800363c:	1b64      	subs	r4, r4, r5
 800363e:	10a4      	asrs	r4, r4, #2
 8003640:	42a6      	cmp	r6, r4
 8003642:	d109      	bne.n	8003658 <__libc_init_array+0x24>
 8003644:	f000 fc78 	bl	8003f38 <_init>
 8003648:	2600      	movs	r6, #0
 800364a:	4d0a      	ldr	r5, [pc, #40]	@ (8003674 <__libc_init_array+0x40>)
 800364c:	4c0a      	ldr	r4, [pc, #40]	@ (8003678 <__libc_init_array+0x44>)
 800364e:	1b64      	subs	r4, r4, r5
 8003650:	10a4      	asrs	r4, r4, #2
 8003652:	42a6      	cmp	r6, r4
 8003654:	d105      	bne.n	8003662 <__libc_init_array+0x2e>
 8003656:	bd70      	pop	{r4, r5, r6, pc}
 8003658:	f855 3b04 	ldr.w	r3, [r5], #4
 800365c:	4798      	blx	r3
 800365e:	3601      	adds	r6, #1
 8003660:	e7ee      	b.n	8003640 <__libc_init_array+0xc>
 8003662:	f855 3b04 	ldr.w	r3, [r5], #4
 8003666:	4798      	blx	r3
 8003668:	3601      	adds	r6, #1
 800366a:	e7f2      	b.n	8003652 <__libc_init_array+0x1e>
 800366c:	080040cc 	.word	0x080040cc
 8003670:	080040cc 	.word	0x080040cc
 8003674:	080040cc 	.word	0x080040cc
 8003678:	080040d0 	.word	0x080040d0

0800367c <__retarget_lock_acquire_recursive>:
 800367c:	4770      	bx	lr

0800367e <__retarget_lock_release_recursive>:
 800367e:	4770      	bx	lr

08003680 <_free_r>:
 8003680:	b538      	push	{r3, r4, r5, lr}
 8003682:	4605      	mov	r5, r0
 8003684:	2900      	cmp	r1, #0
 8003686:	d040      	beq.n	800370a <_free_r+0x8a>
 8003688:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800368c:	1f0c      	subs	r4, r1, #4
 800368e:	2b00      	cmp	r3, #0
 8003690:	bfb8      	it	lt
 8003692:	18e4      	addlt	r4, r4, r3
 8003694:	f000 f8de 	bl	8003854 <__malloc_lock>
 8003698:	4a1c      	ldr	r2, [pc, #112]	@ (800370c <_free_r+0x8c>)
 800369a:	6813      	ldr	r3, [r2, #0]
 800369c:	b933      	cbnz	r3, 80036ac <_free_r+0x2c>
 800369e:	6063      	str	r3, [r4, #4]
 80036a0:	6014      	str	r4, [r2, #0]
 80036a2:	4628      	mov	r0, r5
 80036a4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80036a8:	f000 b8da 	b.w	8003860 <__malloc_unlock>
 80036ac:	42a3      	cmp	r3, r4
 80036ae:	d908      	bls.n	80036c2 <_free_r+0x42>
 80036b0:	6820      	ldr	r0, [r4, #0]
 80036b2:	1821      	adds	r1, r4, r0
 80036b4:	428b      	cmp	r3, r1
 80036b6:	bf01      	itttt	eq
 80036b8:	6819      	ldreq	r1, [r3, #0]
 80036ba:	685b      	ldreq	r3, [r3, #4]
 80036bc:	1809      	addeq	r1, r1, r0
 80036be:	6021      	streq	r1, [r4, #0]
 80036c0:	e7ed      	b.n	800369e <_free_r+0x1e>
 80036c2:	461a      	mov	r2, r3
 80036c4:	685b      	ldr	r3, [r3, #4]
 80036c6:	b10b      	cbz	r3, 80036cc <_free_r+0x4c>
 80036c8:	42a3      	cmp	r3, r4
 80036ca:	d9fa      	bls.n	80036c2 <_free_r+0x42>
 80036cc:	6811      	ldr	r1, [r2, #0]
 80036ce:	1850      	adds	r0, r2, r1
 80036d0:	42a0      	cmp	r0, r4
 80036d2:	d10b      	bne.n	80036ec <_free_r+0x6c>
 80036d4:	6820      	ldr	r0, [r4, #0]
 80036d6:	4401      	add	r1, r0
 80036d8:	1850      	adds	r0, r2, r1
 80036da:	4283      	cmp	r3, r0
 80036dc:	6011      	str	r1, [r2, #0]
 80036de:	d1e0      	bne.n	80036a2 <_free_r+0x22>
 80036e0:	6818      	ldr	r0, [r3, #0]
 80036e2:	685b      	ldr	r3, [r3, #4]
 80036e4:	4408      	add	r0, r1
 80036e6:	6010      	str	r0, [r2, #0]
 80036e8:	6053      	str	r3, [r2, #4]
 80036ea:	e7da      	b.n	80036a2 <_free_r+0x22>
 80036ec:	d902      	bls.n	80036f4 <_free_r+0x74>
 80036ee:	230c      	movs	r3, #12
 80036f0:	602b      	str	r3, [r5, #0]
 80036f2:	e7d6      	b.n	80036a2 <_free_r+0x22>
 80036f4:	6820      	ldr	r0, [r4, #0]
 80036f6:	1821      	adds	r1, r4, r0
 80036f8:	428b      	cmp	r3, r1
 80036fa:	bf01      	itttt	eq
 80036fc:	6819      	ldreq	r1, [r3, #0]
 80036fe:	685b      	ldreq	r3, [r3, #4]
 8003700:	1809      	addeq	r1, r1, r0
 8003702:	6021      	streq	r1, [r4, #0]
 8003704:	6063      	str	r3, [r4, #4]
 8003706:	6054      	str	r4, [r2, #4]
 8003708:	e7cb      	b.n	80036a2 <_free_r+0x22>
 800370a:	bd38      	pop	{r3, r4, r5, pc}
 800370c:	20000448 	.word	0x20000448

08003710 <sbrk_aligned>:
 8003710:	b570      	push	{r4, r5, r6, lr}
 8003712:	4e0f      	ldr	r6, [pc, #60]	@ (8003750 <sbrk_aligned+0x40>)
 8003714:	460c      	mov	r4, r1
 8003716:	6831      	ldr	r1, [r6, #0]
 8003718:	4605      	mov	r5, r0
 800371a:	b911      	cbnz	r1, 8003722 <sbrk_aligned+0x12>
 800371c:	f000 fbaa 	bl	8003e74 <_sbrk_r>
 8003720:	6030      	str	r0, [r6, #0]
 8003722:	4621      	mov	r1, r4
 8003724:	4628      	mov	r0, r5
 8003726:	f000 fba5 	bl	8003e74 <_sbrk_r>
 800372a:	1c43      	adds	r3, r0, #1
 800372c:	d103      	bne.n	8003736 <sbrk_aligned+0x26>
 800372e:	f04f 34ff 	mov.w	r4, #4294967295
 8003732:	4620      	mov	r0, r4
 8003734:	bd70      	pop	{r4, r5, r6, pc}
 8003736:	1cc4      	adds	r4, r0, #3
 8003738:	f024 0403 	bic.w	r4, r4, #3
 800373c:	42a0      	cmp	r0, r4
 800373e:	d0f8      	beq.n	8003732 <sbrk_aligned+0x22>
 8003740:	1a21      	subs	r1, r4, r0
 8003742:	4628      	mov	r0, r5
 8003744:	f000 fb96 	bl	8003e74 <_sbrk_r>
 8003748:	3001      	adds	r0, #1
 800374a:	d1f2      	bne.n	8003732 <sbrk_aligned+0x22>
 800374c:	e7ef      	b.n	800372e <sbrk_aligned+0x1e>
 800374e:	bf00      	nop
 8003750:	20000444 	.word	0x20000444

08003754 <_malloc_r>:
 8003754:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003758:	1ccd      	adds	r5, r1, #3
 800375a:	f025 0503 	bic.w	r5, r5, #3
 800375e:	3508      	adds	r5, #8
 8003760:	2d0c      	cmp	r5, #12
 8003762:	bf38      	it	cc
 8003764:	250c      	movcc	r5, #12
 8003766:	2d00      	cmp	r5, #0
 8003768:	4606      	mov	r6, r0
 800376a:	db01      	blt.n	8003770 <_malloc_r+0x1c>
 800376c:	42a9      	cmp	r1, r5
 800376e:	d904      	bls.n	800377a <_malloc_r+0x26>
 8003770:	230c      	movs	r3, #12
 8003772:	6033      	str	r3, [r6, #0]
 8003774:	2000      	movs	r0, #0
 8003776:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800377a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8003850 <_malloc_r+0xfc>
 800377e:	f000 f869 	bl	8003854 <__malloc_lock>
 8003782:	f8d8 3000 	ldr.w	r3, [r8]
 8003786:	461c      	mov	r4, r3
 8003788:	bb44      	cbnz	r4, 80037dc <_malloc_r+0x88>
 800378a:	4629      	mov	r1, r5
 800378c:	4630      	mov	r0, r6
 800378e:	f7ff ffbf 	bl	8003710 <sbrk_aligned>
 8003792:	1c43      	adds	r3, r0, #1
 8003794:	4604      	mov	r4, r0
 8003796:	d158      	bne.n	800384a <_malloc_r+0xf6>
 8003798:	f8d8 4000 	ldr.w	r4, [r8]
 800379c:	4627      	mov	r7, r4
 800379e:	2f00      	cmp	r7, #0
 80037a0:	d143      	bne.n	800382a <_malloc_r+0xd6>
 80037a2:	2c00      	cmp	r4, #0
 80037a4:	d04b      	beq.n	800383e <_malloc_r+0xea>
 80037a6:	6823      	ldr	r3, [r4, #0]
 80037a8:	4639      	mov	r1, r7
 80037aa:	4630      	mov	r0, r6
 80037ac:	eb04 0903 	add.w	r9, r4, r3
 80037b0:	f000 fb60 	bl	8003e74 <_sbrk_r>
 80037b4:	4581      	cmp	r9, r0
 80037b6:	d142      	bne.n	800383e <_malloc_r+0xea>
 80037b8:	6821      	ldr	r1, [r4, #0]
 80037ba:	4630      	mov	r0, r6
 80037bc:	1a6d      	subs	r5, r5, r1
 80037be:	4629      	mov	r1, r5
 80037c0:	f7ff ffa6 	bl	8003710 <sbrk_aligned>
 80037c4:	3001      	adds	r0, #1
 80037c6:	d03a      	beq.n	800383e <_malloc_r+0xea>
 80037c8:	6823      	ldr	r3, [r4, #0]
 80037ca:	442b      	add	r3, r5
 80037cc:	6023      	str	r3, [r4, #0]
 80037ce:	f8d8 3000 	ldr.w	r3, [r8]
 80037d2:	685a      	ldr	r2, [r3, #4]
 80037d4:	bb62      	cbnz	r2, 8003830 <_malloc_r+0xdc>
 80037d6:	f8c8 7000 	str.w	r7, [r8]
 80037da:	e00f      	b.n	80037fc <_malloc_r+0xa8>
 80037dc:	6822      	ldr	r2, [r4, #0]
 80037de:	1b52      	subs	r2, r2, r5
 80037e0:	d420      	bmi.n	8003824 <_malloc_r+0xd0>
 80037e2:	2a0b      	cmp	r2, #11
 80037e4:	d917      	bls.n	8003816 <_malloc_r+0xc2>
 80037e6:	1961      	adds	r1, r4, r5
 80037e8:	42a3      	cmp	r3, r4
 80037ea:	6025      	str	r5, [r4, #0]
 80037ec:	bf18      	it	ne
 80037ee:	6059      	strne	r1, [r3, #4]
 80037f0:	6863      	ldr	r3, [r4, #4]
 80037f2:	bf08      	it	eq
 80037f4:	f8c8 1000 	streq.w	r1, [r8]
 80037f8:	5162      	str	r2, [r4, r5]
 80037fa:	604b      	str	r3, [r1, #4]
 80037fc:	4630      	mov	r0, r6
 80037fe:	f000 f82f 	bl	8003860 <__malloc_unlock>
 8003802:	f104 000b 	add.w	r0, r4, #11
 8003806:	1d23      	adds	r3, r4, #4
 8003808:	f020 0007 	bic.w	r0, r0, #7
 800380c:	1ac2      	subs	r2, r0, r3
 800380e:	bf1c      	itt	ne
 8003810:	1a1b      	subne	r3, r3, r0
 8003812:	50a3      	strne	r3, [r4, r2]
 8003814:	e7af      	b.n	8003776 <_malloc_r+0x22>
 8003816:	6862      	ldr	r2, [r4, #4]
 8003818:	42a3      	cmp	r3, r4
 800381a:	bf0c      	ite	eq
 800381c:	f8c8 2000 	streq.w	r2, [r8]
 8003820:	605a      	strne	r2, [r3, #4]
 8003822:	e7eb      	b.n	80037fc <_malloc_r+0xa8>
 8003824:	4623      	mov	r3, r4
 8003826:	6864      	ldr	r4, [r4, #4]
 8003828:	e7ae      	b.n	8003788 <_malloc_r+0x34>
 800382a:	463c      	mov	r4, r7
 800382c:	687f      	ldr	r7, [r7, #4]
 800382e:	e7b6      	b.n	800379e <_malloc_r+0x4a>
 8003830:	461a      	mov	r2, r3
 8003832:	685b      	ldr	r3, [r3, #4]
 8003834:	42a3      	cmp	r3, r4
 8003836:	d1fb      	bne.n	8003830 <_malloc_r+0xdc>
 8003838:	2300      	movs	r3, #0
 800383a:	6053      	str	r3, [r2, #4]
 800383c:	e7de      	b.n	80037fc <_malloc_r+0xa8>
 800383e:	230c      	movs	r3, #12
 8003840:	4630      	mov	r0, r6
 8003842:	6033      	str	r3, [r6, #0]
 8003844:	f000 f80c 	bl	8003860 <__malloc_unlock>
 8003848:	e794      	b.n	8003774 <_malloc_r+0x20>
 800384a:	6005      	str	r5, [r0, #0]
 800384c:	e7d6      	b.n	80037fc <_malloc_r+0xa8>
 800384e:	bf00      	nop
 8003850:	20000448 	.word	0x20000448

08003854 <__malloc_lock>:
 8003854:	4801      	ldr	r0, [pc, #4]	@ (800385c <__malloc_lock+0x8>)
 8003856:	f7ff bf11 	b.w	800367c <__retarget_lock_acquire_recursive>
 800385a:	bf00      	nop
 800385c:	20000440 	.word	0x20000440

08003860 <__malloc_unlock>:
 8003860:	4801      	ldr	r0, [pc, #4]	@ (8003868 <__malloc_unlock+0x8>)
 8003862:	f7ff bf0c 	b.w	800367e <__retarget_lock_release_recursive>
 8003866:	bf00      	nop
 8003868:	20000440 	.word	0x20000440

0800386c <__ssputs_r>:
 800386c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003870:	461f      	mov	r7, r3
 8003872:	688e      	ldr	r6, [r1, #8]
 8003874:	4682      	mov	sl, r0
 8003876:	42be      	cmp	r6, r7
 8003878:	460c      	mov	r4, r1
 800387a:	4690      	mov	r8, r2
 800387c:	680b      	ldr	r3, [r1, #0]
 800387e:	d82d      	bhi.n	80038dc <__ssputs_r+0x70>
 8003880:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8003884:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8003888:	d026      	beq.n	80038d8 <__ssputs_r+0x6c>
 800388a:	6965      	ldr	r5, [r4, #20]
 800388c:	6909      	ldr	r1, [r1, #16]
 800388e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003892:	eba3 0901 	sub.w	r9, r3, r1
 8003896:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800389a:	1c7b      	adds	r3, r7, #1
 800389c:	444b      	add	r3, r9
 800389e:	106d      	asrs	r5, r5, #1
 80038a0:	429d      	cmp	r5, r3
 80038a2:	bf38      	it	cc
 80038a4:	461d      	movcc	r5, r3
 80038a6:	0553      	lsls	r3, r2, #21
 80038a8:	d527      	bpl.n	80038fa <__ssputs_r+0x8e>
 80038aa:	4629      	mov	r1, r5
 80038ac:	f7ff ff52 	bl	8003754 <_malloc_r>
 80038b0:	4606      	mov	r6, r0
 80038b2:	b360      	cbz	r0, 800390e <__ssputs_r+0xa2>
 80038b4:	464a      	mov	r2, r9
 80038b6:	6921      	ldr	r1, [r4, #16]
 80038b8:	f000 fafa 	bl	8003eb0 <memcpy>
 80038bc:	89a3      	ldrh	r3, [r4, #12]
 80038be:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80038c2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80038c6:	81a3      	strh	r3, [r4, #12]
 80038c8:	6126      	str	r6, [r4, #16]
 80038ca:	444e      	add	r6, r9
 80038cc:	6026      	str	r6, [r4, #0]
 80038ce:	463e      	mov	r6, r7
 80038d0:	6165      	str	r5, [r4, #20]
 80038d2:	eba5 0509 	sub.w	r5, r5, r9
 80038d6:	60a5      	str	r5, [r4, #8]
 80038d8:	42be      	cmp	r6, r7
 80038da:	d900      	bls.n	80038de <__ssputs_r+0x72>
 80038dc:	463e      	mov	r6, r7
 80038de:	4632      	mov	r2, r6
 80038e0:	4641      	mov	r1, r8
 80038e2:	6820      	ldr	r0, [r4, #0]
 80038e4:	f000 faac 	bl	8003e40 <memmove>
 80038e8:	2000      	movs	r0, #0
 80038ea:	68a3      	ldr	r3, [r4, #8]
 80038ec:	1b9b      	subs	r3, r3, r6
 80038ee:	60a3      	str	r3, [r4, #8]
 80038f0:	6823      	ldr	r3, [r4, #0]
 80038f2:	4433      	add	r3, r6
 80038f4:	6023      	str	r3, [r4, #0]
 80038f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80038fa:	462a      	mov	r2, r5
 80038fc:	f000 fae6 	bl	8003ecc <_realloc_r>
 8003900:	4606      	mov	r6, r0
 8003902:	2800      	cmp	r0, #0
 8003904:	d1e0      	bne.n	80038c8 <__ssputs_r+0x5c>
 8003906:	4650      	mov	r0, sl
 8003908:	6921      	ldr	r1, [r4, #16]
 800390a:	f7ff feb9 	bl	8003680 <_free_r>
 800390e:	230c      	movs	r3, #12
 8003910:	f8ca 3000 	str.w	r3, [sl]
 8003914:	89a3      	ldrh	r3, [r4, #12]
 8003916:	f04f 30ff 	mov.w	r0, #4294967295
 800391a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800391e:	81a3      	strh	r3, [r4, #12]
 8003920:	e7e9      	b.n	80038f6 <__ssputs_r+0x8a>
	...

08003924 <_svfiprintf_r>:
 8003924:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003928:	4698      	mov	r8, r3
 800392a:	898b      	ldrh	r3, [r1, #12]
 800392c:	4607      	mov	r7, r0
 800392e:	061b      	lsls	r3, r3, #24
 8003930:	460d      	mov	r5, r1
 8003932:	4614      	mov	r4, r2
 8003934:	b09d      	sub	sp, #116	@ 0x74
 8003936:	d510      	bpl.n	800395a <_svfiprintf_r+0x36>
 8003938:	690b      	ldr	r3, [r1, #16]
 800393a:	b973      	cbnz	r3, 800395a <_svfiprintf_r+0x36>
 800393c:	2140      	movs	r1, #64	@ 0x40
 800393e:	f7ff ff09 	bl	8003754 <_malloc_r>
 8003942:	6028      	str	r0, [r5, #0]
 8003944:	6128      	str	r0, [r5, #16]
 8003946:	b930      	cbnz	r0, 8003956 <_svfiprintf_r+0x32>
 8003948:	230c      	movs	r3, #12
 800394a:	603b      	str	r3, [r7, #0]
 800394c:	f04f 30ff 	mov.w	r0, #4294967295
 8003950:	b01d      	add	sp, #116	@ 0x74
 8003952:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003956:	2340      	movs	r3, #64	@ 0x40
 8003958:	616b      	str	r3, [r5, #20]
 800395a:	2300      	movs	r3, #0
 800395c:	9309      	str	r3, [sp, #36]	@ 0x24
 800395e:	2320      	movs	r3, #32
 8003960:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8003964:	2330      	movs	r3, #48	@ 0x30
 8003966:	f04f 0901 	mov.w	r9, #1
 800396a:	f8cd 800c 	str.w	r8, [sp, #12]
 800396e:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8003b08 <_svfiprintf_r+0x1e4>
 8003972:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8003976:	4623      	mov	r3, r4
 8003978:	469a      	mov	sl, r3
 800397a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800397e:	b10a      	cbz	r2, 8003984 <_svfiprintf_r+0x60>
 8003980:	2a25      	cmp	r2, #37	@ 0x25
 8003982:	d1f9      	bne.n	8003978 <_svfiprintf_r+0x54>
 8003984:	ebba 0b04 	subs.w	fp, sl, r4
 8003988:	d00b      	beq.n	80039a2 <_svfiprintf_r+0x7e>
 800398a:	465b      	mov	r3, fp
 800398c:	4622      	mov	r2, r4
 800398e:	4629      	mov	r1, r5
 8003990:	4638      	mov	r0, r7
 8003992:	f7ff ff6b 	bl	800386c <__ssputs_r>
 8003996:	3001      	adds	r0, #1
 8003998:	f000 80a7 	beq.w	8003aea <_svfiprintf_r+0x1c6>
 800399c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800399e:	445a      	add	r2, fp
 80039a0:	9209      	str	r2, [sp, #36]	@ 0x24
 80039a2:	f89a 3000 	ldrb.w	r3, [sl]
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	f000 809f 	beq.w	8003aea <_svfiprintf_r+0x1c6>
 80039ac:	2300      	movs	r3, #0
 80039ae:	f04f 32ff 	mov.w	r2, #4294967295
 80039b2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80039b6:	f10a 0a01 	add.w	sl, sl, #1
 80039ba:	9304      	str	r3, [sp, #16]
 80039bc:	9307      	str	r3, [sp, #28]
 80039be:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80039c2:	931a      	str	r3, [sp, #104]	@ 0x68
 80039c4:	4654      	mov	r4, sl
 80039c6:	2205      	movs	r2, #5
 80039c8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80039cc:	484e      	ldr	r0, [pc, #312]	@ (8003b08 <_svfiprintf_r+0x1e4>)
 80039ce:	f000 fa61 	bl	8003e94 <memchr>
 80039d2:	9a04      	ldr	r2, [sp, #16]
 80039d4:	b9d8      	cbnz	r0, 8003a0e <_svfiprintf_r+0xea>
 80039d6:	06d0      	lsls	r0, r2, #27
 80039d8:	bf44      	itt	mi
 80039da:	2320      	movmi	r3, #32
 80039dc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80039e0:	0711      	lsls	r1, r2, #28
 80039e2:	bf44      	itt	mi
 80039e4:	232b      	movmi	r3, #43	@ 0x2b
 80039e6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80039ea:	f89a 3000 	ldrb.w	r3, [sl]
 80039ee:	2b2a      	cmp	r3, #42	@ 0x2a
 80039f0:	d015      	beq.n	8003a1e <_svfiprintf_r+0xfa>
 80039f2:	4654      	mov	r4, sl
 80039f4:	2000      	movs	r0, #0
 80039f6:	f04f 0c0a 	mov.w	ip, #10
 80039fa:	9a07      	ldr	r2, [sp, #28]
 80039fc:	4621      	mov	r1, r4
 80039fe:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003a02:	3b30      	subs	r3, #48	@ 0x30
 8003a04:	2b09      	cmp	r3, #9
 8003a06:	d94b      	bls.n	8003aa0 <_svfiprintf_r+0x17c>
 8003a08:	b1b0      	cbz	r0, 8003a38 <_svfiprintf_r+0x114>
 8003a0a:	9207      	str	r2, [sp, #28]
 8003a0c:	e014      	b.n	8003a38 <_svfiprintf_r+0x114>
 8003a0e:	eba0 0308 	sub.w	r3, r0, r8
 8003a12:	fa09 f303 	lsl.w	r3, r9, r3
 8003a16:	4313      	orrs	r3, r2
 8003a18:	46a2      	mov	sl, r4
 8003a1a:	9304      	str	r3, [sp, #16]
 8003a1c:	e7d2      	b.n	80039c4 <_svfiprintf_r+0xa0>
 8003a1e:	9b03      	ldr	r3, [sp, #12]
 8003a20:	1d19      	adds	r1, r3, #4
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	9103      	str	r1, [sp, #12]
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	bfbb      	ittet	lt
 8003a2a:	425b      	neglt	r3, r3
 8003a2c:	f042 0202 	orrlt.w	r2, r2, #2
 8003a30:	9307      	strge	r3, [sp, #28]
 8003a32:	9307      	strlt	r3, [sp, #28]
 8003a34:	bfb8      	it	lt
 8003a36:	9204      	strlt	r2, [sp, #16]
 8003a38:	7823      	ldrb	r3, [r4, #0]
 8003a3a:	2b2e      	cmp	r3, #46	@ 0x2e
 8003a3c:	d10a      	bne.n	8003a54 <_svfiprintf_r+0x130>
 8003a3e:	7863      	ldrb	r3, [r4, #1]
 8003a40:	2b2a      	cmp	r3, #42	@ 0x2a
 8003a42:	d132      	bne.n	8003aaa <_svfiprintf_r+0x186>
 8003a44:	9b03      	ldr	r3, [sp, #12]
 8003a46:	3402      	adds	r4, #2
 8003a48:	1d1a      	adds	r2, r3, #4
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	9203      	str	r2, [sp, #12]
 8003a4e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8003a52:	9305      	str	r3, [sp, #20]
 8003a54:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8003b0c <_svfiprintf_r+0x1e8>
 8003a58:	2203      	movs	r2, #3
 8003a5a:	4650      	mov	r0, sl
 8003a5c:	7821      	ldrb	r1, [r4, #0]
 8003a5e:	f000 fa19 	bl	8003e94 <memchr>
 8003a62:	b138      	cbz	r0, 8003a74 <_svfiprintf_r+0x150>
 8003a64:	2240      	movs	r2, #64	@ 0x40
 8003a66:	9b04      	ldr	r3, [sp, #16]
 8003a68:	eba0 000a 	sub.w	r0, r0, sl
 8003a6c:	4082      	lsls	r2, r0
 8003a6e:	4313      	orrs	r3, r2
 8003a70:	3401      	adds	r4, #1
 8003a72:	9304      	str	r3, [sp, #16]
 8003a74:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003a78:	2206      	movs	r2, #6
 8003a7a:	4825      	ldr	r0, [pc, #148]	@ (8003b10 <_svfiprintf_r+0x1ec>)
 8003a7c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8003a80:	f000 fa08 	bl	8003e94 <memchr>
 8003a84:	2800      	cmp	r0, #0
 8003a86:	d036      	beq.n	8003af6 <_svfiprintf_r+0x1d2>
 8003a88:	4b22      	ldr	r3, [pc, #136]	@ (8003b14 <_svfiprintf_r+0x1f0>)
 8003a8a:	bb1b      	cbnz	r3, 8003ad4 <_svfiprintf_r+0x1b0>
 8003a8c:	9b03      	ldr	r3, [sp, #12]
 8003a8e:	3307      	adds	r3, #7
 8003a90:	f023 0307 	bic.w	r3, r3, #7
 8003a94:	3308      	adds	r3, #8
 8003a96:	9303      	str	r3, [sp, #12]
 8003a98:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003a9a:	4433      	add	r3, r6
 8003a9c:	9309      	str	r3, [sp, #36]	@ 0x24
 8003a9e:	e76a      	b.n	8003976 <_svfiprintf_r+0x52>
 8003aa0:	460c      	mov	r4, r1
 8003aa2:	2001      	movs	r0, #1
 8003aa4:	fb0c 3202 	mla	r2, ip, r2, r3
 8003aa8:	e7a8      	b.n	80039fc <_svfiprintf_r+0xd8>
 8003aaa:	2300      	movs	r3, #0
 8003aac:	f04f 0c0a 	mov.w	ip, #10
 8003ab0:	4619      	mov	r1, r3
 8003ab2:	3401      	adds	r4, #1
 8003ab4:	9305      	str	r3, [sp, #20]
 8003ab6:	4620      	mov	r0, r4
 8003ab8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003abc:	3a30      	subs	r2, #48	@ 0x30
 8003abe:	2a09      	cmp	r2, #9
 8003ac0:	d903      	bls.n	8003aca <_svfiprintf_r+0x1a6>
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d0c6      	beq.n	8003a54 <_svfiprintf_r+0x130>
 8003ac6:	9105      	str	r1, [sp, #20]
 8003ac8:	e7c4      	b.n	8003a54 <_svfiprintf_r+0x130>
 8003aca:	4604      	mov	r4, r0
 8003acc:	2301      	movs	r3, #1
 8003ace:	fb0c 2101 	mla	r1, ip, r1, r2
 8003ad2:	e7f0      	b.n	8003ab6 <_svfiprintf_r+0x192>
 8003ad4:	ab03      	add	r3, sp, #12
 8003ad6:	9300      	str	r3, [sp, #0]
 8003ad8:	462a      	mov	r2, r5
 8003ada:	4638      	mov	r0, r7
 8003adc:	4b0e      	ldr	r3, [pc, #56]	@ (8003b18 <_svfiprintf_r+0x1f4>)
 8003ade:	a904      	add	r1, sp, #16
 8003ae0:	f3af 8000 	nop.w
 8003ae4:	1c42      	adds	r2, r0, #1
 8003ae6:	4606      	mov	r6, r0
 8003ae8:	d1d6      	bne.n	8003a98 <_svfiprintf_r+0x174>
 8003aea:	89ab      	ldrh	r3, [r5, #12]
 8003aec:	065b      	lsls	r3, r3, #25
 8003aee:	f53f af2d 	bmi.w	800394c <_svfiprintf_r+0x28>
 8003af2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8003af4:	e72c      	b.n	8003950 <_svfiprintf_r+0x2c>
 8003af6:	ab03      	add	r3, sp, #12
 8003af8:	9300      	str	r3, [sp, #0]
 8003afa:	462a      	mov	r2, r5
 8003afc:	4638      	mov	r0, r7
 8003afe:	4b06      	ldr	r3, [pc, #24]	@ (8003b18 <_svfiprintf_r+0x1f4>)
 8003b00:	a904      	add	r1, sp, #16
 8003b02:	f000 f87d 	bl	8003c00 <_printf_i>
 8003b06:	e7ed      	b.n	8003ae4 <_svfiprintf_r+0x1c0>
 8003b08:	0800408e 	.word	0x0800408e
 8003b0c:	08004094 	.word	0x08004094
 8003b10:	08004098 	.word	0x08004098
 8003b14:	00000000 	.word	0x00000000
 8003b18:	0800386d 	.word	0x0800386d

08003b1c <_printf_common>:
 8003b1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003b20:	4616      	mov	r6, r2
 8003b22:	4698      	mov	r8, r3
 8003b24:	688a      	ldr	r2, [r1, #8]
 8003b26:	690b      	ldr	r3, [r1, #16]
 8003b28:	4607      	mov	r7, r0
 8003b2a:	4293      	cmp	r3, r2
 8003b2c:	bfb8      	it	lt
 8003b2e:	4613      	movlt	r3, r2
 8003b30:	6033      	str	r3, [r6, #0]
 8003b32:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8003b36:	460c      	mov	r4, r1
 8003b38:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8003b3c:	b10a      	cbz	r2, 8003b42 <_printf_common+0x26>
 8003b3e:	3301      	adds	r3, #1
 8003b40:	6033      	str	r3, [r6, #0]
 8003b42:	6823      	ldr	r3, [r4, #0]
 8003b44:	0699      	lsls	r1, r3, #26
 8003b46:	bf42      	ittt	mi
 8003b48:	6833      	ldrmi	r3, [r6, #0]
 8003b4a:	3302      	addmi	r3, #2
 8003b4c:	6033      	strmi	r3, [r6, #0]
 8003b4e:	6825      	ldr	r5, [r4, #0]
 8003b50:	f015 0506 	ands.w	r5, r5, #6
 8003b54:	d106      	bne.n	8003b64 <_printf_common+0x48>
 8003b56:	f104 0a19 	add.w	sl, r4, #25
 8003b5a:	68e3      	ldr	r3, [r4, #12]
 8003b5c:	6832      	ldr	r2, [r6, #0]
 8003b5e:	1a9b      	subs	r3, r3, r2
 8003b60:	42ab      	cmp	r3, r5
 8003b62:	dc2b      	bgt.n	8003bbc <_printf_common+0xa0>
 8003b64:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8003b68:	6822      	ldr	r2, [r4, #0]
 8003b6a:	3b00      	subs	r3, #0
 8003b6c:	bf18      	it	ne
 8003b6e:	2301      	movne	r3, #1
 8003b70:	0692      	lsls	r2, r2, #26
 8003b72:	d430      	bmi.n	8003bd6 <_printf_common+0xba>
 8003b74:	4641      	mov	r1, r8
 8003b76:	4638      	mov	r0, r7
 8003b78:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8003b7c:	47c8      	blx	r9
 8003b7e:	3001      	adds	r0, #1
 8003b80:	d023      	beq.n	8003bca <_printf_common+0xae>
 8003b82:	6823      	ldr	r3, [r4, #0]
 8003b84:	6922      	ldr	r2, [r4, #16]
 8003b86:	f003 0306 	and.w	r3, r3, #6
 8003b8a:	2b04      	cmp	r3, #4
 8003b8c:	bf14      	ite	ne
 8003b8e:	2500      	movne	r5, #0
 8003b90:	6833      	ldreq	r3, [r6, #0]
 8003b92:	f04f 0600 	mov.w	r6, #0
 8003b96:	bf08      	it	eq
 8003b98:	68e5      	ldreq	r5, [r4, #12]
 8003b9a:	f104 041a 	add.w	r4, r4, #26
 8003b9e:	bf08      	it	eq
 8003ba0:	1aed      	subeq	r5, r5, r3
 8003ba2:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8003ba6:	bf08      	it	eq
 8003ba8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003bac:	4293      	cmp	r3, r2
 8003bae:	bfc4      	itt	gt
 8003bb0:	1a9b      	subgt	r3, r3, r2
 8003bb2:	18ed      	addgt	r5, r5, r3
 8003bb4:	42b5      	cmp	r5, r6
 8003bb6:	d11a      	bne.n	8003bee <_printf_common+0xd2>
 8003bb8:	2000      	movs	r0, #0
 8003bba:	e008      	b.n	8003bce <_printf_common+0xb2>
 8003bbc:	2301      	movs	r3, #1
 8003bbe:	4652      	mov	r2, sl
 8003bc0:	4641      	mov	r1, r8
 8003bc2:	4638      	mov	r0, r7
 8003bc4:	47c8      	blx	r9
 8003bc6:	3001      	adds	r0, #1
 8003bc8:	d103      	bne.n	8003bd2 <_printf_common+0xb6>
 8003bca:	f04f 30ff 	mov.w	r0, #4294967295
 8003bce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003bd2:	3501      	adds	r5, #1
 8003bd4:	e7c1      	b.n	8003b5a <_printf_common+0x3e>
 8003bd6:	2030      	movs	r0, #48	@ 0x30
 8003bd8:	18e1      	adds	r1, r4, r3
 8003bda:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8003bde:	1c5a      	adds	r2, r3, #1
 8003be0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8003be4:	4422      	add	r2, r4
 8003be6:	3302      	adds	r3, #2
 8003be8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8003bec:	e7c2      	b.n	8003b74 <_printf_common+0x58>
 8003bee:	2301      	movs	r3, #1
 8003bf0:	4622      	mov	r2, r4
 8003bf2:	4641      	mov	r1, r8
 8003bf4:	4638      	mov	r0, r7
 8003bf6:	47c8      	blx	r9
 8003bf8:	3001      	adds	r0, #1
 8003bfa:	d0e6      	beq.n	8003bca <_printf_common+0xae>
 8003bfc:	3601      	adds	r6, #1
 8003bfe:	e7d9      	b.n	8003bb4 <_printf_common+0x98>

08003c00 <_printf_i>:
 8003c00:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003c04:	7e0f      	ldrb	r7, [r1, #24]
 8003c06:	4691      	mov	r9, r2
 8003c08:	2f78      	cmp	r7, #120	@ 0x78
 8003c0a:	4680      	mov	r8, r0
 8003c0c:	460c      	mov	r4, r1
 8003c0e:	469a      	mov	sl, r3
 8003c10:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8003c12:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8003c16:	d807      	bhi.n	8003c28 <_printf_i+0x28>
 8003c18:	2f62      	cmp	r7, #98	@ 0x62
 8003c1a:	d80a      	bhi.n	8003c32 <_printf_i+0x32>
 8003c1c:	2f00      	cmp	r7, #0
 8003c1e:	f000 80d3 	beq.w	8003dc8 <_printf_i+0x1c8>
 8003c22:	2f58      	cmp	r7, #88	@ 0x58
 8003c24:	f000 80ba 	beq.w	8003d9c <_printf_i+0x19c>
 8003c28:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003c2c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8003c30:	e03a      	b.n	8003ca8 <_printf_i+0xa8>
 8003c32:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8003c36:	2b15      	cmp	r3, #21
 8003c38:	d8f6      	bhi.n	8003c28 <_printf_i+0x28>
 8003c3a:	a101      	add	r1, pc, #4	@ (adr r1, 8003c40 <_printf_i+0x40>)
 8003c3c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003c40:	08003c99 	.word	0x08003c99
 8003c44:	08003cad 	.word	0x08003cad
 8003c48:	08003c29 	.word	0x08003c29
 8003c4c:	08003c29 	.word	0x08003c29
 8003c50:	08003c29 	.word	0x08003c29
 8003c54:	08003c29 	.word	0x08003c29
 8003c58:	08003cad 	.word	0x08003cad
 8003c5c:	08003c29 	.word	0x08003c29
 8003c60:	08003c29 	.word	0x08003c29
 8003c64:	08003c29 	.word	0x08003c29
 8003c68:	08003c29 	.word	0x08003c29
 8003c6c:	08003daf 	.word	0x08003daf
 8003c70:	08003cd7 	.word	0x08003cd7
 8003c74:	08003d69 	.word	0x08003d69
 8003c78:	08003c29 	.word	0x08003c29
 8003c7c:	08003c29 	.word	0x08003c29
 8003c80:	08003dd1 	.word	0x08003dd1
 8003c84:	08003c29 	.word	0x08003c29
 8003c88:	08003cd7 	.word	0x08003cd7
 8003c8c:	08003c29 	.word	0x08003c29
 8003c90:	08003c29 	.word	0x08003c29
 8003c94:	08003d71 	.word	0x08003d71
 8003c98:	6833      	ldr	r3, [r6, #0]
 8003c9a:	1d1a      	adds	r2, r3, #4
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	6032      	str	r2, [r6, #0]
 8003ca0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003ca4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8003ca8:	2301      	movs	r3, #1
 8003caa:	e09e      	b.n	8003dea <_printf_i+0x1ea>
 8003cac:	6833      	ldr	r3, [r6, #0]
 8003cae:	6820      	ldr	r0, [r4, #0]
 8003cb0:	1d19      	adds	r1, r3, #4
 8003cb2:	6031      	str	r1, [r6, #0]
 8003cb4:	0606      	lsls	r6, r0, #24
 8003cb6:	d501      	bpl.n	8003cbc <_printf_i+0xbc>
 8003cb8:	681d      	ldr	r5, [r3, #0]
 8003cba:	e003      	b.n	8003cc4 <_printf_i+0xc4>
 8003cbc:	0645      	lsls	r5, r0, #25
 8003cbe:	d5fb      	bpl.n	8003cb8 <_printf_i+0xb8>
 8003cc0:	f9b3 5000 	ldrsh.w	r5, [r3]
 8003cc4:	2d00      	cmp	r5, #0
 8003cc6:	da03      	bge.n	8003cd0 <_printf_i+0xd0>
 8003cc8:	232d      	movs	r3, #45	@ 0x2d
 8003cca:	426d      	negs	r5, r5
 8003ccc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003cd0:	230a      	movs	r3, #10
 8003cd2:	4859      	ldr	r0, [pc, #356]	@ (8003e38 <_printf_i+0x238>)
 8003cd4:	e011      	b.n	8003cfa <_printf_i+0xfa>
 8003cd6:	6821      	ldr	r1, [r4, #0]
 8003cd8:	6833      	ldr	r3, [r6, #0]
 8003cda:	0608      	lsls	r0, r1, #24
 8003cdc:	f853 5b04 	ldr.w	r5, [r3], #4
 8003ce0:	d402      	bmi.n	8003ce8 <_printf_i+0xe8>
 8003ce2:	0649      	lsls	r1, r1, #25
 8003ce4:	bf48      	it	mi
 8003ce6:	b2ad      	uxthmi	r5, r5
 8003ce8:	2f6f      	cmp	r7, #111	@ 0x6f
 8003cea:	6033      	str	r3, [r6, #0]
 8003cec:	bf14      	ite	ne
 8003cee:	230a      	movne	r3, #10
 8003cf0:	2308      	moveq	r3, #8
 8003cf2:	4851      	ldr	r0, [pc, #324]	@ (8003e38 <_printf_i+0x238>)
 8003cf4:	2100      	movs	r1, #0
 8003cf6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8003cfa:	6866      	ldr	r6, [r4, #4]
 8003cfc:	2e00      	cmp	r6, #0
 8003cfe:	bfa8      	it	ge
 8003d00:	6821      	ldrge	r1, [r4, #0]
 8003d02:	60a6      	str	r6, [r4, #8]
 8003d04:	bfa4      	itt	ge
 8003d06:	f021 0104 	bicge.w	r1, r1, #4
 8003d0a:	6021      	strge	r1, [r4, #0]
 8003d0c:	b90d      	cbnz	r5, 8003d12 <_printf_i+0x112>
 8003d0e:	2e00      	cmp	r6, #0
 8003d10:	d04b      	beq.n	8003daa <_printf_i+0x1aa>
 8003d12:	4616      	mov	r6, r2
 8003d14:	fbb5 f1f3 	udiv	r1, r5, r3
 8003d18:	fb03 5711 	mls	r7, r3, r1, r5
 8003d1c:	5dc7      	ldrb	r7, [r0, r7]
 8003d1e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003d22:	462f      	mov	r7, r5
 8003d24:	42bb      	cmp	r3, r7
 8003d26:	460d      	mov	r5, r1
 8003d28:	d9f4      	bls.n	8003d14 <_printf_i+0x114>
 8003d2a:	2b08      	cmp	r3, #8
 8003d2c:	d10b      	bne.n	8003d46 <_printf_i+0x146>
 8003d2e:	6823      	ldr	r3, [r4, #0]
 8003d30:	07df      	lsls	r7, r3, #31
 8003d32:	d508      	bpl.n	8003d46 <_printf_i+0x146>
 8003d34:	6923      	ldr	r3, [r4, #16]
 8003d36:	6861      	ldr	r1, [r4, #4]
 8003d38:	4299      	cmp	r1, r3
 8003d3a:	bfde      	ittt	le
 8003d3c:	2330      	movle	r3, #48	@ 0x30
 8003d3e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003d42:	f106 36ff 	addle.w	r6, r6, #4294967295
 8003d46:	1b92      	subs	r2, r2, r6
 8003d48:	6122      	str	r2, [r4, #16]
 8003d4a:	464b      	mov	r3, r9
 8003d4c:	4621      	mov	r1, r4
 8003d4e:	4640      	mov	r0, r8
 8003d50:	f8cd a000 	str.w	sl, [sp]
 8003d54:	aa03      	add	r2, sp, #12
 8003d56:	f7ff fee1 	bl	8003b1c <_printf_common>
 8003d5a:	3001      	adds	r0, #1
 8003d5c:	d14a      	bne.n	8003df4 <_printf_i+0x1f4>
 8003d5e:	f04f 30ff 	mov.w	r0, #4294967295
 8003d62:	b004      	add	sp, #16
 8003d64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003d68:	6823      	ldr	r3, [r4, #0]
 8003d6a:	f043 0320 	orr.w	r3, r3, #32
 8003d6e:	6023      	str	r3, [r4, #0]
 8003d70:	2778      	movs	r7, #120	@ 0x78
 8003d72:	4832      	ldr	r0, [pc, #200]	@ (8003e3c <_printf_i+0x23c>)
 8003d74:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8003d78:	6823      	ldr	r3, [r4, #0]
 8003d7a:	6831      	ldr	r1, [r6, #0]
 8003d7c:	061f      	lsls	r7, r3, #24
 8003d7e:	f851 5b04 	ldr.w	r5, [r1], #4
 8003d82:	d402      	bmi.n	8003d8a <_printf_i+0x18a>
 8003d84:	065f      	lsls	r7, r3, #25
 8003d86:	bf48      	it	mi
 8003d88:	b2ad      	uxthmi	r5, r5
 8003d8a:	6031      	str	r1, [r6, #0]
 8003d8c:	07d9      	lsls	r1, r3, #31
 8003d8e:	bf44      	itt	mi
 8003d90:	f043 0320 	orrmi.w	r3, r3, #32
 8003d94:	6023      	strmi	r3, [r4, #0]
 8003d96:	b11d      	cbz	r5, 8003da0 <_printf_i+0x1a0>
 8003d98:	2310      	movs	r3, #16
 8003d9a:	e7ab      	b.n	8003cf4 <_printf_i+0xf4>
 8003d9c:	4826      	ldr	r0, [pc, #152]	@ (8003e38 <_printf_i+0x238>)
 8003d9e:	e7e9      	b.n	8003d74 <_printf_i+0x174>
 8003da0:	6823      	ldr	r3, [r4, #0]
 8003da2:	f023 0320 	bic.w	r3, r3, #32
 8003da6:	6023      	str	r3, [r4, #0]
 8003da8:	e7f6      	b.n	8003d98 <_printf_i+0x198>
 8003daa:	4616      	mov	r6, r2
 8003dac:	e7bd      	b.n	8003d2a <_printf_i+0x12a>
 8003dae:	6833      	ldr	r3, [r6, #0]
 8003db0:	6825      	ldr	r5, [r4, #0]
 8003db2:	1d18      	adds	r0, r3, #4
 8003db4:	6961      	ldr	r1, [r4, #20]
 8003db6:	6030      	str	r0, [r6, #0]
 8003db8:	062e      	lsls	r6, r5, #24
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	d501      	bpl.n	8003dc2 <_printf_i+0x1c2>
 8003dbe:	6019      	str	r1, [r3, #0]
 8003dc0:	e002      	b.n	8003dc8 <_printf_i+0x1c8>
 8003dc2:	0668      	lsls	r0, r5, #25
 8003dc4:	d5fb      	bpl.n	8003dbe <_printf_i+0x1be>
 8003dc6:	8019      	strh	r1, [r3, #0]
 8003dc8:	2300      	movs	r3, #0
 8003dca:	4616      	mov	r6, r2
 8003dcc:	6123      	str	r3, [r4, #16]
 8003dce:	e7bc      	b.n	8003d4a <_printf_i+0x14a>
 8003dd0:	6833      	ldr	r3, [r6, #0]
 8003dd2:	2100      	movs	r1, #0
 8003dd4:	1d1a      	adds	r2, r3, #4
 8003dd6:	6032      	str	r2, [r6, #0]
 8003dd8:	681e      	ldr	r6, [r3, #0]
 8003dda:	6862      	ldr	r2, [r4, #4]
 8003ddc:	4630      	mov	r0, r6
 8003dde:	f000 f859 	bl	8003e94 <memchr>
 8003de2:	b108      	cbz	r0, 8003de8 <_printf_i+0x1e8>
 8003de4:	1b80      	subs	r0, r0, r6
 8003de6:	6060      	str	r0, [r4, #4]
 8003de8:	6863      	ldr	r3, [r4, #4]
 8003dea:	6123      	str	r3, [r4, #16]
 8003dec:	2300      	movs	r3, #0
 8003dee:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003df2:	e7aa      	b.n	8003d4a <_printf_i+0x14a>
 8003df4:	4632      	mov	r2, r6
 8003df6:	4649      	mov	r1, r9
 8003df8:	4640      	mov	r0, r8
 8003dfa:	6923      	ldr	r3, [r4, #16]
 8003dfc:	47d0      	blx	sl
 8003dfe:	3001      	adds	r0, #1
 8003e00:	d0ad      	beq.n	8003d5e <_printf_i+0x15e>
 8003e02:	6823      	ldr	r3, [r4, #0]
 8003e04:	079b      	lsls	r3, r3, #30
 8003e06:	d413      	bmi.n	8003e30 <_printf_i+0x230>
 8003e08:	68e0      	ldr	r0, [r4, #12]
 8003e0a:	9b03      	ldr	r3, [sp, #12]
 8003e0c:	4298      	cmp	r0, r3
 8003e0e:	bfb8      	it	lt
 8003e10:	4618      	movlt	r0, r3
 8003e12:	e7a6      	b.n	8003d62 <_printf_i+0x162>
 8003e14:	2301      	movs	r3, #1
 8003e16:	4632      	mov	r2, r6
 8003e18:	4649      	mov	r1, r9
 8003e1a:	4640      	mov	r0, r8
 8003e1c:	47d0      	blx	sl
 8003e1e:	3001      	adds	r0, #1
 8003e20:	d09d      	beq.n	8003d5e <_printf_i+0x15e>
 8003e22:	3501      	adds	r5, #1
 8003e24:	68e3      	ldr	r3, [r4, #12]
 8003e26:	9903      	ldr	r1, [sp, #12]
 8003e28:	1a5b      	subs	r3, r3, r1
 8003e2a:	42ab      	cmp	r3, r5
 8003e2c:	dcf2      	bgt.n	8003e14 <_printf_i+0x214>
 8003e2e:	e7eb      	b.n	8003e08 <_printf_i+0x208>
 8003e30:	2500      	movs	r5, #0
 8003e32:	f104 0619 	add.w	r6, r4, #25
 8003e36:	e7f5      	b.n	8003e24 <_printf_i+0x224>
 8003e38:	0800409f 	.word	0x0800409f
 8003e3c:	080040b0 	.word	0x080040b0

08003e40 <memmove>:
 8003e40:	4288      	cmp	r0, r1
 8003e42:	b510      	push	{r4, lr}
 8003e44:	eb01 0402 	add.w	r4, r1, r2
 8003e48:	d902      	bls.n	8003e50 <memmove+0x10>
 8003e4a:	4284      	cmp	r4, r0
 8003e4c:	4623      	mov	r3, r4
 8003e4e:	d807      	bhi.n	8003e60 <memmove+0x20>
 8003e50:	1e43      	subs	r3, r0, #1
 8003e52:	42a1      	cmp	r1, r4
 8003e54:	d008      	beq.n	8003e68 <memmove+0x28>
 8003e56:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003e5a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003e5e:	e7f8      	b.n	8003e52 <memmove+0x12>
 8003e60:	4601      	mov	r1, r0
 8003e62:	4402      	add	r2, r0
 8003e64:	428a      	cmp	r2, r1
 8003e66:	d100      	bne.n	8003e6a <memmove+0x2a>
 8003e68:	bd10      	pop	{r4, pc}
 8003e6a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003e6e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003e72:	e7f7      	b.n	8003e64 <memmove+0x24>

08003e74 <_sbrk_r>:
 8003e74:	b538      	push	{r3, r4, r5, lr}
 8003e76:	2300      	movs	r3, #0
 8003e78:	4d05      	ldr	r5, [pc, #20]	@ (8003e90 <_sbrk_r+0x1c>)
 8003e7a:	4604      	mov	r4, r0
 8003e7c:	4608      	mov	r0, r1
 8003e7e:	602b      	str	r3, [r5, #0]
 8003e80:	f7fd f9fa 	bl	8001278 <_sbrk>
 8003e84:	1c43      	adds	r3, r0, #1
 8003e86:	d102      	bne.n	8003e8e <_sbrk_r+0x1a>
 8003e88:	682b      	ldr	r3, [r5, #0]
 8003e8a:	b103      	cbz	r3, 8003e8e <_sbrk_r+0x1a>
 8003e8c:	6023      	str	r3, [r4, #0]
 8003e8e:	bd38      	pop	{r3, r4, r5, pc}
 8003e90:	2000043c 	.word	0x2000043c

08003e94 <memchr>:
 8003e94:	4603      	mov	r3, r0
 8003e96:	b510      	push	{r4, lr}
 8003e98:	b2c9      	uxtb	r1, r1
 8003e9a:	4402      	add	r2, r0
 8003e9c:	4293      	cmp	r3, r2
 8003e9e:	4618      	mov	r0, r3
 8003ea0:	d101      	bne.n	8003ea6 <memchr+0x12>
 8003ea2:	2000      	movs	r0, #0
 8003ea4:	e003      	b.n	8003eae <memchr+0x1a>
 8003ea6:	7804      	ldrb	r4, [r0, #0]
 8003ea8:	3301      	adds	r3, #1
 8003eaa:	428c      	cmp	r4, r1
 8003eac:	d1f6      	bne.n	8003e9c <memchr+0x8>
 8003eae:	bd10      	pop	{r4, pc}

08003eb0 <memcpy>:
 8003eb0:	440a      	add	r2, r1
 8003eb2:	4291      	cmp	r1, r2
 8003eb4:	f100 33ff 	add.w	r3, r0, #4294967295
 8003eb8:	d100      	bne.n	8003ebc <memcpy+0xc>
 8003eba:	4770      	bx	lr
 8003ebc:	b510      	push	{r4, lr}
 8003ebe:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003ec2:	4291      	cmp	r1, r2
 8003ec4:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003ec8:	d1f9      	bne.n	8003ebe <memcpy+0xe>
 8003eca:	bd10      	pop	{r4, pc}

08003ecc <_realloc_r>:
 8003ecc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003ed0:	4680      	mov	r8, r0
 8003ed2:	4615      	mov	r5, r2
 8003ed4:	460c      	mov	r4, r1
 8003ed6:	b921      	cbnz	r1, 8003ee2 <_realloc_r+0x16>
 8003ed8:	4611      	mov	r1, r2
 8003eda:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003ede:	f7ff bc39 	b.w	8003754 <_malloc_r>
 8003ee2:	b92a      	cbnz	r2, 8003ef0 <_realloc_r+0x24>
 8003ee4:	f7ff fbcc 	bl	8003680 <_free_r>
 8003ee8:	2400      	movs	r4, #0
 8003eea:	4620      	mov	r0, r4
 8003eec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003ef0:	f000 f81a 	bl	8003f28 <_malloc_usable_size_r>
 8003ef4:	4285      	cmp	r5, r0
 8003ef6:	4606      	mov	r6, r0
 8003ef8:	d802      	bhi.n	8003f00 <_realloc_r+0x34>
 8003efa:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8003efe:	d8f4      	bhi.n	8003eea <_realloc_r+0x1e>
 8003f00:	4629      	mov	r1, r5
 8003f02:	4640      	mov	r0, r8
 8003f04:	f7ff fc26 	bl	8003754 <_malloc_r>
 8003f08:	4607      	mov	r7, r0
 8003f0a:	2800      	cmp	r0, #0
 8003f0c:	d0ec      	beq.n	8003ee8 <_realloc_r+0x1c>
 8003f0e:	42b5      	cmp	r5, r6
 8003f10:	462a      	mov	r2, r5
 8003f12:	4621      	mov	r1, r4
 8003f14:	bf28      	it	cs
 8003f16:	4632      	movcs	r2, r6
 8003f18:	f7ff ffca 	bl	8003eb0 <memcpy>
 8003f1c:	4621      	mov	r1, r4
 8003f1e:	4640      	mov	r0, r8
 8003f20:	f7ff fbae 	bl	8003680 <_free_r>
 8003f24:	463c      	mov	r4, r7
 8003f26:	e7e0      	b.n	8003eea <_realloc_r+0x1e>

08003f28 <_malloc_usable_size_r>:
 8003f28:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003f2c:	1f18      	subs	r0, r3, #4
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	bfbc      	itt	lt
 8003f32:	580b      	ldrlt	r3, [r1, r0]
 8003f34:	18c0      	addlt	r0, r0, r3
 8003f36:	4770      	bx	lr

08003f38 <_init>:
 8003f38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f3a:	bf00      	nop
 8003f3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003f3e:	bc08      	pop	{r3}
 8003f40:	469e      	mov	lr, r3
 8003f42:	4770      	bx	lr

08003f44 <_fini>:
 8003f44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f46:	bf00      	nop
 8003f48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003f4a:	bc08      	pop	{r3}
 8003f4c:	469e      	mov	lr, r3
 8003f4e:	4770      	bx	lr


hello.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003acc  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000174  08003bd8  08003bd8  00004bd8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003d4c  08003d4c  000050d0  2**0
                  CONTENTS
  4 .ARM          00000008  08003d4c  08003d4c  00004d4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003d54  08003d54  000050d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003d54  08003d54  00004d54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003d58  08003d58  00004d58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000d0  20000000  08003d5c  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000037c  200000d0  08003e2c  000050d0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000044c  08003e2c  0000544c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000050d0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c517  00000000  00000000  000050f9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001de2  00000000  00000000  00011610  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000cc0  00000000  00000000  000133f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000009f9  00000000  00000000  000140b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00001c73  00000000  00000000  00014ab1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e65c  00000000  00000000  00016724  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008ab8e  00000000  00000000  00024d80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000af90e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003a54  00000000  00000000  000af954  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004e  00000000  00000000  000b33a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200000d0 	.word	0x200000d0
 8000128:	00000000 	.word	0x00000000
 800012c:	08003bc0 	.word	0x08003bc0

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200000d4 	.word	0x200000d4
 8000148:	08003bc0 	.word	0x08003bc0

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <HAL_UART_TxCpltCallback>:

/* USER CODE BEGIN PV */
static volatile uint8_t uart_tx_complete = 1; // 初始化为发送完成状态

// 串口发送完成回调函数
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 800015c:	b480      	push	{r7}
 800015e:	b083      	sub	sp, #12
 8000160:	af00      	add	r7, sp, #0
 8000162:	6078      	str	r0, [r7, #4]
    if (huart == &huart2) {
 8000164:	687b      	ldr	r3, [r7, #4]
 8000166:	4a05      	ldr	r2, [pc, #20]	@ (800017c <HAL_UART_TxCpltCallback+0x20>)
 8000168:	4293      	cmp	r3, r2
 800016a:	d102      	bne.n	8000172 <HAL_UART_TxCpltCallback+0x16>
        uart_tx_complete = 1; // 标记发送完成
 800016c:	4b04      	ldr	r3, [pc, #16]	@ (8000180 <HAL_UART_TxCpltCallback+0x24>)
 800016e:	2201      	movs	r2, #1
 8000170:	701a      	strb	r2, [r3, #0]
    }
}
 8000172:	bf00      	nop
 8000174:	370c      	adds	r7, #12
 8000176:	46bd      	mov	sp, r7
 8000178:	bc80      	pop	{r7}
 800017a:	4770      	bx	lr
 800017c:	20000134 	.word	0x20000134
 8000180:	20000000 	.word	0x20000000

08000184 <send_data_safely>:

// 安全的发送函数
void send_data_safely(uint8_t *data, uint16_t size) {
 8000184:	b580      	push	{r7, lr}
 8000186:	b082      	sub	sp, #8
 8000188:	af00      	add	r7, sp, #0
 800018a:	6078      	str	r0, [r7, #4]
 800018c:	460b      	mov	r3, r1
 800018e:	807b      	strh	r3, [r7, #2]
    while (!uart_tx_complete); // 等待上一次发送完成
 8000190:	bf00      	nop
 8000192:	4b09      	ldr	r3, [pc, #36]	@ (80001b8 <send_data_safely+0x34>)
 8000194:	781b      	ldrb	r3, [r3, #0]
 8000196:	b2db      	uxtb	r3, r3
 8000198:	2b00      	cmp	r3, #0
 800019a:	d0fa      	beq.n	8000192 <send_data_safely+0xe>
    uart_tx_complete = 0; // 标记开始新的发送
 800019c:	4b06      	ldr	r3, [pc, #24]	@ (80001b8 <send_data_safely+0x34>)
 800019e:	2200      	movs	r2, #0
 80001a0:	701a      	strb	r2, [r3, #0]
    HAL_UART_Transmit_IT(&huart2, data, size);
 80001a2:	887b      	ldrh	r3, [r7, #2]
 80001a4:	461a      	mov	r2, r3
 80001a6:	6879      	ldr	r1, [r7, #4]
 80001a8:	4804      	ldr	r0, [pc, #16]	@ (80001bc <send_data_safely+0x38>)
 80001aa:	f002 fb4b 	bl	8002844 <HAL_UART_Transmit_IT>
}
 80001ae:	bf00      	nop
 80001b0:	3708      	adds	r7, #8
 80001b2:	46bd      	mov	sp, r7
 80001b4:	bd80      	pop	{r7, pc}
 80001b6:	bf00      	nop
 80001b8:	20000000 	.word	0x20000000
 80001bc:	20000134 	.word	0x20000134

080001c0 <ReadKeyInfo>:
} Ec11Encoder;

static Ec11Encoder ec11Encoder;

bool ReadKeyInfo(KeyInfo *out, uint8_t *count)
{
 80001c0:	b590      	push	{r4, r7, lr}
 80001c2:	b085      	sub	sp, #20
 80001c4:	af00      	add	r7, sp, #0
 80001c6:	6078      	str	r0, [r7, #4]
 80001c8:	6039      	str	r1, [r7, #0]
	bool ret = false;
 80001ca:	2300      	movs	r3, #0
 80001cc:	73fb      	strb	r3, [r7, #15]
	Ec11KeyCircleBuf *cbuf = &ec11Encoder.keyCircleBuf;
 80001ce:	4b20      	ldr	r3, [pc, #128]	@ (8000250 <ReadKeyInfo+0x90>)
 80001d0:	60bb      	str	r3, [r7, #8]
	accquire_spinlock(&cbuf->bufLock, 0);
 80001d2:	68bb      	ldr	r3, [r7, #8]
 80001d4:	3324      	adds	r3, #36	@ 0x24
 80001d6:	2100      	movs	r1, #0
 80001d8:	4618      	mov	r0, r3
 80001da:	f000 fd4e 	bl	8000c7a <accquire_spinlock>
	if (cbuf->count > 0) {
 80001de:	68bb      	ldr	r3, [r7, #8]
 80001e0:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 80001e4:	2b00      	cmp	r3, #0
 80001e6:	d029      	beq.n	800023c <ReadKeyInfo+0x7c>
		*out = cbuf->keyInfoBuf[cbuf->readIndex];
 80001e8:	68bb      	ldr	r3, [r7, #8]
 80001ea:	f893 3020 	ldrb.w	r3, [r3, #32]
 80001ee:	6879      	ldr	r1, [r7, #4]
 80001f0:	68ba      	ldr	r2, [r7, #8]
 80001f2:	460c      	mov	r4, r1
 80001f4:	00db      	lsls	r3, r3, #3
 80001f6:	4413      	add	r3, r2
 80001f8:	e893 0003 	ldmia.w	r3, {r0, r1}
 80001fc:	e884 0003 	stmia.w	r4, {r0, r1}
		cbuf->count--;
 8000200:	68bb      	ldr	r3, [r7, #8]
 8000202:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 8000206:	3b01      	subs	r3, #1
 8000208:	b2da      	uxtb	r2, r3
 800020a:	68bb      	ldr	r3, [r7, #8]
 800020c:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
		*count = cbuf->count;
 8000210:	68bb      	ldr	r3, [r7, #8]
 8000212:	f893 2022 	ldrb.w	r2, [r3, #34]	@ 0x22
 8000216:	683b      	ldr	r3, [r7, #0]
 8000218:	701a      	strb	r2, [r3, #0]
		cbuf->readIndex = (cbuf->readIndex + 1) % KEY_BUF_SIZE;
 800021a:	68bb      	ldr	r3, [r7, #8]
 800021c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000220:	3301      	adds	r3, #1
 8000222:	425a      	negs	r2, r3
 8000224:	f003 0303 	and.w	r3, r3, #3
 8000228:	f002 0203 	and.w	r2, r2, #3
 800022c:	bf58      	it	pl
 800022e:	4253      	negpl	r3, r2
 8000230:	b2da      	uxtb	r2, r3
 8000232:	68bb      	ldr	r3, [r7, #8]
 8000234:	f883 2020 	strb.w	r2, [r3, #32]
		ret = true;
 8000238:	2301      	movs	r3, #1
 800023a:	73fb      	strb	r3, [r7, #15]
	}
	release_spinlock(&cbuf->bufLock);
 800023c:	68bb      	ldr	r3, [r7, #8]
 800023e:	3324      	adds	r3, #36	@ 0x24
 8000240:	4618      	mov	r0, r3
 8000242:	f000 fd42 	bl	8000cca <release_spinlock>
	return ret;
 8000246:	7bfb      	ldrb	r3, [r7, #15]
}
 8000248:	4618      	mov	r0, r3
 800024a:	3714      	adds	r7, #20
 800024c:	46bd      	mov	sp, r7
 800024e:	bd90      	pop	{r4, r7, pc}
 8000250:	20000180 	.word	0x20000180

08000254 <WriteKeyInfo>:
	release_spinlock(&cbuf->bufLock);
	return ret;
}

void WriteKeyInfo(const KeyInfo *keyInfo)
{
 8000254:	b580      	push	{r7, lr}
 8000256:	b084      	sub	sp, #16
 8000258:	af00      	add	r7, sp, #0
 800025a:	6078      	str	r0, [r7, #4]
	Ec11KeyCircleBuf *cbuf = &ec11Encoder.keyCircleBuf;
 800025c:	4b2c      	ldr	r3, [pc, #176]	@ (8000310 <WriteKeyInfo+0xbc>)
 800025e:	60fb      	str	r3, [r7, #12]
	accquire_spinlock(&cbuf->bufLock, 0);
 8000260:	68fb      	ldr	r3, [r7, #12]
 8000262:	3324      	adds	r3, #36	@ 0x24
 8000264:	2100      	movs	r1, #0
 8000266:	4618      	mov	r0, r3
 8000268:	f000 fd07 	bl	8000c7a <accquire_spinlock>
	if (cbuf->count >= KEY_BUF_SIZE && cbuf->writeIndex == cbuf->readIndex) { // circlebuf满的时候写数据的时候需要更新读索引
 800026c:	68fb      	ldr	r3, [r7, #12]
 800026e:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 8000272:	2b03      	cmp	r3, #3
 8000274:	d916      	bls.n	80002a4 <WriteKeyInfo+0x50>
 8000276:	68fb      	ldr	r3, [r7, #12]
 8000278:	f893 2021 	ldrb.w	r2, [r3, #33]	@ 0x21
 800027c:	68fb      	ldr	r3, [r7, #12]
 800027e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000282:	429a      	cmp	r2, r3
 8000284:	d10e      	bne.n	80002a4 <WriteKeyInfo+0x50>
		cbuf->readIndex = (cbuf->readIndex + 1) % KEY_BUF_SIZE;
 8000286:	68fb      	ldr	r3, [r7, #12]
 8000288:	f893 3020 	ldrb.w	r3, [r3, #32]
 800028c:	3301      	adds	r3, #1
 800028e:	425a      	negs	r2, r3
 8000290:	f003 0303 	and.w	r3, r3, #3
 8000294:	f002 0203 	and.w	r2, r2, #3
 8000298:	bf58      	it	pl
 800029a:	4253      	negpl	r3, r2
 800029c:	b2da      	uxtb	r2, r3
 800029e:	68fb      	ldr	r3, [r7, #12]
 80002a0:	f883 2020 	strb.w	r2, [r3, #32]
	}
	cbuf->keyInfoBuf[cbuf->writeIndex] = *keyInfo;
 80002a4:	68fb      	ldr	r3, [r7, #12]
 80002a6:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80002aa:	68fa      	ldr	r2, [r7, #12]
 80002ac:	6879      	ldr	r1, [r7, #4]
 80002ae:	00db      	lsls	r3, r3, #3
 80002b0:	4413      	add	r3, r2
 80002b2:	460a      	mov	r2, r1
 80002b4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80002b8:	e883 0003 	stmia.w	r3, {r0, r1}
	cbuf->writeIndex = (cbuf->writeIndex + 1) % KEY_BUF_SIZE;
 80002bc:	68fb      	ldr	r3, [r7, #12]
 80002be:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80002c2:	3301      	adds	r3, #1
 80002c4:	425a      	negs	r2, r3
 80002c6:	f003 0303 	and.w	r3, r3, #3
 80002ca:	f002 0203 	and.w	r2, r2, #3
 80002ce:	bf58      	it	pl
 80002d0:	4253      	negpl	r3, r2
 80002d2:	b2da      	uxtb	r2, r3
 80002d4:	68fb      	ldr	r3, [r7, #12]
 80002d6:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
	cbuf->count++;
 80002da:	68fb      	ldr	r3, [r7, #12]
 80002dc:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 80002e0:	3301      	adds	r3, #1
 80002e2:	b2da      	uxtb	r2, r3
 80002e4:	68fb      	ldr	r3, [r7, #12]
 80002e6:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
	if (cbuf->count > KEY_BUF_SIZE) {
 80002ea:	68fb      	ldr	r3, [r7, #12]
 80002ec:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 80002f0:	2b04      	cmp	r3, #4
 80002f2:	d903      	bls.n	80002fc <WriteKeyInfo+0xa8>
		cbuf->count = KEY_BUF_SIZE;
 80002f4:	68fb      	ldr	r3, [r7, #12]
 80002f6:	2204      	movs	r2, #4
 80002f8:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
	}
	release_spinlock(&cbuf->bufLock);
 80002fc:	68fb      	ldr	r3, [r7, #12]
 80002fe:	3324      	adds	r3, #36	@ 0x24
 8000300:	4618      	mov	r0, r3
 8000302:	f000 fce2 	bl	8000cca <release_spinlock>
}
 8000306:	bf00      	nop
 8000308:	3710      	adds	r7, #16
 800030a:	46bd      	mov	sp, r7
 800030c:	bd80      	pop	{r7, pc}
 800030e:	bf00      	nop
 8000310:	20000180 	.word	0x20000180

08000314 <Ec11ResetStateMachineAnd>:

void Ec11ResetStateMachineAnd()
{
 8000314:	b480      	push	{r7}
 8000316:	af00      	add	r7, sp, #0
	ec11Encoder.ec11StateMachine.currentState = EC11_KEY_CLICK;
 8000318:	4b0e      	ldr	r3, [pc, #56]	@ (8000354 <Ec11ResetStateMachineAnd+0x40>)
 800031a:	2202      	movs	r2, #2
 800031c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
	ec11Encoder.ec11StateMachine.currentStep = KEY_STEP_PRESS;
 8000320:	4b0c      	ldr	r3, [pc, #48]	@ (8000354 <Ec11ResetStateMachineAnd+0x40>)
 8000322:	2200      	movs	r2, #0
 8000324:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
	ec11Encoder.lastKeyLevel = GPIO_PIN_SET;
 8000328:	4b0a      	ldr	r3, [pc, #40]	@ (8000354 <Ec11ResetStateMachineAnd+0x40>)
 800032a:	2201      	movs	r2, #1
 800032c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
	ec11Encoder.lastPressTick = 0;
 8000330:	4b08      	ldr	r3, [pc, #32]	@ (8000354 <Ec11ResetStateMachineAnd+0x40>)
 8000332:	2200      	movs	r2, #0
 8000334:	635a      	str	r2, [r3, #52]	@ 0x34
	ec11Encoder.debouncingTick = 0;
 8000336:	4b07      	ldr	r3, [pc, #28]	@ (8000354 <Ec11ResetStateMachineAnd+0x40>)
 8000338:	2200      	movs	r2, #0
 800033a:	639a      	str	r2, [r3, #56]	@ 0x38
	ec11Encoder.lastClickTick = 0;
 800033c:	4b05      	ldr	r3, [pc, #20]	@ (8000354 <Ec11ResetStateMachineAnd+0x40>)
 800033e:	2200      	movs	r2, #0
 8000340:	63da      	str	r2, [r3, #60]	@ 0x3c
	ec11Encoder.hasRotate = false;
 8000342:	4b04      	ldr	r3, [pc, #16]	@ (8000354 <Ec11ResetStateMachineAnd+0x40>)
 8000344:	2200      	movs	r2, #0
 8000346:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
}
 800034a:	bf00      	nop
 800034c:	46bd      	mov	sp, r7
 800034e:	bc80      	pop	{r7}
 8000350:	4770      	bx	lr
 8000352:	bf00      	nop
 8000354:	20000180 	.word	0x20000180

08000358 <Ec11EncoderInit>:

void Ec11EncoderInit() {
 8000358:	b580      	push	{r7, lr}
 800035a:	af00      	add	r7, sp, #0
	ec11Encoder.keyCircleBuf.readIndex = 0;
 800035c:	4b0b      	ldr	r3, [pc, #44]	@ (800038c <Ec11EncoderInit+0x34>)
 800035e:	2200      	movs	r2, #0
 8000360:	f883 2020 	strb.w	r2, [r3, #32]
	ec11Encoder.keyCircleBuf.writeIndex = 0;
 8000364:	4b09      	ldr	r3, [pc, #36]	@ (800038c <Ec11EncoderInit+0x34>)
 8000366:	2200      	movs	r2, #0
 8000368:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
	ec11Encoder.keyCircleBuf.count = 0;
 800036c:	4b07      	ldr	r3, [pc, #28]	@ (800038c <Ec11EncoderInit+0x34>)
 800036e:	2200      	movs	r2, #0
 8000370:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
	ec11Encoder.keyCircleBuf.bufLock = 0;
 8000374:	4b05      	ldr	r3, [pc, #20]	@ (800038c <Ec11EncoderInit+0x34>)
 8000376:	2200      	movs	r2, #0
 8000378:	625a      	str	r2, [r3, #36]	@ 0x24
	memset(ec11Encoder.keyCircleBuf.keyInfoBuf, 0, sizeof(KeyInfo) * KEY_BUF_SIZE);
 800037a:	2220      	movs	r2, #32
 800037c:	2100      	movs	r1, #0
 800037e:	4803      	ldr	r0, [pc, #12]	@ (800038c <Ec11EncoderInit+0x34>)
 8000380:	f002 ff8e 	bl	80032a0 <memset>

	Ec11ResetStateMachineAnd();
 8000384:	f7ff ffc6 	bl	8000314 <Ec11ResetStateMachineAnd>
}
 8000388:	bf00      	nop
 800038a:	bd80      	pop	{r7, pc}
 800038c:	20000180 	.word	0x20000180

08000390 <ProcessClickPress>:

void ProcessClickPress()
{
 8000390:	b580      	push	{r7, lr}
 8000392:	b082      	sub	sp, #8
 8000394:	af00      	add	r7, sp, #0
	GPIO_PinState currentKeyLevel = HAL_GPIO_ReadPin(ec11_Key_GPIO_Port, ec11_Key_Pin);
 8000396:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800039a:	480a      	ldr	r0, [pc, #40]	@ (80003c4 <ProcessClickPress+0x34>)
 800039c:	f001 f9b8 	bl	8001710 <HAL_GPIO_ReadPin>
 80003a0:	4603      	mov	r3, r0
 80003a2:	71fb      	strb	r3, [r7, #7]
	if (currentKeyLevel == GPIO_PIN_RESET/* && currentKeyLevel != ec11Encoder.lastKeyLevel*/) {
 80003a4:	79fb      	ldrb	r3, [r7, #7]
 80003a6:	2b00      	cmp	r3, #0
 80003a8:	d108      	bne.n	80003bc <ProcessClickPress+0x2c>
		ec11Encoder.ec11StateMachine.currentStep = KEY_STEP_PRESS_DEBOUNCING;
 80003aa:	4b07      	ldr	r3, [pc, #28]	@ (80003c8 <ProcessClickPress+0x38>)
 80003ac:	2201      	movs	r2, #1
 80003ae:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
		ec11Encoder.debouncingTick = HAL_GetTick();
 80003b2:	f000 fe3b 	bl	800102c <HAL_GetTick>
 80003b6:	4603      	mov	r3, r0
 80003b8:	4a03      	ldr	r2, [pc, #12]	@ (80003c8 <ProcessClickPress+0x38>)
 80003ba:	6393      	str	r3, [r2, #56]	@ 0x38
//		ec11Encoder.lastKeyLevel = currentKeyLevel;
	}
}
 80003bc:	bf00      	nop
 80003be:	3708      	adds	r7, #8
 80003c0:	46bd      	mov	sp, r7
 80003c2:	bd80      	pop	{r7, pc}
 80003c4:	40010800 	.word	0x40010800
 80003c8:	20000180 	.word	0x20000180

080003cc <ProcessClickPressDebouncing>:

void ProcessClickPressDebouncing()
{
 80003cc:	b580      	push	{r7, lr}
 80003ce:	b084      	sub	sp, #16
 80003d0:	af00      	add	r7, sp, #0
	uint32_t currTick = HAL_GetTick();
 80003d2:	f000 fe2b 	bl	800102c <HAL_GetTick>
 80003d6:	60f8      	str	r0, [r7, #12]
	GPIO_PinState currentKeyLevel = HAL_GPIO_ReadPin(ec11_Key_GPIO_Port, ec11_Key_Pin);
 80003d8:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80003dc:	4814      	ldr	r0, [pc, #80]	@ (8000430 <ProcessClickPressDebouncing+0x64>)
 80003de:	f001 f997 	bl	8001710 <HAL_GPIO_ReadPin>
 80003e2:	4603      	mov	r3, r0
 80003e4:	72fb      	strb	r3, [r7, #11]
	if (currTick - ec11Encoder.debouncingTick > KEY_DEBOUNCING_TIME_10MS) {
 80003e6:	4b13      	ldr	r3, [pc, #76]	@ (8000434 <ProcessClickPressDebouncing+0x68>)
 80003e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80003ea:	68fa      	ldr	r2, [r7, #12]
 80003ec:	1ad3      	subs	r3, r2, r3
 80003ee:	2b0a      	cmp	r3, #10
 80003f0:	d919      	bls.n	8000426 <ProcessClickPressDebouncing+0x5a>
		if (currentKeyLevel == GPIO_PIN_RESET) { // 去抖成功
 80003f2:	7afb      	ldrb	r3, [r7, #11]
 80003f4:	2b00      	cmp	r3, #0
 80003f6:	d114      	bne.n	8000422 <ProcessClickPressDebouncing+0x56>
			ec11Encoder.ec11StateMachine.currentStep = KEY_STEP_RELEASE_DEBOUNCING;
 80003f8:	4b0e      	ldr	r3, [pc, #56]	@ (8000434 <ProcessClickPressDebouncing+0x68>)
 80003fa:	2202      	movs	r2, #2
 80003fc:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
			ec11Encoder.lastPressTick = currTick; // 保存识别按下的tick
 8000400:	4a0c      	ldr	r2, [pc, #48]	@ (8000434 <ProcessClickPressDebouncing+0x68>)
 8000402:	68fb      	ldr	r3, [r7, #12]
 8000404:	6353      	str	r3, [r2, #52]	@ 0x34
			ec11Encoder.debouncingTick = 0; // 重置去抖tick，为释放去抖准备
 8000406:	4b0b      	ldr	r3, [pc, #44]	@ (8000434 <ProcessClickPressDebouncing+0x68>)
 8000408:	2200      	movs	r2, #0
 800040a:	639a      	str	r2, [r3, #56]	@ 0x38

			KeyInfo keyInfo = { EC11_KEY, EC11_KEY_PRESS, 0 };
 800040c:	4a0a      	ldr	r2, [pc, #40]	@ (8000438 <ProcessClickPressDebouncing+0x6c>)
 800040e:	463b      	mov	r3, r7
 8000410:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000414:	e883 0003 	stmia.w	r3, {r0, r1}
			WriteKeyInfo(&keyInfo);
 8000418:	463b      	mov	r3, r7
 800041a:	4618      	mov	r0, r3
 800041c:	f7ff ff1a 	bl	8000254 <WriteKeyInfo>
		} else {
			Ec11ResetStateMachineAnd();
		}
	}
}
 8000420:	e001      	b.n	8000426 <ProcessClickPressDebouncing+0x5a>
			Ec11ResetStateMachineAnd();
 8000422:	f7ff ff77 	bl	8000314 <Ec11ResetStateMachineAnd>
}
 8000426:	bf00      	nop
 8000428:	3710      	adds	r7, #16
 800042a:	46bd      	mov	sp, r7
 800042c:	bd80      	pop	{r7, pc}
 800042e:	bf00      	nop
 8000430:	40010800 	.word	0x40010800
 8000434:	20000180 	.word	0x20000180
 8000438:	08003c64 	.word	0x08003c64

0800043c <ProcessClickReleaseDebouncing>:

void ProcessClickReleaseDebouncing()
{
 800043c:	b580      	push	{r7, lr}
 800043e:	af00      	add	r7, sp, #0
	if (HAL_GPIO_ReadPin(ec11_Key_GPIO_Port, ec11_Key_Pin) == GPIO_PIN_SET) {
 8000440:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000444:	480f      	ldr	r0, [pc, #60]	@ (8000484 <ProcessClickReleaseDebouncing+0x48>)
 8000446:	f001 f963 	bl	8001710 <HAL_GPIO_ReadPin>
 800044a:	4603      	mov	r3, r0
 800044c:	2b01      	cmp	r3, #1
 800044e:	d117      	bne.n	8000480 <ProcessClickReleaseDebouncing+0x44>
		if (ec11Encoder.debouncingTick == 0) {
 8000450:	4b0d      	ldr	r3, [pc, #52]	@ (8000488 <ProcessClickReleaseDebouncing+0x4c>)
 8000452:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000454:	2b00      	cmp	r3, #0
 8000456:	d104      	bne.n	8000462 <ProcessClickReleaseDebouncing+0x26>
			ec11Encoder.debouncingTick = HAL_GetTick();
 8000458:	f000 fde8 	bl	800102c <HAL_GetTick>
 800045c:	4603      	mov	r3, r0
 800045e:	4a0a      	ldr	r2, [pc, #40]	@ (8000488 <ProcessClickReleaseDebouncing+0x4c>)
 8000460:	6393      	str	r3, [r2, #56]	@ 0x38
		}

		if (HAL_GetTick() - ec11Encoder.debouncingTick > KEY_DEBOUNCING_TIME_10MS) {
 8000462:	f000 fde3 	bl	800102c <HAL_GetTick>
 8000466:	4602      	mov	r2, r0
 8000468:	4b07      	ldr	r3, [pc, #28]	@ (8000488 <ProcessClickReleaseDebouncing+0x4c>)
 800046a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800046c:	1ad3      	subs	r3, r2, r3
 800046e:	2b0a      	cmp	r3, #10
 8000470:	d906      	bls.n	8000480 <ProcessClickReleaseDebouncing+0x44>
			ec11Encoder.ec11StateMachine.currentStep = KEY_STEP_RELEASE;
 8000472:	4b05      	ldr	r3, [pc, #20]	@ (8000488 <ProcessClickReleaseDebouncing+0x4c>)
 8000474:	2203      	movs	r2, #3
 8000476:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
			ec11Encoder.debouncingTick = 0;
 800047a:	4b03      	ldr	r3, [pc, #12]	@ (8000488 <ProcessClickReleaseDebouncing+0x4c>)
 800047c:	2200      	movs	r2, #0
 800047e:	639a      	str	r2, [r3, #56]	@ 0x38
		}
	}
}
 8000480:	bf00      	nop
 8000482:	bd80      	pop	{r7, pc}
 8000484:	40010800 	.word	0x40010800
 8000488:	20000180 	.word	0x20000180

0800048c <ProcessClickRelease>:

void ProcessClickRelease()
{
 800048c:	b580      	push	{r7, lr}
 800048e:	b084      	sub	sp, #16
 8000490:	af00      	add	r7, sp, #0
	if (ec11Encoder.hasRotate) { // 旋转后放开
 8000492:	4b1c      	ldr	r3, [pc, #112]	@ (8000504 <ProcessClickRelease+0x78>)
 8000494:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8000498:	2b00      	cmp	r3, #0
 800049a:	d002      	beq.n	80004a2 <ProcessClickRelease+0x16>
		Ec11ResetStateMachineAnd();
 800049c:	f7ff ff3a 	bl	8000314 <Ec11ResetStateMachineAnd>
 80004a0:	e02d      	b.n	80004fe <ProcessClickRelease+0x72>
		return;
	}

	KeyInfo keyInfo = { EC11_KEY, EC11_KEY_INVALID, 0 };
 80004a2:	2301      	movs	r3, #1
 80004a4:	713b      	strb	r3, [r7, #4]
 80004a6:	2300      	movs	r3, #0
 80004a8:	717b      	strb	r3, [r7, #5]
 80004aa:	2300      	movs	r3, #0
 80004ac:	60bb      	str	r3, [r7, #8]
	uint32_t resetLevelTick = HAL_GetTick() - ec11Encoder.lastPressTick;
 80004ae:	f000 fdbd 	bl	800102c <HAL_GetTick>
 80004b2:	4602      	mov	r2, r0
 80004b4:	4b13      	ldr	r3, [pc, #76]	@ (8000504 <ProcessClickRelease+0x78>)
 80004b6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80004b8:	1ad3      	subs	r3, r2, r3
 80004ba:	60fb      	str	r3, [r7, #12]
	if (resetLevelTick <= KEY_LONG_CLICK_TIME_700MS) { // 单击
 80004bc:	68fb      	ldr	r3, [r7, #12]
 80004be:	f5b3 7f2f 	cmp.w	r3, #700	@ 0x2bc
 80004c2:	d810      	bhi.n	80004e6 <ProcessClickRelease+0x5a>
		ec11Encoder.lastClickTick = HAL_GetTick(); // 更新单击tick，判断双击的时候使用
 80004c4:	f000 fdb2 	bl	800102c <HAL_GetTick>
 80004c8:	4603      	mov	r3, r0
 80004ca:	4a0e      	ldr	r2, [pc, #56]	@ (8000504 <ProcessClickRelease+0x78>)
 80004cc:	63d3      	str	r3, [r2, #60]	@ 0x3c
//			keyInfo.keyState = EC11_KEY_CLICK;

		ec11Encoder.ec11StateMachine.currentState = EC11_KEY_DOUBLE_CLICK;
 80004ce:	4b0d      	ldr	r3, [pc, #52]	@ (8000504 <ProcessClickRelease+0x78>)
 80004d0:	2203      	movs	r2, #3
 80004d2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		ec11Encoder.ec11StateMachine.currentStep = KEY_STEP_PRESS;
 80004d6:	4b0b      	ldr	r3, [pc, #44]	@ (8000504 <ProcessClickRelease+0x78>)
 80004d8:	2200      	movs	r2, #0
 80004da:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
		ec11Encoder.lastPressTick = 0;
 80004de:	4b09      	ldr	r3, [pc, #36]	@ (8000504 <ProcessClickRelease+0x78>)
 80004e0:	2200      	movs	r2, #0
 80004e2:	635a      	str	r2, [r3, #52]	@ 0x34
 80004e4:	e00b      	b.n	80004fe <ProcessClickRelease+0x72>
	} else if (resetLevelTick > KEY_LONG_CLICK_TIME_700MS) { // 长按
 80004e6:	68fb      	ldr	r3, [r7, #12]
 80004e8:	f5b3 7f2f 	cmp.w	r3, #700	@ 0x2bc
 80004ec:	d907      	bls.n	80004fe <ProcessClickRelease+0x72>
		keyInfo.keyState = EC11_KEY_LONG_CLICK;
 80004ee:	2304      	movs	r3, #4
 80004f0:	717b      	strb	r3, [r7, #5]
		WriteKeyInfo(&keyInfo);
 80004f2:	1d3b      	adds	r3, r7, #4
 80004f4:	4618      	mov	r0, r3
 80004f6:	f7ff fead 	bl	8000254 <WriteKeyInfo>
		Ec11ResetStateMachineAnd();
 80004fa:	f7ff ff0b 	bl	8000314 <Ec11ResetStateMachineAnd>
	}
}
 80004fe:	3710      	adds	r7, #16
 8000500:	46bd      	mov	sp, r7
 8000502:	bd80      	pop	{r7, pc}
 8000504:	20000180 	.word	0x20000180

08000508 <ProcessDoubleClickPress>:

void ProcessDoubleClickPress()
{
 8000508:	b580      	push	{r7, lr}
 800050a:	b086      	sub	sp, #24
 800050c:	af00      	add	r7, sp, #0
	uint32_t currTick = HAL_GetTick();
 800050e:	f000 fd8d 	bl	800102c <HAL_GetTick>
 8000512:	6178      	str	r0, [r7, #20]
	uint32_t resetLevelTick = currTick - ec11Encoder.lastClickTick;
 8000514:	4b1f      	ldr	r3, [pc, #124]	@ (8000594 <ProcessDoubleClickPress+0x8c>)
 8000516:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000518:	697a      	ldr	r2, [r7, #20]
 800051a:	1ad3      	subs	r3, r2, r3
 800051c:	613b      	str	r3, [r7, #16]
	GPIO_PinState currKeyLevel = HAL_GPIO_ReadPin(ec11_Key_GPIO_Port, ec11_Key_Pin);
 800051e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000522:	481d      	ldr	r0, [pc, #116]	@ (8000598 <ProcessDoubleClickPress+0x90>)
 8000524:	f001 f8f4 	bl	8001710 <HAL_GPIO_ReadPin>
 8000528:	4603      	mov	r3, r0
 800052a:	73fb      	strb	r3, [r7, #15]

	if (currKeyLevel == GPIO_PIN_SET && resetLevelTick >= KEY_DOUBLE_TIME_200MS) {
 800052c:	7bfb      	ldrb	r3, [r7, #15]
 800052e:	2b01      	cmp	r3, #1
 8000530:	d11b      	bne.n	800056a <ProcessDoubleClickPress+0x62>
 8000532:	693b      	ldr	r3, [r7, #16]
 8000534:	2bc7      	cmp	r3, #199	@ 0xc7
 8000536:	d918      	bls.n	800056a <ProcessDoubleClickPress+0x62>
		if (ec11Encoder.lastClickTick != 0) { // 双击阈值内没有双击，则发送上次的单击事件
 8000538:	4b16      	ldr	r3, [pc, #88]	@ (8000594 <ProcessDoubleClickPress+0x8c>)
 800053a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800053c:	2b00      	cmp	r3, #0
 800053e:	d009      	beq.n	8000554 <ProcessDoubleClickPress+0x4c>
			KeyInfo keyInfo = { EC11_KEY, EC11_KEY_CLICK, 0 };
 8000540:	4a16      	ldr	r2, [pc, #88]	@ (800059c <ProcessDoubleClickPress+0x94>)
 8000542:	1d3b      	adds	r3, r7, #4
 8000544:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000548:	e883 0003 	stmia.w	r3, {r0, r1}
			WriteKeyInfo(&keyInfo);
 800054c:	1d3b      	adds	r3, r7, #4
 800054e:	4618      	mov	r0, r3
 8000550:	f7ff fe80 	bl	8000254 <WriteKeyInfo>
		}
		ec11Encoder.ec11StateMachine.currentState = EC11_KEY_CLICK;
 8000554:	4b0f      	ldr	r3, [pc, #60]	@ (8000594 <ProcessDoubleClickPress+0x8c>)
 8000556:	2202      	movs	r2, #2
 8000558:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		ec11Encoder.ec11StateMachine.currentStep = KEY_STEP_PRESS;
 800055c:	4b0d      	ldr	r3, [pc, #52]	@ (8000594 <ProcessDoubleClickPress+0x8c>)
 800055e:	2200      	movs	r2, #0
 8000560:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
		ec11Encoder.lastClickTick = 0;
 8000564:	4b0b      	ldr	r3, [pc, #44]	@ (8000594 <ProcessDoubleClickPress+0x8c>)
 8000566:	2200      	movs	r2, #0
 8000568:	63da      	str	r2, [r3, #60]	@ 0x3c
	}

	if (currKeyLevel == GPIO_PIN_RESET && resetLevelTick < KEY_DOUBLE_TIME_200MS) {
 800056a:	7bfb      	ldrb	r3, [r7, #15]
 800056c:	2b00      	cmp	r3, #0
 800056e:	d10d      	bne.n	800058c <ProcessDoubleClickPress+0x84>
 8000570:	693b      	ldr	r3, [r7, #16]
 8000572:	2bc7      	cmp	r3, #199	@ 0xc7
 8000574:	d80a      	bhi.n	800058c <ProcessDoubleClickPress+0x84>
		ec11Encoder.debouncingTick = currTick;
 8000576:	4a07      	ldr	r2, [pc, #28]	@ (8000594 <ProcessDoubleClickPress+0x8c>)
 8000578:	697b      	ldr	r3, [r7, #20]
 800057a:	6393      	str	r3, [r2, #56]	@ 0x38
		ec11Encoder.ec11StateMachine.currentState = EC11_KEY_DOUBLE_CLICK;
 800057c:	4b05      	ldr	r3, [pc, #20]	@ (8000594 <ProcessDoubleClickPress+0x8c>)
 800057e:	2203      	movs	r2, #3
 8000580:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		ec11Encoder.ec11StateMachine.currentStep = KEY_STEP_PRESS_DEBOUNCING;
 8000584:	4b03      	ldr	r3, [pc, #12]	@ (8000594 <ProcessDoubleClickPress+0x8c>)
 8000586:	2201      	movs	r2, #1
 8000588:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
	}
}
 800058c:	bf00      	nop
 800058e:	3718      	adds	r7, #24
 8000590:	46bd      	mov	sp, r7
 8000592:	bd80      	pop	{r7, pc}
 8000594:	20000180 	.word	0x20000180
 8000598:	40010800 	.word	0x40010800
 800059c:	08003c6c 	.word	0x08003c6c

080005a0 <ProcessDoubleClickDebouncing>:

void ProcessDoubleClickDebouncing()
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	b082      	sub	sp, #8
 80005a4:	af00      	add	r7, sp, #0
	uint32_t currTick = HAL_GetTick();
 80005a6:	f000 fd41 	bl	800102c <HAL_GetTick>
 80005aa:	6078      	str	r0, [r7, #4]
	if (HAL_GPIO_ReadPin(ec11_Key_GPIO_Port, ec11_Key_Pin) == GPIO_PIN_RESET) {
 80005ac:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80005b0:	480e      	ldr	r0, [pc, #56]	@ (80005ec <ProcessDoubleClickDebouncing+0x4c>)
 80005b2:	f001 f8ad 	bl	8001710 <HAL_GPIO_ReadPin>
 80005b6:	4603      	mov	r3, r0
 80005b8:	2b00      	cmp	r3, #0
 80005ba:	d113      	bne.n	80005e4 <ProcessDoubleClickDebouncing+0x44>
		if (currTick - ec11Encoder.debouncingTick > KEY_DEBOUNCING_TIME_10MS) {
 80005bc:	4b0c      	ldr	r3, [pc, #48]	@ (80005f0 <ProcessDoubleClickDebouncing+0x50>)
 80005be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80005c0:	687a      	ldr	r2, [r7, #4]
 80005c2:	1ad3      	subs	r3, r2, r3
 80005c4:	2b0a      	cmp	r3, #10
 80005c6:	d90d      	bls.n	80005e4 <ProcessDoubleClickDebouncing+0x44>
			ec11Encoder.ec11StateMachine.currentState = EC11_KEY_DOUBLE_CLICK;
 80005c8:	4b09      	ldr	r3, [pc, #36]	@ (80005f0 <ProcessDoubleClickDebouncing+0x50>)
 80005ca:	2203      	movs	r2, #3
 80005cc:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
			ec11Encoder.ec11StateMachine.currentStep = KEY_STEP_RELEASE_DEBOUNCING;
 80005d0:	4b07      	ldr	r3, [pc, #28]	@ (80005f0 <ProcessDoubleClickDebouncing+0x50>)
 80005d2:	2202      	movs	r2, #2
 80005d4:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
			ec11Encoder.lastPressTick = currTick;
 80005d8:	4a05      	ldr	r2, [pc, #20]	@ (80005f0 <ProcessDoubleClickDebouncing+0x50>)
 80005da:	687b      	ldr	r3, [r7, #4]
 80005dc:	6353      	str	r3, [r2, #52]	@ 0x34
			ec11Encoder.debouncingTick = 0;
 80005de:	4b04      	ldr	r3, [pc, #16]	@ (80005f0 <ProcessDoubleClickDebouncing+0x50>)
 80005e0:	2200      	movs	r2, #0
 80005e2:	639a      	str	r2, [r3, #56]	@ 0x38
		}
	}
}
 80005e4:	bf00      	nop
 80005e6:	3708      	adds	r7, #8
 80005e8:	46bd      	mov	sp, r7
 80005ea:	bd80      	pop	{r7, pc}
 80005ec:	40010800 	.word	0x40010800
 80005f0:	20000180 	.word	0x20000180

080005f4 <ProcessDoubleClickReleaseDebouncing>:

void ProcessDoubleClickReleaseDebouncing()
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	b082      	sub	sp, #8
 80005f8:	af00      	add	r7, sp, #0
	uint32_t currTick = HAL_GetTick();
 80005fa:	f000 fd17 	bl	800102c <HAL_GetTick>
 80005fe:	6078      	str	r0, [r7, #4]
	GPIO_PinState currKeyLevel = HAL_GPIO_ReadPin(ec11_Key_GPIO_Port, ec11_Key_Pin);
 8000600:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000604:	4811      	ldr	r0, [pc, #68]	@ (800064c <ProcessDoubleClickReleaseDebouncing+0x58>)
 8000606:	f001 f883 	bl	8001710 <HAL_GPIO_ReadPin>
 800060a:	4603      	mov	r3, r0
 800060c:	70fb      	strb	r3, [r7, #3]
	if (currKeyLevel == GPIO_PIN_SET) {
 800060e:	78fb      	ldrb	r3, [r7, #3]
 8000610:	2b01      	cmp	r3, #1
 8000612:	d117      	bne.n	8000644 <ProcessDoubleClickReleaseDebouncing+0x50>
		if (ec11Encoder.debouncingTick == 0) {
 8000614:	4b0e      	ldr	r3, [pc, #56]	@ (8000650 <ProcessDoubleClickReleaseDebouncing+0x5c>)
 8000616:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000618:	2b00      	cmp	r3, #0
 800061a:	d102      	bne.n	8000622 <ProcessDoubleClickReleaseDebouncing+0x2e>
			ec11Encoder.debouncingTick = currTick;
 800061c:	4a0c      	ldr	r2, [pc, #48]	@ (8000650 <ProcessDoubleClickReleaseDebouncing+0x5c>)
 800061e:	687b      	ldr	r3, [r7, #4]
 8000620:	6393      	str	r3, [r2, #56]	@ 0x38
		}

		if (currTick - ec11Encoder.debouncingTick > KEY_DEBOUNCING_TIME_10MS) { // 去抖时间到达
 8000622:	4b0b      	ldr	r3, [pc, #44]	@ (8000650 <ProcessDoubleClickReleaseDebouncing+0x5c>)
 8000624:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000626:	687a      	ldr	r2, [r7, #4]
 8000628:	1ad3      	subs	r3, r2, r3
 800062a:	2b0a      	cmp	r3, #10
 800062c:	d90a      	bls.n	8000644 <ProcessDoubleClickReleaseDebouncing+0x50>
			ec11Encoder.ec11StateMachine.currentState = EC11_KEY_DOUBLE_CLICK;
 800062e:	4b08      	ldr	r3, [pc, #32]	@ (8000650 <ProcessDoubleClickReleaseDebouncing+0x5c>)
 8000630:	2203      	movs	r2, #3
 8000632:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
			ec11Encoder.ec11StateMachine.currentStep = KEY_STEP_RELEASE;
 8000636:	4b06      	ldr	r3, [pc, #24]	@ (8000650 <ProcessDoubleClickReleaseDebouncing+0x5c>)
 8000638:	2203      	movs	r2, #3
 800063a:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
			ec11Encoder.debouncingTick = 0;
 800063e:	4b04      	ldr	r3, [pc, #16]	@ (8000650 <ProcessDoubleClickReleaseDebouncing+0x5c>)
 8000640:	2200      	movs	r2, #0
 8000642:	639a      	str	r2, [r3, #56]	@ 0x38
		}
	}
}
 8000644:	bf00      	nop
 8000646:	3708      	adds	r7, #8
 8000648:	46bd      	mov	sp, r7
 800064a:	bd80      	pop	{r7, pc}
 800064c:	40010800 	.word	0x40010800
 8000650:	20000180 	.word	0x20000180

08000654 <ProcessDoubleClickRelease>:

void ProcessDoubleClickRelease()
{
 8000654:	b580      	push	{r7, lr}
 8000656:	b082      	sub	sp, #8
 8000658:	af00      	add	r7, sp, #0
	if (ec11Encoder.hasRotate) {
 800065a:	4b0b      	ldr	r3, [pc, #44]	@ (8000688 <ProcessDoubleClickRelease+0x34>)
 800065c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8000660:	2b00      	cmp	r3, #0
 8000662:	d002      	beq.n	800066a <ProcessDoubleClickRelease+0x16>
		Ec11ResetStateMachineAnd();
 8000664:	f7ff fe56 	bl	8000314 <Ec11ResetStateMachineAnd>
 8000668:	e00b      	b.n	8000682 <ProcessDoubleClickRelease+0x2e>
		return;
	}

	KeyInfo keyInfo = { EC11_KEY, EC11_KEY_DOUBLE_CLICK, 0 };
 800066a:	4a08      	ldr	r2, [pc, #32]	@ (800068c <ProcessDoubleClickRelease+0x38>)
 800066c:	463b      	mov	r3, r7
 800066e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000672:	e883 0003 	stmia.w	r3, {r0, r1}
//	uint32_t currTick = HAL_GetTick();
//	if (currTick - ec11Encoder.lastPressTick > KEY_LONG_CLICK_TIME_700MS) {
//		keyInfo.keyState = EC11_KEY_LONG_CLICK;  // 单击+双击阈值内长按识别为长按
//	}
	WriteKeyInfo(&keyInfo);
 8000676:	463b      	mov	r3, r7
 8000678:	4618      	mov	r0, r3
 800067a:	f7ff fdeb 	bl	8000254 <WriteKeyInfo>
	Ec11ResetStateMachineAnd();
 800067e:	f7ff fe49 	bl	8000314 <Ec11ResetStateMachineAnd>
}
 8000682:	3708      	adds	r7, #8
 8000684:	46bd      	mov	sp, r7
 8000686:	bd80      	pop	{r7, pc}
 8000688:	20000180 	.word	0x20000180
 800068c:	08003c74 	.word	0x08003c74

08000690 <Ec11TickProcess>:

static void Ec11TickProcess() {
 8000690:	b580      	push	{r7, lr}
 8000692:	b084      	sub	sp, #16
 8000694:	af00      	add	r7, sp, #0
	static GPIO_PinState currALevel = GPIO_PIN_SET;
	static GPIO_PinState currBLevel = GPIO_PIN_SET;
	static uint8_t switchACounter = 0;
	static uint8_t switchBCounter = 0;

	currALevel = HAL_GPIO_ReadPin(ec11_A_GPIO_Port, ec11_A_Pin);
 8000696:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800069a:	4861      	ldr	r0, [pc, #388]	@ (8000820 <Ec11TickProcess+0x190>)
 800069c:	f001 f838 	bl	8001710 <HAL_GPIO_ReadPin>
 80006a0:	4603      	mov	r3, r0
 80006a2:	461a      	mov	r2, r3
 80006a4:	4b5f      	ldr	r3, [pc, #380]	@ (8000824 <Ec11TickProcess+0x194>)
 80006a6:	701a      	strb	r2, [r3, #0]
	currBLevel = HAL_GPIO_ReadPin(ec11_B_GPIO_Port, ec11_B_Pin);
 80006a8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80006ac:	485c      	ldr	r0, [pc, #368]	@ (8000820 <Ec11TickProcess+0x190>)
 80006ae:	f001 f82f 	bl	8001710 <HAL_GPIO_ReadPin>
 80006b2:	4603      	mov	r3, r0
 80006b4:	461a      	mov	r2, r3
 80006b6:	4b5c      	ldr	r3, [pc, #368]	@ (8000828 <Ec11TickProcess+0x198>)
 80006b8:	701a      	strb	r2, [r3, #0]
	if (currALevel != lastALevel) {
 80006ba:	4b5a      	ldr	r3, [pc, #360]	@ (8000824 <Ec11TickProcess+0x194>)
 80006bc:	781a      	ldrb	r2, [r3, #0]
 80006be:	4b5b      	ldr	r3, [pc, #364]	@ (800082c <Ec11TickProcess+0x19c>)
 80006c0:	781b      	ldrb	r3, [r3, #0]
 80006c2:	429a      	cmp	r2, r3
 80006c4:	d077      	beq.n	80007b6 <Ec11TickProcess+0x126>
		switchACounter = (switchACounter + 1) > 2 ? 1 : (switchACounter + 1);
 80006c6:	4b5a      	ldr	r3, [pc, #360]	@ (8000830 <Ec11TickProcess+0x1a0>)
 80006c8:	781b      	ldrb	r3, [r3, #0]
 80006ca:	2b01      	cmp	r3, #1
 80006cc:	d804      	bhi.n	80006d8 <Ec11TickProcess+0x48>
 80006ce:	4b58      	ldr	r3, [pc, #352]	@ (8000830 <Ec11TickProcess+0x1a0>)
 80006d0:	781b      	ldrb	r3, [r3, #0]
 80006d2:	3301      	adds	r3, #1
 80006d4:	b2db      	uxtb	r3, r3
 80006d6:	e000      	b.n	80006da <Ec11TickProcess+0x4a>
 80006d8:	2301      	movs	r3, #1
 80006da:	4a55      	ldr	r2, [pc, #340]	@ (8000830 <Ec11TickProcess+0x1a0>)
 80006dc:	7013      	strb	r3, [r2, #0]
		if (currALevel == GPIO_PIN_RESET) { // A相下降沿
 80006de:	4b51      	ldr	r3, [pc, #324]	@ (8000824 <Ec11TickProcess+0x194>)
 80006e0:	781b      	ldrb	r3, [r3, #0]
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	d10b      	bne.n	80006fe <Ec11TickProcess+0x6e>
			if (currBLevel == GPIO_PIN_SET) {
 80006e6:	4b50      	ldr	r3, [pc, #320]	@ (8000828 <Ec11TickProcess+0x198>)
 80006e8:	781b      	ldrb	r3, [r3, #0]
 80006ea:	2b01      	cmp	r3, #1
 80006ec:	d103      	bne.n	80006f6 <Ec11TickProcess+0x66>
				ec11CurrentState = EC11_DIRECTION_SEQUENCE_HALF;
 80006ee:	4b51      	ldr	r3, [pc, #324]	@ (8000834 <Ec11TickProcess+0x1a4>)
 80006f0:	2201      	movs	r2, #1
 80006f2:	701a      	strb	r2, [r3, #0]
 80006f4:	e05b      	b.n	80007ae <Ec11TickProcess+0x11e>
			} else {
				ec11CurrentState = EC11_DIRECTION_REVERSE_HALF;
 80006f6:	4b4f      	ldr	r3, [pc, #316]	@ (8000834 <Ec11TickProcess+0x1a4>)
 80006f8:	2202      	movs	r2, #2
 80006fa:	701a      	strb	r2, [r3, #0]
 80006fc:	e057      	b.n	80007ae <Ec11TickProcess+0x11e>
			}
		} else { // A相上升沿
			if (ec11CurrentState == EC11_DIRECTION_SEQUENCE_HALF) {
 80006fe:	4b4d      	ldr	r3, [pc, #308]	@ (8000834 <Ec11TickProcess+0x1a4>)
 8000700:	781b      	ldrb	r3, [r3, #0]
 8000702:	2b01      	cmp	r3, #1
 8000704:	d128      	bne.n	8000758 <Ec11TickProcess+0xc8>
				if (switchBCounter == 2) {
 8000706:	4b4c      	ldr	r3, [pc, #304]	@ (8000838 <Ec11TickProcess+0x1a8>)
 8000708:	781b      	ldrb	r3, [r3, #0]
 800070a:	2b02      	cmp	r3, #2
 800070c:	d103      	bne.n	8000716 <Ec11TickProcess+0x86>
					ec11CurrentState = EC11_DIRECTION_INVALID;
 800070e:	4b49      	ldr	r3, [pc, #292]	@ (8000834 <Ec11TickProcess+0x1a4>)
 8000710:	2200      	movs	r2, #0
 8000712:	701a      	strb	r2, [r3, #0]
 8000714:	e04b      	b.n	80007ae <Ec11TickProcess+0x11e>
				} else if (switchBCounter == 1) {
 8000716:	4b48      	ldr	r3, [pc, #288]	@ (8000838 <Ec11TickProcess+0x1a8>)
 8000718:	781b      	ldrb	r3, [r3, #0]
 800071a:	2b01      	cmp	r3, #1
 800071c:	d147      	bne.n	80007ae <Ec11TickProcess+0x11e>
					encodeCounter--;
 800071e:	4b47      	ldr	r3, [pc, #284]	@ (800083c <Ec11TickProcess+0x1ac>)
 8000720:	681b      	ldr	r3, [r3, #0]
 8000722:	3b01      	subs	r3, #1
 8000724:	4a45      	ldr	r2, [pc, #276]	@ (800083c <Ec11TickProcess+0x1ac>)
 8000726:	6013      	str	r3, [r2, #0]
					KeyInfo keyInfo = { EC11_KEY, EC11_KEY_LEFT_ROTATE, encodeCounter };
 8000728:	2301      	movs	r3, #1
 800072a:	723b      	strb	r3, [r7, #8]
 800072c:	2305      	movs	r3, #5
 800072e:	727b      	strb	r3, [r7, #9]
 8000730:	4b42      	ldr	r3, [pc, #264]	@ (800083c <Ec11TickProcess+0x1ac>)
 8000732:	681b      	ldr	r3, [r3, #0]
 8000734:	60fb      	str	r3, [r7, #12]
					if (ec11Encoder.ec11StateMachine.currentStep == KEY_STEP_RELEASE_DEBOUNCING) {
 8000736:	4b42      	ldr	r3, [pc, #264]	@ (8000840 <Ec11TickProcess+0x1b0>)
 8000738:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 800073c:	2b02      	cmp	r3, #2
 800073e:	d105      	bne.n	800074c <Ec11TickProcess+0xbc>
						ec11Encoder.hasRotate = true;
 8000740:	4b3f      	ldr	r3, [pc, #252]	@ (8000840 <Ec11TickProcess+0x1b0>)
 8000742:	2201      	movs	r2, #1
 8000744:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
						keyInfo.keyState = EC11_KEY_PRESS_LEFT_ROTATE;
 8000748:	2307      	movs	r3, #7
 800074a:	727b      	strb	r3, [r7, #9]
					}
					WriteKeyInfo(&keyInfo);
 800074c:	f107 0308 	add.w	r3, r7, #8
 8000750:	4618      	mov	r0, r3
 8000752:	f7ff fd7f 	bl	8000254 <WriteKeyInfo>
 8000756:	e02a      	b.n	80007ae <Ec11TickProcess+0x11e>
				}
			} else if (ec11CurrentState == EC11_DIRECTION_REVERSE_HALF) {
 8000758:	4b36      	ldr	r3, [pc, #216]	@ (8000834 <Ec11TickProcess+0x1a4>)
 800075a:	781b      	ldrb	r3, [r3, #0]
 800075c:	2b02      	cmp	r3, #2
 800075e:	d126      	bne.n	80007ae <Ec11TickProcess+0x11e>
				if (switchBCounter == 1) {
 8000760:	4b35      	ldr	r3, [pc, #212]	@ (8000838 <Ec11TickProcess+0x1a8>)
 8000762:	781b      	ldrb	r3, [r3, #0]
 8000764:	2b01      	cmp	r3, #1
 8000766:	d103      	bne.n	8000770 <Ec11TickProcess+0xe0>
					ec11CurrentState = EC11_DIRECTION_INVALID;
 8000768:	4b32      	ldr	r3, [pc, #200]	@ (8000834 <Ec11TickProcess+0x1a4>)
 800076a:	2200      	movs	r2, #0
 800076c:	701a      	strb	r2, [r3, #0]
 800076e:	e01e      	b.n	80007ae <Ec11TickProcess+0x11e>
				} else if (switchBCounter == 2) {
 8000770:	4b31      	ldr	r3, [pc, #196]	@ (8000838 <Ec11TickProcess+0x1a8>)
 8000772:	781b      	ldrb	r3, [r3, #0]
 8000774:	2b02      	cmp	r3, #2
 8000776:	d11a      	bne.n	80007ae <Ec11TickProcess+0x11e>
					encodeCounter++;
 8000778:	4b30      	ldr	r3, [pc, #192]	@ (800083c <Ec11TickProcess+0x1ac>)
 800077a:	681b      	ldr	r3, [r3, #0]
 800077c:	3301      	adds	r3, #1
 800077e:	4a2f      	ldr	r2, [pc, #188]	@ (800083c <Ec11TickProcess+0x1ac>)
 8000780:	6013      	str	r3, [r2, #0]
					KeyInfo keyInfo = { EC11_KEY, EC11_KEY_RIGHT_ROTATE, encodeCounter };
 8000782:	2301      	movs	r3, #1
 8000784:	703b      	strb	r3, [r7, #0]
 8000786:	2306      	movs	r3, #6
 8000788:	707b      	strb	r3, [r7, #1]
 800078a:	4b2c      	ldr	r3, [pc, #176]	@ (800083c <Ec11TickProcess+0x1ac>)
 800078c:	681b      	ldr	r3, [r3, #0]
 800078e:	607b      	str	r3, [r7, #4]
					if (ec11Encoder.ec11StateMachine.currentStep == KEY_STEP_RELEASE_DEBOUNCING) {
 8000790:	4b2b      	ldr	r3, [pc, #172]	@ (8000840 <Ec11TickProcess+0x1b0>)
 8000792:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 8000796:	2b02      	cmp	r3, #2
 8000798:	d105      	bne.n	80007a6 <Ec11TickProcess+0x116>
						ec11Encoder.hasRotate = true;
 800079a:	4b29      	ldr	r3, [pc, #164]	@ (8000840 <Ec11TickProcess+0x1b0>)
 800079c:	2201      	movs	r2, #1
 800079e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
						keyInfo.keyState = EC11_KEY_PRESS_RIGHT_ROTATE;
 80007a2:	2308      	movs	r3, #8
 80007a4:	707b      	strb	r3, [r7, #1]
					}
					WriteKeyInfo(&keyInfo);
 80007a6:	463b      	mov	r3, r7
 80007a8:	4618      	mov	r0, r3
 80007aa:	f7ff fd53 	bl	8000254 <WriteKeyInfo>
				}
			}
		}
		lastALevel = currALevel;
 80007ae:	4b1d      	ldr	r3, [pc, #116]	@ (8000824 <Ec11TickProcess+0x194>)
 80007b0:	781a      	ldrb	r2, [r3, #0]
 80007b2:	4b1e      	ldr	r3, [pc, #120]	@ (800082c <Ec11TickProcess+0x19c>)
 80007b4:	701a      	strb	r2, [r3, #0]
	}

	if (currBLevel != lastBLevel) {
 80007b6:	4b1c      	ldr	r3, [pc, #112]	@ (8000828 <Ec11TickProcess+0x198>)
 80007b8:	781a      	ldrb	r2, [r3, #0]
 80007ba:	4b22      	ldr	r3, [pc, #136]	@ (8000844 <Ec11TickProcess+0x1b4>)
 80007bc:	781b      	ldrb	r3, [r3, #0]
 80007be:	429a      	cmp	r2, r3
 80007c0:	d02a      	beq.n	8000818 <Ec11TickProcess+0x188>
		switchBCounter = (switchBCounter + 1) > 2 ? 1 : (switchBCounter + 1);
 80007c2:	4b1d      	ldr	r3, [pc, #116]	@ (8000838 <Ec11TickProcess+0x1a8>)
 80007c4:	781b      	ldrb	r3, [r3, #0]
 80007c6:	2b01      	cmp	r3, #1
 80007c8:	d804      	bhi.n	80007d4 <Ec11TickProcess+0x144>
 80007ca:	4b1b      	ldr	r3, [pc, #108]	@ (8000838 <Ec11TickProcess+0x1a8>)
 80007cc:	781b      	ldrb	r3, [r3, #0]
 80007ce:	3301      	adds	r3, #1
 80007d0:	b2db      	uxtb	r3, r3
 80007d2:	e000      	b.n	80007d6 <Ec11TickProcess+0x146>
 80007d4:	2301      	movs	r3, #1
 80007d6:	4a18      	ldr	r2, [pc, #96]	@ (8000838 <Ec11TickProcess+0x1a8>)
 80007d8:	7013      	strb	r3, [r2, #0]
		if (currBLevel == GPIO_PIN_SET) { // B 相上升沿
 80007da:	4b13      	ldr	r3, [pc, #76]	@ (8000828 <Ec11TickProcess+0x198>)
 80007dc:	781b      	ldrb	r3, [r3, #0]
 80007de:	2b01      	cmp	r3, #1
 80007e0:	d116      	bne.n	8000810 <Ec11TickProcess+0x180>
			if (ec11CurrentState == EC11_DIRECTION_SEQUENCE_HALF) {
 80007e2:	4b14      	ldr	r3, [pc, #80]	@ (8000834 <Ec11TickProcess+0x1a4>)
 80007e4:	781b      	ldrb	r3, [r3, #0]
 80007e6:	2b01      	cmp	r3, #1
 80007e8:	d107      	bne.n	80007fa <Ec11TickProcess+0x16a>
				if (switchACounter == 1) {
 80007ea:	4b11      	ldr	r3, [pc, #68]	@ (8000830 <Ec11TickProcess+0x1a0>)
 80007ec:	781b      	ldrb	r3, [r3, #0]
 80007ee:	2b01      	cmp	r3, #1
 80007f0:	d10e      	bne.n	8000810 <Ec11TickProcess+0x180>
					ec11CurrentState = EC11_DIRECTION_INVALID;
 80007f2:	4b10      	ldr	r3, [pc, #64]	@ (8000834 <Ec11TickProcess+0x1a4>)
 80007f4:	2200      	movs	r2, #0
 80007f6:	701a      	strb	r2, [r3, #0]
 80007f8:	e00a      	b.n	8000810 <Ec11TickProcess+0x180>
				}
			} else if (ec11CurrentState == EC11_DIRECTION_REVERSE_HALF) {
 80007fa:	4b0e      	ldr	r3, [pc, #56]	@ (8000834 <Ec11TickProcess+0x1a4>)
 80007fc:	781b      	ldrb	r3, [r3, #0]
 80007fe:	2b02      	cmp	r3, #2
 8000800:	d106      	bne.n	8000810 <Ec11TickProcess+0x180>
				if (switchACounter == 2) {
 8000802:	4b0b      	ldr	r3, [pc, #44]	@ (8000830 <Ec11TickProcess+0x1a0>)
 8000804:	781b      	ldrb	r3, [r3, #0]
 8000806:	2b02      	cmp	r3, #2
 8000808:	d102      	bne.n	8000810 <Ec11TickProcess+0x180>
					ec11CurrentState = EC11_DIRECTION_INVALID;
 800080a:	4b0a      	ldr	r3, [pc, #40]	@ (8000834 <Ec11TickProcess+0x1a4>)
 800080c:	2200      	movs	r2, #0
 800080e:	701a      	strb	r2, [r3, #0]
				}
			}
		}
		lastBLevel = currBLevel;
 8000810:	4b05      	ldr	r3, [pc, #20]	@ (8000828 <Ec11TickProcess+0x198>)
 8000812:	781a      	ldrb	r2, [r3, #0]
 8000814:	4b0b      	ldr	r3, [pc, #44]	@ (8000844 <Ec11TickProcess+0x1b4>)
 8000816:	701a      	strb	r2, [r3, #0]
	}
}
 8000818:	bf00      	nop
 800081a:	3710      	adds	r7, #16
 800081c:	46bd      	mov	sp, r7
 800081e:	bd80      	pop	{r7, pc}
 8000820:	40010800 	.word	0x40010800
 8000824:	20000070 	.word	0x20000070
 8000828:	20000071 	.word	0x20000071
 800082c:	20000072 	.word	0x20000072
 8000830:	200001c8 	.word	0x200001c8
 8000834:	200001c9 	.word	0x200001c9
 8000838:	200001ca 	.word	0x200001ca
 800083c:	2000017c 	.word	0x2000017c
 8000840:	20000180 	.word	0x20000180
 8000844:	20000073 	.word	0x20000073

08000848 <Ec11StateMachineProcess>:

void Ec11StateMachineProcess()
{
 8000848:	b580      	push	{r7, lr}
 800084a:	b082      	sub	sp, #8
 800084c:	af00      	add	r7, sp, #0
	for (int i = 0; i < sizeof(ec11StateMachineTable) / sizeof(ec11StateMachineTable[0]); ++i) {
 800084e:	2300      	movs	r3, #0
 8000850:	607b      	str	r3, [r7, #4]
 8000852:	e01b      	b.n	800088c <Ec11StateMachineProcess+0x44>
		if (ec11StateMachineTable[i].currentState == ec11Encoder.ec11StateMachine.currentState &&
 8000854:	4a12      	ldr	r2, [pc, #72]	@ (80008a0 <Ec11StateMachineProcess+0x58>)
 8000856:	687b      	ldr	r3, [r7, #4]
 8000858:	f812 2033 	ldrb.w	r2, [r2, r3, lsl #3]
 800085c:	4b11      	ldr	r3, [pc, #68]	@ (80008a4 <Ec11StateMachineProcess+0x5c>)
 800085e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8000862:	429a      	cmp	r2, r3
 8000864:	d10f      	bne.n	8000886 <Ec11StateMachineProcess+0x3e>
			ec11StateMachineTable[i].currentStep == ec11Encoder.ec11StateMachine.currentStep) {
 8000866:	4a0e      	ldr	r2, [pc, #56]	@ (80008a0 <Ec11StateMachineProcess+0x58>)
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	00db      	lsls	r3, r3, #3
 800086c:	4413      	add	r3, r2
 800086e:	785a      	ldrb	r2, [r3, #1]
 8000870:	4b0c      	ldr	r3, [pc, #48]	@ (80008a4 <Ec11StateMachineProcess+0x5c>)
 8000872:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
		if (ec11StateMachineTable[i].currentState == ec11Encoder.ec11StateMachine.currentState &&
 8000876:	429a      	cmp	r2, r3
 8000878:	d105      	bne.n	8000886 <Ec11StateMachineProcess+0x3e>
			ec11StateMachineTable[i].callback();
 800087a:	4a09      	ldr	r2, [pc, #36]	@ (80008a0 <Ec11StateMachineProcess+0x58>)
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	00db      	lsls	r3, r3, #3
 8000880:	4413      	add	r3, r2
 8000882:	685b      	ldr	r3, [r3, #4]
 8000884:	4798      	blx	r3
	for (int i = 0; i < sizeof(ec11StateMachineTable) / sizeof(ec11StateMachineTable[0]); ++i) {
 8000886:	687b      	ldr	r3, [r7, #4]
 8000888:	3301      	adds	r3, #1
 800088a:	607b      	str	r3, [r7, #4]
 800088c:	687b      	ldr	r3, [r7, #4]
 800088e:	2b07      	cmp	r3, #7
 8000890:	d9e0      	bls.n	8000854 <Ec11StateMachineProcess+0xc>
		}
	}

	Ec11TickProcess();
 8000892:	f7ff fefd 	bl	8000690 <Ec11TickProcess>
}
 8000896:	bf00      	nop
 8000898:	3708      	adds	r7, #8
 800089a:	46bd      	mov	sp, r7
 800089c:	bd80      	pop	{r7, pc}
 800089e:	bf00      	nop
 80008a0:	20000030 	.word	0x20000030
 80008a4:	20000180 	.word	0x20000180

080008a8 <HAL_TIM_PeriodElapsedCallback>:

static uint32_t timerCounter = 0;
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80008a8:	b580      	push	{r7, lr}
 80008aa:	b082      	sub	sp, #8
 80008ac:	af00      	add	r7, sp, #0
 80008ae:	6078      	str	r0, [r7, #4]
	timerCounter++;
 80008b0:	4b05      	ldr	r3, [pc, #20]	@ (80008c8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80008b2:	681b      	ldr	r3, [r3, #0]
 80008b4:	3301      	adds	r3, #1
 80008b6:	4a04      	ldr	r2, [pc, #16]	@ (80008c8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80008b8:	6013      	str	r3, [r2, #0]
	Ec11StateMachineProcess();
 80008ba:	f7ff ffc5 	bl	8000848 <Ec11StateMachineProcess>
}
 80008be:	bf00      	nop
 80008c0:	3708      	adds	r7, #8
 80008c2:	46bd      	mov	sp, r7
 80008c4:	bd80      	pop	{r7, pc}
 80008c6:	bf00      	nop
 80008c8:	200001c4 	.word	0x200001c4

080008cc <ProcessKey>:

void ProcessKey()
{
 80008cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80008ce:	b08b      	sub	sp, #44	@ 0x2c
 80008d0:	af06      	add	r7, sp, #24
	static uint32_t lastTick = 0;
	uint32_t currentTick = HAL_GetTick();
 80008d2:	f000 fbab 	bl	800102c <HAL_GetTick>
 80008d6:	60f8      	str	r0, [r7, #12]
	if (currentTick - lastTick < 1) {
 80008d8:	4b28      	ldr	r3, [pc, #160]	@ (800097c <ProcessKey+0xb0>)
 80008da:	681b      	ldr	r3, [r3, #0]
 80008dc:	68fa      	ldr	r2, [r7, #12]
 80008de:	429a      	cmp	r2, r3
 80008e0:	d048      	beq.n	8000974 <ProcessKey+0xa8>
		return;
	}

	KeyInfo keyInfo;
	uint8_t remainCount = 0;
 80008e2:	2300      	movs	r3, #0
 80008e4:	70fb      	strb	r3, [r7, #3]
	do {
		if (ReadKeyInfo(&keyInfo, &remainCount)) {
 80008e6:	1cfa      	adds	r2, r7, #3
 80008e8:	1d3b      	adds	r3, r7, #4
 80008ea:	4611      	mov	r1, r2
 80008ec:	4618      	mov	r0, r3
 80008ee:	f7ff fc67 	bl	80001c0 <ReadKeyInfo>
 80008f2:	4603      	mov	r3, r0
 80008f4:	2b00      	cmp	r3, #0
 80008f6:	d036      	beq.n	8000966 <ProcessKey+0x9a>
			static char message[300];
			sprintf(message,
					"read %s keyState(%s,%d) encodeCounter(%ld) remain count(%d) currentTick(%ld)"
							" lastTick(%ld) timer count(%ld)\n",
					keyIndexNameArray[keyInfo.keyIndex],
 80008f8:	793b      	ldrb	r3, [r7, #4]
 80008fa:	461a      	mov	r2, r3
			sprintf(message,
 80008fc:	4b20      	ldr	r3, [pc, #128]	@ (8000980 <ProcessKey+0xb4>)
 80008fe:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
					keyStateNameArray[keyInfo.keyState], keyInfo.keyState,
 8000902:	797b      	ldrb	r3, [r7, #5]
 8000904:	461a      	mov	r2, r3
			sprintf(message,
 8000906:	4b1f      	ldr	r3, [pc, #124]	@ (8000984 <ProcessKey+0xb8>)
 8000908:	f853 4022 	ldr.w	r4, [r3, r2, lsl #2]
					keyStateNameArray[keyInfo.keyState], keyInfo.keyState,
 800090c:	797b      	ldrb	r3, [r7, #5]
			sprintf(message,
 800090e:	461d      	mov	r5, r3
 8000910:	68bb      	ldr	r3, [r7, #8]
 8000912:	78fa      	ldrb	r2, [r7, #3]
 8000914:	4616      	mov	r6, r2
 8000916:	4a19      	ldr	r2, [pc, #100]	@ (800097c <ProcessKey+0xb0>)
 8000918:	6812      	ldr	r2, [r2, #0]
 800091a:	491b      	ldr	r1, [pc, #108]	@ (8000988 <ProcessKey+0xbc>)
 800091c:	6809      	ldr	r1, [r1, #0]
 800091e:	9105      	str	r1, [sp, #20]
 8000920:	9204      	str	r2, [sp, #16]
 8000922:	68fa      	ldr	r2, [r7, #12]
 8000924:	9203      	str	r2, [sp, #12]
 8000926:	9602      	str	r6, [sp, #8]
 8000928:	9301      	str	r3, [sp, #4]
 800092a:	9500      	str	r5, [sp, #0]
 800092c:	4623      	mov	r3, r4
 800092e:	4602      	mov	r2, r0
 8000930:	4916      	ldr	r1, [pc, #88]	@ (800098c <ProcessKey+0xc0>)
 8000932:	4817      	ldr	r0, [pc, #92]	@ (8000990 <ProcessKey+0xc4>)
 8000934:	f002 fc94 	bl	8003260 <siprintf>
					keyInfo.encodeCounter, remainCount, currentTick, lastTick,
					timerCounter);

			//		HAL_UART_Transmit_IT(&huart2, (const uint8_t*)message, strlen(message));
			send_data_safely((uint8_t*) message, strlen(message));
 8000938:	4815      	ldr	r0, [pc, #84]	@ (8000990 <ProcessKey+0xc4>)
 800093a:	f7ff fc07 	bl	800014c <strlen>
 800093e:	4603      	mov	r3, r0
 8000940:	b29b      	uxth	r3, r3
 8000942:	4619      	mov	r1, r3
 8000944:	4812      	ldr	r0, [pc, #72]	@ (8000990 <ProcessKey+0xc4>)
 8000946:	f7ff fc1d 	bl	8000184 <send_data_safely>

			if (keyInfo.keyIndex == EC11_KEY) {
 800094a:	793b      	ldrb	r3, [r7, #4]
 800094c:	2b01      	cmp	r3, #1
 800094e:	d10a      	bne.n	8000966 <ProcessKey+0x9a>
				if (keyInfo.keyState == EC11_KEY_PRESS) {
 8000950:	797b      	ldrb	r3, [r7, #5]
 8000952:	2b01      	cmp	r3, #1
 8000954:	d007      	beq.n	8000966 <ProcessKey+0x9a>

				} else if (keyInfo.keyState == EC11_KEY_CLICK) {
 8000956:	797b      	ldrb	r3, [r7, #5]
 8000958:	2b02      	cmp	r3, #2
 800095a:	d104      	bne.n	8000966 <ProcessKey+0x9a>
					HAL_GPIO_TogglePin(Led0_GPIO_Port, Led0_Pin);
 800095c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000960:	480c      	ldr	r0, [pc, #48]	@ (8000994 <ProcessKey+0xc8>)
 8000962:	f000 ff04 	bl	800176e <HAL_GPIO_TogglePin>
//					send_data_safely((uint8_t*) message, strlen(message));
				}
			}
		}

	} while (remainCount != 0);
 8000966:	78fb      	ldrb	r3, [r7, #3]
 8000968:	2b00      	cmp	r3, #0
 800096a:	d1bc      	bne.n	80008e6 <ProcessKey+0x1a>

	lastTick = currentTick;
 800096c:	4a03      	ldr	r2, [pc, #12]	@ (800097c <ProcessKey+0xb0>)
 800096e:	68fb      	ldr	r3, [r7, #12]
 8000970:	6013      	str	r3, [r2, #0]
 8000972:	e000      	b.n	8000976 <ProcessKey+0xaa>
		return;
 8000974:	bf00      	nop
}
 8000976:	3714      	adds	r7, #20
 8000978:	46bd      	mov	sp, r7
 800097a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800097c:	200001cc 	.word	0x200001cc
 8000980:	20000004 	.word	0x20000004
 8000984:	2000000c 	.word	0x2000000c
 8000988:	200001c4 	.word	0x200001c4
 800098c:	08003c7c 	.word	0x08003c7c
 8000990:	200001d0 	.word	0x200001d0
 8000994:	40011000 	.word	0x40011000

08000998 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800099c:	f000 faee 	bl	8000f7c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80009a0:	f000 f814 	bl	80009cc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80009a4:	f000 f8d0 	bl	8000b48 <MX_GPIO_Init>
  MX_TIM4_Init();
 80009a8:	f000 f856 	bl	8000a58 <MX_TIM4_Init>
  MX_USART2_UART_Init();
 80009ac:	f000 f8a2 	bl	8000af4 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
	HAL_TIM_Base_Start_IT(&htim4);
 80009b0:	4805      	ldr	r0, [pc, #20]	@ (80009c8 <main+0x30>)
 80009b2:	f001 fb55 	bl	8002060 <HAL_TIM_Base_Start_IT>
	Ec11EncoderInit();
 80009b6:	f7ff fccf 	bl	8000358 <Ec11EncoderInit>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
		ProcessKey();
 80009ba:	f7ff ff87 	bl	80008cc <ProcessKey>
		HAL_Delay(1);
 80009be:	2001      	movs	r0, #1
 80009c0:	f000 fb3e 	bl	8001040 <HAL_Delay>
		ProcessKey();
 80009c4:	bf00      	nop
 80009c6:	e7f8      	b.n	80009ba <main+0x22>
 80009c8:	200000ec 	.word	0x200000ec

080009cc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	b090      	sub	sp, #64	@ 0x40
 80009d0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009d2:	f107 0318 	add.w	r3, r7, #24
 80009d6:	2228      	movs	r2, #40	@ 0x28
 80009d8:	2100      	movs	r1, #0
 80009da:	4618      	mov	r0, r3
 80009dc:	f002 fc60 	bl	80032a0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009e0:	1d3b      	adds	r3, r7, #4
 80009e2:	2200      	movs	r2, #0
 80009e4:	601a      	str	r2, [r3, #0]
 80009e6:	605a      	str	r2, [r3, #4]
 80009e8:	609a      	str	r2, [r3, #8]
 80009ea:	60da      	str	r2, [r3, #12]
 80009ec:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80009ee:	2301      	movs	r3, #1
 80009f0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80009f2:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80009f6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80009f8:	2300      	movs	r3, #0
 80009fa:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80009fc:	2301      	movs	r3, #1
 80009fe:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a00:	2302      	movs	r3, #2
 8000a02:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000a04:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000a08:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000a0a:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8000a0e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a10:	f107 0318 	add.w	r3, r7, #24
 8000a14:	4618      	mov	r0, r3
 8000a16:	f000 fec3 	bl	80017a0 <HAL_RCC_OscConfig>
 8000a1a:	4603      	mov	r3, r0
 8000a1c:	2b00      	cmp	r3, #0
 8000a1e:	d001      	beq.n	8000a24 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000a20:	f000 f8f8 	bl	8000c14 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a24:	230f      	movs	r3, #15
 8000a26:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a28:	2302      	movs	r3, #2
 8000a2a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000a30:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000a34:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a36:	2300      	movs	r3, #0
 8000a38:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000a3a:	1d3b      	adds	r3, r7, #4
 8000a3c:	2102      	movs	r1, #2
 8000a3e:	4618      	mov	r0, r3
 8000a40:	f001 f930 	bl	8001ca4 <HAL_RCC_ClockConfig>
 8000a44:	4603      	mov	r3, r0
 8000a46:	2b00      	cmp	r3, #0
 8000a48:	d001      	beq.n	8000a4e <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000a4a:	f000 f8e3 	bl	8000c14 <Error_Handler>
  }
}
 8000a4e:	bf00      	nop
 8000a50:	3740      	adds	r7, #64	@ 0x40
 8000a52:	46bd      	mov	sp, r7
 8000a54:	bd80      	pop	{r7, pc}
	...

08000a58 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	b086      	sub	sp, #24
 8000a5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a5e:	f107 0308 	add.w	r3, r7, #8
 8000a62:	2200      	movs	r2, #0
 8000a64:	601a      	str	r2, [r3, #0]
 8000a66:	605a      	str	r2, [r3, #4]
 8000a68:	609a      	str	r2, [r3, #8]
 8000a6a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a6c:	463b      	mov	r3, r7
 8000a6e:	2200      	movs	r2, #0
 8000a70:	601a      	str	r2, [r3, #0]
 8000a72:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000a74:	4b1d      	ldr	r3, [pc, #116]	@ (8000aec <MX_TIM4_Init+0x94>)
 8000a76:	4a1e      	ldr	r2, [pc, #120]	@ (8000af0 <MX_TIM4_Init+0x98>)
 8000a78:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 7200 - 1;
 8000a7a:	4b1c      	ldr	r3, [pc, #112]	@ (8000aec <MX_TIM4_Init+0x94>)
 8000a7c:	f641 421f 	movw	r2, #7199	@ 0x1c1f
 8000a80:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a82:	4b1a      	ldr	r3, [pc, #104]	@ (8000aec <MX_TIM4_Init+0x94>)
 8000a84:	2200      	movs	r2, #0
 8000a86:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 10 - 1;
 8000a88:	4b18      	ldr	r3, [pc, #96]	@ (8000aec <MX_TIM4_Init+0x94>)
 8000a8a:	2209      	movs	r2, #9
 8000a8c:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a8e:	4b17      	ldr	r3, [pc, #92]	@ (8000aec <MX_TIM4_Init+0x94>)
 8000a90:	2200      	movs	r2, #0
 8000a92:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000a94:	4b15      	ldr	r3, [pc, #84]	@ (8000aec <MX_TIM4_Init+0x94>)
 8000a96:	2280      	movs	r2, #128	@ 0x80
 8000a98:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000a9a:	4814      	ldr	r0, [pc, #80]	@ (8000aec <MX_TIM4_Init+0x94>)
 8000a9c:	f001 fa90 	bl	8001fc0 <HAL_TIM_Base_Init>
 8000aa0:	4603      	mov	r3, r0
 8000aa2:	2b00      	cmp	r3, #0
 8000aa4:	d001      	beq.n	8000aaa <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 8000aa6:	f000 f8b5 	bl	8000c14 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000aaa:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000aae:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000ab0:	f107 0308 	add.w	r3, r7, #8
 8000ab4:	4619      	mov	r1, r3
 8000ab6:	480d      	ldr	r0, [pc, #52]	@ (8000aec <MX_TIM4_Init+0x94>)
 8000ab8:	f001 fc14 	bl	80022e4 <HAL_TIM_ConfigClockSource>
 8000abc:	4603      	mov	r3, r0
 8000abe:	2b00      	cmp	r3, #0
 8000ac0:	d001      	beq.n	8000ac6 <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 8000ac2:	f000 f8a7 	bl	8000c14 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000aca:	2300      	movs	r3, #0
 8000acc:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000ace:	463b      	mov	r3, r7
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4806      	ldr	r0, [pc, #24]	@ (8000aec <MX_TIM4_Init+0x94>)
 8000ad4:	f001 fdf6 	bl	80026c4 <HAL_TIMEx_MasterConfigSynchronization>
 8000ad8:	4603      	mov	r3, r0
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	d001      	beq.n	8000ae2 <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 8000ade:	f000 f899 	bl	8000c14 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8000ae2:	bf00      	nop
 8000ae4:	3718      	adds	r7, #24
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	bd80      	pop	{r7, pc}
 8000aea:	bf00      	nop
 8000aec:	200000ec 	.word	0x200000ec
 8000af0:	40000800 	.word	0x40000800

08000af4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000af8:	4b11      	ldr	r3, [pc, #68]	@ (8000b40 <MX_USART2_UART_Init+0x4c>)
 8000afa:	4a12      	ldr	r2, [pc, #72]	@ (8000b44 <MX_USART2_UART_Init+0x50>)
 8000afc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000afe:	4b10      	ldr	r3, [pc, #64]	@ (8000b40 <MX_USART2_UART_Init+0x4c>)
 8000b00:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000b04:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000b06:	4b0e      	ldr	r3, [pc, #56]	@ (8000b40 <MX_USART2_UART_Init+0x4c>)
 8000b08:	2200      	movs	r2, #0
 8000b0a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000b0c:	4b0c      	ldr	r3, [pc, #48]	@ (8000b40 <MX_USART2_UART_Init+0x4c>)
 8000b0e:	2200      	movs	r2, #0
 8000b10:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000b12:	4b0b      	ldr	r3, [pc, #44]	@ (8000b40 <MX_USART2_UART_Init+0x4c>)
 8000b14:	2200      	movs	r2, #0
 8000b16:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000b18:	4b09      	ldr	r3, [pc, #36]	@ (8000b40 <MX_USART2_UART_Init+0x4c>)
 8000b1a:	220c      	movs	r2, #12
 8000b1c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b1e:	4b08      	ldr	r3, [pc, #32]	@ (8000b40 <MX_USART2_UART_Init+0x4c>)
 8000b20:	2200      	movs	r2, #0
 8000b22:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b24:	4b06      	ldr	r3, [pc, #24]	@ (8000b40 <MX_USART2_UART_Init+0x4c>)
 8000b26:	2200      	movs	r2, #0
 8000b28:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000b2a:	4805      	ldr	r0, [pc, #20]	@ (8000b40 <MX_USART2_UART_Init+0x4c>)
 8000b2c:	f001 fe3a 	bl	80027a4 <HAL_UART_Init>
 8000b30:	4603      	mov	r3, r0
 8000b32:	2b00      	cmp	r3, #0
 8000b34:	d001      	beq.n	8000b3a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000b36:	f000 f86d 	bl	8000c14 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000b3a:	bf00      	nop
 8000b3c:	bd80      	pop	{r7, pc}
 8000b3e:	bf00      	nop
 8000b40:	20000134 	.word	0x20000134
 8000b44:	40004400 	.word	0x40004400

08000b48 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b088      	sub	sp, #32
 8000b4c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b4e:	f107 0310 	add.w	r3, r7, #16
 8000b52:	2200      	movs	r2, #0
 8000b54:	601a      	str	r2, [r3, #0]
 8000b56:	605a      	str	r2, [r3, #4]
 8000b58:	609a      	str	r2, [r3, #8]
 8000b5a:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b5c:	4b2a      	ldr	r3, [pc, #168]	@ (8000c08 <MX_GPIO_Init+0xc0>)
 8000b5e:	699b      	ldr	r3, [r3, #24]
 8000b60:	4a29      	ldr	r2, [pc, #164]	@ (8000c08 <MX_GPIO_Init+0xc0>)
 8000b62:	f043 0310 	orr.w	r3, r3, #16
 8000b66:	6193      	str	r3, [r2, #24]
 8000b68:	4b27      	ldr	r3, [pc, #156]	@ (8000c08 <MX_GPIO_Init+0xc0>)
 8000b6a:	699b      	ldr	r3, [r3, #24]
 8000b6c:	f003 0310 	and.w	r3, r3, #16
 8000b70:	60fb      	str	r3, [r7, #12]
 8000b72:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b74:	4b24      	ldr	r3, [pc, #144]	@ (8000c08 <MX_GPIO_Init+0xc0>)
 8000b76:	699b      	ldr	r3, [r3, #24]
 8000b78:	4a23      	ldr	r2, [pc, #140]	@ (8000c08 <MX_GPIO_Init+0xc0>)
 8000b7a:	f043 0320 	orr.w	r3, r3, #32
 8000b7e:	6193      	str	r3, [r2, #24]
 8000b80:	4b21      	ldr	r3, [pc, #132]	@ (8000c08 <MX_GPIO_Init+0xc0>)
 8000b82:	699b      	ldr	r3, [r3, #24]
 8000b84:	f003 0320 	and.w	r3, r3, #32
 8000b88:	60bb      	str	r3, [r7, #8]
 8000b8a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b8c:	4b1e      	ldr	r3, [pc, #120]	@ (8000c08 <MX_GPIO_Init+0xc0>)
 8000b8e:	699b      	ldr	r3, [r3, #24]
 8000b90:	4a1d      	ldr	r2, [pc, #116]	@ (8000c08 <MX_GPIO_Init+0xc0>)
 8000b92:	f043 0304 	orr.w	r3, r3, #4
 8000b96:	6193      	str	r3, [r2, #24]
 8000b98:	4b1b      	ldr	r3, [pc, #108]	@ (8000c08 <MX_GPIO_Init+0xc0>)
 8000b9a:	699b      	ldr	r3, [r3, #24]
 8000b9c:	f003 0304 	and.w	r3, r3, #4
 8000ba0:	607b      	str	r3, [r7, #4]
 8000ba2:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Led0_GPIO_Port, Led0_Pin, GPIO_PIN_RESET);
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000baa:	4818      	ldr	r0, [pc, #96]	@ (8000c0c <MX_GPIO_Init+0xc4>)
 8000bac:	f000 fdc7 	bl	800173e <HAL_GPIO_WritePin>

  /*Configure GPIO pin : Led0_Pin */
  GPIO_InitStruct.Pin = Led0_Pin;
 8000bb0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000bb4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bb6:	2301      	movs	r3, #1
 8000bb8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bba:	2300      	movs	r3, #0
 8000bbc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bbe:	2302      	movs	r3, #2
 8000bc0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Led0_GPIO_Port, &GPIO_InitStruct);
 8000bc2:	f107 0310 	add.w	r3, r7, #16
 8000bc6:	4619      	mov	r1, r3
 8000bc8:	4810      	ldr	r0, [pc, #64]	@ (8000c0c <MX_GPIO_Init+0xc4>)
 8000bca:	f000 fc1d 	bl	8001408 <HAL_GPIO_Init>

  /*Configure GPIO pin : Key0_Pin */
  GPIO_InitStruct.Pin = Key0_Pin;
 8000bce:	2301      	movs	r3, #1
 8000bd0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000bd6:	2302      	movs	r3, #2
 8000bd8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(Key0_GPIO_Port, &GPIO_InitStruct);
 8000bda:	f107 0310 	add.w	r3, r7, #16
 8000bde:	4619      	mov	r1, r3
 8000be0:	480b      	ldr	r0, [pc, #44]	@ (8000c10 <MX_GPIO_Init+0xc8>)
 8000be2:	f000 fc11 	bl	8001408 <HAL_GPIO_Init>

  /*Configure GPIO pins : ec11_A_Pin ec11_B_Pin ec11_Key_Pin */
  GPIO_InitStruct.Pin = ec11_A_Pin|ec11_B_Pin|ec11_Key_Pin;
 8000be6:	f44f 63e0 	mov.w	r3, #1792	@ 0x700
 8000bea:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000bec:	2300      	movs	r3, #0
 8000bee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000bf0:	2301      	movs	r3, #1
 8000bf2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bf4:	f107 0310 	add.w	r3, r7, #16
 8000bf8:	4619      	mov	r1, r3
 8000bfa:	4805      	ldr	r0, [pc, #20]	@ (8000c10 <MX_GPIO_Init+0xc8>)
 8000bfc:	f000 fc04 	bl	8001408 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000c00:	bf00      	nop
 8000c02:	3720      	adds	r7, #32
 8000c04:	46bd      	mov	sp, r7
 8000c06:	bd80      	pop	{r7, pc}
 8000c08:	40021000 	.word	0x40021000
 8000c0c:	40011000 	.word	0x40011000
 8000c10:	40010800 	.word	0x40010800

08000c14 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c14:	b480      	push	{r7}
 8000c16:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c18:	b672      	cpsid	i
}
 8000c1a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000c1c:	bf00      	nop
 8000c1e:	e7fd      	b.n	8000c1c <Error_Handler+0x8>

08000c20 <cas>:
 * ptr：指向需要进行CAS操作的变量的指针。
 * old：期望的旧值。
 * new：如果ptr指向的值等于old，则将ptr指向的值更新为new。
 * 返回值：如果CAS操作成功（即ptr指向的值等于old并被更新为new），返回1；否则返回0。
 */
static int cas(volatile int32_t *ptr, int32_t old, int32_t new) {
 8000c20:	b480      	push	{r7}
 8000c22:	b087      	sub	sp, #28
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	60f8      	str	r0, [r7, #12]
 8000c28:	60b9      	str	r1, [r7, #8]
 8000c2a:	607a      	str	r2, [r7, #4]
    int temp;
    __asm__ __volatile__ (
 8000c2c:	68fa      	ldr	r2, [r7, #12]
 8000c2e:	68b9      	ldr	r1, [r7, #8]
 8000c30:	6878      	ldr	r0, [r7, #4]
 8000c32:	e852 3f00 	ldrex	r3, [r2]
 8000c36:	428b      	cmp	r3, r1
 8000c38:	d105      	bne.n	8000c46 <end>
 8000c3a:	e842 0300 	strex	r3, r0, [r2]
 8000c3e:	2b00      	cmp	r3, #0
 8000c40:	d101      	bne.n	8000c46 <end>
 8000c42:	f04f 0301 	mov.w	r3, #1

08000c46 <end>:
 8000c46:	617b      	str	r3, [r7, #20]
        "end:"
        : "=&r" (temp)        // 输出操作数，表示返回值
        : "r" (ptr), "r" (old), "r" (new) // 输入操作数
        : "cc"                // 被修改的寄存器
    );
    return temp;
 8000c48:	697b      	ldr	r3, [r7, #20]
}
 8000c4a:	4618      	mov	r0, r3
 8000c4c:	371c      	adds	r7, #28
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	bc80      	pop	{r7}
 8000c52:	4770      	bx	lr

08000c54 <try_accquire_lock>:

bool try_accquire_lock(volatile int32_t *lock)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b082      	sub	sp, #8
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	6078      	str	r0, [r7, #4]
	return cas(lock, 0, 1);
 8000c5c:	2201      	movs	r2, #1
 8000c5e:	2100      	movs	r1, #0
 8000c60:	6878      	ldr	r0, [r7, #4]
 8000c62:	f7ff ffdd 	bl	8000c20 <cas>
 8000c66:	4603      	mov	r3, r0
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	bf14      	ite	ne
 8000c6c:	2301      	movne	r3, #1
 8000c6e:	2300      	moveq	r3, #0
 8000c70:	b2db      	uxtb	r3, r3
}
 8000c72:	4618      	mov	r0, r3
 8000c74:	3708      	adds	r7, #8
 8000c76:	46bd      	mov	sp, r7
 8000c78:	bd80      	pop	{r7, pc}

08000c7a <accquire_spinlock>:
bool accquire_spinlock(volatile int32_t *lock, uint32_t ms)
{
 8000c7a:	b580      	push	{r7, lr}
 8000c7c:	b084      	sub	sp, #16
 8000c7e:	af00      	add	r7, sp, #0
 8000c80:	6078      	str	r0, [r7, #4]
 8000c82:	6039      	str	r1, [r7, #0]
	uint32_t beginTick = HAL_GetTick();
 8000c84:	f000 f9d2 	bl	800102c <HAL_GetTick>
 8000c88:	60f8      	str	r0, [r7, #12]
	while (!try_accquire_lock(lock)) {
 8000c8a:	e010      	b.n	8000cae <accquire_spinlock+0x34>
//		HAL_Delay(1);
		if (ms != 0 && HAL_GetTick() - beginTick >= ms * 1000) {
 8000c8c:	683b      	ldr	r3, [r7, #0]
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	d00d      	beq.n	8000cae <accquire_spinlock+0x34>
 8000c92:	f000 f9cb 	bl	800102c <HAL_GetTick>
 8000c96:	4602      	mov	r2, r0
 8000c98:	68fb      	ldr	r3, [r7, #12]
 8000c9a:	1ad2      	subs	r2, r2, r3
 8000c9c:	683b      	ldr	r3, [r7, #0]
 8000c9e:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000ca2:	fb01 f303 	mul.w	r3, r1, r3
 8000ca6:	429a      	cmp	r2, r3
 8000ca8:	d301      	bcc.n	8000cae <accquire_spinlock+0x34>
			return false;
 8000caa:	2300      	movs	r3, #0
 8000cac:	e009      	b.n	8000cc2 <accquire_spinlock+0x48>
	while (!try_accquire_lock(lock)) {
 8000cae:	6878      	ldr	r0, [r7, #4]
 8000cb0:	f7ff ffd0 	bl	8000c54 <try_accquire_lock>
 8000cb4:	4603      	mov	r3, r0
 8000cb6:	f083 0301 	eor.w	r3, r3, #1
 8000cba:	b2db      	uxtb	r3, r3
 8000cbc:	2b00      	cmp	r3, #0
 8000cbe:	d1e5      	bne.n	8000c8c <accquire_spinlock+0x12>
		}
	}
	return true;
 8000cc0:	2301      	movs	r3, #1
}
 8000cc2:	4618      	mov	r0, r3
 8000cc4:	3710      	adds	r7, #16
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	bd80      	pop	{r7, pc}

08000cca <release_spinlock>:
void release_spinlock(volatile int32_t *lock)
{
 8000cca:	b580      	push	{r7, lr}
 8000ccc:	b082      	sub	sp, #8
 8000cce:	af00      	add	r7, sp, #0
 8000cd0:	6078      	str	r0, [r7, #4]
	cas(lock, 1, 0);
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	2101      	movs	r1, #1
 8000cd6:	6878      	ldr	r0, [r7, #4]
 8000cd8:	f7ff ffa2 	bl	8000c20 <cas>
}
 8000cdc:	bf00      	nop
 8000cde:	3708      	adds	r7, #8
 8000ce0:	46bd      	mov	sp, r7
 8000ce2:	bd80      	pop	{r7, pc}

08000ce4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ce4:	b480      	push	{r7}
 8000ce6:	b085      	sub	sp, #20
 8000ce8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000cea:	4b15      	ldr	r3, [pc, #84]	@ (8000d40 <HAL_MspInit+0x5c>)
 8000cec:	699b      	ldr	r3, [r3, #24]
 8000cee:	4a14      	ldr	r2, [pc, #80]	@ (8000d40 <HAL_MspInit+0x5c>)
 8000cf0:	f043 0301 	orr.w	r3, r3, #1
 8000cf4:	6193      	str	r3, [r2, #24]
 8000cf6:	4b12      	ldr	r3, [pc, #72]	@ (8000d40 <HAL_MspInit+0x5c>)
 8000cf8:	699b      	ldr	r3, [r3, #24]
 8000cfa:	f003 0301 	and.w	r3, r3, #1
 8000cfe:	60bb      	str	r3, [r7, #8]
 8000d00:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d02:	4b0f      	ldr	r3, [pc, #60]	@ (8000d40 <HAL_MspInit+0x5c>)
 8000d04:	69db      	ldr	r3, [r3, #28]
 8000d06:	4a0e      	ldr	r2, [pc, #56]	@ (8000d40 <HAL_MspInit+0x5c>)
 8000d08:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000d0c:	61d3      	str	r3, [r2, #28]
 8000d0e:	4b0c      	ldr	r3, [pc, #48]	@ (8000d40 <HAL_MspInit+0x5c>)
 8000d10:	69db      	ldr	r3, [r3, #28]
 8000d12:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000d16:	607b      	str	r3, [r7, #4]
 8000d18:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000d1a:	4b0a      	ldr	r3, [pc, #40]	@ (8000d44 <HAL_MspInit+0x60>)
 8000d1c:	685b      	ldr	r3, [r3, #4]
 8000d1e:	60fb      	str	r3, [r7, #12]
 8000d20:	68fb      	ldr	r3, [r7, #12]
 8000d22:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000d26:	60fb      	str	r3, [r7, #12]
 8000d28:	68fb      	ldr	r3, [r7, #12]
 8000d2a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000d2e:	60fb      	str	r3, [r7, #12]
 8000d30:	4a04      	ldr	r2, [pc, #16]	@ (8000d44 <HAL_MspInit+0x60>)
 8000d32:	68fb      	ldr	r3, [r7, #12]
 8000d34:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d36:	bf00      	nop
 8000d38:	3714      	adds	r7, #20
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	bc80      	pop	{r7}
 8000d3e:	4770      	bx	lr
 8000d40:	40021000 	.word	0x40021000
 8000d44:	40010000 	.word	0x40010000

08000d48 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	b084      	sub	sp, #16
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	4a0d      	ldr	r2, [pc, #52]	@ (8000d8c <HAL_TIM_Base_MspInit+0x44>)
 8000d56:	4293      	cmp	r3, r2
 8000d58:	d113      	bne.n	8000d82 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000d5a:	4b0d      	ldr	r3, [pc, #52]	@ (8000d90 <HAL_TIM_Base_MspInit+0x48>)
 8000d5c:	69db      	ldr	r3, [r3, #28]
 8000d5e:	4a0c      	ldr	r2, [pc, #48]	@ (8000d90 <HAL_TIM_Base_MspInit+0x48>)
 8000d60:	f043 0304 	orr.w	r3, r3, #4
 8000d64:	61d3      	str	r3, [r2, #28]
 8000d66:	4b0a      	ldr	r3, [pc, #40]	@ (8000d90 <HAL_TIM_Base_MspInit+0x48>)
 8000d68:	69db      	ldr	r3, [r3, #28]
 8000d6a:	f003 0304 	and.w	r3, r3, #4
 8000d6e:	60fb      	str	r3, [r7, #12]
 8000d70:	68fb      	ldr	r3, [r7, #12]
    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8000d72:	2200      	movs	r2, #0
 8000d74:	2100      	movs	r1, #0
 8000d76:	201e      	movs	r0, #30
 8000d78:	f000 fa5d 	bl	8001236 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8000d7c:	201e      	movs	r0, #30
 8000d7e:	f000 fa76 	bl	800126e <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM4_MspInit 1 */

  }

}
 8000d82:	bf00      	nop
 8000d84:	3710      	adds	r7, #16
 8000d86:	46bd      	mov	sp, r7
 8000d88:	bd80      	pop	{r7, pc}
 8000d8a:	bf00      	nop
 8000d8c:	40000800 	.word	0x40000800
 8000d90:	40021000 	.word	0x40021000

08000d94 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	b088      	sub	sp, #32
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d9c:	f107 0310 	add.w	r3, r7, #16
 8000da0:	2200      	movs	r2, #0
 8000da2:	601a      	str	r2, [r3, #0]
 8000da4:	605a      	str	r2, [r3, #4]
 8000da6:	609a      	str	r2, [r3, #8]
 8000da8:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	4a1f      	ldr	r2, [pc, #124]	@ (8000e2c <HAL_UART_MspInit+0x98>)
 8000db0:	4293      	cmp	r3, r2
 8000db2:	d137      	bne.n	8000e24 <HAL_UART_MspInit+0x90>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000db4:	4b1e      	ldr	r3, [pc, #120]	@ (8000e30 <HAL_UART_MspInit+0x9c>)
 8000db6:	69db      	ldr	r3, [r3, #28]
 8000db8:	4a1d      	ldr	r2, [pc, #116]	@ (8000e30 <HAL_UART_MspInit+0x9c>)
 8000dba:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000dbe:	61d3      	str	r3, [r2, #28]
 8000dc0:	4b1b      	ldr	r3, [pc, #108]	@ (8000e30 <HAL_UART_MspInit+0x9c>)
 8000dc2:	69db      	ldr	r3, [r3, #28]
 8000dc4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000dc8:	60fb      	str	r3, [r7, #12]
 8000dca:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dcc:	4b18      	ldr	r3, [pc, #96]	@ (8000e30 <HAL_UART_MspInit+0x9c>)
 8000dce:	699b      	ldr	r3, [r3, #24]
 8000dd0:	4a17      	ldr	r2, [pc, #92]	@ (8000e30 <HAL_UART_MspInit+0x9c>)
 8000dd2:	f043 0304 	orr.w	r3, r3, #4
 8000dd6:	6193      	str	r3, [r2, #24]
 8000dd8:	4b15      	ldr	r3, [pc, #84]	@ (8000e30 <HAL_UART_MspInit+0x9c>)
 8000dda:	699b      	ldr	r3, [r3, #24]
 8000ddc:	f003 0304 	and.w	r3, r3, #4
 8000de0:	60bb      	str	r3, [r7, #8]
 8000de2:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000de4:	2304      	movs	r3, #4
 8000de6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000de8:	2302      	movs	r3, #2
 8000dea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000dec:	2303      	movs	r3, #3
 8000dee:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000df0:	f107 0310 	add.w	r3, r7, #16
 8000df4:	4619      	mov	r1, r3
 8000df6:	480f      	ldr	r0, [pc, #60]	@ (8000e34 <HAL_UART_MspInit+0xa0>)
 8000df8:	f000 fb06 	bl	8001408 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000dfc:	2308      	movs	r3, #8
 8000dfe:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e00:	2300      	movs	r3, #0
 8000e02:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e04:	2300      	movs	r3, #0
 8000e06:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e08:	f107 0310 	add.w	r3, r7, #16
 8000e0c:	4619      	mov	r1, r3
 8000e0e:	4809      	ldr	r0, [pc, #36]	@ (8000e34 <HAL_UART_MspInit+0xa0>)
 8000e10:	f000 fafa 	bl	8001408 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000e14:	2200      	movs	r2, #0
 8000e16:	2100      	movs	r1, #0
 8000e18:	2026      	movs	r0, #38	@ 0x26
 8000e1a:	f000 fa0c 	bl	8001236 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000e1e:	2026      	movs	r0, #38	@ 0x26
 8000e20:	f000 fa25 	bl	800126e <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8000e24:	bf00      	nop
 8000e26:	3720      	adds	r7, #32
 8000e28:	46bd      	mov	sp, r7
 8000e2a:	bd80      	pop	{r7, pc}
 8000e2c:	40004400 	.word	0x40004400
 8000e30:	40021000 	.word	0x40021000
 8000e34:	40010800 	.word	0x40010800

08000e38 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e38:	b480      	push	{r7}
 8000e3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000e3c:	bf00      	nop
 8000e3e:	e7fd      	b.n	8000e3c <NMI_Handler+0x4>

08000e40 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e40:	b480      	push	{r7}
 8000e42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e44:	bf00      	nop
 8000e46:	e7fd      	b.n	8000e44 <HardFault_Handler+0x4>

08000e48 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e48:	b480      	push	{r7}
 8000e4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e4c:	bf00      	nop
 8000e4e:	e7fd      	b.n	8000e4c <MemManage_Handler+0x4>

08000e50 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e50:	b480      	push	{r7}
 8000e52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e54:	bf00      	nop
 8000e56:	e7fd      	b.n	8000e54 <BusFault_Handler+0x4>

08000e58 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e58:	b480      	push	{r7}
 8000e5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e5c:	bf00      	nop
 8000e5e:	e7fd      	b.n	8000e5c <UsageFault_Handler+0x4>

08000e60 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e60:	b480      	push	{r7}
 8000e62:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e64:	bf00      	nop
 8000e66:	46bd      	mov	sp, r7
 8000e68:	bc80      	pop	{r7}
 8000e6a:	4770      	bx	lr

08000e6c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e6c:	b480      	push	{r7}
 8000e6e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e70:	bf00      	nop
 8000e72:	46bd      	mov	sp, r7
 8000e74:	bc80      	pop	{r7}
 8000e76:	4770      	bx	lr

08000e78 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e78:	b480      	push	{r7}
 8000e7a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e7c:	bf00      	nop
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	bc80      	pop	{r7}
 8000e82:	4770      	bx	lr

08000e84 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e88:	f000 f8be 	bl	8001008 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e8c:	bf00      	nop
 8000e8e:	bd80      	pop	{r7, pc}

08000e90 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8000e94:	4802      	ldr	r0, [pc, #8]	@ (8000ea0 <TIM4_IRQHandler+0x10>)
 8000e96:	f001 f935 	bl	8002104 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8000e9a:	bf00      	nop
 8000e9c:	bd80      	pop	{r7, pc}
 8000e9e:	bf00      	nop
 8000ea0:	200000ec 	.word	0x200000ec

08000ea4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000ea8:	4802      	ldr	r0, [pc, #8]	@ (8000eb4 <USART2_IRQHandler+0x10>)
 8000eaa:	f001 fd01 	bl	80028b0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000eae:	bf00      	nop
 8000eb0:	bd80      	pop	{r7, pc}
 8000eb2:	bf00      	nop
 8000eb4:	20000134 	.word	0x20000134

08000eb8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b086      	sub	sp, #24
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ec0:	4a14      	ldr	r2, [pc, #80]	@ (8000f14 <_sbrk+0x5c>)
 8000ec2:	4b15      	ldr	r3, [pc, #84]	@ (8000f18 <_sbrk+0x60>)
 8000ec4:	1ad3      	subs	r3, r2, r3
 8000ec6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ec8:	697b      	ldr	r3, [r7, #20]
 8000eca:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ecc:	4b13      	ldr	r3, [pc, #76]	@ (8000f1c <_sbrk+0x64>)
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	d102      	bne.n	8000eda <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ed4:	4b11      	ldr	r3, [pc, #68]	@ (8000f1c <_sbrk+0x64>)
 8000ed6:	4a12      	ldr	r2, [pc, #72]	@ (8000f20 <_sbrk+0x68>)
 8000ed8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000eda:	4b10      	ldr	r3, [pc, #64]	@ (8000f1c <_sbrk+0x64>)
 8000edc:	681a      	ldr	r2, [r3, #0]
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	4413      	add	r3, r2
 8000ee2:	693a      	ldr	r2, [r7, #16]
 8000ee4:	429a      	cmp	r2, r3
 8000ee6:	d207      	bcs.n	8000ef8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ee8:	f002 f9e2 	bl	80032b0 <__errno>
 8000eec:	4603      	mov	r3, r0
 8000eee:	220c      	movs	r2, #12
 8000ef0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000ef2:	f04f 33ff 	mov.w	r3, #4294967295
 8000ef6:	e009      	b.n	8000f0c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ef8:	4b08      	ldr	r3, [pc, #32]	@ (8000f1c <_sbrk+0x64>)
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000efe:	4b07      	ldr	r3, [pc, #28]	@ (8000f1c <_sbrk+0x64>)
 8000f00:	681a      	ldr	r2, [r3, #0]
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	4413      	add	r3, r2
 8000f06:	4a05      	ldr	r2, [pc, #20]	@ (8000f1c <_sbrk+0x64>)
 8000f08:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000f0a:	68fb      	ldr	r3, [r7, #12]
}
 8000f0c:	4618      	mov	r0, r3
 8000f0e:	3718      	adds	r7, #24
 8000f10:	46bd      	mov	sp, r7
 8000f12:	bd80      	pop	{r7, pc}
 8000f14:	20005000 	.word	0x20005000
 8000f18:	00000400 	.word	0x00000400
 8000f1c:	200002fc 	.word	0x200002fc
 8000f20:	20000450 	.word	0x20000450

08000f24 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000f24:	b480      	push	{r7}
 8000f26:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f28:	bf00      	nop
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	bc80      	pop	{r7}
 8000f2e:	4770      	bx	lr

08000f30 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000f30:	f7ff fff8 	bl	8000f24 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000f34:	480b      	ldr	r0, [pc, #44]	@ (8000f64 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000f36:	490c      	ldr	r1, [pc, #48]	@ (8000f68 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000f38:	4a0c      	ldr	r2, [pc, #48]	@ (8000f6c <LoopFillZerobss+0x16>)
  movs r3, #0
 8000f3a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f3c:	e002      	b.n	8000f44 <LoopCopyDataInit>

08000f3e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f3e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f40:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f42:	3304      	adds	r3, #4

08000f44 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f44:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f46:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f48:	d3f9      	bcc.n	8000f3e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f4a:	4a09      	ldr	r2, [pc, #36]	@ (8000f70 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000f4c:	4c09      	ldr	r4, [pc, #36]	@ (8000f74 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000f4e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f50:	e001      	b.n	8000f56 <LoopFillZerobss>

08000f52 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f52:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f54:	3204      	adds	r2, #4

08000f56 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f56:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f58:	d3fb      	bcc.n	8000f52 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000f5a:	f002 f9af 	bl	80032bc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000f5e:	f7ff fd1b 	bl	8000998 <main>
  bx lr
 8000f62:	4770      	bx	lr
  ldr r0, =_sdata
 8000f64:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f68:	200000d0 	.word	0x200000d0
  ldr r2, =_sidata
 8000f6c:	08003d5c 	.word	0x08003d5c
  ldr r2, =_sbss
 8000f70:	200000d0 	.word	0x200000d0
  ldr r4, =_ebss
 8000f74:	2000044c 	.word	0x2000044c

08000f78 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000f78:	e7fe      	b.n	8000f78 <ADC1_2_IRQHandler>
	...

08000f7c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f80:	4b08      	ldr	r3, [pc, #32]	@ (8000fa4 <HAL_Init+0x28>)
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	4a07      	ldr	r2, [pc, #28]	@ (8000fa4 <HAL_Init+0x28>)
 8000f86:	f043 0310 	orr.w	r3, r3, #16
 8000f8a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f8c:	2003      	movs	r0, #3
 8000f8e:	f000 f947 	bl	8001220 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f92:	200f      	movs	r0, #15
 8000f94:	f000 f808 	bl	8000fa8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f98:	f7ff fea4 	bl	8000ce4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f9c:	2300      	movs	r3, #0
}
 8000f9e:	4618      	mov	r0, r3
 8000fa0:	bd80      	pop	{r7, pc}
 8000fa2:	bf00      	nop
 8000fa4:	40022000 	.word	0x40022000

08000fa8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b082      	sub	sp, #8
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000fb0:	4b12      	ldr	r3, [pc, #72]	@ (8000ffc <HAL_InitTick+0x54>)
 8000fb2:	681a      	ldr	r2, [r3, #0]
 8000fb4:	4b12      	ldr	r3, [pc, #72]	@ (8001000 <HAL_InitTick+0x58>)
 8000fb6:	781b      	ldrb	r3, [r3, #0]
 8000fb8:	4619      	mov	r1, r3
 8000fba:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000fbe:	fbb3 f3f1 	udiv	r3, r3, r1
 8000fc2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000fc6:	4618      	mov	r0, r3
 8000fc8:	f000 f95f 	bl	800128a <HAL_SYSTICK_Config>
 8000fcc:	4603      	mov	r3, r0
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d001      	beq.n	8000fd6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000fd2:	2301      	movs	r3, #1
 8000fd4:	e00e      	b.n	8000ff4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	2b0f      	cmp	r3, #15
 8000fda:	d80a      	bhi.n	8000ff2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000fdc:	2200      	movs	r2, #0
 8000fde:	6879      	ldr	r1, [r7, #4]
 8000fe0:	f04f 30ff 	mov.w	r0, #4294967295
 8000fe4:	f000 f927 	bl	8001236 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000fe8:	4a06      	ldr	r2, [pc, #24]	@ (8001004 <HAL_InitTick+0x5c>)
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000fee:	2300      	movs	r3, #0
 8000ff0:	e000      	b.n	8000ff4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000ff2:	2301      	movs	r3, #1
}
 8000ff4:	4618      	mov	r0, r3
 8000ff6:	3708      	adds	r7, #8
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	bd80      	pop	{r7, pc}
 8000ffc:	20000074 	.word	0x20000074
 8001000:	2000007c 	.word	0x2000007c
 8001004:	20000078 	.word	0x20000078

08001008 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001008:	b480      	push	{r7}
 800100a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800100c:	4b05      	ldr	r3, [pc, #20]	@ (8001024 <HAL_IncTick+0x1c>)
 800100e:	781b      	ldrb	r3, [r3, #0]
 8001010:	461a      	mov	r2, r3
 8001012:	4b05      	ldr	r3, [pc, #20]	@ (8001028 <HAL_IncTick+0x20>)
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	4413      	add	r3, r2
 8001018:	4a03      	ldr	r2, [pc, #12]	@ (8001028 <HAL_IncTick+0x20>)
 800101a:	6013      	str	r3, [r2, #0]
}
 800101c:	bf00      	nop
 800101e:	46bd      	mov	sp, r7
 8001020:	bc80      	pop	{r7}
 8001022:	4770      	bx	lr
 8001024:	2000007c 	.word	0x2000007c
 8001028:	20000300 	.word	0x20000300

0800102c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800102c:	b480      	push	{r7}
 800102e:	af00      	add	r7, sp, #0
  return uwTick;
 8001030:	4b02      	ldr	r3, [pc, #8]	@ (800103c <HAL_GetTick+0x10>)
 8001032:	681b      	ldr	r3, [r3, #0]
}
 8001034:	4618      	mov	r0, r3
 8001036:	46bd      	mov	sp, r7
 8001038:	bc80      	pop	{r7}
 800103a:	4770      	bx	lr
 800103c:	20000300 	.word	0x20000300

08001040 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	b084      	sub	sp, #16
 8001044:	af00      	add	r7, sp, #0
 8001046:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001048:	f7ff fff0 	bl	800102c <HAL_GetTick>
 800104c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001052:	68fb      	ldr	r3, [r7, #12]
 8001054:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001058:	d005      	beq.n	8001066 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800105a:	4b0a      	ldr	r3, [pc, #40]	@ (8001084 <HAL_Delay+0x44>)
 800105c:	781b      	ldrb	r3, [r3, #0]
 800105e:	461a      	mov	r2, r3
 8001060:	68fb      	ldr	r3, [r7, #12]
 8001062:	4413      	add	r3, r2
 8001064:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001066:	bf00      	nop
 8001068:	f7ff ffe0 	bl	800102c <HAL_GetTick>
 800106c:	4602      	mov	r2, r0
 800106e:	68bb      	ldr	r3, [r7, #8]
 8001070:	1ad3      	subs	r3, r2, r3
 8001072:	68fa      	ldr	r2, [r7, #12]
 8001074:	429a      	cmp	r2, r3
 8001076:	d8f7      	bhi.n	8001068 <HAL_Delay+0x28>
  {
  }
}
 8001078:	bf00      	nop
 800107a:	bf00      	nop
 800107c:	3710      	adds	r7, #16
 800107e:	46bd      	mov	sp, r7
 8001080:	bd80      	pop	{r7, pc}
 8001082:	bf00      	nop
 8001084:	2000007c 	.word	0x2000007c

08001088 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001088:	b480      	push	{r7}
 800108a:	b085      	sub	sp, #20
 800108c:	af00      	add	r7, sp, #0
 800108e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	f003 0307 	and.w	r3, r3, #7
 8001096:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001098:	4b0c      	ldr	r3, [pc, #48]	@ (80010cc <__NVIC_SetPriorityGrouping+0x44>)
 800109a:	68db      	ldr	r3, [r3, #12]
 800109c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800109e:	68ba      	ldr	r2, [r7, #8]
 80010a0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80010a4:	4013      	ands	r3, r2
 80010a6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80010a8:	68fb      	ldr	r3, [r7, #12]
 80010aa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80010ac:	68bb      	ldr	r3, [r7, #8]
 80010ae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80010b0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80010b4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80010b8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80010ba:	4a04      	ldr	r2, [pc, #16]	@ (80010cc <__NVIC_SetPriorityGrouping+0x44>)
 80010bc:	68bb      	ldr	r3, [r7, #8]
 80010be:	60d3      	str	r3, [r2, #12]
}
 80010c0:	bf00      	nop
 80010c2:	3714      	adds	r7, #20
 80010c4:	46bd      	mov	sp, r7
 80010c6:	bc80      	pop	{r7}
 80010c8:	4770      	bx	lr
 80010ca:	bf00      	nop
 80010cc:	e000ed00 	.word	0xe000ed00

080010d0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80010d0:	b480      	push	{r7}
 80010d2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80010d4:	4b04      	ldr	r3, [pc, #16]	@ (80010e8 <__NVIC_GetPriorityGrouping+0x18>)
 80010d6:	68db      	ldr	r3, [r3, #12]
 80010d8:	0a1b      	lsrs	r3, r3, #8
 80010da:	f003 0307 	and.w	r3, r3, #7
}
 80010de:	4618      	mov	r0, r3
 80010e0:	46bd      	mov	sp, r7
 80010e2:	bc80      	pop	{r7}
 80010e4:	4770      	bx	lr
 80010e6:	bf00      	nop
 80010e8:	e000ed00 	.word	0xe000ed00

080010ec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010ec:	b480      	push	{r7}
 80010ee:	b083      	sub	sp, #12
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	4603      	mov	r3, r0
 80010f4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	db0b      	blt.n	8001116 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80010fe:	79fb      	ldrb	r3, [r7, #7]
 8001100:	f003 021f 	and.w	r2, r3, #31
 8001104:	4906      	ldr	r1, [pc, #24]	@ (8001120 <__NVIC_EnableIRQ+0x34>)
 8001106:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800110a:	095b      	lsrs	r3, r3, #5
 800110c:	2001      	movs	r0, #1
 800110e:	fa00 f202 	lsl.w	r2, r0, r2
 8001112:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001116:	bf00      	nop
 8001118:	370c      	adds	r7, #12
 800111a:	46bd      	mov	sp, r7
 800111c:	bc80      	pop	{r7}
 800111e:	4770      	bx	lr
 8001120:	e000e100 	.word	0xe000e100

08001124 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001124:	b480      	push	{r7}
 8001126:	b083      	sub	sp, #12
 8001128:	af00      	add	r7, sp, #0
 800112a:	4603      	mov	r3, r0
 800112c:	6039      	str	r1, [r7, #0]
 800112e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001130:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001134:	2b00      	cmp	r3, #0
 8001136:	db0a      	blt.n	800114e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001138:	683b      	ldr	r3, [r7, #0]
 800113a:	b2da      	uxtb	r2, r3
 800113c:	490c      	ldr	r1, [pc, #48]	@ (8001170 <__NVIC_SetPriority+0x4c>)
 800113e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001142:	0112      	lsls	r2, r2, #4
 8001144:	b2d2      	uxtb	r2, r2
 8001146:	440b      	add	r3, r1
 8001148:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800114c:	e00a      	b.n	8001164 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800114e:	683b      	ldr	r3, [r7, #0]
 8001150:	b2da      	uxtb	r2, r3
 8001152:	4908      	ldr	r1, [pc, #32]	@ (8001174 <__NVIC_SetPriority+0x50>)
 8001154:	79fb      	ldrb	r3, [r7, #7]
 8001156:	f003 030f 	and.w	r3, r3, #15
 800115a:	3b04      	subs	r3, #4
 800115c:	0112      	lsls	r2, r2, #4
 800115e:	b2d2      	uxtb	r2, r2
 8001160:	440b      	add	r3, r1
 8001162:	761a      	strb	r2, [r3, #24]
}
 8001164:	bf00      	nop
 8001166:	370c      	adds	r7, #12
 8001168:	46bd      	mov	sp, r7
 800116a:	bc80      	pop	{r7}
 800116c:	4770      	bx	lr
 800116e:	bf00      	nop
 8001170:	e000e100 	.word	0xe000e100
 8001174:	e000ed00 	.word	0xe000ed00

08001178 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001178:	b480      	push	{r7}
 800117a:	b089      	sub	sp, #36	@ 0x24
 800117c:	af00      	add	r7, sp, #0
 800117e:	60f8      	str	r0, [r7, #12]
 8001180:	60b9      	str	r1, [r7, #8]
 8001182:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001184:	68fb      	ldr	r3, [r7, #12]
 8001186:	f003 0307 	and.w	r3, r3, #7
 800118a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800118c:	69fb      	ldr	r3, [r7, #28]
 800118e:	f1c3 0307 	rsb	r3, r3, #7
 8001192:	2b04      	cmp	r3, #4
 8001194:	bf28      	it	cs
 8001196:	2304      	movcs	r3, #4
 8001198:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800119a:	69fb      	ldr	r3, [r7, #28]
 800119c:	3304      	adds	r3, #4
 800119e:	2b06      	cmp	r3, #6
 80011a0:	d902      	bls.n	80011a8 <NVIC_EncodePriority+0x30>
 80011a2:	69fb      	ldr	r3, [r7, #28]
 80011a4:	3b03      	subs	r3, #3
 80011a6:	e000      	b.n	80011aa <NVIC_EncodePriority+0x32>
 80011a8:	2300      	movs	r3, #0
 80011aa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011ac:	f04f 32ff 	mov.w	r2, #4294967295
 80011b0:	69bb      	ldr	r3, [r7, #24]
 80011b2:	fa02 f303 	lsl.w	r3, r2, r3
 80011b6:	43da      	mvns	r2, r3
 80011b8:	68bb      	ldr	r3, [r7, #8]
 80011ba:	401a      	ands	r2, r3
 80011bc:	697b      	ldr	r3, [r7, #20]
 80011be:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80011c0:	f04f 31ff 	mov.w	r1, #4294967295
 80011c4:	697b      	ldr	r3, [r7, #20]
 80011c6:	fa01 f303 	lsl.w	r3, r1, r3
 80011ca:	43d9      	mvns	r1, r3
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011d0:	4313      	orrs	r3, r2
         );
}
 80011d2:	4618      	mov	r0, r3
 80011d4:	3724      	adds	r7, #36	@ 0x24
 80011d6:	46bd      	mov	sp, r7
 80011d8:	bc80      	pop	{r7}
 80011da:	4770      	bx	lr

080011dc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	b082      	sub	sp, #8
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	3b01      	subs	r3, #1
 80011e8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80011ec:	d301      	bcc.n	80011f2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80011ee:	2301      	movs	r3, #1
 80011f0:	e00f      	b.n	8001212 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80011f2:	4a0a      	ldr	r2, [pc, #40]	@ (800121c <SysTick_Config+0x40>)
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	3b01      	subs	r3, #1
 80011f8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80011fa:	210f      	movs	r1, #15
 80011fc:	f04f 30ff 	mov.w	r0, #4294967295
 8001200:	f7ff ff90 	bl	8001124 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001204:	4b05      	ldr	r3, [pc, #20]	@ (800121c <SysTick_Config+0x40>)
 8001206:	2200      	movs	r2, #0
 8001208:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800120a:	4b04      	ldr	r3, [pc, #16]	@ (800121c <SysTick_Config+0x40>)
 800120c:	2207      	movs	r2, #7
 800120e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001210:	2300      	movs	r3, #0
}
 8001212:	4618      	mov	r0, r3
 8001214:	3708      	adds	r7, #8
 8001216:	46bd      	mov	sp, r7
 8001218:	bd80      	pop	{r7, pc}
 800121a:	bf00      	nop
 800121c:	e000e010 	.word	0xe000e010

08001220 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	b082      	sub	sp, #8
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001228:	6878      	ldr	r0, [r7, #4]
 800122a:	f7ff ff2d 	bl	8001088 <__NVIC_SetPriorityGrouping>
}
 800122e:	bf00      	nop
 8001230:	3708      	adds	r7, #8
 8001232:	46bd      	mov	sp, r7
 8001234:	bd80      	pop	{r7, pc}

08001236 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001236:	b580      	push	{r7, lr}
 8001238:	b086      	sub	sp, #24
 800123a:	af00      	add	r7, sp, #0
 800123c:	4603      	mov	r3, r0
 800123e:	60b9      	str	r1, [r7, #8]
 8001240:	607a      	str	r2, [r7, #4]
 8001242:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001244:	2300      	movs	r3, #0
 8001246:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001248:	f7ff ff42 	bl	80010d0 <__NVIC_GetPriorityGrouping>
 800124c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800124e:	687a      	ldr	r2, [r7, #4]
 8001250:	68b9      	ldr	r1, [r7, #8]
 8001252:	6978      	ldr	r0, [r7, #20]
 8001254:	f7ff ff90 	bl	8001178 <NVIC_EncodePriority>
 8001258:	4602      	mov	r2, r0
 800125a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800125e:	4611      	mov	r1, r2
 8001260:	4618      	mov	r0, r3
 8001262:	f7ff ff5f 	bl	8001124 <__NVIC_SetPriority>
}
 8001266:	bf00      	nop
 8001268:	3718      	adds	r7, #24
 800126a:	46bd      	mov	sp, r7
 800126c:	bd80      	pop	{r7, pc}

0800126e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800126e:	b580      	push	{r7, lr}
 8001270:	b082      	sub	sp, #8
 8001272:	af00      	add	r7, sp, #0
 8001274:	4603      	mov	r3, r0
 8001276:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001278:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800127c:	4618      	mov	r0, r3
 800127e:	f7ff ff35 	bl	80010ec <__NVIC_EnableIRQ>
}
 8001282:	bf00      	nop
 8001284:	3708      	adds	r7, #8
 8001286:	46bd      	mov	sp, r7
 8001288:	bd80      	pop	{r7, pc}

0800128a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800128a:	b580      	push	{r7, lr}
 800128c:	b082      	sub	sp, #8
 800128e:	af00      	add	r7, sp, #0
 8001290:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001292:	6878      	ldr	r0, [r7, #4]
 8001294:	f7ff ffa2 	bl	80011dc <SysTick_Config>
 8001298:	4603      	mov	r3, r0
}
 800129a:	4618      	mov	r0, r3
 800129c:	3708      	adds	r7, #8
 800129e:	46bd      	mov	sp, r7
 80012a0:	bd80      	pop	{r7, pc}

080012a2 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80012a2:	b480      	push	{r7}
 80012a4:	b085      	sub	sp, #20
 80012a6:	af00      	add	r7, sp, #0
 80012a8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80012aa:	2300      	movs	r3, #0
 80012ac:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80012b4:	b2db      	uxtb	r3, r3
 80012b6:	2b02      	cmp	r3, #2
 80012b8:	d008      	beq.n	80012cc <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	2204      	movs	r2, #4
 80012be:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	2200      	movs	r2, #0
 80012c4:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80012c8:	2301      	movs	r3, #1
 80012ca:	e020      	b.n	800130e <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	681a      	ldr	r2, [r3, #0]
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	f022 020e 	bic.w	r2, r2, #14
 80012da:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	681a      	ldr	r2, [r3, #0]
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	f022 0201 	bic.w	r2, r2, #1
 80012ea:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80012f4:	2101      	movs	r1, #1
 80012f6:	fa01 f202 	lsl.w	r2, r1, r2
 80012fa:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	2201      	movs	r2, #1
 8001300:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	2200      	movs	r2, #0
 8001308:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 800130c:	7bfb      	ldrb	r3, [r7, #15]
}
 800130e:	4618      	mov	r0, r3
 8001310:	3714      	adds	r7, #20
 8001312:	46bd      	mov	sp, r7
 8001314:	bc80      	pop	{r7}
 8001316:	4770      	bx	lr

08001318 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001318:	b580      	push	{r7, lr}
 800131a:	b084      	sub	sp, #16
 800131c:	af00      	add	r7, sp, #0
 800131e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001320:	2300      	movs	r3, #0
 8001322:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800132a:	b2db      	uxtb	r3, r3
 800132c:	2b02      	cmp	r3, #2
 800132e:	d005      	beq.n	800133c <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	2204      	movs	r2, #4
 8001334:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 8001336:	2301      	movs	r3, #1
 8001338:	73fb      	strb	r3, [r7, #15]
 800133a:	e051      	b.n	80013e0 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	681a      	ldr	r2, [r3, #0]
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	f022 020e 	bic.w	r2, r2, #14
 800134a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	681a      	ldr	r2, [r3, #0]
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	f022 0201 	bic.w	r2, r2, #1
 800135a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	4a22      	ldr	r2, [pc, #136]	@ (80013ec <HAL_DMA_Abort_IT+0xd4>)
 8001362:	4293      	cmp	r3, r2
 8001364:	d029      	beq.n	80013ba <HAL_DMA_Abort_IT+0xa2>
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	4a21      	ldr	r2, [pc, #132]	@ (80013f0 <HAL_DMA_Abort_IT+0xd8>)
 800136c:	4293      	cmp	r3, r2
 800136e:	d022      	beq.n	80013b6 <HAL_DMA_Abort_IT+0x9e>
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	4a1f      	ldr	r2, [pc, #124]	@ (80013f4 <HAL_DMA_Abort_IT+0xdc>)
 8001376:	4293      	cmp	r3, r2
 8001378:	d01a      	beq.n	80013b0 <HAL_DMA_Abort_IT+0x98>
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	4a1e      	ldr	r2, [pc, #120]	@ (80013f8 <HAL_DMA_Abort_IT+0xe0>)
 8001380:	4293      	cmp	r3, r2
 8001382:	d012      	beq.n	80013aa <HAL_DMA_Abort_IT+0x92>
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	4a1c      	ldr	r2, [pc, #112]	@ (80013fc <HAL_DMA_Abort_IT+0xe4>)
 800138a:	4293      	cmp	r3, r2
 800138c:	d00a      	beq.n	80013a4 <HAL_DMA_Abort_IT+0x8c>
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	4a1b      	ldr	r2, [pc, #108]	@ (8001400 <HAL_DMA_Abort_IT+0xe8>)
 8001394:	4293      	cmp	r3, r2
 8001396:	d102      	bne.n	800139e <HAL_DMA_Abort_IT+0x86>
 8001398:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800139c:	e00e      	b.n	80013bc <HAL_DMA_Abort_IT+0xa4>
 800139e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80013a2:	e00b      	b.n	80013bc <HAL_DMA_Abort_IT+0xa4>
 80013a4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80013a8:	e008      	b.n	80013bc <HAL_DMA_Abort_IT+0xa4>
 80013aa:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80013ae:	e005      	b.n	80013bc <HAL_DMA_Abort_IT+0xa4>
 80013b0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80013b4:	e002      	b.n	80013bc <HAL_DMA_Abort_IT+0xa4>
 80013b6:	2310      	movs	r3, #16
 80013b8:	e000      	b.n	80013bc <HAL_DMA_Abort_IT+0xa4>
 80013ba:	2301      	movs	r3, #1
 80013bc:	4a11      	ldr	r2, [pc, #68]	@ (8001404 <HAL_DMA_Abort_IT+0xec>)
 80013be:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	2201      	movs	r2, #1
 80013c4:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	2200      	movs	r2, #0
 80013cc:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d003      	beq.n	80013e0 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80013dc:	6878      	ldr	r0, [r7, #4]
 80013de:	4798      	blx	r3
    } 
  }
  return status;
 80013e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80013e2:	4618      	mov	r0, r3
 80013e4:	3710      	adds	r7, #16
 80013e6:	46bd      	mov	sp, r7
 80013e8:	bd80      	pop	{r7, pc}
 80013ea:	bf00      	nop
 80013ec:	40020008 	.word	0x40020008
 80013f0:	4002001c 	.word	0x4002001c
 80013f4:	40020030 	.word	0x40020030
 80013f8:	40020044 	.word	0x40020044
 80013fc:	40020058 	.word	0x40020058
 8001400:	4002006c 	.word	0x4002006c
 8001404:	40020000 	.word	0x40020000

08001408 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001408:	b480      	push	{r7}
 800140a:	b08b      	sub	sp, #44	@ 0x2c
 800140c:	af00      	add	r7, sp, #0
 800140e:	6078      	str	r0, [r7, #4]
 8001410:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001412:	2300      	movs	r3, #0
 8001414:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001416:	2300      	movs	r3, #0
 8001418:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800141a:	e169      	b.n	80016f0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800141c:	2201      	movs	r2, #1
 800141e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001420:	fa02 f303 	lsl.w	r3, r2, r3
 8001424:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001426:	683b      	ldr	r3, [r7, #0]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	69fa      	ldr	r2, [r7, #28]
 800142c:	4013      	ands	r3, r2
 800142e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001430:	69ba      	ldr	r2, [r7, #24]
 8001432:	69fb      	ldr	r3, [r7, #28]
 8001434:	429a      	cmp	r2, r3
 8001436:	f040 8158 	bne.w	80016ea <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800143a:	683b      	ldr	r3, [r7, #0]
 800143c:	685b      	ldr	r3, [r3, #4]
 800143e:	4a9a      	ldr	r2, [pc, #616]	@ (80016a8 <HAL_GPIO_Init+0x2a0>)
 8001440:	4293      	cmp	r3, r2
 8001442:	d05e      	beq.n	8001502 <HAL_GPIO_Init+0xfa>
 8001444:	4a98      	ldr	r2, [pc, #608]	@ (80016a8 <HAL_GPIO_Init+0x2a0>)
 8001446:	4293      	cmp	r3, r2
 8001448:	d875      	bhi.n	8001536 <HAL_GPIO_Init+0x12e>
 800144a:	4a98      	ldr	r2, [pc, #608]	@ (80016ac <HAL_GPIO_Init+0x2a4>)
 800144c:	4293      	cmp	r3, r2
 800144e:	d058      	beq.n	8001502 <HAL_GPIO_Init+0xfa>
 8001450:	4a96      	ldr	r2, [pc, #600]	@ (80016ac <HAL_GPIO_Init+0x2a4>)
 8001452:	4293      	cmp	r3, r2
 8001454:	d86f      	bhi.n	8001536 <HAL_GPIO_Init+0x12e>
 8001456:	4a96      	ldr	r2, [pc, #600]	@ (80016b0 <HAL_GPIO_Init+0x2a8>)
 8001458:	4293      	cmp	r3, r2
 800145a:	d052      	beq.n	8001502 <HAL_GPIO_Init+0xfa>
 800145c:	4a94      	ldr	r2, [pc, #592]	@ (80016b0 <HAL_GPIO_Init+0x2a8>)
 800145e:	4293      	cmp	r3, r2
 8001460:	d869      	bhi.n	8001536 <HAL_GPIO_Init+0x12e>
 8001462:	4a94      	ldr	r2, [pc, #592]	@ (80016b4 <HAL_GPIO_Init+0x2ac>)
 8001464:	4293      	cmp	r3, r2
 8001466:	d04c      	beq.n	8001502 <HAL_GPIO_Init+0xfa>
 8001468:	4a92      	ldr	r2, [pc, #584]	@ (80016b4 <HAL_GPIO_Init+0x2ac>)
 800146a:	4293      	cmp	r3, r2
 800146c:	d863      	bhi.n	8001536 <HAL_GPIO_Init+0x12e>
 800146e:	4a92      	ldr	r2, [pc, #584]	@ (80016b8 <HAL_GPIO_Init+0x2b0>)
 8001470:	4293      	cmp	r3, r2
 8001472:	d046      	beq.n	8001502 <HAL_GPIO_Init+0xfa>
 8001474:	4a90      	ldr	r2, [pc, #576]	@ (80016b8 <HAL_GPIO_Init+0x2b0>)
 8001476:	4293      	cmp	r3, r2
 8001478:	d85d      	bhi.n	8001536 <HAL_GPIO_Init+0x12e>
 800147a:	2b12      	cmp	r3, #18
 800147c:	d82a      	bhi.n	80014d4 <HAL_GPIO_Init+0xcc>
 800147e:	2b12      	cmp	r3, #18
 8001480:	d859      	bhi.n	8001536 <HAL_GPIO_Init+0x12e>
 8001482:	a201      	add	r2, pc, #4	@ (adr r2, 8001488 <HAL_GPIO_Init+0x80>)
 8001484:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001488:	08001503 	.word	0x08001503
 800148c:	080014dd 	.word	0x080014dd
 8001490:	080014ef 	.word	0x080014ef
 8001494:	08001531 	.word	0x08001531
 8001498:	08001537 	.word	0x08001537
 800149c:	08001537 	.word	0x08001537
 80014a0:	08001537 	.word	0x08001537
 80014a4:	08001537 	.word	0x08001537
 80014a8:	08001537 	.word	0x08001537
 80014ac:	08001537 	.word	0x08001537
 80014b0:	08001537 	.word	0x08001537
 80014b4:	08001537 	.word	0x08001537
 80014b8:	08001537 	.word	0x08001537
 80014bc:	08001537 	.word	0x08001537
 80014c0:	08001537 	.word	0x08001537
 80014c4:	08001537 	.word	0x08001537
 80014c8:	08001537 	.word	0x08001537
 80014cc:	080014e5 	.word	0x080014e5
 80014d0:	080014f9 	.word	0x080014f9
 80014d4:	4a79      	ldr	r2, [pc, #484]	@ (80016bc <HAL_GPIO_Init+0x2b4>)
 80014d6:	4293      	cmp	r3, r2
 80014d8:	d013      	beq.n	8001502 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80014da:	e02c      	b.n	8001536 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80014dc:	683b      	ldr	r3, [r7, #0]
 80014de:	68db      	ldr	r3, [r3, #12]
 80014e0:	623b      	str	r3, [r7, #32]
          break;
 80014e2:	e029      	b.n	8001538 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80014e4:	683b      	ldr	r3, [r7, #0]
 80014e6:	68db      	ldr	r3, [r3, #12]
 80014e8:	3304      	adds	r3, #4
 80014ea:	623b      	str	r3, [r7, #32]
          break;
 80014ec:	e024      	b.n	8001538 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80014ee:	683b      	ldr	r3, [r7, #0]
 80014f0:	68db      	ldr	r3, [r3, #12]
 80014f2:	3308      	adds	r3, #8
 80014f4:	623b      	str	r3, [r7, #32]
          break;
 80014f6:	e01f      	b.n	8001538 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80014f8:	683b      	ldr	r3, [r7, #0]
 80014fa:	68db      	ldr	r3, [r3, #12]
 80014fc:	330c      	adds	r3, #12
 80014fe:	623b      	str	r3, [r7, #32]
          break;
 8001500:	e01a      	b.n	8001538 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001502:	683b      	ldr	r3, [r7, #0]
 8001504:	689b      	ldr	r3, [r3, #8]
 8001506:	2b00      	cmp	r3, #0
 8001508:	d102      	bne.n	8001510 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800150a:	2304      	movs	r3, #4
 800150c:	623b      	str	r3, [r7, #32]
          break;
 800150e:	e013      	b.n	8001538 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001510:	683b      	ldr	r3, [r7, #0]
 8001512:	689b      	ldr	r3, [r3, #8]
 8001514:	2b01      	cmp	r3, #1
 8001516:	d105      	bne.n	8001524 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001518:	2308      	movs	r3, #8
 800151a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	69fa      	ldr	r2, [r7, #28]
 8001520:	611a      	str	r2, [r3, #16]
          break;
 8001522:	e009      	b.n	8001538 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001524:	2308      	movs	r3, #8
 8001526:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	69fa      	ldr	r2, [r7, #28]
 800152c:	615a      	str	r2, [r3, #20]
          break;
 800152e:	e003      	b.n	8001538 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001530:	2300      	movs	r3, #0
 8001532:	623b      	str	r3, [r7, #32]
          break;
 8001534:	e000      	b.n	8001538 <HAL_GPIO_Init+0x130>
          break;
 8001536:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001538:	69bb      	ldr	r3, [r7, #24]
 800153a:	2bff      	cmp	r3, #255	@ 0xff
 800153c:	d801      	bhi.n	8001542 <HAL_GPIO_Init+0x13a>
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	e001      	b.n	8001546 <HAL_GPIO_Init+0x13e>
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	3304      	adds	r3, #4
 8001546:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001548:	69bb      	ldr	r3, [r7, #24]
 800154a:	2bff      	cmp	r3, #255	@ 0xff
 800154c:	d802      	bhi.n	8001554 <HAL_GPIO_Init+0x14c>
 800154e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001550:	009b      	lsls	r3, r3, #2
 8001552:	e002      	b.n	800155a <HAL_GPIO_Init+0x152>
 8001554:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001556:	3b08      	subs	r3, #8
 8001558:	009b      	lsls	r3, r3, #2
 800155a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800155c:	697b      	ldr	r3, [r7, #20]
 800155e:	681a      	ldr	r2, [r3, #0]
 8001560:	210f      	movs	r1, #15
 8001562:	693b      	ldr	r3, [r7, #16]
 8001564:	fa01 f303 	lsl.w	r3, r1, r3
 8001568:	43db      	mvns	r3, r3
 800156a:	401a      	ands	r2, r3
 800156c:	6a39      	ldr	r1, [r7, #32]
 800156e:	693b      	ldr	r3, [r7, #16]
 8001570:	fa01 f303 	lsl.w	r3, r1, r3
 8001574:	431a      	orrs	r2, r3
 8001576:	697b      	ldr	r3, [r7, #20]
 8001578:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800157a:	683b      	ldr	r3, [r7, #0]
 800157c:	685b      	ldr	r3, [r3, #4]
 800157e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001582:	2b00      	cmp	r3, #0
 8001584:	f000 80b1 	beq.w	80016ea <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001588:	4b4d      	ldr	r3, [pc, #308]	@ (80016c0 <HAL_GPIO_Init+0x2b8>)
 800158a:	699b      	ldr	r3, [r3, #24]
 800158c:	4a4c      	ldr	r2, [pc, #304]	@ (80016c0 <HAL_GPIO_Init+0x2b8>)
 800158e:	f043 0301 	orr.w	r3, r3, #1
 8001592:	6193      	str	r3, [r2, #24]
 8001594:	4b4a      	ldr	r3, [pc, #296]	@ (80016c0 <HAL_GPIO_Init+0x2b8>)
 8001596:	699b      	ldr	r3, [r3, #24]
 8001598:	f003 0301 	and.w	r3, r3, #1
 800159c:	60bb      	str	r3, [r7, #8]
 800159e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80015a0:	4a48      	ldr	r2, [pc, #288]	@ (80016c4 <HAL_GPIO_Init+0x2bc>)
 80015a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015a4:	089b      	lsrs	r3, r3, #2
 80015a6:	3302      	adds	r3, #2
 80015a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015ac:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80015ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015b0:	f003 0303 	and.w	r3, r3, #3
 80015b4:	009b      	lsls	r3, r3, #2
 80015b6:	220f      	movs	r2, #15
 80015b8:	fa02 f303 	lsl.w	r3, r2, r3
 80015bc:	43db      	mvns	r3, r3
 80015be:	68fa      	ldr	r2, [r7, #12]
 80015c0:	4013      	ands	r3, r2
 80015c2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	4a40      	ldr	r2, [pc, #256]	@ (80016c8 <HAL_GPIO_Init+0x2c0>)
 80015c8:	4293      	cmp	r3, r2
 80015ca:	d013      	beq.n	80015f4 <HAL_GPIO_Init+0x1ec>
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	4a3f      	ldr	r2, [pc, #252]	@ (80016cc <HAL_GPIO_Init+0x2c4>)
 80015d0:	4293      	cmp	r3, r2
 80015d2:	d00d      	beq.n	80015f0 <HAL_GPIO_Init+0x1e8>
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	4a3e      	ldr	r2, [pc, #248]	@ (80016d0 <HAL_GPIO_Init+0x2c8>)
 80015d8:	4293      	cmp	r3, r2
 80015da:	d007      	beq.n	80015ec <HAL_GPIO_Init+0x1e4>
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	4a3d      	ldr	r2, [pc, #244]	@ (80016d4 <HAL_GPIO_Init+0x2cc>)
 80015e0:	4293      	cmp	r3, r2
 80015e2:	d101      	bne.n	80015e8 <HAL_GPIO_Init+0x1e0>
 80015e4:	2303      	movs	r3, #3
 80015e6:	e006      	b.n	80015f6 <HAL_GPIO_Init+0x1ee>
 80015e8:	2304      	movs	r3, #4
 80015ea:	e004      	b.n	80015f6 <HAL_GPIO_Init+0x1ee>
 80015ec:	2302      	movs	r3, #2
 80015ee:	e002      	b.n	80015f6 <HAL_GPIO_Init+0x1ee>
 80015f0:	2301      	movs	r3, #1
 80015f2:	e000      	b.n	80015f6 <HAL_GPIO_Init+0x1ee>
 80015f4:	2300      	movs	r3, #0
 80015f6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80015f8:	f002 0203 	and.w	r2, r2, #3
 80015fc:	0092      	lsls	r2, r2, #2
 80015fe:	4093      	lsls	r3, r2
 8001600:	68fa      	ldr	r2, [r7, #12]
 8001602:	4313      	orrs	r3, r2
 8001604:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001606:	492f      	ldr	r1, [pc, #188]	@ (80016c4 <HAL_GPIO_Init+0x2bc>)
 8001608:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800160a:	089b      	lsrs	r3, r3, #2
 800160c:	3302      	adds	r3, #2
 800160e:	68fa      	ldr	r2, [r7, #12]
 8001610:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001614:	683b      	ldr	r3, [r7, #0]
 8001616:	685b      	ldr	r3, [r3, #4]
 8001618:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800161c:	2b00      	cmp	r3, #0
 800161e:	d006      	beq.n	800162e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001620:	4b2d      	ldr	r3, [pc, #180]	@ (80016d8 <HAL_GPIO_Init+0x2d0>)
 8001622:	689a      	ldr	r2, [r3, #8]
 8001624:	492c      	ldr	r1, [pc, #176]	@ (80016d8 <HAL_GPIO_Init+0x2d0>)
 8001626:	69bb      	ldr	r3, [r7, #24]
 8001628:	4313      	orrs	r3, r2
 800162a:	608b      	str	r3, [r1, #8]
 800162c:	e006      	b.n	800163c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800162e:	4b2a      	ldr	r3, [pc, #168]	@ (80016d8 <HAL_GPIO_Init+0x2d0>)
 8001630:	689a      	ldr	r2, [r3, #8]
 8001632:	69bb      	ldr	r3, [r7, #24]
 8001634:	43db      	mvns	r3, r3
 8001636:	4928      	ldr	r1, [pc, #160]	@ (80016d8 <HAL_GPIO_Init+0x2d0>)
 8001638:	4013      	ands	r3, r2
 800163a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800163c:	683b      	ldr	r3, [r7, #0]
 800163e:	685b      	ldr	r3, [r3, #4]
 8001640:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001644:	2b00      	cmp	r3, #0
 8001646:	d006      	beq.n	8001656 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001648:	4b23      	ldr	r3, [pc, #140]	@ (80016d8 <HAL_GPIO_Init+0x2d0>)
 800164a:	68da      	ldr	r2, [r3, #12]
 800164c:	4922      	ldr	r1, [pc, #136]	@ (80016d8 <HAL_GPIO_Init+0x2d0>)
 800164e:	69bb      	ldr	r3, [r7, #24]
 8001650:	4313      	orrs	r3, r2
 8001652:	60cb      	str	r3, [r1, #12]
 8001654:	e006      	b.n	8001664 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001656:	4b20      	ldr	r3, [pc, #128]	@ (80016d8 <HAL_GPIO_Init+0x2d0>)
 8001658:	68da      	ldr	r2, [r3, #12]
 800165a:	69bb      	ldr	r3, [r7, #24]
 800165c:	43db      	mvns	r3, r3
 800165e:	491e      	ldr	r1, [pc, #120]	@ (80016d8 <HAL_GPIO_Init+0x2d0>)
 8001660:	4013      	ands	r3, r2
 8001662:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001664:	683b      	ldr	r3, [r7, #0]
 8001666:	685b      	ldr	r3, [r3, #4]
 8001668:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800166c:	2b00      	cmp	r3, #0
 800166e:	d006      	beq.n	800167e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001670:	4b19      	ldr	r3, [pc, #100]	@ (80016d8 <HAL_GPIO_Init+0x2d0>)
 8001672:	685a      	ldr	r2, [r3, #4]
 8001674:	4918      	ldr	r1, [pc, #96]	@ (80016d8 <HAL_GPIO_Init+0x2d0>)
 8001676:	69bb      	ldr	r3, [r7, #24]
 8001678:	4313      	orrs	r3, r2
 800167a:	604b      	str	r3, [r1, #4]
 800167c:	e006      	b.n	800168c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800167e:	4b16      	ldr	r3, [pc, #88]	@ (80016d8 <HAL_GPIO_Init+0x2d0>)
 8001680:	685a      	ldr	r2, [r3, #4]
 8001682:	69bb      	ldr	r3, [r7, #24]
 8001684:	43db      	mvns	r3, r3
 8001686:	4914      	ldr	r1, [pc, #80]	@ (80016d8 <HAL_GPIO_Init+0x2d0>)
 8001688:	4013      	ands	r3, r2
 800168a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800168c:	683b      	ldr	r3, [r7, #0]
 800168e:	685b      	ldr	r3, [r3, #4]
 8001690:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001694:	2b00      	cmp	r3, #0
 8001696:	d021      	beq.n	80016dc <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001698:	4b0f      	ldr	r3, [pc, #60]	@ (80016d8 <HAL_GPIO_Init+0x2d0>)
 800169a:	681a      	ldr	r2, [r3, #0]
 800169c:	490e      	ldr	r1, [pc, #56]	@ (80016d8 <HAL_GPIO_Init+0x2d0>)
 800169e:	69bb      	ldr	r3, [r7, #24]
 80016a0:	4313      	orrs	r3, r2
 80016a2:	600b      	str	r3, [r1, #0]
 80016a4:	e021      	b.n	80016ea <HAL_GPIO_Init+0x2e2>
 80016a6:	bf00      	nop
 80016a8:	10320000 	.word	0x10320000
 80016ac:	10310000 	.word	0x10310000
 80016b0:	10220000 	.word	0x10220000
 80016b4:	10210000 	.word	0x10210000
 80016b8:	10120000 	.word	0x10120000
 80016bc:	10110000 	.word	0x10110000
 80016c0:	40021000 	.word	0x40021000
 80016c4:	40010000 	.word	0x40010000
 80016c8:	40010800 	.word	0x40010800
 80016cc:	40010c00 	.word	0x40010c00
 80016d0:	40011000 	.word	0x40011000
 80016d4:	40011400 	.word	0x40011400
 80016d8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80016dc:	4b0b      	ldr	r3, [pc, #44]	@ (800170c <HAL_GPIO_Init+0x304>)
 80016de:	681a      	ldr	r2, [r3, #0]
 80016e0:	69bb      	ldr	r3, [r7, #24]
 80016e2:	43db      	mvns	r3, r3
 80016e4:	4909      	ldr	r1, [pc, #36]	@ (800170c <HAL_GPIO_Init+0x304>)
 80016e6:	4013      	ands	r3, r2
 80016e8:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80016ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016ec:	3301      	adds	r3, #1
 80016ee:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80016f0:	683b      	ldr	r3, [r7, #0]
 80016f2:	681a      	ldr	r2, [r3, #0]
 80016f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016f6:	fa22 f303 	lsr.w	r3, r2, r3
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	f47f ae8e 	bne.w	800141c <HAL_GPIO_Init+0x14>
  }
}
 8001700:	bf00      	nop
 8001702:	bf00      	nop
 8001704:	372c      	adds	r7, #44	@ 0x2c
 8001706:	46bd      	mov	sp, r7
 8001708:	bc80      	pop	{r7}
 800170a:	4770      	bx	lr
 800170c:	40010400 	.word	0x40010400

08001710 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001710:	b480      	push	{r7}
 8001712:	b085      	sub	sp, #20
 8001714:	af00      	add	r7, sp, #0
 8001716:	6078      	str	r0, [r7, #4]
 8001718:	460b      	mov	r3, r1
 800171a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	689a      	ldr	r2, [r3, #8]
 8001720:	887b      	ldrh	r3, [r7, #2]
 8001722:	4013      	ands	r3, r2
 8001724:	2b00      	cmp	r3, #0
 8001726:	d002      	beq.n	800172e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001728:	2301      	movs	r3, #1
 800172a:	73fb      	strb	r3, [r7, #15]
 800172c:	e001      	b.n	8001732 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800172e:	2300      	movs	r3, #0
 8001730:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001732:	7bfb      	ldrb	r3, [r7, #15]
}
 8001734:	4618      	mov	r0, r3
 8001736:	3714      	adds	r7, #20
 8001738:	46bd      	mov	sp, r7
 800173a:	bc80      	pop	{r7}
 800173c:	4770      	bx	lr

0800173e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800173e:	b480      	push	{r7}
 8001740:	b083      	sub	sp, #12
 8001742:	af00      	add	r7, sp, #0
 8001744:	6078      	str	r0, [r7, #4]
 8001746:	460b      	mov	r3, r1
 8001748:	807b      	strh	r3, [r7, #2]
 800174a:	4613      	mov	r3, r2
 800174c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800174e:	787b      	ldrb	r3, [r7, #1]
 8001750:	2b00      	cmp	r3, #0
 8001752:	d003      	beq.n	800175c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001754:	887a      	ldrh	r2, [r7, #2]
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800175a:	e003      	b.n	8001764 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800175c:	887b      	ldrh	r3, [r7, #2]
 800175e:	041a      	lsls	r2, r3, #16
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	611a      	str	r2, [r3, #16]
}
 8001764:	bf00      	nop
 8001766:	370c      	adds	r7, #12
 8001768:	46bd      	mov	sp, r7
 800176a:	bc80      	pop	{r7}
 800176c:	4770      	bx	lr

0800176e <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800176e:	b480      	push	{r7}
 8001770:	b085      	sub	sp, #20
 8001772:	af00      	add	r7, sp, #0
 8001774:	6078      	str	r0, [r7, #4]
 8001776:	460b      	mov	r3, r1
 8001778:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	68db      	ldr	r3, [r3, #12]
 800177e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001780:	887a      	ldrh	r2, [r7, #2]
 8001782:	68fb      	ldr	r3, [r7, #12]
 8001784:	4013      	ands	r3, r2
 8001786:	041a      	lsls	r2, r3, #16
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	43d9      	mvns	r1, r3
 800178c:	887b      	ldrh	r3, [r7, #2]
 800178e:	400b      	ands	r3, r1
 8001790:	431a      	orrs	r2, r3
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	611a      	str	r2, [r3, #16]
}
 8001796:	bf00      	nop
 8001798:	3714      	adds	r7, #20
 800179a:	46bd      	mov	sp, r7
 800179c:	bc80      	pop	{r7}
 800179e:	4770      	bx	lr

080017a0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	b086      	sub	sp, #24
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d101      	bne.n	80017b2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80017ae:	2301      	movs	r3, #1
 80017b0:	e272      	b.n	8001c98 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	f003 0301 	and.w	r3, r3, #1
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	f000 8087 	beq.w	80018ce <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80017c0:	4b92      	ldr	r3, [pc, #584]	@ (8001a0c <HAL_RCC_OscConfig+0x26c>)
 80017c2:	685b      	ldr	r3, [r3, #4]
 80017c4:	f003 030c 	and.w	r3, r3, #12
 80017c8:	2b04      	cmp	r3, #4
 80017ca:	d00c      	beq.n	80017e6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80017cc:	4b8f      	ldr	r3, [pc, #572]	@ (8001a0c <HAL_RCC_OscConfig+0x26c>)
 80017ce:	685b      	ldr	r3, [r3, #4]
 80017d0:	f003 030c 	and.w	r3, r3, #12
 80017d4:	2b08      	cmp	r3, #8
 80017d6:	d112      	bne.n	80017fe <HAL_RCC_OscConfig+0x5e>
 80017d8:	4b8c      	ldr	r3, [pc, #560]	@ (8001a0c <HAL_RCC_OscConfig+0x26c>)
 80017da:	685b      	ldr	r3, [r3, #4]
 80017dc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80017e0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80017e4:	d10b      	bne.n	80017fe <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017e6:	4b89      	ldr	r3, [pc, #548]	@ (8001a0c <HAL_RCC_OscConfig+0x26c>)
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d06c      	beq.n	80018cc <HAL_RCC_OscConfig+0x12c>
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	685b      	ldr	r3, [r3, #4]
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d168      	bne.n	80018cc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80017fa:	2301      	movs	r3, #1
 80017fc:	e24c      	b.n	8001c98 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	685b      	ldr	r3, [r3, #4]
 8001802:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001806:	d106      	bne.n	8001816 <HAL_RCC_OscConfig+0x76>
 8001808:	4b80      	ldr	r3, [pc, #512]	@ (8001a0c <HAL_RCC_OscConfig+0x26c>)
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	4a7f      	ldr	r2, [pc, #508]	@ (8001a0c <HAL_RCC_OscConfig+0x26c>)
 800180e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001812:	6013      	str	r3, [r2, #0]
 8001814:	e02e      	b.n	8001874 <HAL_RCC_OscConfig+0xd4>
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	685b      	ldr	r3, [r3, #4]
 800181a:	2b00      	cmp	r3, #0
 800181c:	d10c      	bne.n	8001838 <HAL_RCC_OscConfig+0x98>
 800181e:	4b7b      	ldr	r3, [pc, #492]	@ (8001a0c <HAL_RCC_OscConfig+0x26c>)
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	4a7a      	ldr	r2, [pc, #488]	@ (8001a0c <HAL_RCC_OscConfig+0x26c>)
 8001824:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001828:	6013      	str	r3, [r2, #0]
 800182a:	4b78      	ldr	r3, [pc, #480]	@ (8001a0c <HAL_RCC_OscConfig+0x26c>)
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	4a77      	ldr	r2, [pc, #476]	@ (8001a0c <HAL_RCC_OscConfig+0x26c>)
 8001830:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001834:	6013      	str	r3, [r2, #0]
 8001836:	e01d      	b.n	8001874 <HAL_RCC_OscConfig+0xd4>
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	685b      	ldr	r3, [r3, #4]
 800183c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001840:	d10c      	bne.n	800185c <HAL_RCC_OscConfig+0xbc>
 8001842:	4b72      	ldr	r3, [pc, #456]	@ (8001a0c <HAL_RCC_OscConfig+0x26c>)
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	4a71      	ldr	r2, [pc, #452]	@ (8001a0c <HAL_RCC_OscConfig+0x26c>)
 8001848:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800184c:	6013      	str	r3, [r2, #0]
 800184e:	4b6f      	ldr	r3, [pc, #444]	@ (8001a0c <HAL_RCC_OscConfig+0x26c>)
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	4a6e      	ldr	r2, [pc, #440]	@ (8001a0c <HAL_RCC_OscConfig+0x26c>)
 8001854:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001858:	6013      	str	r3, [r2, #0]
 800185a:	e00b      	b.n	8001874 <HAL_RCC_OscConfig+0xd4>
 800185c:	4b6b      	ldr	r3, [pc, #428]	@ (8001a0c <HAL_RCC_OscConfig+0x26c>)
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	4a6a      	ldr	r2, [pc, #424]	@ (8001a0c <HAL_RCC_OscConfig+0x26c>)
 8001862:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001866:	6013      	str	r3, [r2, #0]
 8001868:	4b68      	ldr	r3, [pc, #416]	@ (8001a0c <HAL_RCC_OscConfig+0x26c>)
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	4a67      	ldr	r2, [pc, #412]	@ (8001a0c <HAL_RCC_OscConfig+0x26c>)
 800186e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001872:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	685b      	ldr	r3, [r3, #4]
 8001878:	2b00      	cmp	r3, #0
 800187a:	d013      	beq.n	80018a4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800187c:	f7ff fbd6 	bl	800102c <HAL_GetTick>
 8001880:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001882:	e008      	b.n	8001896 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001884:	f7ff fbd2 	bl	800102c <HAL_GetTick>
 8001888:	4602      	mov	r2, r0
 800188a:	693b      	ldr	r3, [r7, #16]
 800188c:	1ad3      	subs	r3, r2, r3
 800188e:	2b64      	cmp	r3, #100	@ 0x64
 8001890:	d901      	bls.n	8001896 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001892:	2303      	movs	r3, #3
 8001894:	e200      	b.n	8001c98 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001896:	4b5d      	ldr	r3, [pc, #372]	@ (8001a0c <HAL_RCC_OscConfig+0x26c>)
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d0f0      	beq.n	8001884 <HAL_RCC_OscConfig+0xe4>
 80018a2:	e014      	b.n	80018ce <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018a4:	f7ff fbc2 	bl	800102c <HAL_GetTick>
 80018a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80018aa:	e008      	b.n	80018be <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80018ac:	f7ff fbbe 	bl	800102c <HAL_GetTick>
 80018b0:	4602      	mov	r2, r0
 80018b2:	693b      	ldr	r3, [r7, #16]
 80018b4:	1ad3      	subs	r3, r2, r3
 80018b6:	2b64      	cmp	r3, #100	@ 0x64
 80018b8:	d901      	bls.n	80018be <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80018ba:	2303      	movs	r3, #3
 80018bc:	e1ec      	b.n	8001c98 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80018be:	4b53      	ldr	r3, [pc, #332]	@ (8001a0c <HAL_RCC_OscConfig+0x26c>)
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d1f0      	bne.n	80018ac <HAL_RCC_OscConfig+0x10c>
 80018ca:	e000      	b.n	80018ce <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018cc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	f003 0302 	and.w	r3, r3, #2
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d063      	beq.n	80019a2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80018da:	4b4c      	ldr	r3, [pc, #304]	@ (8001a0c <HAL_RCC_OscConfig+0x26c>)
 80018dc:	685b      	ldr	r3, [r3, #4]
 80018de:	f003 030c 	and.w	r3, r3, #12
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d00b      	beq.n	80018fe <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80018e6:	4b49      	ldr	r3, [pc, #292]	@ (8001a0c <HAL_RCC_OscConfig+0x26c>)
 80018e8:	685b      	ldr	r3, [r3, #4]
 80018ea:	f003 030c 	and.w	r3, r3, #12
 80018ee:	2b08      	cmp	r3, #8
 80018f0:	d11c      	bne.n	800192c <HAL_RCC_OscConfig+0x18c>
 80018f2:	4b46      	ldr	r3, [pc, #280]	@ (8001a0c <HAL_RCC_OscConfig+0x26c>)
 80018f4:	685b      	ldr	r3, [r3, #4]
 80018f6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d116      	bne.n	800192c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80018fe:	4b43      	ldr	r3, [pc, #268]	@ (8001a0c <HAL_RCC_OscConfig+0x26c>)
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	f003 0302 	and.w	r3, r3, #2
 8001906:	2b00      	cmp	r3, #0
 8001908:	d005      	beq.n	8001916 <HAL_RCC_OscConfig+0x176>
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	691b      	ldr	r3, [r3, #16]
 800190e:	2b01      	cmp	r3, #1
 8001910:	d001      	beq.n	8001916 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001912:	2301      	movs	r3, #1
 8001914:	e1c0      	b.n	8001c98 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001916:	4b3d      	ldr	r3, [pc, #244]	@ (8001a0c <HAL_RCC_OscConfig+0x26c>)
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	695b      	ldr	r3, [r3, #20]
 8001922:	00db      	lsls	r3, r3, #3
 8001924:	4939      	ldr	r1, [pc, #228]	@ (8001a0c <HAL_RCC_OscConfig+0x26c>)
 8001926:	4313      	orrs	r3, r2
 8001928:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800192a:	e03a      	b.n	80019a2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	691b      	ldr	r3, [r3, #16]
 8001930:	2b00      	cmp	r3, #0
 8001932:	d020      	beq.n	8001976 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001934:	4b36      	ldr	r3, [pc, #216]	@ (8001a10 <HAL_RCC_OscConfig+0x270>)
 8001936:	2201      	movs	r2, #1
 8001938:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800193a:	f7ff fb77 	bl	800102c <HAL_GetTick>
 800193e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001940:	e008      	b.n	8001954 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001942:	f7ff fb73 	bl	800102c <HAL_GetTick>
 8001946:	4602      	mov	r2, r0
 8001948:	693b      	ldr	r3, [r7, #16]
 800194a:	1ad3      	subs	r3, r2, r3
 800194c:	2b02      	cmp	r3, #2
 800194e:	d901      	bls.n	8001954 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001950:	2303      	movs	r3, #3
 8001952:	e1a1      	b.n	8001c98 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001954:	4b2d      	ldr	r3, [pc, #180]	@ (8001a0c <HAL_RCC_OscConfig+0x26c>)
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	f003 0302 	and.w	r3, r3, #2
 800195c:	2b00      	cmp	r3, #0
 800195e:	d0f0      	beq.n	8001942 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001960:	4b2a      	ldr	r3, [pc, #168]	@ (8001a0c <HAL_RCC_OscConfig+0x26c>)
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	695b      	ldr	r3, [r3, #20]
 800196c:	00db      	lsls	r3, r3, #3
 800196e:	4927      	ldr	r1, [pc, #156]	@ (8001a0c <HAL_RCC_OscConfig+0x26c>)
 8001970:	4313      	orrs	r3, r2
 8001972:	600b      	str	r3, [r1, #0]
 8001974:	e015      	b.n	80019a2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001976:	4b26      	ldr	r3, [pc, #152]	@ (8001a10 <HAL_RCC_OscConfig+0x270>)
 8001978:	2200      	movs	r2, #0
 800197a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800197c:	f7ff fb56 	bl	800102c <HAL_GetTick>
 8001980:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001982:	e008      	b.n	8001996 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001984:	f7ff fb52 	bl	800102c <HAL_GetTick>
 8001988:	4602      	mov	r2, r0
 800198a:	693b      	ldr	r3, [r7, #16]
 800198c:	1ad3      	subs	r3, r2, r3
 800198e:	2b02      	cmp	r3, #2
 8001990:	d901      	bls.n	8001996 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001992:	2303      	movs	r3, #3
 8001994:	e180      	b.n	8001c98 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001996:	4b1d      	ldr	r3, [pc, #116]	@ (8001a0c <HAL_RCC_OscConfig+0x26c>)
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	f003 0302 	and.w	r3, r3, #2
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d1f0      	bne.n	8001984 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	f003 0308 	and.w	r3, r3, #8
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d03a      	beq.n	8001a24 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	699b      	ldr	r3, [r3, #24]
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d019      	beq.n	80019ea <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80019b6:	4b17      	ldr	r3, [pc, #92]	@ (8001a14 <HAL_RCC_OscConfig+0x274>)
 80019b8:	2201      	movs	r2, #1
 80019ba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80019bc:	f7ff fb36 	bl	800102c <HAL_GetTick>
 80019c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80019c2:	e008      	b.n	80019d6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80019c4:	f7ff fb32 	bl	800102c <HAL_GetTick>
 80019c8:	4602      	mov	r2, r0
 80019ca:	693b      	ldr	r3, [r7, #16]
 80019cc:	1ad3      	subs	r3, r2, r3
 80019ce:	2b02      	cmp	r3, #2
 80019d0:	d901      	bls.n	80019d6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80019d2:	2303      	movs	r3, #3
 80019d4:	e160      	b.n	8001c98 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80019d6:	4b0d      	ldr	r3, [pc, #52]	@ (8001a0c <HAL_RCC_OscConfig+0x26c>)
 80019d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019da:	f003 0302 	and.w	r3, r3, #2
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d0f0      	beq.n	80019c4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80019e2:	2001      	movs	r0, #1
 80019e4:	f000 face 	bl	8001f84 <RCC_Delay>
 80019e8:	e01c      	b.n	8001a24 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80019ea:	4b0a      	ldr	r3, [pc, #40]	@ (8001a14 <HAL_RCC_OscConfig+0x274>)
 80019ec:	2200      	movs	r2, #0
 80019ee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80019f0:	f7ff fb1c 	bl	800102c <HAL_GetTick>
 80019f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80019f6:	e00f      	b.n	8001a18 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80019f8:	f7ff fb18 	bl	800102c <HAL_GetTick>
 80019fc:	4602      	mov	r2, r0
 80019fe:	693b      	ldr	r3, [r7, #16]
 8001a00:	1ad3      	subs	r3, r2, r3
 8001a02:	2b02      	cmp	r3, #2
 8001a04:	d908      	bls.n	8001a18 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001a06:	2303      	movs	r3, #3
 8001a08:	e146      	b.n	8001c98 <HAL_RCC_OscConfig+0x4f8>
 8001a0a:	bf00      	nop
 8001a0c:	40021000 	.word	0x40021000
 8001a10:	42420000 	.word	0x42420000
 8001a14:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a18:	4b92      	ldr	r3, [pc, #584]	@ (8001c64 <HAL_RCC_OscConfig+0x4c4>)
 8001a1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a1c:	f003 0302 	and.w	r3, r3, #2
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d1e9      	bne.n	80019f8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	f003 0304 	and.w	r3, r3, #4
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	f000 80a6 	beq.w	8001b7e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001a32:	2300      	movs	r3, #0
 8001a34:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001a36:	4b8b      	ldr	r3, [pc, #556]	@ (8001c64 <HAL_RCC_OscConfig+0x4c4>)
 8001a38:	69db      	ldr	r3, [r3, #28]
 8001a3a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d10d      	bne.n	8001a5e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001a42:	4b88      	ldr	r3, [pc, #544]	@ (8001c64 <HAL_RCC_OscConfig+0x4c4>)
 8001a44:	69db      	ldr	r3, [r3, #28]
 8001a46:	4a87      	ldr	r2, [pc, #540]	@ (8001c64 <HAL_RCC_OscConfig+0x4c4>)
 8001a48:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001a4c:	61d3      	str	r3, [r2, #28]
 8001a4e:	4b85      	ldr	r3, [pc, #532]	@ (8001c64 <HAL_RCC_OscConfig+0x4c4>)
 8001a50:	69db      	ldr	r3, [r3, #28]
 8001a52:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001a56:	60bb      	str	r3, [r7, #8]
 8001a58:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001a5a:	2301      	movs	r3, #1
 8001a5c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a5e:	4b82      	ldr	r3, [pc, #520]	@ (8001c68 <HAL_RCC_OscConfig+0x4c8>)
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d118      	bne.n	8001a9c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001a6a:	4b7f      	ldr	r3, [pc, #508]	@ (8001c68 <HAL_RCC_OscConfig+0x4c8>)
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	4a7e      	ldr	r2, [pc, #504]	@ (8001c68 <HAL_RCC_OscConfig+0x4c8>)
 8001a70:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001a74:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001a76:	f7ff fad9 	bl	800102c <HAL_GetTick>
 8001a7a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a7c:	e008      	b.n	8001a90 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a7e:	f7ff fad5 	bl	800102c <HAL_GetTick>
 8001a82:	4602      	mov	r2, r0
 8001a84:	693b      	ldr	r3, [r7, #16]
 8001a86:	1ad3      	subs	r3, r2, r3
 8001a88:	2b64      	cmp	r3, #100	@ 0x64
 8001a8a:	d901      	bls.n	8001a90 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001a8c:	2303      	movs	r3, #3
 8001a8e:	e103      	b.n	8001c98 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a90:	4b75      	ldr	r3, [pc, #468]	@ (8001c68 <HAL_RCC_OscConfig+0x4c8>)
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d0f0      	beq.n	8001a7e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	68db      	ldr	r3, [r3, #12]
 8001aa0:	2b01      	cmp	r3, #1
 8001aa2:	d106      	bne.n	8001ab2 <HAL_RCC_OscConfig+0x312>
 8001aa4:	4b6f      	ldr	r3, [pc, #444]	@ (8001c64 <HAL_RCC_OscConfig+0x4c4>)
 8001aa6:	6a1b      	ldr	r3, [r3, #32]
 8001aa8:	4a6e      	ldr	r2, [pc, #440]	@ (8001c64 <HAL_RCC_OscConfig+0x4c4>)
 8001aaa:	f043 0301 	orr.w	r3, r3, #1
 8001aae:	6213      	str	r3, [r2, #32]
 8001ab0:	e02d      	b.n	8001b0e <HAL_RCC_OscConfig+0x36e>
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	68db      	ldr	r3, [r3, #12]
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d10c      	bne.n	8001ad4 <HAL_RCC_OscConfig+0x334>
 8001aba:	4b6a      	ldr	r3, [pc, #424]	@ (8001c64 <HAL_RCC_OscConfig+0x4c4>)
 8001abc:	6a1b      	ldr	r3, [r3, #32]
 8001abe:	4a69      	ldr	r2, [pc, #420]	@ (8001c64 <HAL_RCC_OscConfig+0x4c4>)
 8001ac0:	f023 0301 	bic.w	r3, r3, #1
 8001ac4:	6213      	str	r3, [r2, #32]
 8001ac6:	4b67      	ldr	r3, [pc, #412]	@ (8001c64 <HAL_RCC_OscConfig+0x4c4>)
 8001ac8:	6a1b      	ldr	r3, [r3, #32]
 8001aca:	4a66      	ldr	r2, [pc, #408]	@ (8001c64 <HAL_RCC_OscConfig+0x4c4>)
 8001acc:	f023 0304 	bic.w	r3, r3, #4
 8001ad0:	6213      	str	r3, [r2, #32]
 8001ad2:	e01c      	b.n	8001b0e <HAL_RCC_OscConfig+0x36e>
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	68db      	ldr	r3, [r3, #12]
 8001ad8:	2b05      	cmp	r3, #5
 8001ada:	d10c      	bne.n	8001af6 <HAL_RCC_OscConfig+0x356>
 8001adc:	4b61      	ldr	r3, [pc, #388]	@ (8001c64 <HAL_RCC_OscConfig+0x4c4>)
 8001ade:	6a1b      	ldr	r3, [r3, #32]
 8001ae0:	4a60      	ldr	r2, [pc, #384]	@ (8001c64 <HAL_RCC_OscConfig+0x4c4>)
 8001ae2:	f043 0304 	orr.w	r3, r3, #4
 8001ae6:	6213      	str	r3, [r2, #32]
 8001ae8:	4b5e      	ldr	r3, [pc, #376]	@ (8001c64 <HAL_RCC_OscConfig+0x4c4>)
 8001aea:	6a1b      	ldr	r3, [r3, #32]
 8001aec:	4a5d      	ldr	r2, [pc, #372]	@ (8001c64 <HAL_RCC_OscConfig+0x4c4>)
 8001aee:	f043 0301 	orr.w	r3, r3, #1
 8001af2:	6213      	str	r3, [r2, #32]
 8001af4:	e00b      	b.n	8001b0e <HAL_RCC_OscConfig+0x36e>
 8001af6:	4b5b      	ldr	r3, [pc, #364]	@ (8001c64 <HAL_RCC_OscConfig+0x4c4>)
 8001af8:	6a1b      	ldr	r3, [r3, #32]
 8001afa:	4a5a      	ldr	r2, [pc, #360]	@ (8001c64 <HAL_RCC_OscConfig+0x4c4>)
 8001afc:	f023 0301 	bic.w	r3, r3, #1
 8001b00:	6213      	str	r3, [r2, #32]
 8001b02:	4b58      	ldr	r3, [pc, #352]	@ (8001c64 <HAL_RCC_OscConfig+0x4c4>)
 8001b04:	6a1b      	ldr	r3, [r3, #32]
 8001b06:	4a57      	ldr	r2, [pc, #348]	@ (8001c64 <HAL_RCC_OscConfig+0x4c4>)
 8001b08:	f023 0304 	bic.w	r3, r3, #4
 8001b0c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	68db      	ldr	r3, [r3, #12]
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d015      	beq.n	8001b42 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b16:	f7ff fa89 	bl	800102c <HAL_GetTick>
 8001b1a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b1c:	e00a      	b.n	8001b34 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b1e:	f7ff fa85 	bl	800102c <HAL_GetTick>
 8001b22:	4602      	mov	r2, r0
 8001b24:	693b      	ldr	r3, [r7, #16]
 8001b26:	1ad3      	subs	r3, r2, r3
 8001b28:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001b2c:	4293      	cmp	r3, r2
 8001b2e:	d901      	bls.n	8001b34 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001b30:	2303      	movs	r3, #3
 8001b32:	e0b1      	b.n	8001c98 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b34:	4b4b      	ldr	r3, [pc, #300]	@ (8001c64 <HAL_RCC_OscConfig+0x4c4>)
 8001b36:	6a1b      	ldr	r3, [r3, #32]
 8001b38:	f003 0302 	and.w	r3, r3, #2
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d0ee      	beq.n	8001b1e <HAL_RCC_OscConfig+0x37e>
 8001b40:	e014      	b.n	8001b6c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b42:	f7ff fa73 	bl	800102c <HAL_GetTick>
 8001b46:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b48:	e00a      	b.n	8001b60 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b4a:	f7ff fa6f 	bl	800102c <HAL_GetTick>
 8001b4e:	4602      	mov	r2, r0
 8001b50:	693b      	ldr	r3, [r7, #16]
 8001b52:	1ad3      	subs	r3, r2, r3
 8001b54:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001b58:	4293      	cmp	r3, r2
 8001b5a:	d901      	bls.n	8001b60 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001b5c:	2303      	movs	r3, #3
 8001b5e:	e09b      	b.n	8001c98 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b60:	4b40      	ldr	r3, [pc, #256]	@ (8001c64 <HAL_RCC_OscConfig+0x4c4>)
 8001b62:	6a1b      	ldr	r3, [r3, #32]
 8001b64:	f003 0302 	and.w	r3, r3, #2
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d1ee      	bne.n	8001b4a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001b6c:	7dfb      	ldrb	r3, [r7, #23]
 8001b6e:	2b01      	cmp	r3, #1
 8001b70:	d105      	bne.n	8001b7e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b72:	4b3c      	ldr	r3, [pc, #240]	@ (8001c64 <HAL_RCC_OscConfig+0x4c4>)
 8001b74:	69db      	ldr	r3, [r3, #28]
 8001b76:	4a3b      	ldr	r2, [pc, #236]	@ (8001c64 <HAL_RCC_OscConfig+0x4c4>)
 8001b78:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001b7c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	69db      	ldr	r3, [r3, #28]
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	f000 8087 	beq.w	8001c96 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001b88:	4b36      	ldr	r3, [pc, #216]	@ (8001c64 <HAL_RCC_OscConfig+0x4c4>)
 8001b8a:	685b      	ldr	r3, [r3, #4]
 8001b8c:	f003 030c 	and.w	r3, r3, #12
 8001b90:	2b08      	cmp	r3, #8
 8001b92:	d061      	beq.n	8001c58 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	69db      	ldr	r3, [r3, #28]
 8001b98:	2b02      	cmp	r3, #2
 8001b9a:	d146      	bne.n	8001c2a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b9c:	4b33      	ldr	r3, [pc, #204]	@ (8001c6c <HAL_RCC_OscConfig+0x4cc>)
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ba2:	f7ff fa43 	bl	800102c <HAL_GetTick>
 8001ba6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ba8:	e008      	b.n	8001bbc <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001baa:	f7ff fa3f 	bl	800102c <HAL_GetTick>
 8001bae:	4602      	mov	r2, r0
 8001bb0:	693b      	ldr	r3, [r7, #16]
 8001bb2:	1ad3      	subs	r3, r2, r3
 8001bb4:	2b02      	cmp	r3, #2
 8001bb6:	d901      	bls.n	8001bbc <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001bb8:	2303      	movs	r3, #3
 8001bba:	e06d      	b.n	8001c98 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001bbc:	4b29      	ldr	r3, [pc, #164]	@ (8001c64 <HAL_RCC_OscConfig+0x4c4>)
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d1f0      	bne.n	8001baa <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	6a1b      	ldr	r3, [r3, #32]
 8001bcc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001bd0:	d108      	bne.n	8001be4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001bd2:	4b24      	ldr	r3, [pc, #144]	@ (8001c64 <HAL_RCC_OscConfig+0x4c4>)
 8001bd4:	685b      	ldr	r3, [r3, #4]
 8001bd6:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	689b      	ldr	r3, [r3, #8]
 8001bde:	4921      	ldr	r1, [pc, #132]	@ (8001c64 <HAL_RCC_OscConfig+0x4c4>)
 8001be0:	4313      	orrs	r3, r2
 8001be2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001be4:	4b1f      	ldr	r3, [pc, #124]	@ (8001c64 <HAL_RCC_OscConfig+0x4c4>)
 8001be6:	685b      	ldr	r3, [r3, #4]
 8001be8:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	6a19      	ldr	r1, [r3, #32]
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001bf4:	430b      	orrs	r3, r1
 8001bf6:	491b      	ldr	r1, [pc, #108]	@ (8001c64 <HAL_RCC_OscConfig+0x4c4>)
 8001bf8:	4313      	orrs	r3, r2
 8001bfa:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001bfc:	4b1b      	ldr	r3, [pc, #108]	@ (8001c6c <HAL_RCC_OscConfig+0x4cc>)
 8001bfe:	2201      	movs	r2, #1
 8001c00:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c02:	f7ff fa13 	bl	800102c <HAL_GetTick>
 8001c06:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001c08:	e008      	b.n	8001c1c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c0a:	f7ff fa0f 	bl	800102c <HAL_GetTick>
 8001c0e:	4602      	mov	r2, r0
 8001c10:	693b      	ldr	r3, [r7, #16]
 8001c12:	1ad3      	subs	r3, r2, r3
 8001c14:	2b02      	cmp	r3, #2
 8001c16:	d901      	bls.n	8001c1c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001c18:	2303      	movs	r3, #3
 8001c1a:	e03d      	b.n	8001c98 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001c1c:	4b11      	ldr	r3, [pc, #68]	@ (8001c64 <HAL_RCC_OscConfig+0x4c4>)
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d0f0      	beq.n	8001c0a <HAL_RCC_OscConfig+0x46a>
 8001c28:	e035      	b.n	8001c96 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c2a:	4b10      	ldr	r3, [pc, #64]	@ (8001c6c <HAL_RCC_OscConfig+0x4cc>)
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c30:	f7ff f9fc 	bl	800102c <HAL_GetTick>
 8001c34:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c36:	e008      	b.n	8001c4a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c38:	f7ff f9f8 	bl	800102c <HAL_GetTick>
 8001c3c:	4602      	mov	r2, r0
 8001c3e:	693b      	ldr	r3, [r7, #16]
 8001c40:	1ad3      	subs	r3, r2, r3
 8001c42:	2b02      	cmp	r3, #2
 8001c44:	d901      	bls.n	8001c4a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001c46:	2303      	movs	r3, #3
 8001c48:	e026      	b.n	8001c98 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c4a:	4b06      	ldr	r3, [pc, #24]	@ (8001c64 <HAL_RCC_OscConfig+0x4c4>)
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d1f0      	bne.n	8001c38 <HAL_RCC_OscConfig+0x498>
 8001c56:	e01e      	b.n	8001c96 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	69db      	ldr	r3, [r3, #28]
 8001c5c:	2b01      	cmp	r3, #1
 8001c5e:	d107      	bne.n	8001c70 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001c60:	2301      	movs	r3, #1
 8001c62:	e019      	b.n	8001c98 <HAL_RCC_OscConfig+0x4f8>
 8001c64:	40021000 	.word	0x40021000
 8001c68:	40007000 	.word	0x40007000
 8001c6c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001c70:	4b0b      	ldr	r3, [pc, #44]	@ (8001ca0 <HAL_RCC_OscConfig+0x500>)
 8001c72:	685b      	ldr	r3, [r3, #4]
 8001c74:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	6a1b      	ldr	r3, [r3, #32]
 8001c80:	429a      	cmp	r2, r3
 8001c82:	d106      	bne.n	8001c92 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c8e:	429a      	cmp	r2, r3
 8001c90:	d001      	beq.n	8001c96 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001c92:	2301      	movs	r3, #1
 8001c94:	e000      	b.n	8001c98 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001c96:	2300      	movs	r3, #0
}
 8001c98:	4618      	mov	r0, r3
 8001c9a:	3718      	adds	r7, #24
 8001c9c:	46bd      	mov	sp, r7
 8001c9e:	bd80      	pop	{r7, pc}
 8001ca0:	40021000 	.word	0x40021000

08001ca4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	b084      	sub	sp, #16
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	6078      	str	r0, [r7, #4]
 8001cac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d101      	bne.n	8001cb8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001cb4:	2301      	movs	r3, #1
 8001cb6:	e0d0      	b.n	8001e5a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001cb8:	4b6a      	ldr	r3, [pc, #424]	@ (8001e64 <HAL_RCC_ClockConfig+0x1c0>)
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	f003 0307 	and.w	r3, r3, #7
 8001cc0:	683a      	ldr	r2, [r7, #0]
 8001cc2:	429a      	cmp	r2, r3
 8001cc4:	d910      	bls.n	8001ce8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001cc6:	4b67      	ldr	r3, [pc, #412]	@ (8001e64 <HAL_RCC_ClockConfig+0x1c0>)
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	f023 0207 	bic.w	r2, r3, #7
 8001cce:	4965      	ldr	r1, [pc, #404]	@ (8001e64 <HAL_RCC_ClockConfig+0x1c0>)
 8001cd0:	683b      	ldr	r3, [r7, #0]
 8001cd2:	4313      	orrs	r3, r2
 8001cd4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001cd6:	4b63      	ldr	r3, [pc, #396]	@ (8001e64 <HAL_RCC_ClockConfig+0x1c0>)
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	f003 0307 	and.w	r3, r3, #7
 8001cde:	683a      	ldr	r2, [r7, #0]
 8001ce0:	429a      	cmp	r2, r3
 8001ce2:	d001      	beq.n	8001ce8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001ce4:	2301      	movs	r3, #1
 8001ce6:	e0b8      	b.n	8001e5a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	f003 0302 	and.w	r3, r3, #2
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d020      	beq.n	8001d36 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	f003 0304 	and.w	r3, r3, #4
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d005      	beq.n	8001d0c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001d00:	4b59      	ldr	r3, [pc, #356]	@ (8001e68 <HAL_RCC_ClockConfig+0x1c4>)
 8001d02:	685b      	ldr	r3, [r3, #4]
 8001d04:	4a58      	ldr	r2, [pc, #352]	@ (8001e68 <HAL_RCC_ClockConfig+0x1c4>)
 8001d06:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001d0a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	f003 0308 	and.w	r3, r3, #8
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d005      	beq.n	8001d24 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001d18:	4b53      	ldr	r3, [pc, #332]	@ (8001e68 <HAL_RCC_ClockConfig+0x1c4>)
 8001d1a:	685b      	ldr	r3, [r3, #4]
 8001d1c:	4a52      	ldr	r2, [pc, #328]	@ (8001e68 <HAL_RCC_ClockConfig+0x1c4>)
 8001d1e:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8001d22:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d24:	4b50      	ldr	r3, [pc, #320]	@ (8001e68 <HAL_RCC_ClockConfig+0x1c4>)
 8001d26:	685b      	ldr	r3, [r3, #4]
 8001d28:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	689b      	ldr	r3, [r3, #8]
 8001d30:	494d      	ldr	r1, [pc, #308]	@ (8001e68 <HAL_RCC_ClockConfig+0x1c4>)
 8001d32:	4313      	orrs	r3, r2
 8001d34:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	f003 0301 	and.w	r3, r3, #1
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d040      	beq.n	8001dc4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	685b      	ldr	r3, [r3, #4]
 8001d46:	2b01      	cmp	r3, #1
 8001d48:	d107      	bne.n	8001d5a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d4a:	4b47      	ldr	r3, [pc, #284]	@ (8001e68 <HAL_RCC_ClockConfig+0x1c4>)
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d115      	bne.n	8001d82 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d56:	2301      	movs	r3, #1
 8001d58:	e07f      	b.n	8001e5a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	685b      	ldr	r3, [r3, #4]
 8001d5e:	2b02      	cmp	r3, #2
 8001d60:	d107      	bne.n	8001d72 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d62:	4b41      	ldr	r3, [pc, #260]	@ (8001e68 <HAL_RCC_ClockConfig+0x1c4>)
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d109      	bne.n	8001d82 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d6e:	2301      	movs	r3, #1
 8001d70:	e073      	b.n	8001e5a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d72:	4b3d      	ldr	r3, [pc, #244]	@ (8001e68 <HAL_RCC_ClockConfig+0x1c4>)
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	f003 0302 	and.w	r3, r3, #2
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d101      	bne.n	8001d82 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d7e:	2301      	movs	r3, #1
 8001d80:	e06b      	b.n	8001e5a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001d82:	4b39      	ldr	r3, [pc, #228]	@ (8001e68 <HAL_RCC_ClockConfig+0x1c4>)
 8001d84:	685b      	ldr	r3, [r3, #4]
 8001d86:	f023 0203 	bic.w	r2, r3, #3
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	685b      	ldr	r3, [r3, #4]
 8001d8e:	4936      	ldr	r1, [pc, #216]	@ (8001e68 <HAL_RCC_ClockConfig+0x1c4>)
 8001d90:	4313      	orrs	r3, r2
 8001d92:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001d94:	f7ff f94a 	bl	800102c <HAL_GetTick>
 8001d98:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d9a:	e00a      	b.n	8001db2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d9c:	f7ff f946 	bl	800102c <HAL_GetTick>
 8001da0:	4602      	mov	r2, r0
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	1ad3      	subs	r3, r2, r3
 8001da6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001daa:	4293      	cmp	r3, r2
 8001dac:	d901      	bls.n	8001db2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001dae:	2303      	movs	r3, #3
 8001db0:	e053      	b.n	8001e5a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001db2:	4b2d      	ldr	r3, [pc, #180]	@ (8001e68 <HAL_RCC_ClockConfig+0x1c4>)
 8001db4:	685b      	ldr	r3, [r3, #4]
 8001db6:	f003 020c 	and.w	r2, r3, #12
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	685b      	ldr	r3, [r3, #4]
 8001dbe:	009b      	lsls	r3, r3, #2
 8001dc0:	429a      	cmp	r2, r3
 8001dc2:	d1eb      	bne.n	8001d9c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001dc4:	4b27      	ldr	r3, [pc, #156]	@ (8001e64 <HAL_RCC_ClockConfig+0x1c0>)
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	f003 0307 	and.w	r3, r3, #7
 8001dcc:	683a      	ldr	r2, [r7, #0]
 8001dce:	429a      	cmp	r2, r3
 8001dd0:	d210      	bcs.n	8001df4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001dd2:	4b24      	ldr	r3, [pc, #144]	@ (8001e64 <HAL_RCC_ClockConfig+0x1c0>)
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	f023 0207 	bic.w	r2, r3, #7
 8001dda:	4922      	ldr	r1, [pc, #136]	@ (8001e64 <HAL_RCC_ClockConfig+0x1c0>)
 8001ddc:	683b      	ldr	r3, [r7, #0]
 8001dde:	4313      	orrs	r3, r2
 8001de0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001de2:	4b20      	ldr	r3, [pc, #128]	@ (8001e64 <HAL_RCC_ClockConfig+0x1c0>)
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	f003 0307 	and.w	r3, r3, #7
 8001dea:	683a      	ldr	r2, [r7, #0]
 8001dec:	429a      	cmp	r2, r3
 8001dee:	d001      	beq.n	8001df4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001df0:	2301      	movs	r3, #1
 8001df2:	e032      	b.n	8001e5a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	f003 0304 	and.w	r3, r3, #4
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d008      	beq.n	8001e12 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001e00:	4b19      	ldr	r3, [pc, #100]	@ (8001e68 <HAL_RCC_ClockConfig+0x1c4>)
 8001e02:	685b      	ldr	r3, [r3, #4]
 8001e04:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	68db      	ldr	r3, [r3, #12]
 8001e0c:	4916      	ldr	r1, [pc, #88]	@ (8001e68 <HAL_RCC_ClockConfig+0x1c4>)
 8001e0e:	4313      	orrs	r3, r2
 8001e10:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	f003 0308 	and.w	r3, r3, #8
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d009      	beq.n	8001e32 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001e1e:	4b12      	ldr	r3, [pc, #72]	@ (8001e68 <HAL_RCC_ClockConfig+0x1c4>)
 8001e20:	685b      	ldr	r3, [r3, #4]
 8001e22:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	691b      	ldr	r3, [r3, #16]
 8001e2a:	00db      	lsls	r3, r3, #3
 8001e2c:	490e      	ldr	r1, [pc, #56]	@ (8001e68 <HAL_RCC_ClockConfig+0x1c4>)
 8001e2e:	4313      	orrs	r3, r2
 8001e30:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001e32:	f000 f821 	bl	8001e78 <HAL_RCC_GetSysClockFreq>
 8001e36:	4602      	mov	r2, r0
 8001e38:	4b0b      	ldr	r3, [pc, #44]	@ (8001e68 <HAL_RCC_ClockConfig+0x1c4>)
 8001e3a:	685b      	ldr	r3, [r3, #4]
 8001e3c:	091b      	lsrs	r3, r3, #4
 8001e3e:	f003 030f 	and.w	r3, r3, #15
 8001e42:	490a      	ldr	r1, [pc, #40]	@ (8001e6c <HAL_RCC_ClockConfig+0x1c8>)
 8001e44:	5ccb      	ldrb	r3, [r1, r3]
 8001e46:	fa22 f303 	lsr.w	r3, r2, r3
 8001e4a:	4a09      	ldr	r2, [pc, #36]	@ (8001e70 <HAL_RCC_ClockConfig+0x1cc>)
 8001e4c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001e4e:	4b09      	ldr	r3, [pc, #36]	@ (8001e74 <HAL_RCC_ClockConfig+0x1d0>)
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	4618      	mov	r0, r3
 8001e54:	f7ff f8a8 	bl	8000fa8 <HAL_InitTick>

  return HAL_OK;
 8001e58:	2300      	movs	r3, #0
}
 8001e5a:	4618      	mov	r0, r3
 8001e5c:	3710      	adds	r7, #16
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	bd80      	pop	{r7, pc}
 8001e62:	bf00      	nop
 8001e64:	40022000 	.word	0x40022000
 8001e68:	40021000 	.word	0x40021000
 8001e6c:	08003cec 	.word	0x08003cec
 8001e70:	20000074 	.word	0x20000074
 8001e74:	20000078 	.word	0x20000078

08001e78 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001e78:	b480      	push	{r7}
 8001e7a:	b087      	sub	sp, #28
 8001e7c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001e7e:	2300      	movs	r3, #0
 8001e80:	60fb      	str	r3, [r7, #12]
 8001e82:	2300      	movs	r3, #0
 8001e84:	60bb      	str	r3, [r7, #8]
 8001e86:	2300      	movs	r3, #0
 8001e88:	617b      	str	r3, [r7, #20]
 8001e8a:	2300      	movs	r3, #0
 8001e8c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001e8e:	2300      	movs	r3, #0
 8001e90:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001e92:	4b1e      	ldr	r3, [pc, #120]	@ (8001f0c <HAL_RCC_GetSysClockFreq+0x94>)
 8001e94:	685b      	ldr	r3, [r3, #4]
 8001e96:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	f003 030c 	and.w	r3, r3, #12
 8001e9e:	2b04      	cmp	r3, #4
 8001ea0:	d002      	beq.n	8001ea8 <HAL_RCC_GetSysClockFreq+0x30>
 8001ea2:	2b08      	cmp	r3, #8
 8001ea4:	d003      	beq.n	8001eae <HAL_RCC_GetSysClockFreq+0x36>
 8001ea6:	e027      	b.n	8001ef8 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001ea8:	4b19      	ldr	r3, [pc, #100]	@ (8001f10 <HAL_RCC_GetSysClockFreq+0x98>)
 8001eaa:	613b      	str	r3, [r7, #16]
      break;
 8001eac:	e027      	b.n	8001efe <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	0c9b      	lsrs	r3, r3, #18
 8001eb2:	f003 030f 	and.w	r3, r3, #15
 8001eb6:	4a17      	ldr	r2, [pc, #92]	@ (8001f14 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001eb8:	5cd3      	ldrb	r3, [r2, r3]
 8001eba:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d010      	beq.n	8001ee8 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001ec6:	4b11      	ldr	r3, [pc, #68]	@ (8001f0c <HAL_RCC_GetSysClockFreq+0x94>)
 8001ec8:	685b      	ldr	r3, [r3, #4]
 8001eca:	0c5b      	lsrs	r3, r3, #17
 8001ecc:	f003 0301 	and.w	r3, r3, #1
 8001ed0:	4a11      	ldr	r2, [pc, #68]	@ (8001f18 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001ed2:	5cd3      	ldrb	r3, [r2, r3]
 8001ed4:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	4a0d      	ldr	r2, [pc, #52]	@ (8001f10 <HAL_RCC_GetSysClockFreq+0x98>)
 8001eda:	fb03 f202 	mul.w	r2, r3, r2
 8001ede:	68bb      	ldr	r3, [r7, #8]
 8001ee0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ee4:	617b      	str	r3, [r7, #20]
 8001ee6:	e004      	b.n	8001ef2 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	4a0c      	ldr	r2, [pc, #48]	@ (8001f1c <HAL_RCC_GetSysClockFreq+0xa4>)
 8001eec:	fb02 f303 	mul.w	r3, r2, r3
 8001ef0:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001ef2:	697b      	ldr	r3, [r7, #20]
 8001ef4:	613b      	str	r3, [r7, #16]
      break;
 8001ef6:	e002      	b.n	8001efe <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001ef8:	4b05      	ldr	r3, [pc, #20]	@ (8001f10 <HAL_RCC_GetSysClockFreq+0x98>)
 8001efa:	613b      	str	r3, [r7, #16]
      break;
 8001efc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001efe:	693b      	ldr	r3, [r7, #16]
}
 8001f00:	4618      	mov	r0, r3
 8001f02:	371c      	adds	r7, #28
 8001f04:	46bd      	mov	sp, r7
 8001f06:	bc80      	pop	{r7}
 8001f08:	4770      	bx	lr
 8001f0a:	bf00      	nop
 8001f0c:	40021000 	.word	0x40021000
 8001f10:	007a1200 	.word	0x007a1200
 8001f14:	08003d04 	.word	0x08003d04
 8001f18:	08003d14 	.word	0x08003d14
 8001f1c:	003d0900 	.word	0x003d0900

08001f20 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001f20:	b480      	push	{r7}
 8001f22:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001f24:	4b02      	ldr	r3, [pc, #8]	@ (8001f30 <HAL_RCC_GetHCLKFreq+0x10>)
 8001f26:	681b      	ldr	r3, [r3, #0]
}
 8001f28:	4618      	mov	r0, r3
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	bc80      	pop	{r7}
 8001f2e:	4770      	bx	lr
 8001f30:	20000074 	.word	0x20000074

08001f34 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001f34:	b580      	push	{r7, lr}
 8001f36:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001f38:	f7ff fff2 	bl	8001f20 <HAL_RCC_GetHCLKFreq>
 8001f3c:	4602      	mov	r2, r0
 8001f3e:	4b05      	ldr	r3, [pc, #20]	@ (8001f54 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001f40:	685b      	ldr	r3, [r3, #4]
 8001f42:	0a1b      	lsrs	r3, r3, #8
 8001f44:	f003 0307 	and.w	r3, r3, #7
 8001f48:	4903      	ldr	r1, [pc, #12]	@ (8001f58 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001f4a:	5ccb      	ldrb	r3, [r1, r3]
 8001f4c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001f50:	4618      	mov	r0, r3
 8001f52:	bd80      	pop	{r7, pc}
 8001f54:	40021000 	.word	0x40021000
 8001f58:	08003cfc 	.word	0x08003cfc

08001f5c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001f60:	f7ff ffde 	bl	8001f20 <HAL_RCC_GetHCLKFreq>
 8001f64:	4602      	mov	r2, r0
 8001f66:	4b05      	ldr	r3, [pc, #20]	@ (8001f7c <HAL_RCC_GetPCLK2Freq+0x20>)
 8001f68:	685b      	ldr	r3, [r3, #4]
 8001f6a:	0adb      	lsrs	r3, r3, #11
 8001f6c:	f003 0307 	and.w	r3, r3, #7
 8001f70:	4903      	ldr	r1, [pc, #12]	@ (8001f80 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001f72:	5ccb      	ldrb	r3, [r1, r3]
 8001f74:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001f78:	4618      	mov	r0, r3
 8001f7a:	bd80      	pop	{r7, pc}
 8001f7c:	40021000 	.word	0x40021000
 8001f80:	08003cfc 	.word	0x08003cfc

08001f84 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001f84:	b480      	push	{r7}
 8001f86:	b085      	sub	sp, #20
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001f8c:	4b0a      	ldr	r3, [pc, #40]	@ (8001fb8 <RCC_Delay+0x34>)
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	4a0a      	ldr	r2, [pc, #40]	@ (8001fbc <RCC_Delay+0x38>)
 8001f92:	fba2 2303 	umull	r2, r3, r2, r3
 8001f96:	0a5b      	lsrs	r3, r3, #9
 8001f98:	687a      	ldr	r2, [r7, #4]
 8001f9a:	fb02 f303 	mul.w	r3, r2, r3
 8001f9e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001fa0:	bf00      	nop
  }
  while (Delay --);
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	1e5a      	subs	r2, r3, #1
 8001fa6:	60fa      	str	r2, [r7, #12]
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d1f9      	bne.n	8001fa0 <RCC_Delay+0x1c>
}
 8001fac:	bf00      	nop
 8001fae:	bf00      	nop
 8001fb0:	3714      	adds	r7, #20
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	bc80      	pop	{r7}
 8001fb6:	4770      	bx	lr
 8001fb8:	20000074 	.word	0x20000074
 8001fbc:	10624dd3 	.word	0x10624dd3

08001fc0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	b082      	sub	sp, #8
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d101      	bne.n	8001fd2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001fce:	2301      	movs	r3, #1
 8001fd0:	e041      	b.n	8002056 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001fd8:	b2db      	uxtb	r3, r3
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d106      	bne.n	8001fec <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001fe6:	6878      	ldr	r0, [r7, #4]
 8001fe8:	f7fe feae 	bl	8000d48 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	2202      	movs	r2, #2
 8001ff0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681a      	ldr	r2, [r3, #0]
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	3304      	adds	r3, #4
 8001ffc:	4619      	mov	r1, r3
 8001ffe:	4610      	mov	r0, r2
 8002000:	f000 fa5c 	bl	80024bc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	2201      	movs	r2, #1
 8002008:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	2201      	movs	r2, #1
 8002010:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	2201      	movs	r2, #1
 8002018:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	2201      	movs	r2, #1
 8002020:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	2201      	movs	r2, #1
 8002028:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	2201      	movs	r2, #1
 8002030:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	2201      	movs	r2, #1
 8002038:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	2201      	movs	r2, #1
 8002040:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	2201      	movs	r2, #1
 8002048:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	2201      	movs	r2, #1
 8002050:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002054:	2300      	movs	r3, #0
}
 8002056:	4618      	mov	r0, r3
 8002058:	3708      	adds	r7, #8
 800205a:	46bd      	mov	sp, r7
 800205c:	bd80      	pop	{r7, pc}
	...

08002060 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002060:	b480      	push	{r7}
 8002062:	b085      	sub	sp, #20
 8002064:	af00      	add	r7, sp, #0
 8002066:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800206e:	b2db      	uxtb	r3, r3
 8002070:	2b01      	cmp	r3, #1
 8002072:	d001      	beq.n	8002078 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002074:	2301      	movs	r3, #1
 8002076:	e03a      	b.n	80020ee <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	2202      	movs	r2, #2
 800207c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	68da      	ldr	r2, [r3, #12]
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	f042 0201 	orr.w	r2, r2, #1
 800208e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	4a18      	ldr	r2, [pc, #96]	@ (80020f8 <HAL_TIM_Base_Start_IT+0x98>)
 8002096:	4293      	cmp	r3, r2
 8002098:	d00e      	beq.n	80020b8 <HAL_TIM_Base_Start_IT+0x58>
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80020a2:	d009      	beq.n	80020b8 <HAL_TIM_Base_Start_IT+0x58>
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	4a14      	ldr	r2, [pc, #80]	@ (80020fc <HAL_TIM_Base_Start_IT+0x9c>)
 80020aa:	4293      	cmp	r3, r2
 80020ac:	d004      	beq.n	80020b8 <HAL_TIM_Base_Start_IT+0x58>
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	4a13      	ldr	r2, [pc, #76]	@ (8002100 <HAL_TIM_Base_Start_IT+0xa0>)
 80020b4:	4293      	cmp	r3, r2
 80020b6:	d111      	bne.n	80020dc <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	689b      	ldr	r3, [r3, #8]
 80020be:	f003 0307 	and.w	r3, r3, #7
 80020c2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	2b06      	cmp	r3, #6
 80020c8:	d010      	beq.n	80020ec <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	681a      	ldr	r2, [r3, #0]
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	f042 0201 	orr.w	r2, r2, #1
 80020d8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80020da:	e007      	b.n	80020ec <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	681a      	ldr	r2, [r3, #0]
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	f042 0201 	orr.w	r2, r2, #1
 80020ea:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80020ec:	2300      	movs	r3, #0
}
 80020ee:	4618      	mov	r0, r3
 80020f0:	3714      	adds	r7, #20
 80020f2:	46bd      	mov	sp, r7
 80020f4:	bc80      	pop	{r7}
 80020f6:	4770      	bx	lr
 80020f8:	40012c00 	.word	0x40012c00
 80020fc:	40000400 	.word	0x40000400
 8002100:	40000800 	.word	0x40000800

08002104 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002104:	b580      	push	{r7, lr}
 8002106:	b084      	sub	sp, #16
 8002108:	af00      	add	r7, sp, #0
 800210a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	68db      	ldr	r3, [r3, #12]
 8002112:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	691b      	ldr	r3, [r3, #16]
 800211a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800211c:	68bb      	ldr	r3, [r7, #8]
 800211e:	f003 0302 	and.w	r3, r3, #2
 8002122:	2b00      	cmp	r3, #0
 8002124:	d020      	beq.n	8002168 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	f003 0302 	and.w	r3, r3, #2
 800212c:	2b00      	cmp	r3, #0
 800212e:	d01b      	beq.n	8002168 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	f06f 0202 	mvn.w	r2, #2
 8002138:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	2201      	movs	r2, #1
 800213e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	699b      	ldr	r3, [r3, #24]
 8002146:	f003 0303 	and.w	r3, r3, #3
 800214a:	2b00      	cmp	r3, #0
 800214c:	d003      	beq.n	8002156 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800214e:	6878      	ldr	r0, [r7, #4]
 8002150:	f000 f998 	bl	8002484 <HAL_TIM_IC_CaptureCallback>
 8002154:	e005      	b.n	8002162 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002156:	6878      	ldr	r0, [r7, #4]
 8002158:	f000 f98b 	bl	8002472 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800215c:	6878      	ldr	r0, [r7, #4]
 800215e:	f000 f99a 	bl	8002496 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	2200      	movs	r2, #0
 8002166:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002168:	68bb      	ldr	r3, [r7, #8]
 800216a:	f003 0304 	and.w	r3, r3, #4
 800216e:	2b00      	cmp	r3, #0
 8002170:	d020      	beq.n	80021b4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	f003 0304 	and.w	r3, r3, #4
 8002178:	2b00      	cmp	r3, #0
 800217a:	d01b      	beq.n	80021b4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	f06f 0204 	mvn.w	r2, #4
 8002184:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	2202      	movs	r2, #2
 800218a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	699b      	ldr	r3, [r3, #24]
 8002192:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002196:	2b00      	cmp	r3, #0
 8002198:	d003      	beq.n	80021a2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800219a:	6878      	ldr	r0, [r7, #4]
 800219c:	f000 f972 	bl	8002484 <HAL_TIM_IC_CaptureCallback>
 80021a0:	e005      	b.n	80021ae <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80021a2:	6878      	ldr	r0, [r7, #4]
 80021a4:	f000 f965 	bl	8002472 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80021a8:	6878      	ldr	r0, [r7, #4]
 80021aa:	f000 f974 	bl	8002496 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	2200      	movs	r2, #0
 80021b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80021b4:	68bb      	ldr	r3, [r7, #8]
 80021b6:	f003 0308 	and.w	r3, r3, #8
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d020      	beq.n	8002200 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	f003 0308 	and.w	r3, r3, #8
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d01b      	beq.n	8002200 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	f06f 0208 	mvn.w	r2, #8
 80021d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	2204      	movs	r2, #4
 80021d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	69db      	ldr	r3, [r3, #28]
 80021de:	f003 0303 	and.w	r3, r3, #3
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d003      	beq.n	80021ee <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80021e6:	6878      	ldr	r0, [r7, #4]
 80021e8:	f000 f94c 	bl	8002484 <HAL_TIM_IC_CaptureCallback>
 80021ec:	e005      	b.n	80021fa <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80021ee:	6878      	ldr	r0, [r7, #4]
 80021f0:	f000 f93f 	bl	8002472 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80021f4:	6878      	ldr	r0, [r7, #4]
 80021f6:	f000 f94e 	bl	8002496 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	2200      	movs	r2, #0
 80021fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002200:	68bb      	ldr	r3, [r7, #8]
 8002202:	f003 0310 	and.w	r3, r3, #16
 8002206:	2b00      	cmp	r3, #0
 8002208:	d020      	beq.n	800224c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	f003 0310 	and.w	r3, r3, #16
 8002210:	2b00      	cmp	r3, #0
 8002212:	d01b      	beq.n	800224c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	f06f 0210 	mvn.w	r2, #16
 800221c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	2208      	movs	r2, #8
 8002222:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	69db      	ldr	r3, [r3, #28]
 800222a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800222e:	2b00      	cmp	r3, #0
 8002230:	d003      	beq.n	800223a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002232:	6878      	ldr	r0, [r7, #4]
 8002234:	f000 f926 	bl	8002484 <HAL_TIM_IC_CaptureCallback>
 8002238:	e005      	b.n	8002246 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800223a:	6878      	ldr	r0, [r7, #4]
 800223c:	f000 f919 	bl	8002472 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002240:	6878      	ldr	r0, [r7, #4]
 8002242:	f000 f928 	bl	8002496 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	2200      	movs	r2, #0
 800224a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800224c:	68bb      	ldr	r3, [r7, #8]
 800224e:	f003 0301 	and.w	r3, r3, #1
 8002252:	2b00      	cmp	r3, #0
 8002254:	d00c      	beq.n	8002270 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	f003 0301 	and.w	r3, r3, #1
 800225c:	2b00      	cmp	r3, #0
 800225e:	d007      	beq.n	8002270 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	f06f 0201 	mvn.w	r2, #1
 8002268:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800226a:	6878      	ldr	r0, [r7, #4]
 800226c:	f7fe fb1c 	bl	80008a8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002270:	68bb      	ldr	r3, [r7, #8]
 8002272:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002276:	2b00      	cmp	r3, #0
 8002278:	d00c      	beq.n	8002294 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002280:	2b00      	cmp	r3, #0
 8002282:	d007      	beq.n	8002294 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800228c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800228e:	6878      	ldr	r0, [r7, #4]
 8002290:	f000 fa7f 	bl	8002792 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002294:	68bb      	ldr	r3, [r7, #8]
 8002296:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800229a:	2b00      	cmp	r3, #0
 800229c:	d00c      	beq.n	80022b8 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d007      	beq.n	80022b8 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80022b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80022b2:	6878      	ldr	r0, [r7, #4]
 80022b4:	f000 f8f8 	bl	80024a8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80022b8:	68bb      	ldr	r3, [r7, #8]
 80022ba:	f003 0320 	and.w	r3, r3, #32
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d00c      	beq.n	80022dc <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	f003 0320 	and.w	r3, r3, #32
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d007      	beq.n	80022dc <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	f06f 0220 	mvn.w	r2, #32
 80022d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80022d6:	6878      	ldr	r0, [r7, #4]
 80022d8:	f000 fa52 	bl	8002780 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80022dc:	bf00      	nop
 80022de:	3710      	adds	r7, #16
 80022e0:	46bd      	mov	sp, r7
 80022e2:	bd80      	pop	{r7, pc}

080022e4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80022e4:	b580      	push	{r7, lr}
 80022e6:	b084      	sub	sp, #16
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	6078      	str	r0, [r7, #4]
 80022ec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80022ee:	2300      	movs	r3, #0
 80022f0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80022f8:	2b01      	cmp	r3, #1
 80022fa:	d101      	bne.n	8002300 <HAL_TIM_ConfigClockSource+0x1c>
 80022fc:	2302      	movs	r3, #2
 80022fe:	e0b4      	b.n	800246a <HAL_TIM_ConfigClockSource+0x186>
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	2201      	movs	r2, #1
 8002304:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	2202      	movs	r2, #2
 800230c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	689b      	ldr	r3, [r3, #8]
 8002316:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002318:	68bb      	ldr	r3, [r7, #8]
 800231a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800231e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002320:	68bb      	ldr	r3, [r7, #8]
 8002322:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002326:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	68ba      	ldr	r2, [r7, #8]
 800232e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002330:	683b      	ldr	r3, [r7, #0]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002338:	d03e      	beq.n	80023b8 <HAL_TIM_ConfigClockSource+0xd4>
 800233a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800233e:	f200 8087 	bhi.w	8002450 <HAL_TIM_ConfigClockSource+0x16c>
 8002342:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002346:	f000 8086 	beq.w	8002456 <HAL_TIM_ConfigClockSource+0x172>
 800234a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800234e:	d87f      	bhi.n	8002450 <HAL_TIM_ConfigClockSource+0x16c>
 8002350:	2b70      	cmp	r3, #112	@ 0x70
 8002352:	d01a      	beq.n	800238a <HAL_TIM_ConfigClockSource+0xa6>
 8002354:	2b70      	cmp	r3, #112	@ 0x70
 8002356:	d87b      	bhi.n	8002450 <HAL_TIM_ConfigClockSource+0x16c>
 8002358:	2b60      	cmp	r3, #96	@ 0x60
 800235a:	d050      	beq.n	80023fe <HAL_TIM_ConfigClockSource+0x11a>
 800235c:	2b60      	cmp	r3, #96	@ 0x60
 800235e:	d877      	bhi.n	8002450 <HAL_TIM_ConfigClockSource+0x16c>
 8002360:	2b50      	cmp	r3, #80	@ 0x50
 8002362:	d03c      	beq.n	80023de <HAL_TIM_ConfigClockSource+0xfa>
 8002364:	2b50      	cmp	r3, #80	@ 0x50
 8002366:	d873      	bhi.n	8002450 <HAL_TIM_ConfigClockSource+0x16c>
 8002368:	2b40      	cmp	r3, #64	@ 0x40
 800236a:	d058      	beq.n	800241e <HAL_TIM_ConfigClockSource+0x13a>
 800236c:	2b40      	cmp	r3, #64	@ 0x40
 800236e:	d86f      	bhi.n	8002450 <HAL_TIM_ConfigClockSource+0x16c>
 8002370:	2b30      	cmp	r3, #48	@ 0x30
 8002372:	d064      	beq.n	800243e <HAL_TIM_ConfigClockSource+0x15a>
 8002374:	2b30      	cmp	r3, #48	@ 0x30
 8002376:	d86b      	bhi.n	8002450 <HAL_TIM_ConfigClockSource+0x16c>
 8002378:	2b20      	cmp	r3, #32
 800237a:	d060      	beq.n	800243e <HAL_TIM_ConfigClockSource+0x15a>
 800237c:	2b20      	cmp	r3, #32
 800237e:	d867      	bhi.n	8002450 <HAL_TIM_ConfigClockSource+0x16c>
 8002380:	2b00      	cmp	r3, #0
 8002382:	d05c      	beq.n	800243e <HAL_TIM_ConfigClockSource+0x15a>
 8002384:	2b10      	cmp	r3, #16
 8002386:	d05a      	beq.n	800243e <HAL_TIM_ConfigClockSource+0x15a>
 8002388:	e062      	b.n	8002450 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800238e:	683b      	ldr	r3, [r7, #0]
 8002390:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002392:	683b      	ldr	r3, [r7, #0]
 8002394:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002396:	683b      	ldr	r3, [r7, #0]
 8002398:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800239a:	f000 f974 	bl	8002686 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	689b      	ldr	r3, [r3, #8]
 80023a4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80023a6:	68bb      	ldr	r3, [r7, #8]
 80023a8:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80023ac:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	68ba      	ldr	r2, [r7, #8]
 80023b4:	609a      	str	r2, [r3, #8]
      break;
 80023b6:	e04f      	b.n	8002458 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80023bc:	683b      	ldr	r3, [r7, #0]
 80023be:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80023c0:	683b      	ldr	r3, [r7, #0]
 80023c2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80023c4:	683b      	ldr	r3, [r7, #0]
 80023c6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80023c8:	f000 f95d 	bl	8002686 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	689a      	ldr	r2, [r3, #8]
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80023da:	609a      	str	r2, [r3, #8]
      break;
 80023dc:	e03c      	b.n	8002458 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80023e2:	683b      	ldr	r3, [r7, #0]
 80023e4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80023e6:	683b      	ldr	r3, [r7, #0]
 80023e8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80023ea:	461a      	mov	r2, r3
 80023ec:	f000 f8d4 	bl	8002598 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	2150      	movs	r1, #80	@ 0x50
 80023f6:	4618      	mov	r0, r3
 80023f8:	f000 f92b 	bl	8002652 <TIM_ITRx_SetConfig>
      break;
 80023fc:	e02c      	b.n	8002458 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002402:	683b      	ldr	r3, [r7, #0]
 8002404:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002406:	683b      	ldr	r3, [r7, #0]
 8002408:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800240a:	461a      	mov	r2, r3
 800240c:	f000 f8f2 	bl	80025f4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	2160      	movs	r1, #96	@ 0x60
 8002416:	4618      	mov	r0, r3
 8002418:	f000 f91b 	bl	8002652 <TIM_ITRx_SetConfig>
      break;
 800241c:	e01c      	b.n	8002458 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002422:	683b      	ldr	r3, [r7, #0]
 8002424:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002426:	683b      	ldr	r3, [r7, #0]
 8002428:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800242a:	461a      	mov	r2, r3
 800242c:	f000 f8b4 	bl	8002598 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	2140      	movs	r1, #64	@ 0x40
 8002436:	4618      	mov	r0, r3
 8002438:	f000 f90b 	bl	8002652 <TIM_ITRx_SetConfig>
      break;
 800243c:	e00c      	b.n	8002458 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681a      	ldr	r2, [r3, #0]
 8002442:	683b      	ldr	r3, [r7, #0]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	4619      	mov	r1, r3
 8002448:	4610      	mov	r0, r2
 800244a:	f000 f902 	bl	8002652 <TIM_ITRx_SetConfig>
      break;
 800244e:	e003      	b.n	8002458 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002450:	2301      	movs	r3, #1
 8002452:	73fb      	strb	r3, [r7, #15]
      break;
 8002454:	e000      	b.n	8002458 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002456:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	2201      	movs	r2, #1
 800245c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	2200      	movs	r2, #0
 8002464:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002468:	7bfb      	ldrb	r3, [r7, #15]
}
 800246a:	4618      	mov	r0, r3
 800246c:	3710      	adds	r7, #16
 800246e:	46bd      	mov	sp, r7
 8002470:	bd80      	pop	{r7, pc}

08002472 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002472:	b480      	push	{r7}
 8002474:	b083      	sub	sp, #12
 8002476:	af00      	add	r7, sp, #0
 8002478:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800247a:	bf00      	nop
 800247c:	370c      	adds	r7, #12
 800247e:	46bd      	mov	sp, r7
 8002480:	bc80      	pop	{r7}
 8002482:	4770      	bx	lr

08002484 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002484:	b480      	push	{r7}
 8002486:	b083      	sub	sp, #12
 8002488:	af00      	add	r7, sp, #0
 800248a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800248c:	bf00      	nop
 800248e:	370c      	adds	r7, #12
 8002490:	46bd      	mov	sp, r7
 8002492:	bc80      	pop	{r7}
 8002494:	4770      	bx	lr

08002496 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002496:	b480      	push	{r7}
 8002498:	b083      	sub	sp, #12
 800249a:	af00      	add	r7, sp, #0
 800249c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800249e:	bf00      	nop
 80024a0:	370c      	adds	r7, #12
 80024a2:	46bd      	mov	sp, r7
 80024a4:	bc80      	pop	{r7}
 80024a6:	4770      	bx	lr

080024a8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80024a8:	b480      	push	{r7}
 80024aa:	b083      	sub	sp, #12
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80024b0:	bf00      	nop
 80024b2:	370c      	adds	r7, #12
 80024b4:	46bd      	mov	sp, r7
 80024b6:	bc80      	pop	{r7}
 80024b8:	4770      	bx	lr
	...

080024bc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80024bc:	b480      	push	{r7}
 80024be:	b085      	sub	sp, #20
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	6078      	str	r0, [r7, #4]
 80024c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	4a2f      	ldr	r2, [pc, #188]	@ (800258c <TIM_Base_SetConfig+0xd0>)
 80024d0:	4293      	cmp	r3, r2
 80024d2:	d00b      	beq.n	80024ec <TIM_Base_SetConfig+0x30>
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80024da:	d007      	beq.n	80024ec <TIM_Base_SetConfig+0x30>
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	4a2c      	ldr	r2, [pc, #176]	@ (8002590 <TIM_Base_SetConfig+0xd4>)
 80024e0:	4293      	cmp	r3, r2
 80024e2:	d003      	beq.n	80024ec <TIM_Base_SetConfig+0x30>
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	4a2b      	ldr	r2, [pc, #172]	@ (8002594 <TIM_Base_SetConfig+0xd8>)
 80024e8:	4293      	cmp	r3, r2
 80024ea:	d108      	bne.n	80024fe <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80024f2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80024f4:	683b      	ldr	r3, [r7, #0]
 80024f6:	685b      	ldr	r3, [r3, #4]
 80024f8:	68fa      	ldr	r2, [r7, #12]
 80024fa:	4313      	orrs	r3, r2
 80024fc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	4a22      	ldr	r2, [pc, #136]	@ (800258c <TIM_Base_SetConfig+0xd0>)
 8002502:	4293      	cmp	r3, r2
 8002504:	d00b      	beq.n	800251e <TIM_Base_SetConfig+0x62>
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800250c:	d007      	beq.n	800251e <TIM_Base_SetConfig+0x62>
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	4a1f      	ldr	r2, [pc, #124]	@ (8002590 <TIM_Base_SetConfig+0xd4>)
 8002512:	4293      	cmp	r3, r2
 8002514:	d003      	beq.n	800251e <TIM_Base_SetConfig+0x62>
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	4a1e      	ldr	r2, [pc, #120]	@ (8002594 <TIM_Base_SetConfig+0xd8>)
 800251a:	4293      	cmp	r3, r2
 800251c:	d108      	bne.n	8002530 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002524:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002526:	683b      	ldr	r3, [r7, #0]
 8002528:	68db      	ldr	r3, [r3, #12]
 800252a:	68fa      	ldr	r2, [r7, #12]
 800252c:	4313      	orrs	r3, r2
 800252e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002536:	683b      	ldr	r3, [r7, #0]
 8002538:	695b      	ldr	r3, [r3, #20]
 800253a:	4313      	orrs	r3, r2
 800253c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	68fa      	ldr	r2, [r7, #12]
 8002542:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002544:	683b      	ldr	r3, [r7, #0]
 8002546:	689a      	ldr	r2, [r3, #8]
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800254c:	683b      	ldr	r3, [r7, #0]
 800254e:	681a      	ldr	r2, [r3, #0]
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	4a0d      	ldr	r2, [pc, #52]	@ (800258c <TIM_Base_SetConfig+0xd0>)
 8002558:	4293      	cmp	r3, r2
 800255a:	d103      	bne.n	8002564 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800255c:	683b      	ldr	r3, [r7, #0]
 800255e:	691a      	ldr	r2, [r3, #16]
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	2201      	movs	r2, #1
 8002568:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	691b      	ldr	r3, [r3, #16]
 800256e:	f003 0301 	and.w	r3, r3, #1
 8002572:	2b00      	cmp	r3, #0
 8002574:	d005      	beq.n	8002582 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	691b      	ldr	r3, [r3, #16]
 800257a:	f023 0201 	bic.w	r2, r3, #1
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	611a      	str	r2, [r3, #16]
  }
}
 8002582:	bf00      	nop
 8002584:	3714      	adds	r7, #20
 8002586:	46bd      	mov	sp, r7
 8002588:	bc80      	pop	{r7}
 800258a:	4770      	bx	lr
 800258c:	40012c00 	.word	0x40012c00
 8002590:	40000400 	.word	0x40000400
 8002594:	40000800 	.word	0x40000800

08002598 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002598:	b480      	push	{r7}
 800259a:	b087      	sub	sp, #28
 800259c:	af00      	add	r7, sp, #0
 800259e:	60f8      	str	r0, [r7, #12]
 80025a0:	60b9      	str	r1, [r7, #8]
 80025a2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	6a1b      	ldr	r3, [r3, #32]
 80025a8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	6a1b      	ldr	r3, [r3, #32]
 80025ae:	f023 0201 	bic.w	r2, r3, #1
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	699b      	ldr	r3, [r3, #24]
 80025ba:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80025bc:	693b      	ldr	r3, [r7, #16]
 80025be:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80025c2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	011b      	lsls	r3, r3, #4
 80025c8:	693a      	ldr	r2, [r7, #16]
 80025ca:	4313      	orrs	r3, r2
 80025cc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80025ce:	697b      	ldr	r3, [r7, #20]
 80025d0:	f023 030a 	bic.w	r3, r3, #10
 80025d4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80025d6:	697a      	ldr	r2, [r7, #20]
 80025d8:	68bb      	ldr	r3, [r7, #8]
 80025da:	4313      	orrs	r3, r2
 80025dc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	693a      	ldr	r2, [r7, #16]
 80025e2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	697a      	ldr	r2, [r7, #20]
 80025e8:	621a      	str	r2, [r3, #32]
}
 80025ea:	bf00      	nop
 80025ec:	371c      	adds	r7, #28
 80025ee:	46bd      	mov	sp, r7
 80025f0:	bc80      	pop	{r7}
 80025f2:	4770      	bx	lr

080025f4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80025f4:	b480      	push	{r7}
 80025f6:	b087      	sub	sp, #28
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	60f8      	str	r0, [r7, #12]
 80025fc:	60b9      	str	r1, [r7, #8]
 80025fe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	6a1b      	ldr	r3, [r3, #32]
 8002604:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	6a1b      	ldr	r3, [r3, #32]
 800260a:	f023 0210 	bic.w	r2, r3, #16
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	699b      	ldr	r3, [r3, #24]
 8002616:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002618:	693b      	ldr	r3, [r7, #16]
 800261a:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800261e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	031b      	lsls	r3, r3, #12
 8002624:	693a      	ldr	r2, [r7, #16]
 8002626:	4313      	orrs	r3, r2
 8002628:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800262a:	697b      	ldr	r3, [r7, #20]
 800262c:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8002630:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002632:	68bb      	ldr	r3, [r7, #8]
 8002634:	011b      	lsls	r3, r3, #4
 8002636:	697a      	ldr	r2, [r7, #20]
 8002638:	4313      	orrs	r3, r2
 800263a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	693a      	ldr	r2, [r7, #16]
 8002640:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	697a      	ldr	r2, [r7, #20]
 8002646:	621a      	str	r2, [r3, #32]
}
 8002648:	bf00      	nop
 800264a:	371c      	adds	r7, #28
 800264c:	46bd      	mov	sp, r7
 800264e:	bc80      	pop	{r7}
 8002650:	4770      	bx	lr

08002652 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002652:	b480      	push	{r7}
 8002654:	b085      	sub	sp, #20
 8002656:	af00      	add	r7, sp, #0
 8002658:	6078      	str	r0, [r7, #4]
 800265a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	689b      	ldr	r3, [r3, #8]
 8002660:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002668:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800266a:	683a      	ldr	r2, [r7, #0]
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	4313      	orrs	r3, r2
 8002670:	f043 0307 	orr.w	r3, r3, #7
 8002674:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	68fa      	ldr	r2, [r7, #12]
 800267a:	609a      	str	r2, [r3, #8]
}
 800267c:	bf00      	nop
 800267e:	3714      	adds	r7, #20
 8002680:	46bd      	mov	sp, r7
 8002682:	bc80      	pop	{r7}
 8002684:	4770      	bx	lr

08002686 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002686:	b480      	push	{r7}
 8002688:	b087      	sub	sp, #28
 800268a:	af00      	add	r7, sp, #0
 800268c:	60f8      	str	r0, [r7, #12]
 800268e:	60b9      	str	r1, [r7, #8]
 8002690:	607a      	str	r2, [r7, #4]
 8002692:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	689b      	ldr	r3, [r3, #8]
 8002698:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800269a:	697b      	ldr	r3, [r7, #20]
 800269c:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80026a0:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80026a2:	683b      	ldr	r3, [r7, #0]
 80026a4:	021a      	lsls	r2, r3, #8
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	431a      	orrs	r2, r3
 80026aa:	68bb      	ldr	r3, [r7, #8]
 80026ac:	4313      	orrs	r3, r2
 80026ae:	697a      	ldr	r2, [r7, #20]
 80026b0:	4313      	orrs	r3, r2
 80026b2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	697a      	ldr	r2, [r7, #20]
 80026b8:	609a      	str	r2, [r3, #8]
}
 80026ba:	bf00      	nop
 80026bc:	371c      	adds	r7, #28
 80026be:	46bd      	mov	sp, r7
 80026c0:	bc80      	pop	{r7}
 80026c2:	4770      	bx	lr

080026c4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80026c4:	b480      	push	{r7}
 80026c6:	b085      	sub	sp, #20
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	6078      	str	r0, [r7, #4]
 80026cc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80026d4:	2b01      	cmp	r3, #1
 80026d6:	d101      	bne.n	80026dc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80026d8:	2302      	movs	r3, #2
 80026da:	e046      	b.n	800276a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	2201      	movs	r2, #1
 80026e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	2202      	movs	r2, #2
 80026e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	685b      	ldr	r3, [r3, #4]
 80026f2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	689b      	ldr	r3, [r3, #8]
 80026fa:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002702:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002704:	683b      	ldr	r3, [r7, #0]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	68fa      	ldr	r2, [r7, #12]
 800270a:	4313      	orrs	r3, r2
 800270c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	68fa      	ldr	r2, [r7, #12]
 8002714:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	4a16      	ldr	r2, [pc, #88]	@ (8002774 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 800271c:	4293      	cmp	r3, r2
 800271e:	d00e      	beq.n	800273e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002728:	d009      	beq.n	800273e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	4a12      	ldr	r2, [pc, #72]	@ (8002778 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8002730:	4293      	cmp	r3, r2
 8002732:	d004      	beq.n	800273e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	4a10      	ldr	r2, [pc, #64]	@ (800277c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800273a:	4293      	cmp	r3, r2
 800273c:	d10c      	bne.n	8002758 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800273e:	68bb      	ldr	r3, [r7, #8]
 8002740:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002744:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002746:	683b      	ldr	r3, [r7, #0]
 8002748:	685b      	ldr	r3, [r3, #4]
 800274a:	68ba      	ldr	r2, [r7, #8]
 800274c:	4313      	orrs	r3, r2
 800274e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	68ba      	ldr	r2, [r7, #8]
 8002756:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	2201      	movs	r2, #1
 800275c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	2200      	movs	r2, #0
 8002764:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8002768:	2300      	movs	r3, #0
}
 800276a:	4618      	mov	r0, r3
 800276c:	3714      	adds	r7, #20
 800276e:	46bd      	mov	sp, r7
 8002770:	bc80      	pop	{r7}
 8002772:	4770      	bx	lr
 8002774:	40012c00 	.word	0x40012c00
 8002778:	40000400 	.word	0x40000400
 800277c:	40000800 	.word	0x40000800

08002780 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002780:	b480      	push	{r7}
 8002782:	b083      	sub	sp, #12
 8002784:	af00      	add	r7, sp, #0
 8002786:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002788:	bf00      	nop
 800278a:	370c      	adds	r7, #12
 800278c:	46bd      	mov	sp, r7
 800278e:	bc80      	pop	{r7}
 8002790:	4770      	bx	lr

08002792 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002792:	b480      	push	{r7}
 8002794:	b083      	sub	sp, #12
 8002796:	af00      	add	r7, sp, #0
 8002798:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800279a:	bf00      	nop
 800279c:	370c      	adds	r7, #12
 800279e:	46bd      	mov	sp, r7
 80027a0:	bc80      	pop	{r7}
 80027a2:	4770      	bx	lr

080027a4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80027a4:	b580      	push	{r7, lr}
 80027a6:	b082      	sub	sp, #8
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d101      	bne.n	80027b6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80027b2:	2301      	movs	r3, #1
 80027b4:	e042      	b.n	800283c <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80027bc:	b2db      	uxtb	r3, r3
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d106      	bne.n	80027d0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	2200      	movs	r2, #0
 80027c6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80027ca:	6878      	ldr	r0, [r7, #4]
 80027cc:	f7fe fae2 	bl	8000d94 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	2224      	movs	r2, #36	@ 0x24
 80027d4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	68da      	ldr	r2, [r3, #12]
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80027e6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80027e8:	6878      	ldr	r0, [r7, #4]
 80027ea:	f000 fcab 	bl	8003144 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	691a      	ldr	r2, [r3, #16]
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80027fc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	695a      	ldr	r2, [r3, #20]
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800280c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	68da      	ldr	r2, [r3, #12]
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800281c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	2200      	movs	r2, #0
 8002822:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	2220      	movs	r2, #32
 8002828:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	2220      	movs	r2, #32
 8002830:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	2200      	movs	r2, #0
 8002838:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800283a:	2300      	movs	r3, #0
}
 800283c:	4618      	mov	r0, r3
 800283e:	3708      	adds	r7, #8
 8002840:	46bd      	mov	sp, r7
 8002842:	bd80      	pop	{r7, pc}

08002844 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8002844:	b480      	push	{r7}
 8002846:	b085      	sub	sp, #20
 8002848:	af00      	add	r7, sp, #0
 800284a:	60f8      	str	r0, [r7, #12]
 800284c:	60b9      	str	r1, [r7, #8]
 800284e:	4613      	mov	r3, r2
 8002850:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002858:	b2db      	uxtb	r3, r3
 800285a:	2b20      	cmp	r3, #32
 800285c:	d121      	bne.n	80028a2 <HAL_UART_Transmit_IT+0x5e>
  {
    if ((pData == NULL) || (Size == 0U))
 800285e:	68bb      	ldr	r3, [r7, #8]
 8002860:	2b00      	cmp	r3, #0
 8002862:	d002      	beq.n	800286a <HAL_UART_Transmit_IT+0x26>
 8002864:	88fb      	ldrh	r3, [r7, #6]
 8002866:	2b00      	cmp	r3, #0
 8002868:	d101      	bne.n	800286e <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 800286a:	2301      	movs	r3, #1
 800286c:	e01a      	b.n	80028a4 <HAL_UART_Transmit_IT+0x60>
    }

    huart->pTxBuffPtr = pData;
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	68ba      	ldr	r2, [r7, #8]
 8002872:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	88fa      	ldrh	r2, [r7, #6]
 8002878:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	88fa      	ldrh	r2, [r7, #6]
 800287e:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	2200      	movs	r2, #0
 8002884:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	2221      	movs	r2, #33	@ 0x21
 800288a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	68da      	ldr	r2, [r3, #12]
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800289c:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 800289e:	2300      	movs	r3, #0
 80028a0:	e000      	b.n	80028a4 <HAL_UART_Transmit_IT+0x60>
  }
  else
  {
    return HAL_BUSY;
 80028a2:	2302      	movs	r3, #2
  }
}
 80028a4:	4618      	mov	r0, r3
 80028a6:	3714      	adds	r7, #20
 80028a8:	46bd      	mov	sp, r7
 80028aa:	bc80      	pop	{r7}
 80028ac:	4770      	bx	lr
	...

080028b0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80028b0:	b580      	push	{r7, lr}
 80028b2:	b0ba      	sub	sp, #232	@ 0xe8
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	68db      	ldr	r3, [r3, #12]
 80028c8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	695b      	ldr	r3, [r3, #20]
 80028d2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 80028d6:	2300      	movs	r3, #0
 80028d8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 80028dc:	2300      	movs	r3, #0
 80028de:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80028e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80028e6:	f003 030f 	and.w	r3, r3, #15
 80028ea:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 80028ee:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d10f      	bne.n	8002916 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80028f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80028fa:	f003 0320 	and.w	r3, r3, #32
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d009      	beq.n	8002916 <HAL_UART_IRQHandler+0x66>
 8002902:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002906:	f003 0320 	and.w	r3, r3, #32
 800290a:	2b00      	cmp	r3, #0
 800290c:	d003      	beq.n	8002916 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800290e:	6878      	ldr	r0, [r7, #4]
 8002910:	f000 fb5a 	bl	8002fc8 <UART_Receive_IT>
      return;
 8002914:	e25b      	b.n	8002dce <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8002916:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800291a:	2b00      	cmp	r3, #0
 800291c:	f000 80de 	beq.w	8002adc <HAL_UART_IRQHandler+0x22c>
 8002920:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002924:	f003 0301 	and.w	r3, r3, #1
 8002928:	2b00      	cmp	r3, #0
 800292a:	d106      	bne.n	800293a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800292c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002930:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8002934:	2b00      	cmp	r3, #0
 8002936:	f000 80d1 	beq.w	8002adc <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800293a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800293e:	f003 0301 	and.w	r3, r3, #1
 8002942:	2b00      	cmp	r3, #0
 8002944:	d00b      	beq.n	800295e <HAL_UART_IRQHandler+0xae>
 8002946:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800294a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800294e:	2b00      	cmp	r3, #0
 8002950:	d005      	beq.n	800295e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002956:	f043 0201 	orr.w	r2, r3, #1
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800295e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002962:	f003 0304 	and.w	r3, r3, #4
 8002966:	2b00      	cmp	r3, #0
 8002968:	d00b      	beq.n	8002982 <HAL_UART_IRQHandler+0xd2>
 800296a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800296e:	f003 0301 	and.w	r3, r3, #1
 8002972:	2b00      	cmp	r3, #0
 8002974:	d005      	beq.n	8002982 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800297a:	f043 0202 	orr.w	r2, r3, #2
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002982:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002986:	f003 0302 	and.w	r3, r3, #2
 800298a:	2b00      	cmp	r3, #0
 800298c:	d00b      	beq.n	80029a6 <HAL_UART_IRQHandler+0xf6>
 800298e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002992:	f003 0301 	and.w	r3, r3, #1
 8002996:	2b00      	cmp	r3, #0
 8002998:	d005      	beq.n	80029a6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800299e:	f043 0204 	orr.w	r2, r3, #4
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80029a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80029aa:	f003 0308 	and.w	r3, r3, #8
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d011      	beq.n	80029d6 <HAL_UART_IRQHandler+0x126>
 80029b2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80029b6:	f003 0320 	and.w	r3, r3, #32
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d105      	bne.n	80029ca <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80029be:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80029c2:	f003 0301 	and.w	r3, r3, #1
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d005      	beq.n	80029d6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029ce:	f043 0208 	orr.w	r2, r3, #8
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029da:	2b00      	cmp	r3, #0
 80029dc:	f000 81f2 	beq.w	8002dc4 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80029e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80029e4:	f003 0320 	and.w	r3, r3, #32
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d008      	beq.n	80029fe <HAL_UART_IRQHandler+0x14e>
 80029ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80029f0:	f003 0320 	and.w	r3, r3, #32
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d002      	beq.n	80029fe <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80029f8:	6878      	ldr	r0, [r7, #4]
 80029fa:	f000 fae5 	bl	8002fc8 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	695b      	ldr	r3, [r3, #20]
 8002a04:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	bf14      	ite	ne
 8002a0c:	2301      	movne	r3, #1
 8002a0e:	2300      	moveq	r3, #0
 8002a10:	b2db      	uxtb	r3, r3
 8002a12:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a1a:	f003 0308 	and.w	r3, r3, #8
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d103      	bne.n	8002a2a <HAL_UART_IRQHandler+0x17a>
 8002a22:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d04f      	beq.n	8002aca <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002a2a:	6878      	ldr	r0, [r7, #4]
 8002a2c:	f000 f9ef 	bl	8002e0e <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	695b      	ldr	r3, [r3, #20]
 8002a36:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d041      	beq.n	8002ac2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	3314      	adds	r3, #20
 8002a44:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a48:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002a4c:	e853 3f00 	ldrex	r3, [r3]
 8002a50:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8002a54:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002a58:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002a5c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	3314      	adds	r3, #20
 8002a66:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8002a6a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8002a6e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a72:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8002a76:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8002a7a:	e841 2300 	strex	r3, r2, [r1]
 8002a7e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8002a82:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d1d9      	bne.n	8002a3e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d013      	beq.n	8002aba <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a96:	4a7e      	ldr	r2, [pc, #504]	@ (8002c90 <HAL_UART_IRQHandler+0x3e0>)
 8002a98:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a9e:	4618      	mov	r0, r3
 8002aa0:	f7fe fc3a 	bl	8001318 <HAL_DMA_Abort_IT>
 8002aa4:	4603      	mov	r3, r0
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d016      	beq.n	8002ad8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002aae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002ab0:	687a      	ldr	r2, [r7, #4]
 8002ab2:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002ab4:	4610      	mov	r0, r2
 8002ab6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002ab8:	e00e      	b.n	8002ad8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002aba:	6878      	ldr	r0, [r7, #4]
 8002abc:	f000 f993 	bl	8002de6 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002ac0:	e00a      	b.n	8002ad8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002ac2:	6878      	ldr	r0, [r7, #4]
 8002ac4:	f000 f98f 	bl	8002de6 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002ac8:	e006      	b.n	8002ad8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002aca:	6878      	ldr	r0, [r7, #4]
 8002acc:	f000 f98b 	bl	8002de6 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	2200      	movs	r2, #0
 8002ad4:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8002ad6:	e175      	b.n	8002dc4 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002ad8:	bf00      	nop
    return;
 8002ada:	e173      	b.n	8002dc4 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ae0:	2b01      	cmp	r3, #1
 8002ae2:	f040 814f 	bne.w	8002d84 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8002ae6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002aea:	f003 0310 	and.w	r3, r3, #16
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	f000 8148 	beq.w	8002d84 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8002af4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002af8:	f003 0310 	and.w	r3, r3, #16
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	f000 8141 	beq.w	8002d84 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002b02:	2300      	movs	r3, #0
 8002b04:	60bb      	str	r3, [r7, #8]
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	60bb      	str	r3, [r7, #8]
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	685b      	ldr	r3, [r3, #4]
 8002b14:	60bb      	str	r3, [r7, #8]
 8002b16:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	695b      	ldr	r3, [r3, #20]
 8002b1e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	f000 80b6 	beq.w	8002c94 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	685b      	ldr	r3, [r3, #4]
 8002b30:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002b34:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	f000 8145 	beq.w	8002dc8 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8002b42:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8002b46:	429a      	cmp	r2, r3
 8002b48:	f080 813e 	bcs.w	8002dc8 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8002b52:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b58:	699b      	ldr	r3, [r3, #24]
 8002b5a:	2b20      	cmp	r3, #32
 8002b5c:	f000 8088 	beq.w	8002c70 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	330c      	adds	r3, #12
 8002b66:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b6a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002b6e:	e853 3f00 	ldrex	r3, [r3]
 8002b72:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8002b76:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002b7a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002b7e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	330c      	adds	r3, #12
 8002b88:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8002b8c:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8002b90:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b94:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8002b98:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8002b9c:	e841 2300 	strex	r3, r2, [r1]
 8002ba0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8002ba4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d1d9      	bne.n	8002b60 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	3314      	adds	r3, #20
 8002bb2:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002bb4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002bb6:	e853 3f00 	ldrex	r3, [r3]
 8002bba:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8002bbc:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002bbe:	f023 0301 	bic.w	r3, r3, #1
 8002bc2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	3314      	adds	r3, #20
 8002bcc:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8002bd0:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8002bd4:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002bd6:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8002bd8:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8002bdc:	e841 2300 	strex	r3, r2, [r1]
 8002be0:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8002be2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d1e1      	bne.n	8002bac <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	3314      	adds	r3, #20
 8002bee:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002bf0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002bf2:	e853 3f00 	ldrex	r3, [r3]
 8002bf6:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8002bf8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002bfa:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002bfe:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	3314      	adds	r3, #20
 8002c08:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8002c0c:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8002c0e:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c10:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8002c12:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8002c14:	e841 2300 	strex	r3, r2, [r1]
 8002c18:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8002c1a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d1e3      	bne.n	8002be8 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	2220      	movs	r2, #32
 8002c24:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	2200      	movs	r2, #0
 8002c2c:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	330c      	adds	r3, #12
 8002c34:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c36:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002c38:	e853 3f00 	ldrex	r3, [r3]
 8002c3c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8002c3e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002c40:	f023 0310 	bic.w	r3, r3, #16
 8002c44:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	330c      	adds	r3, #12
 8002c4e:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8002c52:	65ba      	str	r2, [r7, #88]	@ 0x58
 8002c54:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c56:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8002c58:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8002c5a:	e841 2300 	strex	r3, r2, [r1]
 8002c5e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8002c60:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d1e3      	bne.n	8002c2e <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002c6a:	4618      	mov	r0, r3
 8002c6c:	f7fe fb19 	bl	80012a2 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	2202      	movs	r2, #2
 8002c74:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002c7e:	b29b      	uxth	r3, r3
 8002c80:	1ad3      	subs	r3, r2, r3
 8002c82:	b29b      	uxth	r3, r3
 8002c84:	4619      	mov	r1, r3
 8002c86:	6878      	ldr	r0, [r7, #4]
 8002c88:	f000 f8b6 	bl	8002df8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002c8c:	e09c      	b.n	8002dc8 <HAL_UART_IRQHandler+0x518>
 8002c8e:	bf00      	nop
 8002c90:	08002ed3 	.word	0x08002ed3
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002c9c:	b29b      	uxth	r3, r3
 8002c9e:	1ad3      	subs	r3, r2, r3
 8002ca0:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002ca8:	b29b      	uxth	r3, r3
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	f000 808e 	beq.w	8002dcc <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8002cb0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	f000 8089 	beq.w	8002dcc <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	330c      	adds	r3, #12
 8002cc0:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002cc2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002cc4:	e853 3f00 	ldrex	r3, [r3]
 8002cc8:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8002cca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002ccc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002cd0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	330c      	adds	r3, #12
 8002cda:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8002cde:	647a      	str	r2, [r7, #68]	@ 0x44
 8002ce0:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ce2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8002ce4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002ce6:	e841 2300 	strex	r3, r2, [r1]
 8002cea:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8002cec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d1e3      	bne.n	8002cba <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	3314      	adds	r3, #20
 8002cf8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002cfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cfc:	e853 3f00 	ldrex	r3, [r3]
 8002d00:	623b      	str	r3, [r7, #32]
   return(result);
 8002d02:	6a3b      	ldr	r3, [r7, #32]
 8002d04:	f023 0301 	bic.w	r3, r3, #1
 8002d08:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	3314      	adds	r3, #20
 8002d12:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8002d16:	633a      	str	r2, [r7, #48]	@ 0x30
 8002d18:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d1a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002d1c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002d1e:	e841 2300 	strex	r3, r2, [r1]
 8002d22:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8002d24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d1e3      	bne.n	8002cf2 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	2220      	movs	r2, #32
 8002d2e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	2200      	movs	r2, #0
 8002d36:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	330c      	adds	r3, #12
 8002d3e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d40:	693b      	ldr	r3, [r7, #16]
 8002d42:	e853 3f00 	ldrex	r3, [r3]
 8002d46:	60fb      	str	r3, [r7, #12]
   return(result);
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	f023 0310 	bic.w	r3, r3, #16
 8002d4e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	330c      	adds	r3, #12
 8002d58:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8002d5c:	61fa      	str	r2, [r7, #28]
 8002d5e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d60:	69b9      	ldr	r1, [r7, #24]
 8002d62:	69fa      	ldr	r2, [r7, #28]
 8002d64:	e841 2300 	strex	r3, r2, [r1]
 8002d68:	617b      	str	r3, [r7, #20]
   return(result);
 8002d6a:	697b      	ldr	r3, [r7, #20]
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d1e3      	bne.n	8002d38 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	2202      	movs	r2, #2
 8002d74:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002d76:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8002d7a:	4619      	mov	r1, r3
 8002d7c:	6878      	ldr	r0, [r7, #4]
 8002d7e:	f000 f83b 	bl	8002df8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002d82:	e023      	b.n	8002dcc <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002d84:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002d88:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d009      	beq.n	8002da4 <HAL_UART_IRQHandler+0x4f4>
 8002d90:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002d94:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d003      	beq.n	8002da4 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8002d9c:	6878      	ldr	r0, [r7, #4]
 8002d9e:	f000 f8ac 	bl	8002efa <UART_Transmit_IT>
    return;
 8002da2:	e014      	b.n	8002dce <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002da4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002da8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d00e      	beq.n	8002dce <HAL_UART_IRQHandler+0x51e>
 8002db0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002db4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d008      	beq.n	8002dce <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8002dbc:	6878      	ldr	r0, [r7, #4]
 8002dbe:	f000 f8eb 	bl	8002f98 <UART_EndTransmit_IT>
    return;
 8002dc2:	e004      	b.n	8002dce <HAL_UART_IRQHandler+0x51e>
    return;
 8002dc4:	bf00      	nop
 8002dc6:	e002      	b.n	8002dce <HAL_UART_IRQHandler+0x51e>
      return;
 8002dc8:	bf00      	nop
 8002dca:	e000      	b.n	8002dce <HAL_UART_IRQHandler+0x51e>
      return;
 8002dcc:	bf00      	nop
  }
}
 8002dce:	37e8      	adds	r7, #232	@ 0xe8
 8002dd0:	46bd      	mov	sp, r7
 8002dd2:	bd80      	pop	{r7, pc}

08002dd4 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002dd4:	b480      	push	{r7}
 8002dd6:	b083      	sub	sp, #12
 8002dd8:	af00      	add	r7, sp, #0
 8002dda:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8002ddc:	bf00      	nop
 8002dde:	370c      	adds	r7, #12
 8002de0:	46bd      	mov	sp, r7
 8002de2:	bc80      	pop	{r7}
 8002de4:	4770      	bx	lr

08002de6 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002de6:	b480      	push	{r7}
 8002de8:	b083      	sub	sp, #12
 8002dea:	af00      	add	r7, sp, #0
 8002dec:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002dee:	bf00      	nop
 8002df0:	370c      	adds	r7, #12
 8002df2:	46bd      	mov	sp, r7
 8002df4:	bc80      	pop	{r7}
 8002df6:	4770      	bx	lr

08002df8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002df8:	b480      	push	{r7}
 8002dfa:	b083      	sub	sp, #12
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	6078      	str	r0, [r7, #4]
 8002e00:	460b      	mov	r3, r1
 8002e02:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002e04:	bf00      	nop
 8002e06:	370c      	adds	r7, #12
 8002e08:	46bd      	mov	sp, r7
 8002e0a:	bc80      	pop	{r7}
 8002e0c:	4770      	bx	lr

08002e0e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002e0e:	b480      	push	{r7}
 8002e10:	b095      	sub	sp, #84	@ 0x54
 8002e12:	af00      	add	r7, sp, #0
 8002e14:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	330c      	adds	r3, #12
 8002e1c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e1e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002e20:	e853 3f00 	ldrex	r3, [r3]
 8002e24:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8002e26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e28:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002e2c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	330c      	adds	r3, #12
 8002e34:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002e36:	643a      	str	r2, [r7, #64]	@ 0x40
 8002e38:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e3a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8002e3c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002e3e:	e841 2300 	strex	r3, r2, [r1]
 8002e42:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8002e44:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d1e5      	bne.n	8002e16 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	3314      	adds	r3, #20
 8002e50:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e52:	6a3b      	ldr	r3, [r7, #32]
 8002e54:	e853 3f00 	ldrex	r3, [r3]
 8002e58:	61fb      	str	r3, [r7, #28]
   return(result);
 8002e5a:	69fb      	ldr	r3, [r7, #28]
 8002e5c:	f023 0301 	bic.w	r3, r3, #1
 8002e60:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	3314      	adds	r3, #20
 8002e68:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002e6a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002e6c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e6e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002e70:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002e72:	e841 2300 	strex	r3, r2, [r1]
 8002e76:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8002e78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d1e5      	bne.n	8002e4a <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e82:	2b01      	cmp	r3, #1
 8002e84:	d119      	bne.n	8002eba <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	330c      	adds	r3, #12
 8002e8c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	e853 3f00 	ldrex	r3, [r3]
 8002e94:	60bb      	str	r3, [r7, #8]
   return(result);
 8002e96:	68bb      	ldr	r3, [r7, #8]
 8002e98:	f023 0310 	bic.w	r3, r3, #16
 8002e9c:	647b      	str	r3, [r7, #68]	@ 0x44
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	330c      	adds	r3, #12
 8002ea4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002ea6:	61ba      	str	r2, [r7, #24]
 8002ea8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002eaa:	6979      	ldr	r1, [r7, #20]
 8002eac:	69ba      	ldr	r2, [r7, #24]
 8002eae:	e841 2300 	strex	r3, r2, [r1]
 8002eb2:	613b      	str	r3, [r7, #16]
   return(result);
 8002eb4:	693b      	ldr	r3, [r7, #16]
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d1e5      	bne.n	8002e86 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	2220      	movs	r2, #32
 8002ebe:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	2200      	movs	r2, #0
 8002ec6:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8002ec8:	bf00      	nop
 8002eca:	3754      	adds	r7, #84	@ 0x54
 8002ecc:	46bd      	mov	sp, r7
 8002ece:	bc80      	pop	{r7}
 8002ed0:	4770      	bx	lr

08002ed2 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002ed2:	b580      	push	{r7, lr}
 8002ed4:	b084      	sub	sp, #16
 8002ed6:	af00      	add	r7, sp, #0
 8002ed8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ede:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	2200      	movs	r2, #0
 8002ee4:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	2200      	movs	r2, #0
 8002eea:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002eec:	68f8      	ldr	r0, [r7, #12]
 8002eee:	f7ff ff7a 	bl	8002de6 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002ef2:	bf00      	nop
 8002ef4:	3710      	adds	r7, #16
 8002ef6:	46bd      	mov	sp, r7
 8002ef8:	bd80      	pop	{r7, pc}

08002efa <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002efa:	b480      	push	{r7}
 8002efc:	b085      	sub	sp, #20
 8002efe:	af00      	add	r7, sp, #0
 8002f00:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002f08:	b2db      	uxtb	r3, r3
 8002f0a:	2b21      	cmp	r3, #33	@ 0x21
 8002f0c:	d13e      	bne.n	8002f8c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	689b      	ldr	r3, [r3, #8]
 8002f12:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002f16:	d114      	bne.n	8002f42 <UART_Transmit_IT+0x48>
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	691b      	ldr	r3, [r3, #16]
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d110      	bne.n	8002f42 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	6a1b      	ldr	r3, [r3, #32]
 8002f24:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	881b      	ldrh	r3, [r3, #0]
 8002f2a:	461a      	mov	r2, r3
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002f34:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	6a1b      	ldr	r3, [r3, #32]
 8002f3a:	1c9a      	adds	r2, r3, #2
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	621a      	str	r2, [r3, #32]
 8002f40:	e008      	b.n	8002f54 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	6a1b      	ldr	r3, [r3, #32]
 8002f46:	1c59      	adds	r1, r3, #1
 8002f48:	687a      	ldr	r2, [r7, #4]
 8002f4a:	6211      	str	r1, [r2, #32]
 8002f4c:	781a      	ldrb	r2, [r3, #0]
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002f58:	b29b      	uxth	r3, r3
 8002f5a:	3b01      	subs	r3, #1
 8002f5c:	b29b      	uxth	r3, r3
 8002f5e:	687a      	ldr	r2, [r7, #4]
 8002f60:	4619      	mov	r1, r3
 8002f62:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d10f      	bne.n	8002f88 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	68da      	ldr	r2, [r3, #12]
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002f76:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	68da      	ldr	r2, [r3, #12]
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002f86:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002f88:	2300      	movs	r3, #0
 8002f8a:	e000      	b.n	8002f8e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8002f8c:	2302      	movs	r3, #2
  }
}
 8002f8e:	4618      	mov	r0, r3
 8002f90:	3714      	adds	r7, #20
 8002f92:	46bd      	mov	sp, r7
 8002f94:	bc80      	pop	{r7}
 8002f96:	4770      	bx	lr

08002f98 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002f98:	b580      	push	{r7, lr}
 8002f9a:	b082      	sub	sp, #8
 8002f9c:	af00      	add	r7, sp, #0
 8002f9e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	68da      	ldr	r2, [r3, #12]
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002fae:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	2220      	movs	r2, #32
 8002fb4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002fb8:	6878      	ldr	r0, [r7, #4]
 8002fba:	f7fd f8cf 	bl	800015c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002fbe:	2300      	movs	r3, #0
}
 8002fc0:	4618      	mov	r0, r3
 8002fc2:	3708      	adds	r7, #8
 8002fc4:	46bd      	mov	sp, r7
 8002fc6:	bd80      	pop	{r7, pc}

08002fc8 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002fc8:	b580      	push	{r7, lr}
 8002fca:	b08c      	sub	sp, #48	@ 0x30
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002fd6:	b2db      	uxtb	r3, r3
 8002fd8:	2b22      	cmp	r3, #34	@ 0x22
 8002fda:	f040 80ae 	bne.w	800313a <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	689b      	ldr	r3, [r3, #8]
 8002fe2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002fe6:	d117      	bne.n	8003018 <UART_Receive_IT+0x50>
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	691b      	ldr	r3, [r3, #16]
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d113      	bne.n	8003018 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8002ff0:	2300      	movs	r3, #0
 8002ff2:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ff8:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	685b      	ldr	r3, [r3, #4]
 8003000:	b29b      	uxth	r3, r3
 8003002:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003006:	b29a      	uxth	r2, r3
 8003008:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800300a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003010:	1c9a      	adds	r2, r3, #2
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	629a      	str	r2, [r3, #40]	@ 0x28
 8003016:	e026      	b.n	8003066 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800301c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 800301e:	2300      	movs	r3, #0
 8003020:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	689b      	ldr	r3, [r3, #8]
 8003026:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800302a:	d007      	beq.n	800303c <UART_Receive_IT+0x74>
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	689b      	ldr	r3, [r3, #8]
 8003030:	2b00      	cmp	r3, #0
 8003032:	d10a      	bne.n	800304a <UART_Receive_IT+0x82>
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	691b      	ldr	r3, [r3, #16]
 8003038:	2b00      	cmp	r3, #0
 800303a:	d106      	bne.n	800304a <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	685b      	ldr	r3, [r3, #4]
 8003042:	b2da      	uxtb	r2, r3
 8003044:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003046:	701a      	strb	r2, [r3, #0]
 8003048:	e008      	b.n	800305c <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	685b      	ldr	r3, [r3, #4]
 8003050:	b2db      	uxtb	r3, r3
 8003052:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003056:	b2da      	uxtb	r2, r3
 8003058:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800305a:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003060:	1c5a      	adds	r2, r3, #1
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800306a:	b29b      	uxth	r3, r3
 800306c:	3b01      	subs	r3, #1
 800306e:	b29b      	uxth	r3, r3
 8003070:	687a      	ldr	r2, [r7, #4]
 8003072:	4619      	mov	r1, r3
 8003074:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8003076:	2b00      	cmp	r3, #0
 8003078:	d15d      	bne.n	8003136 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	68da      	ldr	r2, [r3, #12]
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	f022 0220 	bic.w	r2, r2, #32
 8003088:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	68da      	ldr	r2, [r3, #12]
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003098:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	695a      	ldr	r2, [r3, #20]
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	f022 0201 	bic.w	r2, r2, #1
 80030a8:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	2220      	movs	r2, #32
 80030ae:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	2200      	movs	r2, #0
 80030b6:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030bc:	2b01      	cmp	r3, #1
 80030be:	d135      	bne.n	800312c <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	2200      	movs	r2, #0
 80030c4:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	330c      	adds	r3, #12
 80030cc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030ce:	697b      	ldr	r3, [r7, #20]
 80030d0:	e853 3f00 	ldrex	r3, [r3]
 80030d4:	613b      	str	r3, [r7, #16]
   return(result);
 80030d6:	693b      	ldr	r3, [r7, #16]
 80030d8:	f023 0310 	bic.w	r3, r3, #16
 80030dc:	627b      	str	r3, [r7, #36]	@ 0x24
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	330c      	adds	r3, #12
 80030e4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80030e6:	623a      	str	r2, [r7, #32]
 80030e8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030ea:	69f9      	ldr	r1, [r7, #28]
 80030ec:	6a3a      	ldr	r2, [r7, #32]
 80030ee:	e841 2300 	strex	r3, r2, [r1]
 80030f2:	61bb      	str	r3, [r7, #24]
   return(result);
 80030f4:	69bb      	ldr	r3, [r7, #24]
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d1e5      	bne.n	80030c6 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	f003 0310 	and.w	r3, r3, #16
 8003104:	2b10      	cmp	r3, #16
 8003106:	d10a      	bne.n	800311e <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003108:	2300      	movs	r3, #0
 800310a:	60fb      	str	r3, [r7, #12]
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	60fb      	str	r3, [r7, #12]
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	685b      	ldr	r3, [r3, #4]
 800311a:	60fb      	str	r3, [r7, #12]
 800311c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003122:	4619      	mov	r1, r3
 8003124:	6878      	ldr	r0, [r7, #4]
 8003126:	f7ff fe67 	bl	8002df8 <HAL_UARTEx_RxEventCallback>
 800312a:	e002      	b.n	8003132 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800312c:	6878      	ldr	r0, [r7, #4]
 800312e:	f7ff fe51 	bl	8002dd4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003132:	2300      	movs	r3, #0
 8003134:	e002      	b.n	800313c <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8003136:	2300      	movs	r3, #0
 8003138:	e000      	b.n	800313c <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800313a:	2302      	movs	r3, #2
  }
}
 800313c:	4618      	mov	r0, r3
 800313e:	3730      	adds	r7, #48	@ 0x30
 8003140:	46bd      	mov	sp, r7
 8003142:	bd80      	pop	{r7, pc}

08003144 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003144:	b580      	push	{r7, lr}
 8003146:	b084      	sub	sp, #16
 8003148:	af00      	add	r7, sp, #0
 800314a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	691b      	ldr	r3, [r3, #16]
 8003152:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	68da      	ldr	r2, [r3, #12]
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	430a      	orrs	r2, r1
 8003160:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	689a      	ldr	r2, [r3, #8]
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	691b      	ldr	r3, [r3, #16]
 800316a:	431a      	orrs	r2, r3
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	695b      	ldr	r3, [r3, #20]
 8003170:	4313      	orrs	r3, r2
 8003172:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	68db      	ldr	r3, [r3, #12]
 800317a:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 800317e:	f023 030c 	bic.w	r3, r3, #12
 8003182:	687a      	ldr	r2, [r7, #4]
 8003184:	6812      	ldr	r2, [r2, #0]
 8003186:	68b9      	ldr	r1, [r7, #8]
 8003188:	430b      	orrs	r3, r1
 800318a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	695b      	ldr	r3, [r3, #20]
 8003192:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	699a      	ldr	r2, [r3, #24]
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	430a      	orrs	r2, r1
 80031a0:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	4a2c      	ldr	r2, [pc, #176]	@ (8003258 <UART_SetConfig+0x114>)
 80031a8:	4293      	cmp	r3, r2
 80031aa:	d103      	bne.n	80031b4 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80031ac:	f7fe fed6 	bl	8001f5c <HAL_RCC_GetPCLK2Freq>
 80031b0:	60f8      	str	r0, [r7, #12]
 80031b2:	e002      	b.n	80031ba <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80031b4:	f7fe febe 	bl	8001f34 <HAL_RCC_GetPCLK1Freq>
 80031b8:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80031ba:	68fa      	ldr	r2, [r7, #12]
 80031bc:	4613      	mov	r3, r2
 80031be:	009b      	lsls	r3, r3, #2
 80031c0:	4413      	add	r3, r2
 80031c2:	009a      	lsls	r2, r3, #2
 80031c4:	441a      	add	r2, r3
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	685b      	ldr	r3, [r3, #4]
 80031ca:	009b      	lsls	r3, r3, #2
 80031cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80031d0:	4a22      	ldr	r2, [pc, #136]	@ (800325c <UART_SetConfig+0x118>)
 80031d2:	fba2 2303 	umull	r2, r3, r2, r3
 80031d6:	095b      	lsrs	r3, r3, #5
 80031d8:	0119      	lsls	r1, r3, #4
 80031da:	68fa      	ldr	r2, [r7, #12]
 80031dc:	4613      	mov	r3, r2
 80031de:	009b      	lsls	r3, r3, #2
 80031e0:	4413      	add	r3, r2
 80031e2:	009a      	lsls	r2, r3, #2
 80031e4:	441a      	add	r2, r3
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	685b      	ldr	r3, [r3, #4]
 80031ea:	009b      	lsls	r3, r3, #2
 80031ec:	fbb2 f2f3 	udiv	r2, r2, r3
 80031f0:	4b1a      	ldr	r3, [pc, #104]	@ (800325c <UART_SetConfig+0x118>)
 80031f2:	fba3 0302 	umull	r0, r3, r3, r2
 80031f6:	095b      	lsrs	r3, r3, #5
 80031f8:	2064      	movs	r0, #100	@ 0x64
 80031fa:	fb00 f303 	mul.w	r3, r0, r3
 80031fe:	1ad3      	subs	r3, r2, r3
 8003200:	011b      	lsls	r3, r3, #4
 8003202:	3332      	adds	r3, #50	@ 0x32
 8003204:	4a15      	ldr	r2, [pc, #84]	@ (800325c <UART_SetConfig+0x118>)
 8003206:	fba2 2303 	umull	r2, r3, r2, r3
 800320a:	095b      	lsrs	r3, r3, #5
 800320c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003210:	4419      	add	r1, r3
 8003212:	68fa      	ldr	r2, [r7, #12]
 8003214:	4613      	mov	r3, r2
 8003216:	009b      	lsls	r3, r3, #2
 8003218:	4413      	add	r3, r2
 800321a:	009a      	lsls	r2, r3, #2
 800321c:	441a      	add	r2, r3
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	685b      	ldr	r3, [r3, #4]
 8003222:	009b      	lsls	r3, r3, #2
 8003224:	fbb2 f2f3 	udiv	r2, r2, r3
 8003228:	4b0c      	ldr	r3, [pc, #48]	@ (800325c <UART_SetConfig+0x118>)
 800322a:	fba3 0302 	umull	r0, r3, r3, r2
 800322e:	095b      	lsrs	r3, r3, #5
 8003230:	2064      	movs	r0, #100	@ 0x64
 8003232:	fb00 f303 	mul.w	r3, r0, r3
 8003236:	1ad3      	subs	r3, r2, r3
 8003238:	011b      	lsls	r3, r3, #4
 800323a:	3332      	adds	r3, #50	@ 0x32
 800323c:	4a07      	ldr	r2, [pc, #28]	@ (800325c <UART_SetConfig+0x118>)
 800323e:	fba2 2303 	umull	r2, r3, r2, r3
 8003242:	095b      	lsrs	r3, r3, #5
 8003244:	f003 020f 	and.w	r2, r3, #15
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	440a      	add	r2, r1
 800324e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003250:	bf00      	nop
 8003252:	3710      	adds	r7, #16
 8003254:	46bd      	mov	sp, r7
 8003256:	bd80      	pop	{r7, pc}
 8003258:	40013800 	.word	0x40013800
 800325c:	51eb851f 	.word	0x51eb851f

08003260 <siprintf>:
 8003260:	b40e      	push	{r1, r2, r3}
 8003262:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8003266:	b500      	push	{lr}
 8003268:	b09c      	sub	sp, #112	@ 0x70
 800326a:	ab1d      	add	r3, sp, #116	@ 0x74
 800326c:	9002      	str	r0, [sp, #8]
 800326e:	9006      	str	r0, [sp, #24]
 8003270:	9107      	str	r1, [sp, #28]
 8003272:	9104      	str	r1, [sp, #16]
 8003274:	4808      	ldr	r0, [pc, #32]	@ (8003298 <siprintf+0x38>)
 8003276:	4909      	ldr	r1, [pc, #36]	@ (800329c <siprintf+0x3c>)
 8003278:	f853 2b04 	ldr.w	r2, [r3], #4
 800327c:	9105      	str	r1, [sp, #20]
 800327e:	6800      	ldr	r0, [r0, #0]
 8003280:	a902      	add	r1, sp, #8
 8003282:	9301      	str	r3, [sp, #4]
 8003284:	f000 f992 	bl	80035ac <_svfiprintf_r>
 8003288:	2200      	movs	r2, #0
 800328a:	9b02      	ldr	r3, [sp, #8]
 800328c:	701a      	strb	r2, [r3, #0]
 800328e:	b01c      	add	sp, #112	@ 0x70
 8003290:	f85d eb04 	ldr.w	lr, [sp], #4
 8003294:	b003      	add	sp, #12
 8003296:	4770      	bx	lr
 8003298:	20000080 	.word	0x20000080
 800329c:	ffff0208 	.word	0xffff0208

080032a0 <memset>:
 80032a0:	4603      	mov	r3, r0
 80032a2:	4402      	add	r2, r0
 80032a4:	4293      	cmp	r3, r2
 80032a6:	d100      	bne.n	80032aa <memset+0xa>
 80032a8:	4770      	bx	lr
 80032aa:	f803 1b01 	strb.w	r1, [r3], #1
 80032ae:	e7f9      	b.n	80032a4 <memset+0x4>

080032b0 <__errno>:
 80032b0:	4b01      	ldr	r3, [pc, #4]	@ (80032b8 <__errno+0x8>)
 80032b2:	6818      	ldr	r0, [r3, #0]
 80032b4:	4770      	bx	lr
 80032b6:	bf00      	nop
 80032b8:	20000080 	.word	0x20000080

080032bc <__libc_init_array>:
 80032bc:	b570      	push	{r4, r5, r6, lr}
 80032be:	2600      	movs	r6, #0
 80032c0:	4d0c      	ldr	r5, [pc, #48]	@ (80032f4 <__libc_init_array+0x38>)
 80032c2:	4c0d      	ldr	r4, [pc, #52]	@ (80032f8 <__libc_init_array+0x3c>)
 80032c4:	1b64      	subs	r4, r4, r5
 80032c6:	10a4      	asrs	r4, r4, #2
 80032c8:	42a6      	cmp	r6, r4
 80032ca:	d109      	bne.n	80032e0 <__libc_init_array+0x24>
 80032cc:	f000 fc78 	bl	8003bc0 <_init>
 80032d0:	2600      	movs	r6, #0
 80032d2:	4d0a      	ldr	r5, [pc, #40]	@ (80032fc <__libc_init_array+0x40>)
 80032d4:	4c0a      	ldr	r4, [pc, #40]	@ (8003300 <__libc_init_array+0x44>)
 80032d6:	1b64      	subs	r4, r4, r5
 80032d8:	10a4      	asrs	r4, r4, #2
 80032da:	42a6      	cmp	r6, r4
 80032dc:	d105      	bne.n	80032ea <__libc_init_array+0x2e>
 80032de:	bd70      	pop	{r4, r5, r6, pc}
 80032e0:	f855 3b04 	ldr.w	r3, [r5], #4
 80032e4:	4798      	blx	r3
 80032e6:	3601      	adds	r6, #1
 80032e8:	e7ee      	b.n	80032c8 <__libc_init_array+0xc>
 80032ea:	f855 3b04 	ldr.w	r3, [r5], #4
 80032ee:	4798      	blx	r3
 80032f0:	3601      	adds	r6, #1
 80032f2:	e7f2      	b.n	80032da <__libc_init_array+0x1e>
 80032f4:	08003d54 	.word	0x08003d54
 80032f8:	08003d54 	.word	0x08003d54
 80032fc:	08003d54 	.word	0x08003d54
 8003300:	08003d58 	.word	0x08003d58

08003304 <__retarget_lock_acquire_recursive>:
 8003304:	4770      	bx	lr

08003306 <__retarget_lock_release_recursive>:
 8003306:	4770      	bx	lr

08003308 <_free_r>:
 8003308:	b538      	push	{r3, r4, r5, lr}
 800330a:	4605      	mov	r5, r0
 800330c:	2900      	cmp	r1, #0
 800330e:	d040      	beq.n	8003392 <_free_r+0x8a>
 8003310:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003314:	1f0c      	subs	r4, r1, #4
 8003316:	2b00      	cmp	r3, #0
 8003318:	bfb8      	it	lt
 800331a:	18e4      	addlt	r4, r4, r3
 800331c:	f000 f8de 	bl	80034dc <__malloc_lock>
 8003320:	4a1c      	ldr	r2, [pc, #112]	@ (8003394 <_free_r+0x8c>)
 8003322:	6813      	ldr	r3, [r2, #0]
 8003324:	b933      	cbnz	r3, 8003334 <_free_r+0x2c>
 8003326:	6063      	str	r3, [r4, #4]
 8003328:	6014      	str	r4, [r2, #0]
 800332a:	4628      	mov	r0, r5
 800332c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003330:	f000 b8da 	b.w	80034e8 <__malloc_unlock>
 8003334:	42a3      	cmp	r3, r4
 8003336:	d908      	bls.n	800334a <_free_r+0x42>
 8003338:	6820      	ldr	r0, [r4, #0]
 800333a:	1821      	adds	r1, r4, r0
 800333c:	428b      	cmp	r3, r1
 800333e:	bf01      	itttt	eq
 8003340:	6819      	ldreq	r1, [r3, #0]
 8003342:	685b      	ldreq	r3, [r3, #4]
 8003344:	1809      	addeq	r1, r1, r0
 8003346:	6021      	streq	r1, [r4, #0]
 8003348:	e7ed      	b.n	8003326 <_free_r+0x1e>
 800334a:	461a      	mov	r2, r3
 800334c:	685b      	ldr	r3, [r3, #4]
 800334e:	b10b      	cbz	r3, 8003354 <_free_r+0x4c>
 8003350:	42a3      	cmp	r3, r4
 8003352:	d9fa      	bls.n	800334a <_free_r+0x42>
 8003354:	6811      	ldr	r1, [r2, #0]
 8003356:	1850      	adds	r0, r2, r1
 8003358:	42a0      	cmp	r0, r4
 800335a:	d10b      	bne.n	8003374 <_free_r+0x6c>
 800335c:	6820      	ldr	r0, [r4, #0]
 800335e:	4401      	add	r1, r0
 8003360:	1850      	adds	r0, r2, r1
 8003362:	4283      	cmp	r3, r0
 8003364:	6011      	str	r1, [r2, #0]
 8003366:	d1e0      	bne.n	800332a <_free_r+0x22>
 8003368:	6818      	ldr	r0, [r3, #0]
 800336a:	685b      	ldr	r3, [r3, #4]
 800336c:	4408      	add	r0, r1
 800336e:	6010      	str	r0, [r2, #0]
 8003370:	6053      	str	r3, [r2, #4]
 8003372:	e7da      	b.n	800332a <_free_r+0x22>
 8003374:	d902      	bls.n	800337c <_free_r+0x74>
 8003376:	230c      	movs	r3, #12
 8003378:	602b      	str	r3, [r5, #0]
 800337a:	e7d6      	b.n	800332a <_free_r+0x22>
 800337c:	6820      	ldr	r0, [r4, #0]
 800337e:	1821      	adds	r1, r4, r0
 8003380:	428b      	cmp	r3, r1
 8003382:	bf01      	itttt	eq
 8003384:	6819      	ldreq	r1, [r3, #0]
 8003386:	685b      	ldreq	r3, [r3, #4]
 8003388:	1809      	addeq	r1, r1, r0
 800338a:	6021      	streq	r1, [r4, #0]
 800338c:	6063      	str	r3, [r4, #4]
 800338e:	6054      	str	r4, [r2, #4]
 8003390:	e7cb      	b.n	800332a <_free_r+0x22>
 8003392:	bd38      	pop	{r3, r4, r5, pc}
 8003394:	20000448 	.word	0x20000448

08003398 <sbrk_aligned>:
 8003398:	b570      	push	{r4, r5, r6, lr}
 800339a:	4e0f      	ldr	r6, [pc, #60]	@ (80033d8 <sbrk_aligned+0x40>)
 800339c:	460c      	mov	r4, r1
 800339e:	6831      	ldr	r1, [r6, #0]
 80033a0:	4605      	mov	r5, r0
 80033a2:	b911      	cbnz	r1, 80033aa <sbrk_aligned+0x12>
 80033a4:	f000 fbaa 	bl	8003afc <_sbrk_r>
 80033a8:	6030      	str	r0, [r6, #0]
 80033aa:	4621      	mov	r1, r4
 80033ac:	4628      	mov	r0, r5
 80033ae:	f000 fba5 	bl	8003afc <_sbrk_r>
 80033b2:	1c43      	adds	r3, r0, #1
 80033b4:	d103      	bne.n	80033be <sbrk_aligned+0x26>
 80033b6:	f04f 34ff 	mov.w	r4, #4294967295
 80033ba:	4620      	mov	r0, r4
 80033bc:	bd70      	pop	{r4, r5, r6, pc}
 80033be:	1cc4      	adds	r4, r0, #3
 80033c0:	f024 0403 	bic.w	r4, r4, #3
 80033c4:	42a0      	cmp	r0, r4
 80033c6:	d0f8      	beq.n	80033ba <sbrk_aligned+0x22>
 80033c8:	1a21      	subs	r1, r4, r0
 80033ca:	4628      	mov	r0, r5
 80033cc:	f000 fb96 	bl	8003afc <_sbrk_r>
 80033d0:	3001      	adds	r0, #1
 80033d2:	d1f2      	bne.n	80033ba <sbrk_aligned+0x22>
 80033d4:	e7ef      	b.n	80033b6 <sbrk_aligned+0x1e>
 80033d6:	bf00      	nop
 80033d8:	20000444 	.word	0x20000444

080033dc <_malloc_r>:
 80033dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80033e0:	1ccd      	adds	r5, r1, #3
 80033e2:	f025 0503 	bic.w	r5, r5, #3
 80033e6:	3508      	adds	r5, #8
 80033e8:	2d0c      	cmp	r5, #12
 80033ea:	bf38      	it	cc
 80033ec:	250c      	movcc	r5, #12
 80033ee:	2d00      	cmp	r5, #0
 80033f0:	4606      	mov	r6, r0
 80033f2:	db01      	blt.n	80033f8 <_malloc_r+0x1c>
 80033f4:	42a9      	cmp	r1, r5
 80033f6:	d904      	bls.n	8003402 <_malloc_r+0x26>
 80033f8:	230c      	movs	r3, #12
 80033fa:	6033      	str	r3, [r6, #0]
 80033fc:	2000      	movs	r0, #0
 80033fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003402:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80034d8 <_malloc_r+0xfc>
 8003406:	f000 f869 	bl	80034dc <__malloc_lock>
 800340a:	f8d8 3000 	ldr.w	r3, [r8]
 800340e:	461c      	mov	r4, r3
 8003410:	bb44      	cbnz	r4, 8003464 <_malloc_r+0x88>
 8003412:	4629      	mov	r1, r5
 8003414:	4630      	mov	r0, r6
 8003416:	f7ff ffbf 	bl	8003398 <sbrk_aligned>
 800341a:	1c43      	adds	r3, r0, #1
 800341c:	4604      	mov	r4, r0
 800341e:	d158      	bne.n	80034d2 <_malloc_r+0xf6>
 8003420:	f8d8 4000 	ldr.w	r4, [r8]
 8003424:	4627      	mov	r7, r4
 8003426:	2f00      	cmp	r7, #0
 8003428:	d143      	bne.n	80034b2 <_malloc_r+0xd6>
 800342a:	2c00      	cmp	r4, #0
 800342c:	d04b      	beq.n	80034c6 <_malloc_r+0xea>
 800342e:	6823      	ldr	r3, [r4, #0]
 8003430:	4639      	mov	r1, r7
 8003432:	4630      	mov	r0, r6
 8003434:	eb04 0903 	add.w	r9, r4, r3
 8003438:	f000 fb60 	bl	8003afc <_sbrk_r>
 800343c:	4581      	cmp	r9, r0
 800343e:	d142      	bne.n	80034c6 <_malloc_r+0xea>
 8003440:	6821      	ldr	r1, [r4, #0]
 8003442:	4630      	mov	r0, r6
 8003444:	1a6d      	subs	r5, r5, r1
 8003446:	4629      	mov	r1, r5
 8003448:	f7ff ffa6 	bl	8003398 <sbrk_aligned>
 800344c:	3001      	adds	r0, #1
 800344e:	d03a      	beq.n	80034c6 <_malloc_r+0xea>
 8003450:	6823      	ldr	r3, [r4, #0]
 8003452:	442b      	add	r3, r5
 8003454:	6023      	str	r3, [r4, #0]
 8003456:	f8d8 3000 	ldr.w	r3, [r8]
 800345a:	685a      	ldr	r2, [r3, #4]
 800345c:	bb62      	cbnz	r2, 80034b8 <_malloc_r+0xdc>
 800345e:	f8c8 7000 	str.w	r7, [r8]
 8003462:	e00f      	b.n	8003484 <_malloc_r+0xa8>
 8003464:	6822      	ldr	r2, [r4, #0]
 8003466:	1b52      	subs	r2, r2, r5
 8003468:	d420      	bmi.n	80034ac <_malloc_r+0xd0>
 800346a:	2a0b      	cmp	r2, #11
 800346c:	d917      	bls.n	800349e <_malloc_r+0xc2>
 800346e:	1961      	adds	r1, r4, r5
 8003470:	42a3      	cmp	r3, r4
 8003472:	6025      	str	r5, [r4, #0]
 8003474:	bf18      	it	ne
 8003476:	6059      	strne	r1, [r3, #4]
 8003478:	6863      	ldr	r3, [r4, #4]
 800347a:	bf08      	it	eq
 800347c:	f8c8 1000 	streq.w	r1, [r8]
 8003480:	5162      	str	r2, [r4, r5]
 8003482:	604b      	str	r3, [r1, #4]
 8003484:	4630      	mov	r0, r6
 8003486:	f000 f82f 	bl	80034e8 <__malloc_unlock>
 800348a:	f104 000b 	add.w	r0, r4, #11
 800348e:	1d23      	adds	r3, r4, #4
 8003490:	f020 0007 	bic.w	r0, r0, #7
 8003494:	1ac2      	subs	r2, r0, r3
 8003496:	bf1c      	itt	ne
 8003498:	1a1b      	subne	r3, r3, r0
 800349a:	50a3      	strne	r3, [r4, r2]
 800349c:	e7af      	b.n	80033fe <_malloc_r+0x22>
 800349e:	6862      	ldr	r2, [r4, #4]
 80034a0:	42a3      	cmp	r3, r4
 80034a2:	bf0c      	ite	eq
 80034a4:	f8c8 2000 	streq.w	r2, [r8]
 80034a8:	605a      	strne	r2, [r3, #4]
 80034aa:	e7eb      	b.n	8003484 <_malloc_r+0xa8>
 80034ac:	4623      	mov	r3, r4
 80034ae:	6864      	ldr	r4, [r4, #4]
 80034b0:	e7ae      	b.n	8003410 <_malloc_r+0x34>
 80034b2:	463c      	mov	r4, r7
 80034b4:	687f      	ldr	r7, [r7, #4]
 80034b6:	e7b6      	b.n	8003426 <_malloc_r+0x4a>
 80034b8:	461a      	mov	r2, r3
 80034ba:	685b      	ldr	r3, [r3, #4]
 80034bc:	42a3      	cmp	r3, r4
 80034be:	d1fb      	bne.n	80034b8 <_malloc_r+0xdc>
 80034c0:	2300      	movs	r3, #0
 80034c2:	6053      	str	r3, [r2, #4]
 80034c4:	e7de      	b.n	8003484 <_malloc_r+0xa8>
 80034c6:	230c      	movs	r3, #12
 80034c8:	4630      	mov	r0, r6
 80034ca:	6033      	str	r3, [r6, #0]
 80034cc:	f000 f80c 	bl	80034e8 <__malloc_unlock>
 80034d0:	e794      	b.n	80033fc <_malloc_r+0x20>
 80034d2:	6005      	str	r5, [r0, #0]
 80034d4:	e7d6      	b.n	8003484 <_malloc_r+0xa8>
 80034d6:	bf00      	nop
 80034d8:	20000448 	.word	0x20000448

080034dc <__malloc_lock>:
 80034dc:	4801      	ldr	r0, [pc, #4]	@ (80034e4 <__malloc_lock+0x8>)
 80034de:	f7ff bf11 	b.w	8003304 <__retarget_lock_acquire_recursive>
 80034e2:	bf00      	nop
 80034e4:	20000440 	.word	0x20000440

080034e8 <__malloc_unlock>:
 80034e8:	4801      	ldr	r0, [pc, #4]	@ (80034f0 <__malloc_unlock+0x8>)
 80034ea:	f7ff bf0c 	b.w	8003306 <__retarget_lock_release_recursive>
 80034ee:	bf00      	nop
 80034f0:	20000440 	.word	0x20000440

080034f4 <__ssputs_r>:
 80034f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80034f8:	461f      	mov	r7, r3
 80034fa:	688e      	ldr	r6, [r1, #8]
 80034fc:	4682      	mov	sl, r0
 80034fe:	42be      	cmp	r6, r7
 8003500:	460c      	mov	r4, r1
 8003502:	4690      	mov	r8, r2
 8003504:	680b      	ldr	r3, [r1, #0]
 8003506:	d82d      	bhi.n	8003564 <__ssputs_r+0x70>
 8003508:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800350c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8003510:	d026      	beq.n	8003560 <__ssputs_r+0x6c>
 8003512:	6965      	ldr	r5, [r4, #20]
 8003514:	6909      	ldr	r1, [r1, #16]
 8003516:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800351a:	eba3 0901 	sub.w	r9, r3, r1
 800351e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003522:	1c7b      	adds	r3, r7, #1
 8003524:	444b      	add	r3, r9
 8003526:	106d      	asrs	r5, r5, #1
 8003528:	429d      	cmp	r5, r3
 800352a:	bf38      	it	cc
 800352c:	461d      	movcc	r5, r3
 800352e:	0553      	lsls	r3, r2, #21
 8003530:	d527      	bpl.n	8003582 <__ssputs_r+0x8e>
 8003532:	4629      	mov	r1, r5
 8003534:	f7ff ff52 	bl	80033dc <_malloc_r>
 8003538:	4606      	mov	r6, r0
 800353a:	b360      	cbz	r0, 8003596 <__ssputs_r+0xa2>
 800353c:	464a      	mov	r2, r9
 800353e:	6921      	ldr	r1, [r4, #16]
 8003540:	f000 fafa 	bl	8003b38 <memcpy>
 8003544:	89a3      	ldrh	r3, [r4, #12]
 8003546:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800354a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800354e:	81a3      	strh	r3, [r4, #12]
 8003550:	6126      	str	r6, [r4, #16]
 8003552:	444e      	add	r6, r9
 8003554:	6026      	str	r6, [r4, #0]
 8003556:	463e      	mov	r6, r7
 8003558:	6165      	str	r5, [r4, #20]
 800355a:	eba5 0509 	sub.w	r5, r5, r9
 800355e:	60a5      	str	r5, [r4, #8]
 8003560:	42be      	cmp	r6, r7
 8003562:	d900      	bls.n	8003566 <__ssputs_r+0x72>
 8003564:	463e      	mov	r6, r7
 8003566:	4632      	mov	r2, r6
 8003568:	4641      	mov	r1, r8
 800356a:	6820      	ldr	r0, [r4, #0]
 800356c:	f000 faac 	bl	8003ac8 <memmove>
 8003570:	2000      	movs	r0, #0
 8003572:	68a3      	ldr	r3, [r4, #8]
 8003574:	1b9b      	subs	r3, r3, r6
 8003576:	60a3      	str	r3, [r4, #8]
 8003578:	6823      	ldr	r3, [r4, #0]
 800357a:	4433      	add	r3, r6
 800357c:	6023      	str	r3, [r4, #0]
 800357e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003582:	462a      	mov	r2, r5
 8003584:	f000 fae6 	bl	8003b54 <_realloc_r>
 8003588:	4606      	mov	r6, r0
 800358a:	2800      	cmp	r0, #0
 800358c:	d1e0      	bne.n	8003550 <__ssputs_r+0x5c>
 800358e:	4650      	mov	r0, sl
 8003590:	6921      	ldr	r1, [r4, #16]
 8003592:	f7ff feb9 	bl	8003308 <_free_r>
 8003596:	230c      	movs	r3, #12
 8003598:	f8ca 3000 	str.w	r3, [sl]
 800359c:	89a3      	ldrh	r3, [r4, #12]
 800359e:	f04f 30ff 	mov.w	r0, #4294967295
 80035a2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80035a6:	81a3      	strh	r3, [r4, #12]
 80035a8:	e7e9      	b.n	800357e <__ssputs_r+0x8a>
	...

080035ac <_svfiprintf_r>:
 80035ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80035b0:	4698      	mov	r8, r3
 80035b2:	898b      	ldrh	r3, [r1, #12]
 80035b4:	4607      	mov	r7, r0
 80035b6:	061b      	lsls	r3, r3, #24
 80035b8:	460d      	mov	r5, r1
 80035ba:	4614      	mov	r4, r2
 80035bc:	b09d      	sub	sp, #116	@ 0x74
 80035be:	d510      	bpl.n	80035e2 <_svfiprintf_r+0x36>
 80035c0:	690b      	ldr	r3, [r1, #16]
 80035c2:	b973      	cbnz	r3, 80035e2 <_svfiprintf_r+0x36>
 80035c4:	2140      	movs	r1, #64	@ 0x40
 80035c6:	f7ff ff09 	bl	80033dc <_malloc_r>
 80035ca:	6028      	str	r0, [r5, #0]
 80035cc:	6128      	str	r0, [r5, #16]
 80035ce:	b930      	cbnz	r0, 80035de <_svfiprintf_r+0x32>
 80035d0:	230c      	movs	r3, #12
 80035d2:	603b      	str	r3, [r7, #0]
 80035d4:	f04f 30ff 	mov.w	r0, #4294967295
 80035d8:	b01d      	add	sp, #116	@ 0x74
 80035da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80035de:	2340      	movs	r3, #64	@ 0x40
 80035e0:	616b      	str	r3, [r5, #20]
 80035e2:	2300      	movs	r3, #0
 80035e4:	9309      	str	r3, [sp, #36]	@ 0x24
 80035e6:	2320      	movs	r3, #32
 80035e8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80035ec:	2330      	movs	r3, #48	@ 0x30
 80035ee:	f04f 0901 	mov.w	r9, #1
 80035f2:	f8cd 800c 	str.w	r8, [sp, #12]
 80035f6:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8003790 <_svfiprintf_r+0x1e4>
 80035fa:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80035fe:	4623      	mov	r3, r4
 8003600:	469a      	mov	sl, r3
 8003602:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003606:	b10a      	cbz	r2, 800360c <_svfiprintf_r+0x60>
 8003608:	2a25      	cmp	r2, #37	@ 0x25
 800360a:	d1f9      	bne.n	8003600 <_svfiprintf_r+0x54>
 800360c:	ebba 0b04 	subs.w	fp, sl, r4
 8003610:	d00b      	beq.n	800362a <_svfiprintf_r+0x7e>
 8003612:	465b      	mov	r3, fp
 8003614:	4622      	mov	r2, r4
 8003616:	4629      	mov	r1, r5
 8003618:	4638      	mov	r0, r7
 800361a:	f7ff ff6b 	bl	80034f4 <__ssputs_r>
 800361e:	3001      	adds	r0, #1
 8003620:	f000 80a7 	beq.w	8003772 <_svfiprintf_r+0x1c6>
 8003624:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8003626:	445a      	add	r2, fp
 8003628:	9209      	str	r2, [sp, #36]	@ 0x24
 800362a:	f89a 3000 	ldrb.w	r3, [sl]
 800362e:	2b00      	cmp	r3, #0
 8003630:	f000 809f 	beq.w	8003772 <_svfiprintf_r+0x1c6>
 8003634:	2300      	movs	r3, #0
 8003636:	f04f 32ff 	mov.w	r2, #4294967295
 800363a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800363e:	f10a 0a01 	add.w	sl, sl, #1
 8003642:	9304      	str	r3, [sp, #16]
 8003644:	9307      	str	r3, [sp, #28]
 8003646:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800364a:	931a      	str	r3, [sp, #104]	@ 0x68
 800364c:	4654      	mov	r4, sl
 800364e:	2205      	movs	r2, #5
 8003650:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003654:	484e      	ldr	r0, [pc, #312]	@ (8003790 <_svfiprintf_r+0x1e4>)
 8003656:	f000 fa61 	bl	8003b1c <memchr>
 800365a:	9a04      	ldr	r2, [sp, #16]
 800365c:	b9d8      	cbnz	r0, 8003696 <_svfiprintf_r+0xea>
 800365e:	06d0      	lsls	r0, r2, #27
 8003660:	bf44      	itt	mi
 8003662:	2320      	movmi	r3, #32
 8003664:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003668:	0711      	lsls	r1, r2, #28
 800366a:	bf44      	itt	mi
 800366c:	232b      	movmi	r3, #43	@ 0x2b
 800366e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003672:	f89a 3000 	ldrb.w	r3, [sl]
 8003676:	2b2a      	cmp	r3, #42	@ 0x2a
 8003678:	d015      	beq.n	80036a6 <_svfiprintf_r+0xfa>
 800367a:	4654      	mov	r4, sl
 800367c:	2000      	movs	r0, #0
 800367e:	f04f 0c0a 	mov.w	ip, #10
 8003682:	9a07      	ldr	r2, [sp, #28]
 8003684:	4621      	mov	r1, r4
 8003686:	f811 3b01 	ldrb.w	r3, [r1], #1
 800368a:	3b30      	subs	r3, #48	@ 0x30
 800368c:	2b09      	cmp	r3, #9
 800368e:	d94b      	bls.n	8003728 <_svfiprintf_r+0x17c>
 8003690:	b1b0      	cbz	r0, 80036c0 <_svfiprintf_r+0x114>
 8003692:	9207      	str	r2, [sp, #28]
 8003694:	e014      	b.n	80036c0 <_svfiprintf_r+0x114>
 8003696:	eba0 0308 	sub.w	r3, r0, r8
 800369a:	fa09 f303 	lsl.w	r3, r9, r3
 800369e:	4313      	orrs	r3, r2
 80036a0:	46a2      	mov	sl, r4
 80036a2:	9304      	str	r3, [sp, #16]
 80036a4:	e7d2      	b.n	800364c <_svfiprintf_r+0xa0>
 80036a6:	9b03      	ldr	r3, [sp, #12]
 80036a8:	1d19      	adds	r1, r3, #4
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	9103      	str	r1, [sp, #12]
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	bfbb      	ittet	lt
 80036b2:	425b      	neglt	r3, r3
 80036b4:	f042 0202 	orrlt.w	r2, r2, #2
 80036b8:	9307      	strge	r3, [sp, #28]
 80036ba:	9307      	strlt	r3, [sp, #28]
 80036bc:	bfb8      	it	lt
 80036be:	9204      	strlt	r2, [sp, #16]
 80036c0:	7823      	ldrb	r3, [r4, #0]
 80036c2:	2b2e      	cmp	r3, #46	@ 0x2e
 80036c4:	d10a      	bne.n	80036dc <_svfiprintf_r+0x130>
 80036c6:	7863      	ldrb	r3, [r4, #1]
 80036c8:	2b2a      	cmp	r3, #42	@ 0x2a
 80036ca:	d132      	bne.n	8003732 <_svfiprintf_r+0x186>
 80036cc:	9b03      	ldr	r3, [sp, #12]
 80036ce:	3402      	adds	r4, #2
 80036d0:	1d1a      	adds	r2, r3, #4
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	9203      	str	r2, [sp, #12]
 80036d6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80036da:	9305      	str	r3, [sp, #20]
 80036dc:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8003794 <_svfiprintf_r+0x1e8>
 80036e0:	2203      	movs	r2, #3
 80036e2:	4650      	mov	r0, sl
 80036e4:	7821      	ldrb	r1, [r4, #0]
 80036e6:	f000 fa19 	bl	8003b1c <memchr>
 80036ea:	b138      	cbz	r0, 80036fc <_svfiprintf_r+0x150>
 80036ec:	2240      	movs	r2, #64	@ 0x40
 80036ee:	9b04      	ldr	r3, [sp, #16]
 80036f0:	eba0 000a 	sub.w	r0, r0, sl
 80036f4:	4082      	lsls	r2, r0
 80036f6:	4313      	orrs	r3, r2
 80036f8:	3401      	adds	r4, #1
 80036fa:	9304      	str	r3, [sp, #16]
 80036fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003700:	2206      	movs	r2, #6
 8003702:	4825      	ldr	r0, [pc, #148]	@ (8003798 <_svfiprintf_r+0x1ec>)
 8003704:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8003708:	f000 fa08 	bl	8003b1c <memchr>
 800370c:	2800      	cmp	r0, #0
 800370e:	d036      	beq.n	800377e <_svfiprintf_r+0x1d2>
 8003710:	4b22      	ldr	r3, [pc, #136]	@ (800379c <_svfiprintf_r+0x1f0>)
 8003712:	bb1b      	cbnz	r3, 800375c <_svfiprintf_r+0x1b0>
 8003714:	9b03      	ldr	r3, [sp, #12]
 8003716:	3307      	adds	r3, #7
 8003718:	f023 0307 	bic.w	r3, r3, #7
 800371c:	3308      	adds	r3, #8
 800371e:	9303      	str	r3, [sp, #12]
 8003720:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003722:	4433      	add	r3, r6
 8003724:	9309      	str	r3, [sp, #36]	@ 0x24
 8003726:	e76a      	b.n	80035fe <_svfiprintf_r+0x52>
 8003728:	460c      	mov	r4, r1
 800372a:	2001      	movs	r0, #1
 800372c:	fb0c 3202 	mla	r2, ip, r2, r3
 8003730:	e7a8      	b.n	8003684 <_svfiprintf_r+0xd8>
 8003732:	2300      	movs	r3, #0
 8003734:	f04f 0c0a 	mov.w	ip, #10
 8003738:	4619      	mov	r1, r3
 800373a:	3401      	adds	r4, #1
 800373c:	9305      	str	r3, [sp, #20]
 800373e:	4620      	mov	r0, r4
 8003740:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003744:	3a30      	subs	r2, #48	@ 0x30
 8003746:	2a09      	cmp	r2, #9
 8003748:	d903      	bls.n	8003752 <_svfiprintf_r+0x1a6>
 800374a:	2b00      	cmp	r3, #0
 800374c:	d0c6      	beq.n	80036dc <_svfiprintf_r+0x130>
 800374e:	9105      	str	r1, [sp, #20]
 8003750:	e7c4      	b.n	80036dc <_svfiprintf_r+0x130>
 8003752:	4604      	mov	r4, r0
 8003754:	2301      	movs	r3, #1
 8003756:	fb0c 2101 	mla	r1, ip, r1, r2
 800375a:	e7f0      	b.n	800373e <_svfiprintf_r+0x192>
 800375c:	ab03      	add	r3, sp, #12
 800375e:	9300      	str	r3, [sp, #0]
 8003760:	462a      	mov	r2, r5
 8003762:	4638      	mov	r0, r7
 8003764:	4b0e      	ldr	r3, [pc, #56]	@ (80037a0 <_svfiprintf_r+0x1f4>)
 8003766:	a904      	add	r1, sp, #16
 8003768:	f3af 8000 	nop.w
 800376c:	1c42      	adds	r2, r0, #1
 800376e:	4606      	mov	r6, r0
 8003770:	d1d6      	bne.n	8003720 <_svfiprintf_r+0x174>
 8003772:	89ab      	ldrh	r3, [r5, #12]
 8003774:	065b      	lsls	r3, r3, #25
 8003776:	f53f af2d 	bmi.w	80035d4 <_svfiprintf_r+0x28>
 800377a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800377c:	e72c      	b.n	80035d8 <_svfiprintf_r+0x2c>
 800377e:	ab03      	add	r3, sp, #12
 8003780:	9300      	str	r3, [sp, #0]
 8003782:	462a      	mov	r2, r5
 8003784:	4638      	mov	r0, r7
 8003786:	4b06      	ldr	r3, [pc, #24]	@ (80037a0 <_svfiprintf_r+0x1f4>)
 8003788:	a904      	add	r1, sp, #16
 800378a:	f000 f87d 	bl	8003888 <_printf_i>
 800378e:	e7ed      	b.n	800376c <_svfiprintf_r+0x1c0>
 8003790:	08003d16 	.word	0x08003d16
 8003794:	08003d1c 	.word	0x08003d1c
 8003798:	08003d20 	.word	0x08003d20
 800379c:	00000000 	.word	0x00000000
 80037a0:	080034f5 	.word	0x080034f5

080037a4 <_printf_common>:
 80037a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80037a8:	4616      	mov	r6, r2
 80037aa:	4698      	mov	r8, r3
 80037ac:	688a      	ldr	r2, [r1, #8]
 80037ae:	690b      	ldr	r3, [r1, #16]
 80037b0:	4607      	mov	r7, r0
 80037b2:	4293      	cmp	r3, r2
 80037b4:	bfb8      	it	lt
 80037b6:	4613      	movlt	r3, r2
 80037b8:	6033      	str	r3, [r6, #0]
 80037ba:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80037be:	460c      	mov	r4, r1
 80037c0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80037c4:	b10a      	cbz	r2, 80037ca <_printf_common+0x26>
 80037c6:	3301      	adds	r3, #1
 80037c8:	6033      	str	r3, [r6, #0]
 80037ca:	6823      	ldr	r3, [r4, #0]
 80037cc:	0699      	lsls	r1, r3, #26
 80037ce:	bf42      	ittt	mi
 80037d0:	6833      	ldrmi	r3, [r6, #0]
 80037d2:	3302      	addmi	r3, #2
 80037d4:	6033      	strmi	r3, [r6, #0]
 80037d6:	6825      	ldr	r5, [r4, #0]
 80037d8:	f015 0506 	ands.w	r5, r5, #6
 80037dc:	d106      	bne.n	80037ec <_printf_common+0x48>
 80037de:	f104 0a19 	add.w	sl, r4, #25
 80037e2:	68e3      	ldr	r3, [r4, #12]
 80037e4:	6832      	ldr	r2, [r6, #0]
 80037e6:	1a9b      	subs	r3, r3, r2
 80037e8:	42ab      	cmp	r3, r5
 80037ea:	dc2b      	bgt.n	8003844 <_printf_common+0xa0>
 80037ec:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80037f0:	6822      	ldr	r2, [r4, #0]
 80037f2:	3b00      	subs	r3, #0
 80037f4:	bf18      	it	ne
 80037f6:	2301      	movne	r3, #1
 80037f8:	0692      	lsls	r2, r2, #26
 80037fa:	d430      	bmi.n	800385e <_printf_common+0xba>
 80037fc:	4641      	mov	r1, r8
 80037fe:	4638      	mov	r0, r7
 8003800:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8003804:	47c8      	blx	r9
 8003806:	3001      	adds	r0, #1
 8003808:	d023      	beq.n	8003852 <_printf_common+0xae>
 800380a:	6823      	ldr	r3, [r4, #0]
 800380c:	6922      	ldr	r2, [r4, #16]
 800380e:	f003 0306 	and.w	r3, r3, #6
 8003812:	2b04      	cmp	r3, #4
 8003814:	bf14      	ite	ne
 8003816:	2500      	movne	r5, #0
 8003818:	6833      	ldreq	r3, [r6, #0]
 800381a:	f04f 0600 	mov.w	r6, #0
 800381e:	bf08      	it	eq
 8003820:	68e5      	ldreq	r5, [r4, #12]
 8003822:	f104 041a 	add.w	r4, r4, #26
 8003826:	bf08      	it	eq
 8003828:	1aed      	subeq	r5, r5, r3
 800382a:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800382e:	bf08      	it	eq
 8003830:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003834:	4293      	cmp	r3, r2
 8003836:	bfc4      	itt	gt
 8003838:	1a9b      	subgt	r3, r3, r2
 800383a:	18ed      	addgt	r5, r5, r3
 800383c:	42b5      	cmp	r5, r6
 800383e:	d11a      	bne.n	8003876 <_printf_common+0xd2>
 8003840:	2000      	movs	r0, #0
 8003842:	e008      	b.n	8003856 <_printf_common+0xb2>
 8003844:	2301      	movs	r3, #1
 8003846:	4652      	mov	r2, sl
 8003848:	4641      	mov	r1, r8
 800384a:	4638      	mov	r0, r7
 800384c:	47c8      	blx	r9
 800384e:	3001      	adds	r0, #1
 8003850:	d103      	bne.n	800385a <_printf_common+0xb6>
 8003852:	f04f 30ff 	mov.w	r0, #4294967295
 8003856:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800385a:	3501      	adds	r5, #1
 800385c:	e7c1      	b.n	80037e2 <_printf_common+0x3e>
 800385e:	2030      	movs	r0, #48	@ 0x30
 8003860:	18e1      	adds	r1, r4, r3
 8003862:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8003866:	1c5a      	adds	r2, r3, #1
 8003868:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800386c:	4422      	add	r2, r4
 800386e:	3302      	adds	r3, #2
 8003870:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8003874:	e7c2      	b.n	80037fc <_printf_common+0x58>
 8003876:	2301      	movs	r3, #1
 8003878:	4622      	mov	r2, r4
 800387a:	4641      	mov	r1, r8
 800387c:	4638      	mov	r0, r7
 800387e:	47c8      	blx	r9
 8003880:	3001      	adds	r0, #1
 8003882:	d0e6      	beq.n	8003852 <_printf_common+0xae>
 8003884:	3601      	adds	r6, #1
 8003886:	e7d9      	b.n	800383c <_printf_common+0x98>

08003888 <_printf_i>:
 8003888:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800388c:	7e0f      	ldrb	r7, [r1, #24]
 800388e:	4691      	mov	r9, r2
 8003890:	2f78      	cmp	r7, #120	@ 0x78
 8003892:	4680      	mov	r8, r0
 8003894:	460c      	mov	r4, r1
 8003896:	469a      	mov	sl, r3
 8003898:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800389a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800389e:	d807      	bhi.n	80038b0 <_printf_i+0x28>
 80038a0:	2f62      	cmp	r7, #98	@ 0x62
 80038a2:	d80a      	bhi.n	80038ba <_printf_i+0x32>
 80038a4:	2f00      	cmp	r7, #0
 80038a6:	f000 80d3 	beq.w	8003a50 <_printf_i+0x1c8>
 80038aa:	2f58      	cmp	r7, #88	@ 0x58
 80038ac:	f000 80ba 	beq.w	8003a24 <_printf_i+0x19c>
 80038b0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80038b4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80038b8:	e03a      	b.n	8003930 <_printf_i+0xa8>
 80038ba:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80038be:	2b15      	cmp	r3, #21
 80038c0:	d8f6      	bhi.n	80038b0 <_printf_i+0x28>
 80038c2:	a101      	add	r1, pc, #4	@ (adr r1, 80038c8 <_printf_i+0x40>)
 80038c4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80038c8:	08003921 	.word	0x08003921
 80038cc:	08003935 	.word	0x08003935
 80038d0:	080038b1 	.word	0x080038b1
 80038d4:	080038b1 	.word	0x080038b1
 80038d8:	080038b1 	.word	0x080038b1
 80038dc:	080038b1 	.word	0x080038b1
 80038e0:	08003935 	.word	0x08003935
 80038e4:	080038b1 	.word	0x080038b1
 80038e8:	080038b1 	.word	0x080038b1
 80038ec:	080038b1 	.word	0x080038b1
 80038f0:	080038b1 	.word	0x080038b1
 80038f4:	08003a37 	.word	0x08003a37
 80038f8:	0800395f 	.word	0x0800395f
 80038fc:	080039f1 	.word	0x080039f1
 8003900:	080038b1 	.word	0x080038b1
 8003904:	080038b1 	.word	0x080038b1
 8003908:	08003a59 	.word	0x08003a59
 800390c:	080038b1 	.word	0x080038b1
 8003910:	0800395f 	.word	0x0800395f
 8003914:	080038b1 	.word	0x080038b1
 8003918:	080038b1 	.word	0x080038b1
 800391c:	080039f9 	.word	0x080039f9
 8003920:	6833      	ldr	r3, [r6, #0]
 8003922:	1d1a      	adds	r2, r3, #4
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	6032      	str	r2, [r6, #0]
 8003928:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800392c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8003930:	2301      	movs	r3, #1
 8003932:	e09e      	b.n	8003a72 <_printf_i+0x1ea>
 8003934:	6833      	ldr	r3, [r6, #0]
 8003936:	6820      	ldr	r0, [r4, #0]
 8003938:	1d19      	adds	r1, r3, #4
 800393a:	6031      	str	r1, [r6, #0]
 800393c:	0606      	lsls	r6, r0, #24
 800393e:	d501      	bpl.n	8003944 <_printf_i+0xbc>
 8003940:	681d      	ldr	r5, [r3, #0]
 8003942:	e003      	b.n	800394c <_printf_i+0xc4>
 8003944:	0645      	lsls	r5, r0, #25
 8003946:	d5fb      	bpl.n	8003940 <_printf_i+0xb8>
 8003948:	f9b3 5000 	ldrsh.w	r5, [r3]
 800394c:	2d00      	cmp	r5, #0
 800394e:	da03      	bge.n	8003958 <_printf_i+0xd0>
 8003950:	232d      	movs	r3, #45	@ 0x2d
 8003952:	426d      	negs	r5, r5
 8003954:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003958:	230a      	movs	r3, #10
 800395a:	4859      	ldr	r0, [pc, #356]	@ (8003ac0 <_printf_i+0x238>)
 800395c:	e011      	b.n	8003982 <_printf_i+0xfa>
 800395e:	6821      	ldr	r1, [r4, #0]
 8003960:	6833      	ldr	r3, [r6, #0]
 8003962:	0608      	lsls	r0, r1, #24
 8003964:	f853 5b04 	ldr.w	r5, [r3], #4
 8003968:	d402      	bmi.n	8003970 <_printf_i+0xe8>
 800396a:	0649      	lsls	r1, r1, #25
 800396c:	bf48      	it	mi
 800396e:	b2ad      	uxthmi	r5, r5
 8003970:	2f6f      	cmp	r7, #111	@ 0x6f
 8003972:	6033      	str	r3, [r6, #0]
 8003974:	bf14      	ite	ne
 8003976:	230a      	movne	r3, #10
 8003978:	2308      	moveq	r3, #8
 800397a:	4851      	ldr	r0, [pc, #324]	@ (8003ac0 <_printf_i+0x238>)
 800397c:	2100      	movs	r1, #0
 800397e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8003982:	6866      	ldr	r6, [r4, #4]
 8003984:	2e00      	cmp	r6, #0
 8003986:	bfa8      	it	ge
 8003988:	6821      	ldrge	r1, [r4, #0]
 800398a:	60a6      	str	r6, [r4, #8]
 800398c:	bfa4      	itt	ge
 800398e:	f021 0104 	bicge.w	r1, r1, #4
 8003992:	6021      	strge	r1, [r4, #0]
 8003994:	b90d      	cbnz	r5, 800399a <_printf_i+0x112>
 8003996:	2e00      	cmp	r6, #0
 8003998:	d04b      	beq.n	8003a32 <_printf_i+0x1aa>
 800399a:	4616      	mov	r6, r2
 800399c:	fbb5 f1f3 	udiv	r1, r5, r3
 80039a0:	fb03 5711 	mls	r7, r3, r1, r5
 80039a4:	5dc7      	ldrb	r7, [r0, r7]
 80039a6:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80039aa:	462f      	mov	r7, r5
 80039ac:	42bb      	cmp	r3, r7
 80039ae:	460d      	mov	r5, r1
 80039b0:	d9f4      	bls.n	800399c <_printf_i+0x114>
 80039b2:	2b08      	cmp	r3, #8
 80039b4:	d10b      	bne.n	80039ce <_printf_i+0x146>
 80039b6:	6823      	ldr	r3, [r4, #0]
 80039b8:	07df      	lsls	r7, r3, #31
 80039ba:	d508      	bpl.n	80039ce <_printf_i+0x146>
 80039bc:	6923      	ldr	r3, [r4, #16]
 80039be:	6861      	ldr	r1, [r4, #4]
 80039c0:	4299      	cmp	r1, r3
 80039c2:	bfde      	ittt	le
 80039c4:	2330      	movle	r3, #48	@ 0x30
 80039c6:	f806 3c01 	strble.w	r3, [r6, #-1]
 80039ca:	f106 36ff 	addle.w	r6, r6, #4294967295
 80039ce:	1b92      	subs	r2, r2, r6
 80039d0:	6122      	str	r2, [r4, #16]
 80039d2:	464b      	mov	r3, r9
 80039d4:	4621      	mov	r1, r4
 80039d6:	4640      	mov	r0, r8
 80039d8:	f8cd a000 	str.w	sl, [sp]
 80039dc:	aa03      	add	r2, sp, #12
 80039de:	f7ff fee1 	bl	80037a4 <_printf_common>
 80039e2:	3001      	adds	r0, #1
 80039e4:	d14a      	bne.n	8003a7c <_printf_i+0x1f4>
 80039e6:	f04f 30ff 	mov.w	r0, #4294967295
 80039ea:	b004      	add	sp, #16
 80039ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80039f0:	6823      	ldr	r3, [r4, #0]
 80039f2:	f043 0320 	orr.w	r3, r3, #32
 80039f6:	6023      	str	r3, [r4, #0]
 80039f8:	2778      	movs	r7, #120	@ 0x78
 80039fa:	4832      	ldr	r0, [pc, #200]	@ (8003ac4 <_printf_i+0x23c>)
 80039fc:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8003a00:	6823      	ldr	r3, [r4, #0]
 8003a02:	6831      	ldr	r1, [r6, #0]
 8003a04:	061f      	lsls	r7, r3, #24
 8003a06:	f851 5b04 	ldr.w	r5, [r1], #4
 8003a0a:	d402      	bmi.n	8003a12 <_printf_i+0x18a>
 8003a0c:	065f      	lsls	r7, r3, #25
 8003a0e:	bf48      	it	mi
 8003a10:	b2ad      	uxthmi	r5, r5
 8003a12:	6031      	str	r1, [r6, #0]
 8003a14:	07d9      	lsls	r1, r3, #31
 8003a16:	bf44      	itt	mi
 8003a18:	f043 0320 	orrmi.w	r3, r3, #32
 8003a1c:	6023      	strmi	r3, [r4, #0]
 8003a1e:	b11d      	cbz	r5, 8003a28 <_printf_i+0x1a0>
 8003a20:	2310      	movs	r3, #16
 8003a22:	e7ab      	b.n	800397c <_printf_i+0xf4>
 8003a24:	4826      	ldr	r0, [pc, #152]	@ (8003ac0 <_printf_i+0x238>)
 8003a26:	e7e9      	b.n	80039fc <_printf_i+0x174>
 8003a28:	6823      	ldr	r3, [r4, #0]
 8003a2a:	f023 0320 	bic.w	r3, r3, #32
 8003a2e:	6023      	str	r3, [r4, #0]
 8003a30:	e7f6      	b.n	8003a20 <_printf_i+0x198>
 8003a32:	4616      	mov	r6, r2
 8003a34:	e7bd      	b.n	80039b2 <_printf_i+0x12a>
 8003a36:	6833      	ldr	r3, [r6, #0]
 8003a38:	6825      	ldr	r5, [r4, #0]
 8003a3a:	1d18      	adds	r0, r3, #4
 8003a3c:	6961      	ldr	r1, [r4, #20]
 8003a3e:	6030      	str	r0, [r6, #0]
 8003a40:	062e      	lsls	r6, r5, #24
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	d501      	bpl.n	8003a4a <_printf_i+0x1c2>
 8003a46:	6019      	str	r1, [r3, #0]
 8003a48:	e002      	b.n	8003a50 <_printf_i+0x1c8>
 8003a4a:	0668      	lsls	r0, r5, #25
 8003a4c:	d5fb      	bpl.n	8003a46 <_printf_i+0x1be>
 8003a4e:	8019      	strh	r1, [r3, #0]
 8003a50:	2300      	movs	r3, #0
 8003a52:	4616      	mov	r6, r2
 8003a54:	6123      	str	r3, [r4, #16]
 8003a56:	e7bc      	b.n	80039d2 <_printf_i+0x14a>
 8003a58:	6833      	ldr	r3, [r6, #0]
 8003a5a:	2100      	movs	r1, #0
 8003a5c:	1d1a      	adds	r2, r3, #4
 8003a5e:	6032      	str	r2, [r6, #0]
 8003a60:	681e      	ldr	r6, [r3, #0]
 8003a62:	6862      	ldr	r2, [r4, #4]
 8003a64:	4630      	mov	r0, r6
 8003a66:	f000 f859 	bl	8003b1c <memchr>
 8003a6a:	b108      	cbz	r0, 8003a70 <_printf_i+0x1e8>
 8003a6c:	1b80      	subs	r0, r0, r6
 8003a6e:	6060      	str	r0, [r4, #4]
 8003a70:	6863      	ldr	r3, [r4, #4]
 8003a72:	6123      	str	r3, [r4, #16]
 8003a74:	2300      	movs	r3, #0
 8003a76:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003a7a:	e7aa      	b.n	80039d2 <_printf_i+0x14a>
 8003a7c:	4632      	mov	r2, r6
 8003a7e:	4649      	mov	r1, r9
 8003a80:	4640      	mov	r0, r8
 8003a82:	6923      	ldr	r3, [r4, #16]
 8003a84:	47d0      	blx	sl
 8003a86:	3001      	adds	r0, #1
 8003a88:	d0ad      	beq.n	80039e6 <_printf_i+0x15e>
 8003a8a:	6823      	ldr	r3, [r4, #0]
 8003a8c:	079b      	lsls	r3, r3, #30
 8003a8e:	d413      	bmi.n	8003ab8 <_printf_i+0x230>
 8003a90:	68e0      	ldr	r0, [r4, #12]
 8003a92:	9b03      	ldr	r3, [sp, #12]
 8003a94:	4298      	cmp	r0, r3
 8003a96:	bfb8      	it	lt
 8003a98:	4618      	movlt	r0, r3
 8003a9a:	e7a6      	b.n	80039ea <_printf_i+0x162>
 8003a9c:	2301      	movs	r3, #1
 8003a9e:	4632      	mov	r2, r6
 8003aa0:	4649      	mov	r1, r9
 8003aa2:	4640      	mov	r0, r8
 8003aa4:	47d0      	blx	sl
 8003aa6:	3001      	adds	r0, #1
 8003aa8:	d09d      	beq.n	80039e6 <_printf_i+0x15e>
 8003aaa:	3501      	adds	r5, #1
 8003aac:	68e3      	ldr	r3, [r4, #12]
 8003aae:	9903      	ldr	r1, [sp, #12]
 8003ab0:	1a5b      	subs	r3, r3, r1
 8003ab2:	42ab      	cmp	r3, r5
 8003ab4:	dcf2      	bgt.n	8003a9c <_printf_i+0x214>
 8003ab6:	e7eb      	b.n	8003a90 <_printf_i+0x208>
 8003ab8:	2500      	movs	r5, #0
 8003aba:	f104 0619 	add.w	r6, r4, #25
 8003abe:	e7f5      	b.n	8003aac <_printf_i+0x224>
 8003ac0:	08003d27 	.word	0x08003d27
 8003ac4:	08003d38 	.word	0x08003d38

08003ac8 <memmove>:
 8003ac8:	4288      	cmp	r0, r1
 8003aca:	b510      	push	{r4, lr}
 8003acc:	eb01 0402 	add.w	r4, r1, r2
 8003ad0:	d902      	bls.n	8003ad8 <memmove+0x10>
 8003ad2:	4284      	cmp	r4, r0
 8003ad4:	4623      	mov	r3, r4
 8003ad6:	d807      	bhi.n	8003ae8 <memmove+0x20>
 8003ad8:	1e43      	subs	r3, r0, #1
 8003ada:	42a1      	cmp	r1, r4
 8003adc:	d008      	beq.n	8003af0 <memmove+0x28>
 8003ade:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003ae2:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003ae6:	e7f8      	b.n	8003ada <memmove+0x12>
 8003ae8:	4601      	mov	r1, r0
 8003aea:	4402      	add	r2, r0
 8003aec:	428a      	cmp	r2, r1
 8003aee:	d100      	bne.n	8003af2 <memmove+0x2a>
 8003af0:	bd10      	pop	{r4, pc}
 8003af2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003af6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003afa:	e7f7      	b.n	8003aec <memmove+0x24>

08003afc <_sbrk_r>:
 8003afc:	b538      	push	{r3, r4, r5, lr}
 8003afe:	2300      	movs	r3, #0
 8003b00:	4d05      	ldr	r5, [pc, #20]	@ (8003b18 <_sbrk_r+0x1c>)
 8003b02:	4604      	mov	r4, r0
 8003b04:	4608      	mov	r0, r1
 8003b06:	602b      	str	r3, [r5, #0]
 8003b08:	f7fd f9d6 	bl	8000eb8 <_sbrk>
 8003b0c:	1c43      	adds	r3, r0, #1
 8003b0e:	d102      	bne.n	8003b16 <_sbrk_r+0x1a>
 8003b10:	682b      	ldr	r3, [r5, #0]
 8003b12:	b103      	cbz	r3, 8003b16 <_sbrk_r+0x1a>
 8003b14:	6023      	str	r3, [r4, #0]
 8003b16:	bd38      	pop	{r3, r4, r5, pc}
 8003b18:	2000043c 	.word	0x2000043c

08003b1c <memchr>:
 8003b1c:	4603      	mov	r3, r0
 8003b1e:	b510      	push	{r4, lr}
 8003b20:	b2c9      	uxtb	r1, r1
 8003b22:	4402      	add	r2, r0
 8003b24:	4293      	cmp	r3, r2
 8003b26:	4618      	mov	r0, r3
 8003b28:	d101      	bne.n	8003b2e <memchr+0x12>
 8003b2a:	2000      	movs	r0, #0
 8003b2c:	e003      	b.n	8003b36 <memchr+0x1a>
 8003b2e:	7804      	ldrb	r4, [r0, #0]
 8003b30:	3301      	adds	r3, #1
 8003b32:	428c      	cmp	r4, r1
 8003b34:	d1f6      	bne.n	8003b24 <memchr+0x8>
 8003b36:	bd10      	pop	{r4, pc}

08003b38 <memcpy>:
 8003b38:	440a      	add	r2, r1
 8003b3a:	4291      	cmp	r1, r2
 8003b3c:	f100 33ff 	add.w	r3, r0, #4294967295
 8003b40:	d100      	bne.n	8003b44 <memcpy+0xc>
 8003b42:	4770      	bx	lr
 8003b44:	b510      	push	{r4, lr}
 8003b46:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003b4a:	4291      	cmp	r1, r2
 8003b4c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003b50:	d1f9      	bne.n	8003b46 <memcpy+0xe>
 8003b52:	bd10      	pop	{r4, pc}

08003b54 <_realloc_r>:
 8003b54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003b58:	4680      	mov	r8, r0
 8003b5a:	4615      	mov	r5, r2
 8003b5c:	460c      	mov	r4, r1
 8003b5e:	b921      	cbnz	r1, 8003b6a <_realloc_r+0x16>
 8003b60:	4611      	mov	r1, r2
 8003b62:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003b66:	f7ff bc39 	b.w	80033dc <_malloc_r>
 8003b6a:	b92a      	cbnz	r2, 8003b78 <_realloc_r+0x24>
 8003b6c:	f7ff fbcc 	bl	8003308 <_free_r>
 8003b70:	2400      	movs	r4, #0
 8003b72:	4620      	mov	r0, r4
 8003b74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003b78:	f000 f81a 	bl	8003bb0 <_malloc_usable_size_r>
 8003b7c:	4285      	cmp	r5, r0
 8003b7e:	4606      	mov	r6, r0
 8003b80:	d802      	bhi.n	8003b88 <_realloc_r+0x34>
 8003b82:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8003b86:	d8f4      	bhi.n	8003b72 <_realloc_r+0x1e>
 8003b88:	4629      	mov	r1, r5
 8003b8a:	4640      	mov	r0, r8
 8003b8c:	f7ff fc26 	bl	80033dc <_malloc_r>
 8003b90:	4607      	mov	r7, r0
 8003b92:	2800      	cmp	r0, #0
 8003b94:	d0ec      	beq.n	8003b70 <_realloc_r+0x1c>
 8003b96:	42b5      	cmp	r5, r6
 8003b98:	462a      	mov	r2, r5
 8003b9a:	4621      	mov	r1, r4
 8003b9c:	bf28      	it	cs
 8003b9e:	4632      	movcs	r2, r6
 8003ba0:	f7ff ffca 	bl	8003b38 <memcpy>
 8003ba4:	4621      	mov	r1, r4
 8003ba6:	4640      	mov	r0, r8
 8003ba8:	f7ff fbae 	bl	8003308 <_free_r>
 8003bac:	463c      	mov	r4, r7
 8003bae:	e7e0      	b.n	8003b72 <_realloc_r+0x1e>

08003bb0 <_malloc_usable_size_r>:
 8003bb0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003bb4:	1f18      	subs	r0, r3, #4
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	bfbc      	itt	lt
 8003bba:	580b      	ldrlt	r3, [r1, r0]
 8003bbc:	18c0      	addlt	r0, r0, r3
 8003bbe:	4770      	bx	lr

08003bc0 <_init>:
 8003bc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003bc2:	bf00      	nop
 8003bc4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003bc6:	bc08      	pop	{r3}
 8003bc8:	469e      	mov	lr, r3
 8003bca:	4770      	bx	lr

08003bcc <_fini>:
 8003bcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003bce:	bf00      	nop
 8003bd0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003bd2:	bc08      	pop	{r3}
 8003bd4:	469e      	mov	lr, r3
 8003bd6:	4770      	bx	lr
